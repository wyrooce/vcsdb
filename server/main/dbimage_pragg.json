{"Name":"pragg","Tables":[{"Name":"TBL_CURRENCY_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"SRC_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DEST_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REL_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":false,"ID":0},{"Name":"CHANGE_RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0}]},{"Name":"TBL_CAR_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERCENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"IS_STANDARD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERCENT2","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_NOP_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"IS_STANDARD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0}]},{"Name":"TBL_CURRENCY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"SWIFT_CODE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"CUR_NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"DES","DataType":"VARCHAR2","Default":"","Length":"1000","Nullable":true,"ID":0}]},{"Name":"TBL_COM_LEDGER_TYPE_MAIN","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TAG_PROPERTY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"KEY","DataType":"VARCHAR2","Default":"","Length":"300","Nullable":true,"ID":0},{"Name":"VAL","DataType":"VARCHAR2","Default":"","Length":"300","Nullable":true,"ID":0},{"Name":"STATE","DataType":"VARCHAR2","Default":"","Length":"30","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"FORM_ID","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"ORD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"FORM","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"QUERY","DataType":"VARCHAR2","Default":"","Length":"500","Nullable":true,"ID":0},{"Name":"TAGID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"FORMID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_PREDICTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"TYPE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DU_PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_ONLINE_PREDICTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"TYPE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DU_PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LOG_QUERY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"QUERY","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0}]},{"Name":"TST","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"TEST_ID","DataType":"ROWID","Default":"","Length":"10","Nullable":true,"ID":0},{"Name":"SALAAM","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TEST_SYSTEM","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TMP_LOG","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"BLOCKNAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"PARAMETERS","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"CALLDATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"CALLTIME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"BLOCKTYPE","DataType":"VARCHAR2","Default":"","Length":"9","Nullable":true,"ID":0},{"Name":"USERNAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CALLED","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0}]},{"Name":"TBL_CITY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"CTY_NAME","DataType":"NVARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"DES","DataType":"NVARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_CITY_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"CTY_NAME","DataType":"NVARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"DES","DataType":"NVARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_STATE_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"STA_NAME","DataType":"NVARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"DES","DataType":"NVARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0}]},{"Name":"TBL_J_VALUE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DUE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LEGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUS_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_REPORT_SETTING","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SHOW_SAYER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"SHOW_MANDE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"LEVELS","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_TRANSACTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"DEPOSIT_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DEP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TRANS_NUM","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_COM_SCALE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DEP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BRANCH_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SCALE_TO_TOTAL","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_REPVAL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"PARENT_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPPER_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"MANDE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUR_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_CUSTOMER_SEARCH_ITEM","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"COLUMN_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"EXIST_PROFILE_DETAIL","DataType":"NUMBER","Default":"1 ","Length":"22","Nullable":false,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"CONDITION","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_VALUE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"OTHER_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"VARCHAR2","Default":"","Length":"5","Nullable":true,"ID":0},{"Name":"REF_MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DUE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LEGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUS_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_TRANS_PREPREDICTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"TRANS_NUM","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFFDATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_CUR_SENSIVITY_REPORT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_CURRENCY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MANDE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_DU_GAP_PROF_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DIRESH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"WEIGHTED_DIRESH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TOTAL_RATIO","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DU_GAP_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SENS_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SENS_NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"REF_LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_CITY_MELLI","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"CTY_NAME","DataType":"NVARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"DES","DataType":"NVARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_MODALITY_TYPE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"MOD_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0}]},{"Name":"TBL_COM_LEGAL_DEPOSIT_RATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DEPOSIT_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REWARD_RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_JSON_SETTING","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"JSON_PARAM","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":false,"ID":0}]},{"Name":"TBL_LOG_UI","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"BLOCKNAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"PARAMETERS","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"CALLDATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"CALLTIME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"BLOCKTYPE","DataType":"VARCHAR2","Default":"CASE SUBSTR(\"BLOCKNAME\",0,3) WHEN 'FNC' THEN 'FUNCITON' WHEN 'PRC' THEN 'PROCEDURE' ELSE 'X' END ","Length":"9","Nullable":true,"ID":0},{"Name":"USERNAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CALLED","DataType":"VARCHAR2","Default":"\"BLOCKNAME\"||'('||\"PARAMETERS\"||')'","Length":"4000","Nullable":true,"ID":0}]},{"Name":"TBL_TIMING_PROFILE_DETAIL_TEMP","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_TIMING_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_DATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_START","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_END","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_COLOR","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_STATUS","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_AVAILABLE_DATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CURRENT_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"AVAILABLE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_LOG","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RUNDATE","DataType":"VARCHAR2","Default":"","Length":"500","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"500","Nullable":true,"ID":0},{"Name":"DURATION","DataType":"VARCHAR2","Default":"","Length":"500","Nullable":true,"ID":0}]},{"Name":"TBL_STATE_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_STATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STATE_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"TIMING","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"INPUT_BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"OUTPUT_BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"GAP","DataType":"NUMBER","Default":"\"INPUT_BALANCE\"-\"OUTPUT_BALANCE\"","Length":"22","Nullable":true,"ID":0},{"Name":"VERSION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CONDITION","DataType":"CLOB","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SRC_COLUMN","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_PROFILE_DETAIL_TEMP","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SRC_COLUMN","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"CONDITION","DataType":"CLOB","Default":"","Length":"4000","Nullable":true,"ID":0}]},{"Name":"TBL_TIMING_PROFILE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REPORT_CNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"CREATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_USER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"IS_EMPTY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERIOD_DURATION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DES","DataType":"VARCHAR2","Default":"","Length":"1000","Nullable":true,"ID":0},{"Name":"UPDATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_USER_UPDATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"VERSION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"H_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_CUSTOMER_CONC_FINAL_RESULT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CATEGORY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SHARE_OF_TOTAL_BAL","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUSTOMER_COUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SHARE_OF_TOTAL_CUS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"BALANCE_TAJAMOE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SHARE_OF_TOTAL_BAL_TAJAMOE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUSTOMER_COUNT_TAJAMOE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SHARE_OF_TOTAL_CUS_TAJAMOE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REGION_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0}]},{"Name":"TBL_CAR_DATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CAR_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TEST_LEDGER","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CODE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PARENT","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"LLEVEL","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_USER","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"USERNAME","DataType":"NVARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"PASSWORD","DataType":"VARCHAR2","Default":"","Length":"128","Nullable":true,"ID":0},{"Name":"FIRST_NAME","DataType":"NVARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"LAST_NAME","DataType":"NVARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"EMAIL","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"ADDRESS","DataType":"NVARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"MOBILE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"PHONE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"SAMAD_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ORGANIZATION","DataType":"NVARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"INSERT_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":false,"ID":0},{"Name":"DELETE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_DDLT_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X1","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LOAN_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_DEPOSIT_PREPREDICTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFFDATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_IDPS_TREE_TMP","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VISIBLE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"REF_PARENT","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"SIGN","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_IDPS_TREE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"LEDGER_CODE","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"PARENT_CODE","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"SIGN","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VISIBLE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"LEAF","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_JOB","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PROGRAM","DataType":"VARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0},{"Name":"ENABLE","DataType":"NUMBER","Default":"1 ","Length":"22","Nullable":true,"ID":0},{"Name":"START_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"DURATION_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"DURATION_LENGTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_FINAL_RESULT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SUB_MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LCR_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"IS_SPECIAL_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"FORMULA","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"IS_STANDARD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"PERCENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_DIRECT_COST","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0}]},{"Name":"TBL_OTHER_LEDGER_CODE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REP_REQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_VALUE_AGGRIGATION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CUR_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_TIMING_ID","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0}]},{"Name":"TBL_LEDGER_PROFILE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"H_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"IS_EMPTY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REPORT_CNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"DES","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"VERSION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CREATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_USER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_REPORT_PROFILE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LEDGER_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_TIME","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_CURRENCY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_CUSTOMER","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_DEPOSIT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_LOAN","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_TIMING_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_TIMING_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_DATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_START","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_END","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_COLOR","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_STATUS","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_VALUE_TEMP","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DUE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LEGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUS_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"VARCHAR2","Default":"","Length":"5","Nullable":true,"ID":0},{"Name":"REF_TIMING_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TIMING_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"TIMING_COLOR","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_REP_DETAIL_PROFIL_CUR_SECS","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DASHBOARD_STATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"NODE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STATE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_SHOCK_FINAL_RESULT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"MONTH_NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_CUSTOMER_CONS_VALUE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUSTOMER","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LEDGER_ARCHIVE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"NVARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"DEBT_AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CRE_AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUR_BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NUMBER_DATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_BRANCH_MELLI","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"BRN_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REF_CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CITY_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STA_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REGION_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REGION_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0}]},{"Name":"TBL_PROFILE_DETAIL_UPD_ARCHIVE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SRC_COLUMN","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"CONDITION","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"VERSION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LOG_ERROR","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CODE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"MESSAGE","DataType":"VARCHAR2","Default":"","Length":"1000","Nullable":true,"ID":0},{"Name":"RELEASE_TIME","DataType":"TIMESTAMP(6)","Default":"systimestamp \n","Length":"11","Nullable":true,"ID":0},{"Name":"RELEASE_POINT","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_CURRENCY_REL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"SRC_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEST_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REL_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":false,"ID":0},{"Name":"CHANGE_RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LEDGER","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"NVARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NODE_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_CUSTOMER_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CUS_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"FAMILY","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"NAT_REG_CODE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"ADDRESS","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"BIRTHDATE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"GENDER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"BRANCH_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DU_GAP_REPORT_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"WEIGHT","DataType":"NUMBER","Default":"TO_NUMBER(TO_CHAR(\"AMOUNT\"*\"DURATION\"))","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TOTAL_ASSETS_WEIGHT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TOTAL_LIA_WEIGHT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TOTAL_ASSETS_AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TOTAL_LIA_AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_NOTIFICATIONS","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_USER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"START_TIME","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"END_TIME","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"DESCRIPTION","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"OPT_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPPER_DATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"CLASS","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"ERROR","DataType":"VARCHAR2","Default":"","Length":"1000","Nullable":true,"ID":0},{"Name":"FLAG","DataType":"NUMBER","Default":"1 ","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DASHBOARD_GAP_STATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"STATE_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STATE_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"VALUE_IN","DataType":"NUMBER","Default":"NULL ","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE_OUT","DataType":"NUMBER","Default":"NULL ","Length":"22","Nullable":true,"ID":0},{"Name":"GAP","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERIOD_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"PERIOD_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DUE_DATE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"COUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REP_REQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CHILD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_EFF_DATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REGION_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0}]},{"Name":"TBL_PROFILE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"UPDATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_USER_UPDATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"VERSION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"H_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"IS_EMPTY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REPORT_CNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ITEM_CNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"DES","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"CREATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_USER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_NOP_SIMPLE_TREE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PARENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DDLT_TREE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"PARENT_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT_NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"CHILD_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CHILD_NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_JOB_PROFILE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"DESCRIPTION","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"CREATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"RUN_TIME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"CREATED_BY","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"JOB_REPORTS","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"ITEM_COUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"IS_YEARLY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"JOB_YEARS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"IS_ENABLE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"JOB_DATE","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"JOB_NAME","DataType":"VARCHAR2","Default":"'job_'||TO_CHAR(\"ID\")","Length":"44","Nullable":true,"ID":0}]},{"Name":"TBL_JOB_STORE_DATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"JOB_DATE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_COMPARATIVE_STAT_VAL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CURRENT_MONTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PRE_MONTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SIMILAR_MONTH_PRE_YEAR","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"END_OF_PRE_YEAR","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUR_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COMPARATIVE_STAT_PRO_DET","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_CR_BR_INDEX_PRO_DET","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_LEDGER_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"NODE_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_REPPER_DASHBOARD","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_TIMING_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_DATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_START","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_END","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_COLOR","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_REPORT_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"OLD_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REQ_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DDDR_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X1","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X2","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X3","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X4","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X5","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X6","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X7","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_DEPOSIT_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"X0","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_VALUE_AGGRIGATION_TEST","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"FATHER_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TIMING_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"TIMING_COLOR","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_IDPS_REP_VALUE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"1000","Nullable":true,"ID":0},{"Name":"PARENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERIOD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEBT_FLOW","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CRE_FLOW","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DASHBOARD_DAILY_REPORT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"GAP","DataType":"NUMBER","Default":"TO_NUMBER(\"IN_FLOW\")-TO_NUMBER(\"OUT_FLOW\")","Length":"22","Nullable":true,"ID":0},{"Name":"IN_FLOW","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"OUT_FLOW","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"DUE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_CR_BR_INDEX_VAL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CURRENT_MONTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BRANCH_NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"END_OF_PRE_YEAR","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUR_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CURRENT_MONTH_PRE_YEAR","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DASHBOARD_PROFILE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_LEDGER_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_TIMING_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"TYPEE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_PROFILE_HISTORY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_USER","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CREATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DES","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0}]},{"Name":"DATA_SOURCES","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"QUERY","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_LOG_UI_MAP","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"BLOCKNAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"PERSIANEQUIVALENT","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0}]},{"Name":"TBL_LEDGER_TYPE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"LEDGER_CODE","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_CAR_FINAL_REPORT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_CAR_REP_DETAIL","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CAR_DATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REPORT_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERCENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_BRANCH","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"BRN_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REF_CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CITY_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STA_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REGION_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REGION_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0}]},{"Name":"TBL_CONC_RPORT_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUSTOMER_NUMBER","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_STATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STATE_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"REF_CITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CITY_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BRANCH_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REGION_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REGION_NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_GAP_NIIM_VALUE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"DEP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"GAP_RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_REPREQ","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_USER_ID","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REQ_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"READY_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LEDGER_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_TIME","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_CURRENCY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_CUSTOMER","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_DEPOSIT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_PROFILE_LOAN","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_HID_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"CATEGORY","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"DATA_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0}]},{"Name":"TBL_LEDGER_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LEDGER_PROFILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"NVARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0},{"Name":"PARENT_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_CHANGE_CURRENCY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REPORT_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CHANGE_RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NEW_RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CURRENCY","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_SENS_ANALYSIS_PRO_DET","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"IS_STANDARD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_NPL_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"IS_STANDARD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0}]},{"Name":"TBL_COM_TRANS_PREDICTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DEP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TRANS_NUM","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DURATION_PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_USERS","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"USERNAME","DataType":"VARCHAR2","Default":"","Length":"80","Nullable":false,"ID":0},{"Name":"EMAIL","DataType":"VARCHAR2","Default":"","Length":"80","Nullable":true,"ID":0},{"Name":"ADDRESS","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"MOBILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PHONE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"DELETE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"LAST_NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_FLOW","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"QEUE","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0}]},{"Name":"TBL_DEPOSIT_TYPE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"REF_DEPOSIT_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_STATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"STA_NAME","DataType":"NVARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"DES","DataType":"NVARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0}]},{"Name":"TBL_DEPOSIT_TYPE_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"REF_DEPOSIT_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_NIIM_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"IS_STANDARD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0}]},{"Name":"TBL_DASHBOARD_GAP_RIALI","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"PERIODID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE_OUT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE_IN","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"GAP","DataType":"NUMBER","Default":"TO_NUMBER(TO_CHAR(\"VALUE_OUT\"))+TO_NUMBER(TO_CHAR(\"VALUE_IN\"))","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DDDR_TREE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"PARENT_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT_NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"CHILD_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CHILD_NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_GAP_NIIM_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SENS_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TASIR_NAME","DataType":"NVARCHAR2","Default":"","Length":"400","Nullable":true,"ID":0},{"Name":"REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERIOD_NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"TIME_PERIOD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MODALITY_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_LEDGER_TYPE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"LEDGER_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_RATE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_REPORT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"TIMING_PROFILE_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"BALANCE_SENSIVITY","DataType":"NUMBER","Default":"0 ","Length":"22","Nullable":true,"ID":0},{"Name":"FIRST_DATE","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"LAST_DATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"BAZEH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"H_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VERSION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"DES","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"CREATE_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"REF_USER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_LEDGER_PROFIEL","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"REF_TIMING_PROFILE","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"REF_DEP_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_LON_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_BRN_PROFILE","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"REF_CUS_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_CUR_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"CATEGORY","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0}]},{"Name":"TBL_LEDGER_REPORT_MAP","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REPORT_MAP_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"DESCRIPTION","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"CREATED_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"EDITED_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"STANDARD_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"FORMULA","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0}]},{"Name":"TBL_NSFR_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PROFILE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"IS_STANDARD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"PERCENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"ZTEST_LOCK","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"VALUE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"COLUMN1","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0}]},{"Name":"TBL_LOG_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REF_LOG","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAM","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"MEGHDAR","DataType":"VARCHAR2","Default":"","Length":"4000","Nullable":true,"ID":0},{"Name":"SCHEMA","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PROCEDURE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"SHOMARE_KHAT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAM_FARSI","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"NOE_MOTEGHAYER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"ZAMAN_DARJ","DataType":"TIMESTAMP(6)","Default":"","Length":"11","Nullable":true,"ID":0},{"Name":"TEDAD_SATR","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_LEDGER_TYPE_PREDICTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DURATION_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DU_PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_EXCESS_RESERVE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DEPOSIT_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"EXCESS_RESERVE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LOAN_TYPE_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"REF_LOAN_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_TRANS_TOTAL_DAILY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":false,"ID":0},{"Name":"TRANS_NUM","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERIOD_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PERIOD_DURATION","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TEST1","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"S_NUM","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"AMOUNT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LIQUIDITY_RATES_LIMIT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"RATE_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MINVAL","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MAXVAL","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MINCOLOR","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"MAXCOLOR","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_CUSTOMER","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"CUS_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"FAMILY","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"NAT_REG_CODE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"ADDRESS","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"BIRTHDATE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"GENDER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"BRANCH_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TEL","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MOBILE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"POSTAL_CODE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"FATHER_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"BIRTH_PLACE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"GRADE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0}]},{"Name":"TBL_BRANCH_DAY","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"BRN_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REF_CTY_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CITY_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"REF_STA_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"STA_NAME","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0}]},{"Name":"TBL_IDPS_REP_PROFILE_DETAIL","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"FIRST","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"END","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REF_BRANCH_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"DES","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PERIOD_NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"SENS_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TASEIRNUMB","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_NOTIFICATIONS_TEMP","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"TITLE","DataType":"VARCHAR2","Default":"","Length":"50","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_USER","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"START_TIME","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"END_TIME","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"STATUS","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"DESCRIPTION","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"OPT_TYPE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPPER_DATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"CLASS","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"ERROR","DataType":"VARCHAR2","Default":"","Length":"1000","Nullable":true,"ID":0},{"Name":"FLAG","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_REPPER","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_TIMING_PROFILE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_NAME","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_DATE","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"PERIOD_START","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_END","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"PERIOD_COLOR","DataType":"VARCHAR2","Default":"","Length":"20","Nullable":true,"ID":0},{"Name":"REF_REPORT_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"OLD_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REQ_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_NOP_FINAL_RESULT","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"REPREQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_REPORT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TITLE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_TIMING","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CURRENCY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"MOADEL_ARZI","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_COM_EX_RES_PREDICTION","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":false,"ID":0},{"Name":"DURATION_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EXCESS_RESERVE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DU_PRIORITY","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_LOAN_TYPE","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"100","Nullable":true,"ID":0},{"Name":"REF_LOAN_TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_DUE_DATE_DETAIL_LOAN","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"REP_REQ","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"PARENT","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CHILD","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"VALUE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_EFF_DATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REGION_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"TYPE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"RATE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"2000","Nullable":true,"ID":0},{"Name":"COUNT","DataType":"NUMBER","Default":"0 ","Length":"22","Nullable":true,"ID":0}]},{"Name":"TBL_IDPS_TREE_AGG","ObjectID":0,"Digest":"","SQLCode":"","Columns":[{"Name":"LEDGER_CODE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"PARENT_CODE","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"NAME","DataType":"VARCHAR2","Default":"","Length":"200","Nullable":true,"ID":0},{"Name":"BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_BRANCH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"EFF_DATE","DataType":"DATE","Default":"","Length":"7","Nullable":true,"ID":0},{"Name":"DEPTH","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"REF_CUR_ID","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CUR_BALANCE","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"DEBT_FLOW","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0},{"Name":"CRE_FLOW","DataType":"NUMBER","Default":"","Length":"22","Nullable":true,"ID":0}]}],"Procedures":[{"Name":"PRC_PRE_AGGREGATION","ObjectID":270356,"Digest":"4e330379d4b89fd6a99cf4eae3e89f54357a0a790995d9fc31518b5de0dc8152","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_PRE_AGGREGATION\" AS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: rasool_jahani\n  Editor Name: \n  Release Date/Time:1396/02/24-10:00\n  Edit Name: 1396/02/10-10:00\n  Version: 1.1\n  Category:2\n  Description:Anjam tajmi avaliyeh.tamam mojodiyat hay dakhil dar mohaseebe shekaf\n              be shekl sanad hesabdari dar yek jadval jamavari mishavand.\n  */\n--------------------------------------------------------------------------------\n\nBEGIN\n   EXECUTE IMMEDIATE 'alter session enable parallel dml';\n  EXECUTE IMMEDIATE 'truncate table TBL_VALUE';\n\n---/////////////////////////////////\n---/////Insert  Sood Seporde  /////\n--////////////////////////////////\nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID,\n    rate\n   )\nSELECT  /*+ PARALLEL(auto) */ \n21,\n  PAY.REF_DEP_ID,\n  sum(PROFIT_AMOUNT),\n  --PROFIT_AMOUNT,\n  DEP.REF_BRANCH,\n  trunc(PAY.DUE_DATE),\n  DEP.REF_DEPOSIT_TYPE,\n  AC.LEDGER_CODE_PROFIT,\n  DEP.REF_CURRENCY,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  DEP.REF_CUSTOMER,\n  dep.rate\nFROM AKIN.TBL_DEPOSIT_INTEREST_PAYMENT PAY\nJOIN AKIN.TBL_DEPOSIT DEP\nON PAY.REF_DEP_ID = DEP.DEP_ID\nJOIN AKIN.TBL_DEPOSIT_ACCOUNTING AC\nON DEP.REF_DEPOSIT_ACCOUNTING = AC.DEP_ACC_ID \nJOIN TBL_BRANCH BRN\nON BRN.BRN_ID = DEP.REF_BRANCH\nGROUP BY trunc(PAY.DUE_DATE) ,\n  AC.LEDGER_CODE_PROFIT,\n  DEP.REF_BRANCH,\n  DEP.REF_CURRENCY,\n  DEP.REF_CUSTOMER,\n  DEP.REF_DEPOSIT_TYPE,\n  PAY.REF_DEP_ID,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  dep.rate;\n---/////////////////////////////////\n---////Insert  Sood Tashilat  /////\n--////////////////////////////////\ncommit;\nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID,\n    rate\n   )\nSELECT /*+ PARALLEL(auto)  */\n11,\n  PAY.REF_LON_ID,\n  sum(PROFIT_AMOUNT),\n  --PROFIT_AMOUNT,\n  LON.REF_BRANCH,\n  trunc(PAY.DUE_DATE),\n  LON.REF_LOAN_TYPE,\n  AC.LEDGER_CODE_PROFIT,\n  LON.REF_CURRENCY,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  LON.REF_CUSTOMER,\n  LON.RATE\nFROM AKIN.TBL_LOAN_PAYMENT PAY\nJOIN AKIN.TBL_LOAN LON\nON PAY.REF_LON_ID = LON.LON_ID\nJOIN AKIN.TBL_LOAN_ACCOUNTING AC\nON LON.REF_LOAN_ACCOUNTING = AC.LON_ACC_ID \nJOIN TBL_BRANCH BRN\nON BRN.BRN_ID = LON.REF_BRANCH\nGROUP BY trunc(PAY.DUE_DATE) ,\n  AC.LEDGER_CODE_PROFIT,\n  LON.REF_BRANCH,\n  LON.REF_CURRENCY,\n  LON.REF_CUSTOMER,\n  LON.REF_LOAN_TYPE,\n  PAY.REF_LON_ID,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n    LON.RATE;\n---/////////////////////////////////\n---////Insert  Asl Aghsat  ////////\n--////////////////////////////////\ncommit;\n\nINSERT\n/*+ APPEND PARALLEL(auto)  */\nINTO TBL_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID,\n    RATE\n   )\nSELECT /*+ PARALLEL(auto)   */\n1,\n  PAY.REF_LON_ID,\n  sum(PAY.AMOUNT),\n  LON.REF_BRANCH,\n  trunc(PAY.DUE_DATE),\n  LON.REF_LOAN_TYPE,\n  AC.LEDGER_CODE_SELF,\n  LON.REF_CURRENCY,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  LON.REF_CUSTOMER,\n  LON.RATE\nFROM AKIN.TBL_LOAN_PAYMENT PAY\nJOIN AKIN.TBL_LOAN LON\nON PAY.REF_LON_ID = LON.LON_ID\nJOIN AKIN.TBL_LOAN_ACCOUNTING AC\nON LON.REF_LOAN_ACCOUNTING = AC.LON_ACC_ID \nJOIN TBL_BRANCH BRN\nON BRN.BRN_ID = LON.REF_BRANCH\nGROUP BY trunc(PAY.DUE_DATE) ,\n  AC.LEDGER_CODE_SELF,\n  LON.REF_BRANCH,\n  LON.REF_CURRENCY,\n  LON.REF_CUSTOMER,\n  LON.REF_LOAN_TYPE,\n  PAY.REF_LON_ID,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  LON.RATE;\n---/////////////////////////////////\n---//////Insert Asl Seporde  //////\n--////////////////////////////////\ncommit;\n\nINSERT\n/*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID,\n    RATE\n   )\nSELECT /*+ PARALLEL(auto)   */\n2,\nDEP.DEP_ID,\nSUM(DEP.BALANCE),\nDEP.REF_BRANCH,\nCASE\n    WHEN  trunc(DEP.DUE_DATE) IS NULL\n    THEN sysdate +1\n    ELSE  trunc(DEP.DUE_DATE)\n  END AS DUE_DATE ,\nDEP.REF_DEPOSIT_TYPE,\nAC.LEDGER_CODE_SELF,\nDEP.REF_CURRENCY,\nBRN.REF_STA_ID,\nBRN.REF_CTY_ID,\nDEP.REF_CUSTOMER,\nDEP.RATE\nFROM AKIN.TBL_DEPOSIT DEP\nJOIN AKIN.TBL_DEPOSIT_ACCOUNTING AC\nON DEP.REF_DEPOSIT_ACCOUNTING = AC.DEP_ACC_ID\nJOIN TBL_BRANCH BRN\nON DEP.REF_BRANCH = BRN.BRN_ID\nWHERE \n  CASE\n    WHEN  trunc(DEP.DUE_DATE) IS NULL\n    THEN sysdate +1\n    ELSE  trunc(DEP.DUE_DATE)\n  END \u003e sysdate\n  GROUP BY trunc(DEP.DUE_DATE) ,\n  DEP.DEP_ID,\n  AC.LEDGER_CODE_SELF,\n  DEP.REF_BRANCH,\n  DEP.REF_CURRENCY,\n  DEP.REF_CUSTOMER,\n  DEP.REF_DEPOSIT_TYPE,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  DEP.RATE;\ncommit;\nEND PRC_PRE_AGGREGATION;"},{"Name":"PRC_PROFILE_DETAIL","ObjectID":270379,"Digest":"d5891b7b5dc1e24c09335a4f6076d2c584178c217462a7945a95e7048eaf65e3","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_PROFILE_DETAIL\" (\n    INPAR_REF_PROFILE      IN VARCHAR2 ,\n    INPAR_COLUMN           IN VARCHAR2 ,\n    INPAR_CONDITION        IN VARCHAR2 ,\n    INPAR_insert_or_update IN VARCHAR2 -- insert = 1 \u0026 update = 2\n    ,\n    INPAR_record IN VARCHAR2 , --0 EDAME DARAD VA 1 TAMAM\n    outpar_id OUT VARCHAR2\n    )\nAS\niidd number;\n  --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name: 1396/02/16-12:00\n  Version: 1.1\n  Category:2\n  Description:\n  */\n  --------------------------------------------------------------------------------\n  isempty     NUMBER;\n  VAR_VERSION NUMBER;\n  INPAR_insert_or_update2 number;--insert = 0 \u0026 update \u003c\u003e0\nBEGIN\n\nselect max(id) into iidd\nFROM TBL_PROFILE\nwhere h_id = INPAR_REF_PROFILE\ngroup by name ;\n\n\n  select count(*) into INPAR_insert_or_update2 from  TBL_PROFILE_DETAIL where SRC_COLUMN=INPAR_COLUMN and REF_PROFILE = iidd;\n  \n    IF (INPAR_insert_or_update2 = 0) THEN\n      INSERT\n      INTO TBL_PROFILE_DETAIL\n        (\n          REF_PROFILE,\n          SRC_COLUMN,\n          CONDITION\n        )\n        VALUES\n        (\n          iidd,\n          INPAR_COLUMN,\n          INPAR_CONDITION\n        );\n        commit;\n        select id into outpar_id from TBL_PROFILE_DETAIL where SRC_COLUMN=INPAR_COLUMN and REF_PROFILE = iidd;\n    ELSE\n      UPDATE TBL_PROFILE_DETAIL\n      SET CONDITION     =INPAR_CONDITION\n      WHERE REF_PROFILE = iidd\n      AND SRC_COLUMN    = INPAR_COLUMN;\n    END IF;\n    EXECUTE IMMEDIATE 'delete from tbl_profile_detail where  src_column is not null and condition is NULL';\n    commit;\nEND PRC_PROFILE_detail;"},{"Name":"PRC_PROFILE","ObjectID":270478,"Digest":"7b9f82777525a83beb776727dc1d73e2bf4c7213188759a2e1f6b533d19ebeec","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_PROFILE\" (\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    INPAR_CREATE_DATE      IN VARCHAR2 , \n    INPAR_REF_USER         IN VARCHAR2 ,   \n    INPAR_STATUS           IN VARCHAR2 , \n    inpar_insert_or_update IN VARCHAR2 , --insert = 1 \u0026 update = 0\n    inpar_id               IN VARCHAR2 , \n    INPAR_REF_PROFILE      IN VARCHAR2 ,\n    INPAR_COLUMN           IN VARCHAR2 ,\n    INPAR_CONDITION        IN NVARCHAR2 ,\n    outpar_id OUT VARCHAR2 )\nAS\n  --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name: \n  Release Date/Time:1396/04/14-16:00\n  Edit Name: \n  Version: 1.1\n  Category:2\n  Description: in procedure bareE sakht, virayesh va koliE tanzimate profile ha mibashad\n  */\n\n  --------------------------------------------------------------------------------\n\n  var_count NUMBER;\n  var_version Number;\n  max_id number;\n  iidd number;\n  INPAR_insert_or_update2 number;\n  var clob;\n  cnt number;\n  cnt_id number;\n  \nBEGIN\n\nvar_version:=1;\n  --select count(*) into var_count from TBL_PROFILE where name||type = INPAR_NAME||INPAR_TYPE;\n  --if (var_count = 0) then\n  \n  --select 'nam tekrari ast' into outpar_id from dual;\n  --end if;\n--------------------------------------------------------------------------------  \nif(upper(INPAR_TYPE)='TARIKH') then\n IF (inpar_insert_or_update= 1) THEN\n    INSERT /*+ APPEND PARALLEL(auto) */\n    INTO TBL_TIMING_PROFILE\n      (\n        NAME,\n        DES,\n        TYPE,\n        CREATE_DATE,\n        REF_USER,\n        STATUS,\n        version\n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME) ,\n        INPAR_DES ,\n        2 ,\n        sysdate ,\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n        var_version\n      );\n    COMMIT;\n--    SELECT id\n--    INTO outpar_id\n--    FROM TBL_TIMING_PROFILE\n--    WHERE CREATE_DATE =\n--      (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n--      );\nSELECT id\n        INTO outpar_id\n        FROM TBL_TIMING_PROFILE\n        WHERE  id =\n          (SELECT MAX(id) FROM TBL_TIMING_PROFILE \n          );\n      \n        update TBL_TIMING_PROFILE\n    set H_ID= id\n    where id = outpar_id;\n    commit;\n    \n    \n  ELSE\n    INSERT /*+ APPEND PARALLEL(auto) */\n    INTO TBL_TIMING_PROFILE\n      (\n        NAME,\n        DES,\n        TYPE,\n        CREATE_DATE,\n        update_date,\n        REF_USER,\n        REF_USER_UPDATE,\n        STATUS,\n        version,\n        H_ID\n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME) ,\n        INPAR_DES ,\n        2 ,\n        (select max(create_date) from TBL_TIMING_PROFILE where H_ID = inpar_REF_PROFILE),\n        sysdate ,\n        (select max(ref_user) from TBL_TIMING_PROFILE where H_ID = inpar_REF_PROFILE),\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n       (select max(version)+1 from TBL_TIMING_PROFILE where H_ID = inpar_REF_PROFILE),\n        inpar_id\n      );\n    COMMIT;\n    \n--    SELECT id\n--    INTO outpar_id\n--    FROM TBL_TIMING_PROFILE\n--    WHERE CREATE_DATE =\n--      (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n--      );\n     SELECT /*+ PARALLEL(auto) */ id\n        INTO outpar_id\n        FROM TBL_TIMING_PROFILE\n        WHERE  id =\n          (SELECT MAX(id) FROM TBL_TIMING_PROFILE where h_id = INPAR_REF_PROFILE\n          );\n  END IF;\n\n-------------------------------------------------------------------------------------------------------------------------  \n  else if(upper(INPAR_TYPE)='BAZEH') then\n  IF (inpar_insert_or_update= 1) THEN\n    INSERT /*+ APPEND PARALLEL(auto) */\n    INTO TBL_TIMING_PROFILE\n      (\n        NAME,\n        DES,\n        TYPE,\n        CREATE_DATE,\n        REF_USER,\n        STATUS,\n        version\n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME) ,\n        INPAR_DES ,\n        1 ,\n        sysdate ,\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n        var_version\n      );\n    COMMIT;\n--    SELECT id\n--    INTO outpar_id\n--    FROM TBL_TIMING_PROFILE\n--    WHERE CREATE_DATE =\n--      (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n--      );\n\n SELECT id\n    INTO outpar_id\n    FROM TBL_TIMING_PROFILE\n    WHERE id =\n          (SELECT MAX(id) FROM TBL_TIMING_PROFILE\n          );\n      \n      \n       update TBL_TIMING_PROFILE\n    set H_ID= id\n    where id = outpar_id;\n    commit;\n    \n    \n  ELSE\n    INSERT /*+ APPEND PARALLEL(auto) */\n    INTO TBL_TIMING_PROFILE\n      (\n        NAME,\n        DES,\n        TYPE,\n        CREATE_DATE,\n        update_date,\n        REF_USER,\n        REF_USER_UPDATE,\n        STATUS,\n        version,\n        H_ID\n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME ),\n        INPAR_DES ,\n        1 ,\n       ( select max(create_date) from TBL_TIMING_PROFILE where H_ID = inpar_REF_PROFILE),\n        sysdate ,\n        ( select max(ref_user) from TBL_TIMING_PROFILE where H_ID = inpar_REF_PROFILE),\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n        (select max(version)+1 from TBL_TIMING_PROFILE where H_ID = inpar_REF_PROFILE),\n        inpar_id\n      );\n    COMMIT;\n--    SELECT id\n--    INTO outpar_id\n--    FROM TBL_TIMING_PROFILE\n--    WHERE CREATE_DATE =\n--      (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n--      );\n\n SELECT id\n    INTO outpar_id\n    FROM TBL_TIMING_PROFILE\n    WHERE id =\n          (SELECT MAX(id) FROM TBL_TIMING_PROFILE where h_id = INPAR_REF_PROFILE\n          );\n      \n\n\n  end if;\n  --select 'nam tekrari ast' into outpar_id from dual;\n  --end if;\n  \n--------------------------------------------------------------------------------\n  else if(upper(INPAR_TYPE) in ('TBL_LEDGER', 'CUR_SENS','NIIM','NPL','CAR','COM')) then\n   IF (inpar_insert_or_update= 1) THEN\n    INSERT /*+ APPEND PARALLEL(auto) */ INTO TBL_LEDGER_PROFILE\n      (\n        NAME,\n        DES,\n        VERSION,\n        CREATE_DATE,\n        REF_USER,\n        STATUS,\n        TYPE\n        \n      )\n      VALUES\n      (\n       fnc_FarsiValidate( INPAR_NAME ),\n        INPAR_DES ,\n        var_version,\n        sysdate ,\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n      INPAR_TYPE\n        \n      );\n    COMMIT;\n    \n    SELECT id\n    INTO outpar_id\n    FROM TBL_LEDGER_PROFILE\n    WHERE id =\n          (SELECT MAX(id) FROM TBL_LEDGER_PROFILE\n          );\n      update TBL_LEDGER_PROFILE\n    set H_ID= id\n    where id = outpar_id;\n    commit;\n    \n  ELSE\n    INSERT\n    INTO tbl_ledger_profile\n      (\n        NAME,\n        DES,\n        version,\n        CREATE_DATE,\n     \n        REF_USER,\n        \n        STATUS,\n         TYPE,\n         H_ID\n         \n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME),\n        INPAR_DES ,\n        (select max(version)+1 from tbl_ledger_profile where H_id = INPAR_REF_PROFILE),\n       \n        sysdate ,\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n        INPAR_TYPE ,\n         inpar_id\n         \n      );\n    COMMIT;\n   SELECT id\n    INTO outpar_id\n    FROM TBL_ledger_PROFILE\n    WHERE id =\n          (SELECT MAX(id) FROM TBL_ledger_PROFILE where h_id = INPAR_REF_PROFILE\n          );\n  end if;\n  --select 'nam tekrari ast' into outpar_id from dual;\n  --end if;\n---------------------------------------------------------------------------------------------------\n\n---======HOSSEIIINNNNNNNNNN\n--=======SENARA\n--=======TEST\n\n  else if(upper(INPAR_TYPE) in ('TBL_SENARA')) then\n   IF (inpar_insert_or_update= 1) THEN\n    INSERT INTO TBL_PROFILE\n      (\n        NAME,\n        DES,\n        VERSION,\n        CREATE_DATE,\n        REF_USER,\n        STATUS,\n        TYPE\n        \n      )\n      VALUES\n      (\n       fnc_FarsiValidate( INPAR_NAME ),\n        INPAR_DES ,\n        var_version,\n        sysdate ,\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n      INPAR_TYPE\n        \n      );\n    COMMIT;\n    \n    SELECT id\n    INTO outpar_id\n    FROM TBL_PROFILE\n    WHERE id =\n          (SELECT MAX(id) FROM TBL_PROFILE\n          );\n      update TBL_PROFILE\n    set H_ID= id\n    where id = outpar_id;\n    commit;\n    \n  ELSE\n    INSERT\n    INTO tbl_profile\n      (\n        NAME,\n        DES,\n        version,\n        CREATE_DATE,\n     \n        REF_USER,\n        \n        STATUS,\n         TYPE,\n         H_ID\n         \n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME),\n        INPAR_DES ,\n        (select max(version)+1 from tbl_profile where H_id = INPAR_REF_PROFILE),\n       \n        sysdate ,\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n        INPAR_TYPE ,\n         inpar_id\n         \n      );\n    COMMIT;\n   SELECT id\n    INTO outpar_id\n    FROM TBL_PROFILE\n    WHERE id =\n          (SELECT MAX(id) FROM TBL_PROFILE where h_id = INPAR_REF_PROFILE\n          );\n  end if;\n  --select 'nam tekrari ast' into outpar_id from dual;\n  --end if;\n\n\n---======HOSSEIIINNNNNNNNNN\n--=======SENARA\n--=======TEST\n\n\n\n\n-----------------------------------------------------------------------------------------------------  \n  else\n  IF (inpar_insert_or_update= 1) THEN\n    INSERT\n    INTO TBL_PROFILE\n      (\n        NAME,\n        DES,\n        TYPE,\n        CREATE_DATE,\n        REF_USER,\n        STATUS,\n        version\n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME) ,\n        INPAR_DES ,\n        upper( INPAR_TYPE) ,\n        sysdate ,\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n        var_version\n      );\n    COMMIT;\n--  SELECT id\n--    INTO outpar_id\n--    FROM TBL_PROFILE\n--    WHERE CREATE_DATE =\n--      (SELECT MAX(CREATE_DATE) FROM TBL_PROFILE\n--      ) and id =  (SELECT MAX(id) FROM TBL_PROFILE);\n\n SELECT id\n    INTO outpar_id\n    FROM TBL_PROFILE\n    WHERE id =\n          (SELECT MAX(id) FROM TBL_PROFILE \n          );\n -----------------------------------------------------------------------------\n         update TBL_PROFILE\n    set H_ID= id\n    where id = outpar_id;\n    commit;\n    \n    \n       --============ item_cnt\n     var:=to_char(var);\n    \n    select FNC_PROFILE_CREATE_QUERY(outpar_id,0) into var from dual;\n    EXECUTE IMMEDIATE 'select count(*)  from ('||var||')'  into cnt;\n    update tbl_profile set item_cnt = cnt where id = outpar_id;\n    commit;\n    --============\n\n    \n   \n  ELSE\n  ---baraE fahymidan inke bishtarn idiEE ke dar detail zakhire boode chi hast\n  select max(tbl_profile.id) into max_id  from tbl_profile where h_id = inpar_id  group by h_id;    \n    \n    INSERT\n    INTO TBL_PROFILE\n      (\n        NAME,\n        DES,\n        TYPE,\n      CREATE_DATE,\n        UPDATE_DATE,\n        REF_USER,\n        REF_USER_UPDATE,\n        STATUS,\n        version,\n        h_id\n      )\n      VALUES\n      (\n        fnc_FarsiValidate(INPAR_NAME) ,\n        INPAR_DES ,\n        upper( INPAR_TYPE) ,\n         (select max(create_date) from TBL_PROFILE where H_ID = inpar_REF_PROFILE),\n        sysdate ,\n        (select max(ref_user) from TBL_PROFILE where H_ID = inpar_REF_PROFILE),\n        INPAR_REF_USER ,\n        INPAR_STATUS,\n        (select max(version)+1 from TBL_PROFILE where H_ID = inpar_REF_PROFILE),\n        inpar_id\n      );\n    COMMIT;\n     SELECT id\n    INTO outpar_id\n    FROM TBL_PROFILE\n    WHERE id =  (SELECT MAX(id) FROM TBL_PROFILE where h_id = Inpar_Ref_Profile);\n----------------------------------------------------------------------newwww      \n select max(id) into iidd\nFROM TBL_PROFILE\nwhere h_id = INPAR_REF_PROFILE \ngroup by name ;     \n if(inpar_column \u003c\u003e 'empty' )  then\n      INSERT\nINTO TBL_PROFILE_DETAIL\n  (\n\n    REF_PROFILE,\n    SRC_COLUMN,\n    CONDITION\n  )\n  (SELECT  outpar_id, SRC_COLUMN, CONDITION FROM TBL_PROFILE_DETAIL,tbl_profile where REF_PROFILE=tbl_profile.id and REF_PROFILE= max_id);\n   commit; \n   \n   \n   \n   select count(*) into INPAR_insert_or_update2 from  TBL_PROFILE_DETAIL where SRC_COLUMN=INPAR_COLUMN and REF_PROFILE = iidd;\n  \n    IF (INPAR_insert_or_update2 = 0) THEN\n      INSERT\n      INTO TBL_PROFILE_DETAIL\n        (\n          REF_PROFILE,\n          SRC_COLUMN,\n          CONDITION\n        )\n        VALUES\n        (\n          iidd,\n          INPAR_COLUMN,\n          INPAR_CONDITION\n        );\n        commit;\n        select id into outpar_id from TBL_PROFILE_DETAIL where SRC_COLUMN=INPAR_COLUMN and REF_PROFILE = iidd;\n    ELSE\n      UPDATE TBL_PROFILE_DETAIL\n      SET CONDITION     =INPAR_CONDITION\n      WHERE REF_PROFILE = iidd\n      AND SRC_COLUMN    = INPAR_COLUMN;\n    END IF;\n    EXECUTE IMMEDIATE 'delete from tbl_profile_detail where  src_column is not null and condition is NULL';\n    \n    commit;\n-------------------------------------------------------------------------    \n   end if; \n  --============ item_cnt\n     var:=to_char(var);\n    select max(id) into cnt_id from tbl_profile where h_id = INPAR_REF_PROFILE;\n    select FNC_PROFILE_CREATE_QUERY(INPAR_REF_PROFILE,0) into var from dual;\n    EXECUTE IMMEDIATE 'select count(*)  from ('||var||')'  into cnt;\n    update tbl_profile set item_cnt = nvl(cnt,0) where id = cnt_id;\n    commit;\n    --============\n   \n  end if;\n  \n end if;\n  \n  end if;\n  \n  \nend if;\n\n\n  \n  \n\nupdate tbl_profile \nset status = 0\nwhere id not in (select max(id) from tbl_profile group by h_id);\ncommit;\n\nupdate tbl_ledger_profile \nset status = 0\nwhere id not in (select max(id) from tbl_ledger_profile group by h_id);\ncommit;\n\nupdate tbl_timing_profile \nset status = 0\nwhere id not in (select max(id) from tbl_timing_profile group by h_id);\ncommit;\nUPDATE TBL_PROFILE TP\n  SET\n   TP.REPORT_CNT =0\n WHERE  TP.REPORT_CNT is null;\n commit;\n\nprc_update_report_id();\nprc_update_dashboard_id();\nprc_is_empty();\n\n\n--notif\nfor i in (select * from tbl_report_profile\nwhere  REF_REPORT in (select distinct ref_report from TBL_NOTIFICATIONS)\n)\nloop\n\nif (i.REF_LEDGER_PROFILE = outpar_id or i.REF_PROFILE_TIME = outpar_id or i.REF_PROFILE_CURRENCY = outpar_id or \ni.REF_PROFILE_CUSTOMER = outpar_id or i.REF_PROFILE_BRANCH = outpar_id or i.REF_PROFILE_DEPOSIT = outpar_id or i.REF_PROFILE_LOAN = outpar_id)\nthen\nupdate \nTBL_NOTIFICATIONS\nset flag = 1\nwhere tbl_notifications.ref_report = i.ref_report;\nend if;\nend loop;\n--end notif\n\n--------------------------------------------------------------------------------\n--======HOSSEIIIIIIN\n--======SENARAAAAAAA\n--======TEST\nend if;\n--======HOSSEIIIIIIN\n--======SENARAAAAAAA\n--======TEST\n--------------------------------------------------------------------------------\n\nEND PRC_PROFILE;"},{"Name":"PRC_REPORT_VALUE","ObjectID":270504,"Digest":"cdddf21f70b7423ef24252ed0a33a11beee66c70af455dbf53ade4eb01aa28f1","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_REPORT_VALUE\" (\n    INPAR_ID_REPORT IN NUMBER )\nAS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n  VAR_QUERY  VARCHAR2(4000);\n  ID_LOAN    NUMBER;\n  ID_DEP     NUMBER;\n  ID_CUR     NUMBER;\n  ID_CUS     NUMBER;\n  ID_BRANCH  NUMBER;\n  ID_TIMING  NUMBER;\n  DATE_TYPE1 DATE := SYSDATE;\n  LOC_S  TIMESTAMP;\n  LOC_F  TIMESTAMP;\n  LOC_MEGHDAR NUMBER;\n  var_liken number;\n  var_condiTION_liken varchAR2(2000);\nBEGIN\n  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n   \n  SELECT REF_PROFILE_CURRENCY\n  INTO ID_CUR\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_CUSTOMER\n  INTO ID_CUS\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_BRANCH\n  INTO ID_BRANCH\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_DEPOSIT\n  INTO ID_DEP\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_TIME\n  INTO ID_TIMING\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_LOAN\n  INTO ID_LOAN\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n   select bazeh into var_liken from tbl_report where id = INPAR_ID_REPORT; -- moghayerat ba dftar_kol \n  if (var_liken = 0) THEN\n  var_condiTION_liken :=' AND NVL(OTHER_TYPE,0) \u003c\u003e 6 '; \n  ELSE\n  var_condiTION_liken :='';\n  END IF;\n  \n  \n  FOR I IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  )\n  LOOP\n  \n    IF ( I.TYPE = 1 ) THEN\n      /***** agar profile zamani entekhab shode bazehee bashad *****/\n      SELECT '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,   \nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color,\nrate\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE, \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || ''' , rate\nFROM TBL_VALUE WHERE REF_ID IN (  \n'\n        || FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN)\n        || ') AND REF_CUR_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR)\n        || ')'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ')  AND DUE_DATE \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || ' '||var_condiTION_liken|| ' ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,   \nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color,\nrate\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE, \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || ''' ,rate\nFROM TBL_VALUE WHERE REF_ID IN (  \n'\n        || FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP)\n        || ') AND REF_CUR_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR)\n        || ')'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ')  AND DUE_DATE \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || ' '||var_condiTION_liken|| ' ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      INSERT /*+ APPEND PARALLEL(auto)   */\n      INTO TBL_VALUE_TEMP\n        (\n          REF_MODALITY_TYPE,\n          REF_ID,\n          BALANCE,\n          REF_BRANCH,\n          DUE_DATE,\n          REF_TYPE,\n          REF_LEGER_CODE,\n          REF_CUR_ID,\n          REF_STA_ID,\n          REF_CTY_ID,\n          REF_CUS_ID,\n          REF_TIMING_ID,\n          TIMING_NAME,\n          TIMING_color,\n          rate\n        )\n      SELECT  /*+  PARALLEL(auto)   */ REF_MODALITY_TYPE,\n        REF_ID,\n        BALANCE,\n        REF_BRANCH,\n        DUE_DATE,\n        REF_TYPE,\n        REF_LEGER_CODE,\n        REF_CUR_ID,\n        REF_STA_ID,\n        REF_CTY_ID,\n        REF_CUS_ID,\n        I.ID ,\n        I.PERIOD_NAME ,\n        I.PERIOD_COLOR,rate\n      FROM TBL_VALUE\n      WHERE OTHER_TYPE = 3\n      AND DUE_DATE     \u003e to_date( DATE_TYPE1)\n      AND DUE_DATE    \u003c= to_date( DATE_TYPE1)+ I.PERIOD_DATE;\n      COMMIT;\n      \n      ------/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\//\\/\\/\\/\\/\\/\\/\\/\\/\\/\n      \n       SELECT '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,   \nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color,rate\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE, \nREF_ID, \nBALANCE, \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || ''',rate\nFROM TBL_VALUE WHERE REF_MODALITY_TYPE in (4 ,4.1,41) AND REF_CUR_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ')   AND DUE_DATE \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || ' '||var_condiTION_liken|| '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      \n      \n      DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color ,rate\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,   \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || ''',rate\nFROM TBL_VALUE WHERE REF_ID IN (  \n'\n        || FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP)\n        || ') AND REF_CUR_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR)\n        || ')'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ') AND DUE_DATE \u003e= to_date('''\n        || I.PERIOD_START\n        || ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date('''\n        || I.PERIOD_END\n        || ''',''dd-mm-yyyy'') '||var_condiTION_liken|| ' ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color ,rate\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,   \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || ''',rate\nFROM TBL_VALUE WHERE REF_ID IN (  \n'\n        || FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN)\n        || ') AND REF_CUR_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR)\n        || ')'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ') AND DUE_DATE \u003e= to_date('''\n        || I.PERIOD_START\n        || ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date('''\n        || I.PERIOD_END\n        || ''',''dd-mm-yyyy'') '||var_condiTION_liken|| ' ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n            \n\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      INSERT /*+ APPEND PARALLEL(auto)   */\n      INTO TBL_VALUE_TEMP\n        (\n          REF_MODALITY_TYPE,\n          REF_ID,\n          BALANCE,\n          REF_BRANCH,\n          DUE_DATE,\n          REF_TYPE,\n          REF_LEGER_CODE,\n          REF_CUR_ID,\n          REF_STA_ID,\n          REF_CTY_ID,\n          REF_CUS_ID,\n          REF_TIMING_ID,\n          TIMING_NAME,\n          TIMING_color,rate\n        )\n      SELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\n        REF_ID,\n        BALANCE,\n        REF_BRANCH,\n        DUE_DATE,\n        REF_TYPE,\n        REF_LEGER_CODE,\n        REF_CUR_ID,\n        REF_STA_ID,\n        REF_CTY_ID,\n        REF_CUS_ID,\n        I.ID ,\n        I.PERIOD_NAME ,\n        I.PERIOD_COLOR,rate\n      FROM TBL_VALUE\n      WHERE OTHER_TYPE = 3\n      AND DUE_DATE     \u003e= to_date(I.PERIOD_START)\n      AND DUE_DATE     \u003c= to_date( I.PERIOD_END) ;\n      COMMIT;\n      \n      ---/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n      \n      SELECT '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color ,rate\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE, \nREF_ID, \nBALANCE,   \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || ''',rate\nFROM TBL_VALUE WHERE REF_MODALITY_TYPE IN (4,4.1,41) AND REF_CUR_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ') AND DUE_DATE \u003e= to_date('''\n        || I.PERIOD_START\n        || ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date('''\n        || I.PERIOD_END\n        || ''',''dd-mm-yyyy'') '||var_condiTION_liken|| ' ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    END IF;\n  END LOOP;\n  COMMIT;\n  \n  --- insert other code with null date \n  --== insert ref_timing_id = -1\n  \n  INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color ,rate\n) \nselect /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\n-1,\nnull,\nnull ,rate\nfrom tbl_value where DUE_DATE is null;\n  \n  commit;\n  ---------------------------\n  LOC_F := SYSTIMESTAMP;\n       LOC_MEGHDAR := SQL%ROWCOUNT;\n  EXCEPTION \nWHEN OTHERS THEN\nRAISE;\nEND PRC_REPORT_VALUE;"},{"Name":"PRC_DEPOSIT","ObjectID":271102,"Digest":"09ba26079b9ca85f60dc0982101ac83c36dec78f5667f14518da3157aef3493b","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DEPOSIT\" ( RUN_DATE IN DATE )\n AS\n\n /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:in prasiger shamel tamam amaliyat hay marbot be seporde mibashad.\n  ke iz an dar mpdel ejray farayand estefade mishavad.\n  */\n  /*------------------------------------------------------------------------------*/\nBEGIN\n DELETE FROM TBL_RATE WHERE TYPE   = 'TBL_DEPOSIT';\n\n COMMIT;\n  AKIN.PRC_TRANSFER_MODALITY_TYPE ();\n COMMIT;\n AKIN.PRC_TRANSFER_ACCOUNTING ();\n AKIN.PRC_TRANSFER_DEPOSIT(TO_DATE(RUN_DATE) );\n AKIN.PRC_TRANSFER_DEPOSIT_PROFIT(TO_DATE(RUN_DATE) );\n  /*--------------------------------------TBL_RATE   TBL_DEPOSIT*/\n INSERT INTO PRAGG.TBL_RATE ( RATE,TYPE ) SELECT DISTINCT\n  RATE AS NERKH_SUD\n ,'TBL_DEPOSIT'\n FROM AKIN.TBL_DEPOSIT\n WHERE RATE IS NOT NULL;\n\n COMMIT;\n  /*--------------------------------------UPDATE TBL_DEPOSIT RATE*/\n UPDATE AKIN.TBL_DEPOSIT A\n  SET\n   A.REF_RATE = (\n    SELECT\n     R.REF_RATE\n    FROM TBL_RATE R\n    WHERE R.RATE   = A.RATE\n     AND\n      R.TYPE   = 'TBL_DEPOSIT'\n   );\n\n COMMIT;\n\nEND PRC_DEPOSIT;"},{"Name":"PRC_LOAN","ObjectID":271103,"Digest":"62741b7e6baf8555bc53d8f46cfc793735625f32272a7456370a3a8e114e65cb","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LOAN\" (\n    RUN_DATE IN DATE )\nAS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:in prasiger shamel tamam amaliyat hay marbot be tashilat mibashad.\n  ke iz an dar mpdel ejray farayand estefade mishavad. */\n  --------------------------------------------------------------------------------\nBEGIN\n  DELETE FROM TBL_RATE WHERE TYPE = 'TBL_LOAN';\n  COMMIT;\n  AKIN.PRC_TRANSFER_ACCOUNTING();\n  AKIN.PRC_TRANSFER_PAYMENT(to_date(RUN_DATE));\n  AKIN.PRC_TRANSFER_LOAN(to_date(RUN_DATE));\n  ----------------------------------------TBL_RATE  TBL_LOAN\n  INSERT\n  INTO PRAGG.TBL_RATE\n    (\n      RATE,\n      TYPE\n    )\n  SELECT DISTINCT RATE AS NERKH_SUD,\n    'TBL_LOAN'\n  FROM AKIN.TBL_LOAN\n  WHERE RATE IS NOT NULL;\n  COMMIT;\n  ----------------------------------------UPDATE TBL_LOAN RATE\n  UPDATE AKIN.TBL_LOAN a\n  SET a.REF_RATE =\n    (SELECT r.ref_rate\n    FROM tbl_rate r\n    WHERE r.rate = a.rate\n    AND r.type   ='TBL_LOAN'\n    );\n  COMMIT;\nEND PRC_LOAN;"},{"Name":"PRC_OTHER","ObjectID":271104,"Digest":"882332f9502eaa468e8fb90079bb342658f856824eb300c38b7bae1452223b63","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_OTHER\" \nAS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:prosijeri shamel tamami farayandhay mostaghel.\n  */\n  --------------------------------------------------------------------------------\nBEGIN\nnull;--TRANSFER_ENTITIES_TO_PRAGG();\nEND PRC_OTHER;"},{"Name":"PRC_FLOW","ObjectID":271106,"Digest":"f7c3694bd650ecb1757ca4abf0548c83610a396e0e99225c50b3818c7b57728d","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_FLOW\" \n(\n  inpar_id in number \n, eff_date in date \n) as\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh \u0026 Sobhan.Sadeghdeh \n  Editor Name: \n  Release Date/Time:1396/02/18-15:00\n  Edit Name: 1396/03/01-13:00\n  Version: 1.1\n  Category:2\n  Description:\n  */\n--------------------------------------------------------------------------------\nv_queue varchar2(2000);\nvar varchar2(2000);\nvar_time1 TIMESTAMP;\nvar_time2 TIMESTAMP;\nvar_date date;\n-- COMMA SEPERATED NOTATIN IS RISKY FOR PROCEDURE'S PARAMETER\nbegin\nEXECUTE IMMEDIATE 'truncate table tbl_log';\nselect qeue into v_queue from tbl_flow where inpar_id=id;\nfor i in ( \n select  trim(regexp_substr(v_queue,'[^,]+', 1, level) ) as q --,rownum\nfrom dual\nconnect by regexp_substr(v_queue, '[^,]+', 1, level) is not null\norder by level) loop\nselect sysdate into var_date from dual;\nselect  SYSTIMESTAMP into var_time1 from dual;\nvar:='DECLARE\n                                  eff_date DATE :=  TO_DATE(''' || eff_date ||''');\nbegin '||i.q||';end;';\nexecute immediate var;\nselect  SYSTIMESTAMP into var_time2 from dual;\nINSERT INTO tbl_log (\n    rundate,\n    name,\n    duration\n) \nvalues(to_char((var_date),'YYYY-MM-DD  HH24:MI:SS'),i.q,(\nwith rws as (\n  select var_time1 t1, \n         var_time2 t2 \n  from dual\n)\n select extract(hour from (t2-t1)) *3600 +\n         extract(minute from (t2-t1))*60 +\n         extract(second from (t2-t1)) secs\n  from rws)\n  )\n;\n\ncommit;\n\nend loop;\nINSERT INTO tbl_log (\n    rundate,\n    name,\n    duration\n)  values(sysdate,'SUM_ALL_TIME',(\nselect sum(duration) from tbl_log)\n);\ncommit;\n\nend prc_flow;"},{"Name":"PRC_DEPOSIT_TEST","ObjectID":271110,"Digest":"1feeb39a2c015ed83dfb5d68de7923f8767f977cfb438a4774b7ef1373fe4477","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DEPOSIT_TEST\" \nAS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/04/21-10:00\n  Edit Name:\n  Version: 1\n  Description:farayandhay test marbot be seporde\n  */\n  --------------------------------------------------------------------------------\nBEGIN\nDBMS_OUTPUT.PUT_LINE(' همه چي آرومه :)  الکي مثلا');\nEND PRC_DEPOSIT_TEST;"},{"Name":"PRC_LOAN_TEST","ObjectID":271111,"Digest":"0c429d778d787b44982bd1070701953422d8ec0a80dd1cba564c275dccb0435a","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LOAN_TEST\" \nAS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:farayandhay test marbot be tashilat\n  */\n  --------------------------------------------------------------------------------\nBEGIN\nDBMS_OUTPUT.PUT_LINE(' همه چي آرومه :)  الکي مثلا');\nEND PRC_LOAN_TEST;"},{"Name":"PRC_TIMING_PROFILE_DETAIL","ObjectID":272152,"Digest":"94cacc95d719d945357b3721c68c5a44a42f581c5119ef4da5d152d3d0e5b214","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TIMING_PROFILE_DETAIL\" (\n    INPAR_NAME               IN VARCHAR2 ,\n    INPAR_DES                IN VARCHAR2 ,\n    INPAR_TYPE               IN VARCHAR2 ,\n    INPAR_CREATE_DATE        IN VARCHAR2 , --be date in future\n    INPAR_REF_USER           IN VARCHAR2 , -- number\n    INPAR_STATUS             IN VARCHAR2 , --number\n    inpar_insert_or_update   IN VARCHAR2 , --insert = 1 \u0026 update = 0\n    inpar_REF_TIMING_PROFILE IN VARCHAR2 ,\n    inpar_PERIOD_NAME        IN VARCHAR2 ,\n    inpar_PERIOD_DATE        IN NVARCHAR2 ,\n    inpar_PERIOD_START       IN VARCHAR2 ,\n    inpar_PERIOD_END         IN VARCHAR2 ,\n    inpar_PERIOD_COLOR       IN VARCHAR2 ,\n    inpar_PERIOD_STATUS      IN VARCHAR2 ,\n    inpar_id                 IN NUMBER,\n    outpar_id OUT varchar2 )\nAS\n-------------------------------------------------------------------------------\n/*\n  Programmer Name:Navid.Seddigh\n  Editor Name: \n  Release Date/Time:1396/04/21-16:00\n  Edit Name: \n  Version: 1.2\n  Category:2\n  Description: bade az sakhte yek profile zamani tavasote prc_profile digar ba oon procedure\n               kari nadarim va control tamami amali ke dar profile zamani anjam mishavad\n               be daste in procedure mioftad.\n  */\n--------------------------------------------------------------------------------\n\n  var_count               NUMBER;\n  var_version             NUMBER;\n  max_id                  NUMBER;\n  iidd                    NUMBER;\n  INPAR_insert_or_update2 NUMBER;\nBEGIN\n\n\n  var_version:=1;\n  --select count(*) into var_count from TBL_PROFILE where name||type = INPAR_NAME||INPAR_TYPE;\n  --if (var_count = 0) then\n  --select 'nam tekrari ast' into outpar_id from dual;\n  --end if;\n  --------------------------------------------------------------------------------\n  IF(upper(INPAR_TYPE)        ='TARIKH') THEN\n    IF (inpar_insert_or_update= 1) THEN\n      \n      INSERT\n      INTO TBL_TIMING_PROFILE\n        (\n          NAME,\n          DES,\n          TYPE,\n          CREATE_DATE,\n          REF_USER,\n          STATUS,\n          version\n        )\n        VALUES\n        (\n          INPAR_NAME ,\n          INPAR_DES ,\n          2 ,\n          sysdate ,\n          INPAR_REF_USER ,\n          INPAR_STATUS,\n          var_version\n        );\n      COMMIT;\n      --    SELECT id\n      --    INTO outpar_id\n      --    FROM TBL_TIMING_PROFILE\n      --    WHERE CREATE_DATE =\n      --      (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n      --      );\n      SELECT id\n      INTO outpar_id\n      FROM TBL_TIMING_PROFILE\n      WHERE CREATE_DATE =\n        (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n        )\n      AND id =\n        (SELECT MAX(id) FROM TBL_TIMING_PROFILE\n        );\n      UPDATE TBL_TIMING_PROFILE SET H_ID= id WHERE id = outpar_id;\n      COMMIT;\n      end if;\n    if(inpar_insert_or_update\u003c\u003e1 and inpar_REF_TIMING_PROFILE = inpar_id) then\n    \n      ---baraE fahymidan inke bishtarn idiEE ke dar detail zakhire boode chi hast\n      SELECT MAX(TBL_TIMING_PROFILE.id)\n      INTO max_id\n      FROM TBL_TIMING_PROFILE\n      WHERE h_id = inpar_id\n      GROUP BY h_id;\n      INSERT\n      INTO TBL_TIMING_PROFILE\n        (\n          NAME,\n          DES,\n          TYPE,\n          CREATE_DATE,\n          UPDATE_DATE,\n          REF_USER,\n          REF_USER_UPDATE,\n          STATUS,\n          version,\n          H_ID\n        )\n        VALUES\n        (\n          INPAR_NAME ,\n          INPAR_DES ,\n          2 ,\n           (SELECT MAX(create_date) FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          sysdate ,\n           (SELECT MAX(REF_USER) FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          INPAR_REF_USER ,\n          INPAR_STATUS,\n          (SELECT MAX(version)+1 FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          inpar_id\n        );\n      COMMIT;\n      SELECT id\n      INTO outpar_id\n      FROM TBL_TIMING_PROFILE\n      WHERE  id =\n        (SELECT MAX(id) FROM TBL_TIMING_PROFILE where h_id = Inpar_Ref_Timing_Profile\n        );\n    \n      ------------------------------------------------------------------------new\n      SELECT MAX(id)\n      INTO iidd\n      FROM TBL_TIMING_PROFILE\n      WHERE h_id = INPAR_REF_TIMING_PROFILE\n      GROUP BY name ;\n      --------------------------------------------------------------------------\n            INSERT\n            INTO TBL_TIMING_PROFILE_detail\n              (\n                REF_TIMING_PROFILE,\n                PERIOD_NAME,\n                PERIOD_DATE,\n                PERIOD_START,\n                PERIOD_END,\n                PERIOD_COLOR,\n                PERIOD_STATUS\n              )\n              (SELECT outpar_id,\n                  PERIOD_NAME,\n                  PERIOD_DATE,\n                  PERIOD_START,\n                  PERIOD_END,\n                  PERIOD_COLOR,\n                  PERIOD_STATUS\n                FROM TBL_TIMING_PROFILE_DETAIL,\n                  tbl_TIMING_profile\n                WHERE REF_TIMING_PROFILE=tbl_TIMING_profile.id\n                AND REF_TIMING_PROFILE  = max_id\n              );\n            COMMIT;\n      SELECT COUNT(*)\n      INTO var_count\n      FROM TBL_TIMING_PROFILE_DETAIL\n      WHERE PERIOD_NAME      =inpar_PERIOD_NAME\n     AND REF_TIMING_PROFILE = inpar_REF_TIMING_PROFILE;\n   --AND REF_TIMING_PROFILE = max_id;\n   \n      IF (var_count          =0) THEN\n        INSERT\n        INTO TBL_TIMING_PROFILE_DETAIL\n          (\n            REF_TIMING_PROFILE,\n            PERIOD_NAME,\n            PERIOD_DATE,\n            PERIOD_START,\n            PERIOD_END,\n            PERIOD_COLOR,\n            PERIOD_STATUS\n          )\n          VALUES\n          (\n            iidd ,\n            inpar_PERIOD_NAME ,\n            inpar_PERIOD_DATE ,\n            -- inpar_PERIOD_START ,\n            to_date(inpar_PERIOD_START,'yyyy/mm/dd','nls_calendar=persian'),\n            --inpar_PERIOD_END ,\n            to_date(inpar_PERIOD_END,'yyyy/mm/dd','nls_calendar=persian'),\n            inpar_PERIOD_COLOR ,\n            inpar_PERIOD_STATUS\n          );\n        COMMIT;\n        SELECT max(id)\n        INTO outpar_id\n        FROM TBL_TIMING_PROFILE_DETAIL\n        WHERE PERIOD_NAME      = inpar_PERIOD_NAME\n        AND REF_TIMING_PROFILE = iidd;\n      ELSE\n        UPDATE TBL_TIMING_PROFILE_DETAIL\n        SET REF_TIMING_PROFILE = iidd ,\n          PERIOD_NAME          = inpar_PERIOD_NAME ,\n          PERIOD_DATE          = inpar_PERIOD_DATE ,\n          PERIOD_START         = to_date(inpar_PERIOD_START,'yyyy/mm/dd','nls_calendar=persian'),\n          PERIOD_END           = to_date(inpar_PERIOD_END,'yyyy/mm/dd','nls_calendar=persian'),\n          PERIOD_COLOR         = inpar_PERIOD_COLOR ,\n          PERIOD_STATUS        = inpar_PERIOD_STATUS\n        WHERE ID               = inpar_id ;\n       -- where REF_TIMING_PROFILE = inpar_id ;\n        COMMIT;\n      END IF;\n   end if;\n  ---------------------------for update  \n  if (inpar_insert_or_update\u003c\u003e1 and inpar_REF_TIMING_PROFILE \u003c\u003e inpar_id) then\n---\n SELECT MAX(id)\n      INTO iidd\n      FROM TBL_TIMING_PROFILE\n      WHERE h_id = INPAR_REF_TIMING_PROFILE\n      GROUP BY name ;\n---\n  INSERT\nINTO TBL_TIMING_PROFILE_DETAIL_TEMP\n  (\n    ID,\n    REF_TIMING_PROFILE,\n    PERIOD_NAME,\n    PERIOD_DATE,\n    PERIOD_START,\n    PERIOD_END,\n    PERIOD_COLOR,\n    PERIOD_STATUS\n  )\n  (SELECT ID,\n  REF_TIMING_PROFILE,\n  PERIOD_NAME,\n  PERIOD_DATE,\n  PERIOD_START,\n  PERIOD_END,\n  PERIOD_COLOR,\n  PERIOD_STATUS\nFROM TBL_TIMING_PROFILE_DETAIL where ref_timing_profile = iidd );\ncommit;\n\n\n\n UPDATE TBL_TIMING_PROFILE_DETAIL_temp\n        SET \n          PERIOD_NAME          = inpar_PERIOD_NAME ,\n          PERIOD_DATE          = inpar_PERIOD_DATE ,\n          PERIOD_START         = to_date(inpar_PERIOD_START,'yyyy/mm/dd','nls_calendar=persian'),\n          PERIOD_END           = to_date(inpar_PERIOD_END,'yyyy/mm/dd','nls_calendar=persian'),\n          PERIOD_COLOR         = inpar_PERIOD_COLOR ,\n          PERIOD_STATUS        = inpar_PERIOD_STATUS\n        WHERE ID               = inpar_id ;\n       -- where REF_TIMING_PROFILE = inpar_id ;\n        COMMIT;\n INSERT\n      INTO TBL_TIMING_PROFILE\n        (\n          NAME,\n          DES,\n          TYPE,\n          CREATE_DATE,\n          UPDATE_DATE,\n          REF_USER,\n          REF_USER_UPDATE,\n          STATUS,\n          version,\n          H_ID\n        )\n        VALUES\n        (\n        INPAR_NAME ,\n          INPAR_DES ,\n          2 ,\n          (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          sysdate ,\n           (SELECT MAX(REF_USER) FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          INPAR_REF_USER ,\n          INPAR_STATUS,\n          (SELECT MAX(version)+1 FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          inpar_REF_TIMING_PROFILE\n        );\n      COMMIT;\n      SELECT id\n      INTO outpar_id\n      FROM TBL_TIMING_PROFILE\n      WHERE  id =\n        (SELECT MAX(id) FROM TBL_TIMING_PROFILE where h_id = Inpar_Ref_Timing_Profile\n        );\n        \n        INSERT\nINTO TBL_TIMING_PROFILE_DETAIL\n  (\n   \n    REF_TIMING_PROFILE,\n    PERIOD_NAME,\n    PERIOD_DATE,\n    PERIOD_START,\n    PERIOD_END,\n    PERIOD_COLOR,\n    PERIOD_STATUS\n  )\n  (SELECT \n  outpar_id,\n  PERIOD_NAME,\n  PERIOD_DATE,\n  PERIOD_START,\n  PERIOD_END,\n  PERIOD_COLOR,\n  PERIOD_STATUS\nFROM TBL_TIMING_PROFILE_DETAIL_temp where ref_timing_profile=iidd );\ncommit;\n EXECUTE immediate 'truncate table TBL_TIMING_PROFILE_DETAIL_temp';\n\n   end if;\n  \n    -----------------------\n\n\n\n\n-----------------------------------------------------------------------------------------------------------\n   else --IF(upper(INPAR_TYPE)='BAZEH') THEN\n      IF (inpar_insert_or_update= 1) THEN\n        INSERT\n        INTO TBL_TIMING_PROFILE\n          (\n            NAME,\n            DES,\n            TYPE,\n            CREATE_DATE,\n            REF_USER,\n            STATUS,\n            version\n          )\n          VALUES\n          (\n            INPAR_NAME ,\n            INPAR_DES ,\n            1 ,\n            sysdate ,\n            INPAR_REF_USER ,\n            INPAR_STATUS,\n            var_version\n          );\n        COMMIT;\n      \n--        SELECT id\n--        INTO outpar_id\n--        FROM TBL_TIMING_PROFILE\n--        WHERE CREATE_DATE =\n--          (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n--          )\n--        AND id =\n--          (SELECT MAX(id) FROM TBL_TIMING_PROFILE\n--          );\n\n\n        SELECT id\n        INTO outpar_id\n        FROM TBL_TIMING_PROFILE\n        WHERE  id =\n          (SELECT MAX(id) FROM TBL_TIMING_PROFILE \n          );\n          \n          \n        UPDATE TBL_TIMING_PROFILE SET H_ID= id WHERE id = outpar_id;\n        COMMIT;\n      end if;\n      if(inpar_insert_or_update\u003c\u003e1 and inpar_REF_TIMING_PROFILE = inpar_id) then\n        ---baraE fahymidan inke bishtarn idiEE ke dar detail zakhire boode chi hast\n        SELECT MAX(TBL_TIMING_PROFILE.id)\n        INTO max_id\n        FROM TBL_TIMING_PROFILE\n        WHERE h_id = inpar_id\n        GROUP BY h_id;\n        INSERT\n        INTO TBL_TIMING_PROFILE\n          (\n            NAME,\n            DES,\n            TYPE,\n            CREATE_DATE,\n            UPDATE_DATE,\n            REF_USER,\n            REF_USER_UPDATE,\n            STATUS,\n            version,\n            H_ID\n          )\n          VALUES\n          (\n           INPAR_NAME ,\n            INPAR_DES ,\n            1 ,\n            (SELECT MAX(create_date) FROM TBL_TIMING_PROFILE where H_ID = inpar_REF_TIMING_PROFILE),\n            sysdate ,\n            (SELECT MAX(REF_USER) FROM TBL_TIMING_PROFILE where H_ID = inpar_REF_TIMING_PROFILE),\n            INPAR_REF_USER ,\n            INPAR_STATUS,\n            (SELECT MAX(version)+1 FROM TBL_TIMING_PROFILE where H_ID = inpar_REF_TIMING_PROFILE),\n            inpar_id\n          );\n        COMMIT;\n        \n      \n          SELECT id\n        INTO outpar_id\n        FROM TBL_TIMING_PROFILE\n        WHERE  id =\n          (SELECT MAX(id) FROM TBL_TIMING_PROFILE where h_id = Inpar_Ref_Timing_Profile\n          );\n          \n        \n        ------------------------------------------------------------------------new\n        SELECT MAX(id)\n        INTO iidd\n        FROM TBL_TIMING_PROFILE\n        WHERE h_id = INPAR_REF_TIMING_PROFILE\n        GROUP BY name ;\n        --------------------------------------------------------------------\n                INSERT\n                INTO TBL_TIMING_PROFILE_detail\n                  (\n                    REF_TIMING_PROFILE,\n                    PERIOD_NAME,\n                    PERIOD_DATE,\n                    PERIOD_START,\n                    PERIOD_END,\n                    PERIOD_COLOR,\n                    PERIOD_STATUS\n                  )\n                  (SELECT outpar_id,\n                      PERIOD_NAME,\n                      PERIOD_DATE,\n                      PERIOD_START,\n                      PERIOD_END,\n                      PERIOD_COLOR,\n                      PERIOD_STATUS\n                    FROM TBL_TIMING_PROFILE_DETAIL,\n                      tbl_TIMING_profile\n                    WHERE REF_TIMING_PROFILE=tbl_TIMING_profile.id\n                    AND REF_TIMING_PROFILE  = max_id\n                  );\n                COMMIT;\n        SELECT COUNT(*)\n        INTO var_count\n        FROM TBL_TIMING_PROFILE_DETAIL\n        WHERE PERIOD_NAME      =inpar_PERIOD_NAME\n       AND REF_TIMING_PROFILE = inpar_REF_TIMING_PROFILE;\n       --AND REF_TIMING_PROFILE =max_id;\n        IF (var_count          =0) THEN\n          INSERT\n          INTO TBL_TIMING_PROFILE_DETAIL\n            (\n              REF_TIMING_PROFILE,\n              PERIOD_NAME,\n              PERIOD_DATE,\n              PERIOD_START,\n              PERIOD_END,\n              PERIOD_COLOR,\n              PERIOD_STATUS\n            )\n            VALUES\n            (\n              iidd ,\n              inpar_PERIOD_NAME ,\n              inpar_PERIOD_DATE ,\n              -- inpar_PERIOD_START ,\n              to_date(inpar_PERIOD_START,'yyyy/mm/dd','nls_calendar=persian'),\n              --inpar_PERIOD_END ,\n              to_date(inpar_PERIOD_END,'yyyy/mm/dd','nls_calendar=persian'),\n              inpar_PERIOD_COLOR ,\n              inpar_PERIOD_STATUS\n            );\n          COMMIT;\n          SELECT id\n          INTO outpar_id\n          FROM TBL_TIMING_PROFILE_DETAIL\n          WHERE PERIOD_NAME      = inpar_PERIOD_NAME\n          AND REF_TIMING_PROFILE = iidd;\n        ELSE\n          UPDATE TBL_TIMING_PROFILE_DETAIL\n          SET REF_TIMING_PROFILE = iidd ,\n            PERIOD_NAME          = inpar_PERIOD_NAME ,\n            PERIOD_DATE          = inpar_PERIOD_DATE ,\n            PERIOD_START         = to_date(inpar_PERIOD_START,'yyyy/mm/dd','nls_calendar=persian'),\n            PERIOD_END           = to_date(inpar_PERIOD_END,'yyyy/mm/dd','nls_calendar=persian'),\n            PERIOD_COLOR         = inpar_PERIOD_COLOR ,\n            PERIOD_STATUS        = inpar_PERIOD_STATUS\n          WHERE ID               = inpar_id ;\n          COMMIT;\n      \n     END IF;\n     end if;\n--end if;\n\n\n ---------------------------for update  \n  if (inpar_insert_or_update\u003c\u003e1 and inpar_REF_TIMING_PROFILE \u003c\u003e inpar_id) then\n---\n SELECT MAX(id)\n      INTO iidd\n      FROM TBL_TIMING_PROFILE\n      WHERE h_id = INPAR_REF_TIMING_PROFILE\n      GROUP BY name ;\n---\n  INSERT\nINTO TBL_TIMING_PROFILE_DETAIL_TEMP\n  (\n    ID,\n    REF_TIMING_PROFILE,\n    PERIOD_NAME,\n    PERIOD_DATE,\n    PERIOD_START,\n    PERIOD_END,\n    PERIOD_COLOR,\n    PERIOD_STATUS\n  )\n  (SELECT ID,\n  REF_TIMING_PROFILE,\n  PERIOD_NAME,\n  PERIOD_DATE,\n  PERIOD_START,\n  PERIOD_END,\n  PERIOD_COLOR,\n  PERIOD_STATUS\nFROM TBL_TIMING_PROFILE_DETAIL where ref_timing_profile = iidd );\n\n\ncommit;\n\n\n\n UPDATE TBL_TIMING_PROFILE_DETAIL_temp\n        SET \n          PERIOD_NAME          = inpar_PERIOD_NAME ,\n          PERIOD_DATE          = inpar_PERIOD_DATE ,\n          PERIOD_START         = to_date(inpar_PERIOD_START,'yyyy/mm/dd','nls_calendar=persian'),\n          PERIOD_END           = to_date(inpar_PERIOD_END,'yyyy/mm/dd','nls_calendar=persian'),\n          PERIOD_COLOR         = inpar_PERIOD_COLOR ,\n          PERIOD_STATUS        = inpar_PERIOD_STATUS\n        WHERE ID               = inpar_id ;\n       -- where REF_TIMING_PROFILE = inpar_id ;\n        COMMIT;\n INSERT\n      INTO TBL_TIMING_PROFILE\n        (\n          NAME,\n          DES,\n          TYPE,\n          CREATE_DATE,\n          UPDATE_DATE,\n          REF_USER,\n          REF_USER_UPDATE,\n          STATUS,\n          version,\n          H_ID\n        )\n        VALUES\n        (\n          INPAR_NAME,\n          INPAR_DES ,\n          1 ,\n           (SELECT MAX(create_date) FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          sysdate ,\n           (SELECT MAX(REF_USER) FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          INPAR_REF_USER ,\n          INPAR_STATUS,\n          (SELECT MAX(version)+1 FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          inpar_REF_TIMING_PROFILE\n        );\n      COMMIT;\n--      SELECT id\n--      INTO outpar_id\n--      FROM TBL_TIMING_PROFILE\n--      WHERE CREATE_DATE =\n--        (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n--        )\n--      AND id =\n--        (SELECT MAX(id) FROM TBL_TIMING_PROFILE\n--        );\n   SELECT id\n        INTO outpar_id\n        FROM TBL_TIMING_PROFILE\n        WHERE  id =\n          (SELECT MAX(id) FROM TBL_TIMING_PROFILE where h_id = Inpar_Ref_Timing_Profile\n          );\n          \n        \n        INSERT\nINTO TBL_TIMING_PROFILE_DETAIL\n  (\n   \n    REF_TIMING_PROFILE,\n    PERIOD_NAME,\n    PERIOD_DATE,\n    PERIOD_START,\n    PERIOD_END,\n    PERIOD_COLOR,\n    PERIOD_STATUS\n  )\n  (SELECT \n  outpar_id,\n  PERIOD_NAME,\n  PERIOD_DATE,\n  PERIOD_START,\n  PERIOD_END,\n  PERIOD_COLOR,\n  PERIOD_STATUS\nFROM TBL_TIMING_PROFILE_DETAIL_temp where ref_timing_profile=iidd );\ncommit;\n EXECUTE immediate 'truncate table TBL_TIMING_PROFILE_DETAIL_temp';\n\n   end if;\n   END IF;\n   \n   delete from tbl_TIMING_profile_detail where  period_status=0;\n    commit;\n    -----------------------\n    update tbl_timing_profile \nset status = 0\nwhere id not in (select max(id) from tbl_timing_profile group by h_id);\ncommit;\n    \nprc_is_empty();\nprc_update_dashboard_id();\nprc_update_report_id();\nprc_update_PERIOD_DURATION();\n\n--notif\nfor i in (select * from tbl_report_profile\nwhere  REF_REPORT in (select distinct ref_report from TBL_NOTIFICATIONS)\n)\nloop\n\nif (i.REF_LEDGER_PROFILE = outpar_id or i.REF_PROFILE_TIME = outpar_id or i.REF_PROFILE_CURRENCY = outpar_id or \ni.REF_PROFILE_CUSTOMER = outpar_id or i.REF_PROFILE_BRANCH = outpar_id or i.REF_PROFILE_DEPOSIT = outpar_id or i.REF_PROFILE_LOAN = outpar_id)\nthen\nupdate \nTBL_NOTIFICATIONS\nset flag = 1\nwhere tbl_notifications.ref_report = i.ref_report;\nend if;\nend loop;\n--end notif\nEND PRC_TIMING_PROFILE_DETAIL;"},{"Name":"PRC_DELETE_PROFILE","ObjectID":272261,"Digest":"be5bc282e96a82c0e8a378ad3dae55bf18582778535f0cccd1a237c8777f90cb","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DELETE_PROFILE\" (\n    inpar_id IN NUMBER ,\n    INPAR_TYPE VARCHAR2,\n    output OUT VARCHAR2 )\nAS\n  --------------------------------------------------------------------------------\n  /*\n  Programmer Name: NAVID\n  Release Date/Time:1396/03/21-16:00\n  Version: 1.0\n  Category:2\n  Description: bar asase noE profile va Id profile status an profile az yek be \n               sefr taghir mikonad ke dar asl be sorate manteghi hazf migardad na\n               phiziki.\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n\n  IF(upper(INPAR_TYPE) \u003c\u003e'TBL_LEDGER' and upper(INPAR_TYPE) \u003c\u003e 'TARIKH' and upper(INPAR_TYPE) \u003c\u003e'BAZEH') THEN\n    UPDATE tbl_profile SET STATUS = 0 WHERE H_ID = inpar_id;\n    COMMIT;\n    output:=NULL;\n    else if(upper(INPAR_TYPE)='TBL_LEDGER') then\n     UPDATE tbl_ledger_profile SET status=0 WHERE H_ID = inpar_id;\n    COMMIT;\n    output:=NULL;\n  ELSE if(upper(INPAR_TYPE) ='TARIKH' or upper(INPAR_TYPE) ='BAZEH') then\n    UPDATE tbl_timing_profile SET status=0 WHERE H_ID = inpar_id;\n    COMMIT;\n    output:=NULL;\n  END IF;\n  end if;\n  end if;\n --------------------------------------------------------------------------------\n  --if(INPAR_TYPE is null) then\n  --  delete from TBL_PROFILE where id = inpar_id;\n  --  commit;\n  --  DELETE FROM tbl_profile_detail WHERE REF_PROFILE = inpar_id;\n  --  commit;\n  --  output:=null;\n  --\n  --  else\n  --   delete from TBL_TIMING_PROFILE where id = inpar_id;\n  --  commit;\n  --  DELETE FROM tbl_TIMING_profile_detail WHERE REF_TIMING_PROFILE = inpar_id;\n  --  commit;\n  --  output:=null;\n  --  end if;\n  ------------------------------------------------------------------------------\nEND prc_delete_profile;"},{"Name":"PRC_TRANSFER_CUSTOMER","ObjectID":272781,"Digest":"29c82e6febce66dd2ad54a2c6a443c2edff576a5fba7762cb115a7f0a111c953","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TRANSFER_CUSTOMER\" AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:enteghal moshtariha ha az server bank be pragg\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n   INSERT \n   /*+ APPEND PARALLEL(auto)   */\n  INTO TBL_CUSTOMER\n    (\n      CUS_ID,\n      NAME,\n      FAMILY,\n      NAT_REG_CODE,\n      ADDRESS,\n      BIRTHDATE,\n      GENDER,\n      TYPE,\n      BRANCH_ID\n    )\n  SELECT /*+   PARALLEL(auto)   */ DISTINCT CUSTOMERNO,\n   case when  FIRSTNAME is null then CUTOMERNAME else FIRSTNAME end as FIRSTNAME ,\n    LASTNAME,\n    SSN,\n    '',\n    BIRTH_DATE,\n    '',\n    CUSTOMERTYPE,\n    BR_CODE+10000\n  FROM DADEKAVAN_DAY.etelaate_moshtari;\n  COMMIT ;\n  INSERT INTO TBL_CUSTOMER\n    (CUS_ID, NAME, FAMILY\n    )\n  SELECT 99999, 'ناشناس', '' FROM dual;\n  COMMIT ;\nEND PRC_TRANSFER_Customer;"},{"Name":"PRC_TRANSFER_LEDGER","ObjectID":272782,"Digest":"45664ca8ee4e2c7893f2359a764be6a3dc855a11587796293f0a0f5d03a6e5ef","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TRANSFER_LEDGER\" AS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:enteghal daftarkol ha az server bank be pragg\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n\nexecute immediate 'truncate table TBL_LEDGER';\n  /******ebteda hame bargha ra dar TBL_LEDGER mirizim va baed az an be tartib sath be sath bala miaim va sum childha ro hesab mikonim ******/\n\nINSERT INTO TBL_LEDGER (LEDGER_CODE,NAME,PARENT_CODE,node_TYPE,DEPTH)     select gl_code,fnc_FarsiValidate(gl_name),substr(gl_code,1,7)||'00',case when GL_CODE like '1%'or GL_CODE like '4%' or GL_CODE like '6%' then 1\n    when GL_CODE like '2%'or GL_CODE like '3%' or GL_CODE like '5%' or GL_CODE like '7%' then 2\n    end  as nd,5 from DADEKAVAN_DAY.gf1glet  where substr (gl_code,8,2) != 0;\n  commit;\nINSERT INTO TBL_LEDGER (LEDGER_CODE,NAME,PARENT_CODE,node_TYPE,DEPTH)     select gl_code,fnc_FarsiValidate(gl_name),substr(gl_code,1,5)||'0000',case when GL_CODE like '1%'or GL_CODE like '4%' or GL_CODE like '6%' then 1\n    when GL_CODE like '2%'or GL_CODE like '3%' or GL_CODE like '5%' or GL_CODE like '7%' then 2\n    end  as nd,4 from DADEKAVAN_DAY.gf1glet where substr(gl_code,6,2) != 0 and substr(gl_code,8,2) = 0;\n  commit;\nINSERT INTO TBL_LEDGER (LEDGER_CODE,NAME,PARENT_CODE,node_TYPE,DEPTH)     select gl_code,fnc_FarsiValidate(gl_name),substr(gl_code,1,3)||'000000',case when GL_CODE like '1%'or GL_CODE like '4%' or GL_CODE like '6%' then 1\n    when GL_CODE like '2%'or GL_CODE like '3%' or GL_CODE like '5%' or GL_CODE like '7%' then 2\n    end  as nd,3 from DADEKAVAN_DAY.gf1glet where substr(gl_code,4,2) != 0 and substr(gl_code,6,4) = 0;\n  commit;\nINSERT INTO TBL_LEDGER (LEDGER_CODE,NAME,PARENT_CODE,node_TYPE,DEPTH)     select gl_code,fnc_FarsiValidate(gl_name),substr(gl_code,1,1)||'00000000',case when GL_CODE like '1%'or GL_CODE like '4%' or GL_CODE like '6%' then 1\n    when GL_CODE like '2%'or GL_CODE like '3%' or GL_CODE like '5%' or GL_CODE like '7%' then 2\n  end  as nd,2 from DADEKAVAN_DAY.gf1glet where substr(gl_code,2,2) != 0 and substr(gl_code,4,6) = 0;\n  commit;\nINSERT INTO TBL_LEDGER (LEDGER_CODE,NAME,PARENT_CODE,node_TYPE,DEPTH)     select gl_code,fnc_FarsiValidate(gl_name),0,case when GL_CODE like '1%'or GL_CODE like '4%' or GL_CODE like '6%' then 1\n    when GL_CODE like '2%'or GL_CODE like '3%' or GL_CODE like '5%' or GL_CODE like '7%' then 2\n  end  as nd,1 from DADEKAVAN_DAY.gf1glet where substr(gl_code,1,1) != 0 and substr(gl_code,2,8) = 0;\n  commit;\n    /******ezafe kardanerishe be derakht ******/\n\nINSERT INTO TBL_LEDGER (LEDGER_CODE,NAME,PARENT_CODE,node_TYPE,DEPTH)     values (000000,'ريشه',null,null,0);\n  commit;\n\nEND PRC_TRANSFER_LEDGER;"},{"Name":"PRC_TRANSFER_BRANCH","ObjectID":272784,"Digest":"ba67ed76cd39a38e9d4731b652a57a04801cda4740dd2a13bf73bb301fc2afea","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TRANSFER_BRANCH\" AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Moeteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:enteghal shobe ha az server bank be pragg\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n   INSERT\n  INTO TBL_BRANCH\n    (\n      BRN_ID,\n      NAME,\n      REF_CTY_ID,\n      CITY_NAME,\n      REF_STA_ID,\n      STA_NAME\n    )\n  SELECT CODE+10000,\n    BR_NAME,\n    SHAHR_CODE,\n    SHAHR_NAME,\n    '',\n    ''\n  FROM DADEKAVAN_DAY.ETELAATE_SHOBE ;\nEND PRC_TRANSFER_BRANCH;"},{"Name":"PRC_TRANSFER_CITY","ObjectID":272785,"Digest":"ce872b6297c6ec12d057c6724d189729d6c04c0bffb04db32c9d80df042c75c9","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TRANSFER_CITY\" AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:enteghal shar ha az server bank be pragg\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n    INSERT\n  INTO TBL_CITY\n    (\n      CTY_ID,\n      CTY_NAME,\n      DES,\n      REF_STA_ID\n    )\n  SELECT DISTINCT SHAHR_CODE,\n    DADEKAVAN_DAY.ETELAATE_SHOBE.SHAHR_NAME,\n    '',\n    ''\n  FROM DADEKAVAN_DAY.ETELAATE_SHOBE ;\nEND PRC_TRANSFER_CITY;"},{"Name":"PRC_TRANSFER_CURRENCY_REL","ObjectID":272786,"Digest":"60e8c26c62109e4103530ac1214d0e5aa417ba0741da825dcaa2f65ee6b09027","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TRANSFER_CURRENCY_REL\" AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:enteghal rabete arzha ha az server bank be pragg\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n  INSERT\n  INTO TBL_CURRENCY_REL\n    (\n      SRC_CUR_ID,\n      DEST_CUR_ID,\n      REL_DATE,\n      CHANGE_RATE\n    )\n  SELECT b.CUR_ID,\n    4,\n    sysdate,\n    RATE_AMOUNT\n  FROM DADEKAVAN_DAY.ARZ_RELATION a,\n    TBL_CURRENCY b\n  WHERE B.SWIFT_CODE   =A.Code\n  AND a.EFFDATE =\n    (SELECT DISTINCT MAX(EFFDATE) FROM DADEKAVAN_DAY.ARZ_RELATION\n    ) ;\nEND PRC_TRANSFER_CURRENCY_REL;"},{"Name":"PRC_TRANSFER_LOAN_TYPE","ObjectID":272931,"Digest":"24cc0c34e82d7087986365b540280388b38f8a421896c8ed291cf7ecbd039a9e","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TRANSFER_LOAN_TYPE\" AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:enteghal noe tashilat ha az server bank be pragg\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n   INSERT\n  INTO TBL_LOAN_TYPE\n    (\n      REF_LOAN_TYPE,\n      NAME\n    )\n  SELECT DISTINCT SUBSTR(TYPE_CODE,3,3),\n    CASE\n      WHEN MAX(TITLE) IS NULL\n      THEN 'تسهيلات نوع '\n        ||SUBSTR(TYPE_CODE,3,3)\n      ELSE MAX(TITLE)\n    END\n  FROM DADEKAVAN_DAY.NOE_TASHILAT\n  GROUP BY SUBSTR(TYPE_CODE,3,3);\n  commit;\nEND PRC_TRANSFER_LOAN_TYPE;"},{"Name":"PRC_TRANSFER_DEPOSIT_TYPE","ObjectID":272932,"Digest":"735c468be38d8ce697e315bac89ec43e45ade30fa9bc813a3bae8132e63a5736","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TRANSFER_DEPOSIT_TYPE\" AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi joooooooooooooooon\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:enteghal noe sepordeha ha az server bank be pragg\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n  INSERT\n  INTO TBL_DEPOSIT_TYPE\n    (\n      REF_DEPOSIT_TYPE ,\n      NAME\n    )\n  SELECT DISTINCT SUBSTR(DP_TYPE_CODE,3,4),\n    TITLE\n  FROM DADEKAVAN_DAY.NOE_SEPORDE;\n  commit;\n--  update TBL_DEPOSIT_TYPE dt set dt.REF_MODALITY_TYPE =\n--  ( select distinct( MODALITY_TYPE) from akin.tbl_deposit where AKIN.TBL_DEPOSIT.REF_DEPOSIT_TYPE = dt.REF_DEPOSIT_TYPE\n--  );\n  commit;\n  \n  \nEND PRC_TRANSFER_DEPOSIT_TYPE;"},{"Name":"PRC_AGGREGATION","ObjectID":272951,"Digest":"80eb77b58eb681d3bdb7f1cbb13bd68168bd94d6c708a6d583439f0b5568f747","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_AGGREGATION\" ( INPAR_REF_REQ_ID IN NUMBER ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: rasool.jahani,morteza.sahi\n  Editor Name:\n  Release Date/Time:1396/04/26-10:00\n  Edit Name:\n  Version: 1\n  Description: enteghal har code sarfasl dar har baze zamani be jadval aggrigation\n               enteghal profile zamani be jadval repper\n               tajmie daftar kol baraye har baze zamani dar repval\n  */\n  /*------------------------------------------------------------------------------*/\n\n VAR_REF_REPORT_ID          NUMBER;\n VAR_REF_LEDGER_PROFILE     NUMBER;\n VAR_REF_PROFILE_TIME       NUMBER;\n VAR_MAX_LEVEL_LEDGER       NUMBER;\n VAR_CNT_REF_PROFILE_TIME   NUMBER;\n VAR_DATE_INSERT            DATE;\n VAR_MAX_EFFDATE_LEDGER     DATE;\n LOC_S                      TIMESTAMP;\n LOC_F                      TIMESTAMP;\n LOC_MEGHDAR                NUMBER;\nBEGIN\n EXECUTE IMMEDIATE 'truncate table TBL_VALUE_AGGRIGATION';\n  \n /*EXECUTE IMMEDIATE 'truncate table tbl_other_ledger_code';*/\n SELECT\n  MAX(EFF_DATE)\n INTO\n  VAR_MAX_EFFDATE_LEDGER\n FROM TBL_LEDGER_ARCHIVE; /*-----****************************************************/\n \n\n    /****** be dast avardane profil haye gozaresh mord niaz va bishtarin sathe daftar kol *****--*/\n\n SELECT\n  REF_REPORT_ID\n INTO\n  VAR_REF_REPORT_ID\n FROM TBL_REPREQ\n WHERE ID   = INPAR_REF_REQ_ID;\n\n SELECT\n  REF_LEDGER_PROFILE\n INTO\n  VAR_REF_LEDGER_PROFILE\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = VAR_REF_REPORT_ID;\n\n SELECT\n  REF_PROFILE_TIME\n INTO\n  VAR_REF_PROFILE_TIME\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = VAR_REF_REPORT_ID;\n\n SELECT\n  TO_NUMBER(MAX(DEPTH) )\n INTO\n  VAR_MAX_LEVEL_LEDGER\n FROM TBL_LEDGER_PROFILE_DETAIL\n WHERE REF_LEDGER_PROFILE   = VAR_REF_LEDGER_PROFILE;\n\n SELECT\n  SYSDATE\n INTO\n  VAR_DATE_INSERT\n FROM DUAL;\n  \n  \n  /******enteghal har code sarfasl dar har baze zamani be jadval aggrigation******/\n\n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_VALUE_AGGRIGATION ( LEDGER_CODE,BALANCE,REF_TIMING_ID, CUR_TYPE )SELECT /*+   PARALLEL(auto)   */\n      REF_LEGER_CODE ,\n      SUM(BALANCE) ,\n      REF_TIMING_ID,\n      CASE WHEN REF_CUR_ID = 4 THEN 0 ELSE 1 END\n    FROM TBL_VALUE_TEMP\n       GROUP BY \n    REF_LEGER_CODE, REF_TIMING_ID , CASE WHEN REF_CUR_ID = 4 THEN 0 ELSE 1 END;\n\n COMMIT;\n \n\n      /******  ezefe kardane code sarfaslhaee ke dar value nabode ba code meghdar \"0\"  *****--*/\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_VALUE_AGGRIGATION ( LEDGER_CODE,BALANCE,REF_TIMING_ID,CUR_TYPE ) SELECT\n  /*+   PARALLEL(auto)   */\n  A.LEDGER_CODE,\n  0,\n  B.REF_TIMING_ID,\n  1\nFROM\n  (SELECT\n    /*+   PARALLEL(auto)   */\n    DISTINCT tla.LEDGER_CODE\n  FROM tbl_ledger_archive tla\n  INNER JOIN tbl_ledger_profile_detail tlpd\n  ON tla.LEDGER_CODE           = tlpd.CODE\n  WHERE tlpd.REF_LEDGER_PROFILE= VAR_REF_LEDGER_PROFILE\n  AND tlpd.DEPTH               = VAR_MAX_LEVEL_LEDGER\n\n  )A,\n  (SELECT\n    /*+   PARALLEL(auto)   */\n    DISTINCT REF_TIMING_ID\n  FROM TBL_VALUE_AGGRIGATION\n  WHERE REF_TIMING_ID IS NOT NULL\n  AND REF_TIMING_ID   \u003c\u003e 0\n  )B\nWHERE NOT EXISTS\n  (SELECT\n    /*+   PARALLEL(auto)   */\n    TVA.LEDGER_CODE,\n    TVA.REF_TIMING_ID\n  FROM TBL_VALUE_AGGRIGATION TVA\n  WHERE A.LEDGER_CODE = TVA.LEDGER_CODE\n  AND B.REF_TIMING_ID = TVA.REF_TIMING_ID\n  AND TVA.CUR_TYPE    = 1\n  );\n\n COMMIT;\n \n \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_VALUE_AGGRIGATION ( LEDGER_CODE,BALANCE,REF_TIMING_ID,CUR_TYPE ) SELECT\n  /*+   PARALLEL(auto)   */\n  A.LEDGER_CODE,\n  0,\n  B.REF_TIMING_ID,\n  0\nFROM\n  (SELECT\n    /*+   PARALLEL(auto)   */\n    DISTINCT tla.LEDGER_CODE\n  FROM tbl_ledger_archive tla\n  INNER JOIN tbl_ledger_profile_detail tlpd\n  ON tla.LEDGER_CODE           = tlpd.CODE\n  WHERE tlpd.REF_LEDGER_PROFILE= VAR_REF_LEDGER_PROFILE\n  AND tlpd.DEPTH               = VAR_MAX_LEVEL_LEDGER\n\n  )A,\n  (SELECT\n    /*+   PARALLEL(auto)   */\n    DISTINCT REF_TIMING_ID\n  FROM TBL_VALUE_AGGRIGATION\n  WHERE REF_TIMING_ID IS NOT NULL\n  AND REF_TIMING_ID   \u003c\u003e 0\n  )B\nWHERE NOT EXISTS\n  (SELECT\n    /*+   PARALLEL(auto)   */\n    TVA.LEDGER_CODE,\n    TVA.REF_TIMING_ID\n  FROM TBL_VALUE_AGGRIGATION TVA\n  WHERE A.LEDGER_CODE = TVA.LEDGER_CODE\n  AND B.REF_TIMING_ID = TVA.REF_TIMING_ID\n  AND TVA.CUR_TYPE    = 0\n  );\n\n COMMIT;\n\n \n \n\n      /******  ezefe kardane mande be onvan yek repper   *****--*/\n-- INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_VALUE_AGGRIGATION ( LEDGER_CODE,BALANCE,REF_TIMING_ID ) SELECT /*+  PARALLEL(auto)   */\n--  REF_LEGER_CODE\n-- ,BALANCE\n-- ,-1\n-- FROM TBL_VALUE_TEMP\n-- WHERE TBL_VALUE_TEMP.DUE_DATE IS NULL;\n--\n-- COMMIT;\n\n\n\n      /******  ezefe kardane mande be onvan yek repper   *****--*/\n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_VALUE_AGGRIGATION ( LEDGER_CODE,BALANCE,REF_TIMING_ID, CUR_TYPE ) SELECT\n  /*+   PARALLEL(auto)   */\n   tla.LEDGER_CODE,\n   tla.BALANCE,\n   0,\n   0\n  FROM tbl_ledger_archive tla\n  INNER JOIN tbl_ledger_profile_detail tlpd\n  ON tla.LEDGER_CODE           = tlpd.CODE\n  WHERE tlpd.REF_LEDGER_PROFILE= VAR_REF_LEDGER_PROFILE\n  AND tlpd.DEPTH               = VAR_MAX_LEVEL_LEDGER\n\n  AND tla.REF_CUR_ID = 4;\n\n COMMIT;\n\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_VALUE_AGGRIGATION ( LEDGER_CODE,BALANCE,REF_TIMING_ID, CUR_TYPE ) SELECT\n  /*+   PARALLEL(auto)   */\n   tla.LEDGER_CODE,\n   tla.BALANCE,\n   0,\n   1\n  FROM tbl_ledger_archive tla\n  INNER JOIN tbl_ledger_profile_detail tlpd\n  ON tla.LEDGER_CODE           = tlpd.CODE\n  WHERE tlpd.REF_LEDGER_PROFILE= VAR_REF_LEDGER_PROFILE\n  AND tlpd.DEPTH               = VAR_MAX_LEVEL_LEDGER\n\n  AND tla.REF_CUR_ID \u003c\u003e 4;\n\n COMMIT;\n  \n  /*--------------TBL_REPPER-----------------*/\n  /******enteghal profile zamani be jadval repper*****--*/\n  /*-----------------------------------------*/\n INSERT INTO TBL_REPPER (\n  REF_TIMING_PROFILE\n ,PERIOD_NAME\n ,PERIOD_DATE\n ,PERIOD_START\n ,PERIOD_END\n ,PERIOD_COLOR\n ,REF_REPORT_ID\n ,OLD_ID\n ,REF_REQ_ID\n ) SELECT\n  REF_TIMING_PROFILE\n ,PERIOD_NAME\n ,PERIOD_DATE\n ,PERIOD_START\n ,PERIOD_END\n ,PERIOD_COLOR\n ,VAR_REF_REPORT_ID\n ,ID\n ,INPAR_REF_REQ_ID\n FROM TBL_TIMING_PROFILE_DETAIL\n WHERE REF_TIMING_PROFILE   = VAR_REF_PROFILE_TIME;\n\n COMMIT;\n  /*-----------------------------------------*/\n   /******tajmie daftar kol baraye har baze zamani dar repval (enteghale barghaye tajmie shode be repval)*****--*/\n  /*-----------------------------------------*/\n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_REPVAL (\n  REF_REPREQ_ID\n ,REF_REPPER_ID\n ,LEDGER_CODE\n ,VALUE\n ,PARENT_CODE\n ,DEPTH\n ,NAME\n ,CUR_TYPE\n ) SELECT /*+   PARALLEL(auto)   */\n  INPAR_REF_REQ_ID\n , CASE\n    WHEN NVL(\n     (\n      SELECT  /*+   PARALLEL(auto)   */\n       ID\n      FROM TBL_REPPER\n      WHERE OLD_ID          = TVA.REF_TIMING_ID\n       AND\n        REF_REPORT_ID   = VAR_REF_REPORT_ID\n       AND\n        REF_REQ_ID      = INPAR_REF_REQ_ID\n     )\n    ,0\n    ) = 0 THEN TVA.REF_TIMING_ID\n   else  NVL( to_char(\n     (\n      SELECT  /*+   PARALLEL(auto)   */\n       ID\n      FROM TBL_REPPER\n      WHERE OLD_ID          = TVA.REF_TIMING_ID\n       AND\n        REF_REPORT_ID   = VAR_REF_REPORT_ID\n       AND\n        REF_REQ_ID      = INPAR_REF_REQ_ID\n     ))\n    ,0\n    ) \n   END\n  AS REF_TIMING_ID\n ,TVA.LEDGER_CODE\n ,TVA.BALANCE\n ,TLPD.PARENT_CODE\n ,VAR_MAX_LEVEL_LEDGER\n ,TLPD.NAME\n ,TVA.CUR_TYPE\n FROM TBL_VALUE_AGGRIGATION TVA\n ,    TBL_LEDGER_PROFILE_DETAIL TLPD\n WHERE TLPD.CODE                 = TVA.LEDGER_CODE\n  AND\n   TLPD.REF_LEDGER_PROFILE   = VAR_REF_LEDGER_PROFILE;\n\n COMMIT;\n  /*-----------------------------------------*/\n     /******tajmie daftar kol baraye har baze zamani dar repval barasas daftar kole taen shode *****--*/\n  /*-----------------------------------------*/\n FOR I IN  0..1 LOOP \n   FOR J IN REVERSE 1..VAR_MAX_LEVEL_LEDGER LOOP\n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_REPVAL (\n     REF_REPREQ_ID\n    ,REF_REPPER_ID\n    ,LEDGER_CODE\n    ,VALUE\n    ,PARENT_CODE\n    ,DEPTH\n    ,NAME\n    ,CUR_TYPE\n    ) SELECT /*+  PARALLEL(auto)   */ DISTINCT\n     INPAR_REF_REQ_ID\n    ,A.REF_REPPER_ID\n    ,B.CODE\n    ,NVL(A.VALUE,0)\n    ,B.PARENT_CODE\n    ,J\n    ,B.NAME\n    ,I\n    FROM (\n      SELECT  /*+   PARALLEL(auto)   */\n       MAX(TR.REF_REPREQ_ID) AS REF_REPREQ_ID\n      ,TR.REF_REPPER_ID\n      ,TR.PARENT_CODE AS CODE\n      ,SUM(NVL(TR.VALUE,0) ) AS VALUE\n      ,MAX(TLPD.PARENT_CODE) AS PARENT_CODE\n      FROM TBL_REPVAL TR\n       LEFT JOIN TBL_LEDGER_PROFILE_DETAIL TLPD ON TLPD.CODE   = TR.PARENT_CODE\n      WHERE TLPD.DEPTH                = J\n       AND\n        TLPD.REF_LEDGER_PROFILE   = VAR_REF_LEDGER_PROFILE\n       AND\n        TR.REF_REPREQ_ID          = INPAR_REF_REQ_ID         /*------------------------*/\n       AND\n        TR.CUR_TYPE = I\n      GROUP BY\n       TR.PARENT_CODE\n      ,TR.REF_REPPER_ID\n     ) A\n     RIGHT JOIN (\n      SELECT  /*+   PARALLEL(auto)   */\n       *\n      FROM TBL_LEDGER_PROFILE_DETAIL\n      WHERE DEPTH                = J\n       AND\n        REF_LEDGER_PROFILE   = VAR_REF_LEDGER_PROFILE\n     ) B ON A.CODE   = B.CODE;\n  \n    COMMIT;\n    END LOOP;\n END LOOP;\n  \n     /******peyda kardan tedade kole bazeha bezafe 1 baze ke baraye mande hast*****--*/\n\n SELECT  /*+   PARALLEL(auto)   */\n  COUNT(*) + 1\n INTO\n  VAR_CNT_REF_PROFILE_TIME\n FROM TBL_REPPER\n WHERE REF_REPORT_ID   = VAR_REF_REPORT_ID;\n \n       /******hazf kardan va hazf kardab node haye ke eshtebah vard shodan(bedone zaman hastand)*****--*/\n DELETE FROM (\n  SELECT\n   *\n  FROM TBL_REPVAL\n  WHERE LEDGER_CODE IN (\n    SELECT  /*+   PARALLEL(auto)   */\n     LEDGER_CODE\n    FROM TBL_REPVAL\n    WHERE TBL_REPVAL.REF_REPREQ_ID = INPAR_REF_REQ_ID AND  TBL_REPVAL.CUR_TYPE = 0\n    GROUP BY\n     LEDGER_CODE\n    HAVING COUNT(*) \u003e VAR_CNT_REF_PROFILE_TIME\n   )\n ) WHERE REF_REPPER_ID IS NULL;\n\n COMMIT;\n\n DELETE FROM (\n  SELECT\n   *\n  FROM TBL_REPVAL\n  WHERE LEDGER_CODE IN (\n    SELECT  /*+   PARALLEL(auto)   */\n     LEDGER_CODE\n    FROM TBL_REPVAL\n    WHERE TBL_REPVAL.REF_REPREQ_ID = INPAR_REF_REQ_ID AND  TBL_REPVAL.CUR_TYPE = 1\n    GROUP BY\n     LEDGER_CODE\n    HAVING COUNT(*) \u003e VAR_CNT_REF_PROFILE_TIME\n   )\n ) WHERE REF_REPPER_ID IS NULL;\n\n COMMIT;\n   /******ezafe kardane name code sarfaslha baraye jologiri az join ezafe dar namayesh gozaresh*****--*/\n-- UPDATE TBL_REPVAL T\n--  SET\n--   T.NAME = (\n--    SELECT\n--     NAME\n--    FROM TBL_LEDGER_PROFILE_DETAIL\n--    WHERE TBL_LEDGER_PROFILE_DETAIL.REF_LEDGER_PROFILE   = VAR_REF_LEDGER_PROFILE\n--     AND\n--      TBL_LEDGER_PROFILE_DETAIL.CODE                 = T.LEDGER_CODE\n--   )\n-- WHERE T.REF_REPREQ_ID   = INPAR_REF_REQ_ID;\n--\n-- COMMIT;\n  /*-----------------------------------------*/\n LOC_F         := SYSTIMESTAMP;\n LOC_MEGHDAR   := SQL%ROWCOUNT;\n      EXCEPTION \n      WHEN OTHERS THEN\n     RAISE;\n  /*-----------------------------------------*/\nEND PRC_AGGREGATION;"},{"Name":"PRC_RESET","ObjectID":272970,"Digest":"f7ffb32be9eee349c98ad0d2870eb1ea4d2137a89dd137afc4f22dd9fdb84c96","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_RESET\" AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:truncate kardan jadval hay asli system be manzor ejray mojadad\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n\n  EXECUTE IMMEDIATE 'truncate table TBL_LEDGER';\n -- EXECUTE IMMEDIATE 'truncate table TBL_CURRENCY_REL';\n -- EXECUTE IMMEDIATE 'truncate table TBL_STATE';\n  EXECUTE IMMEDIATE 'truncate table TBL_CUSTOMER';\n  EXECUTE IMMEDIATE 'truncate table TBL_LOAN_TYPE';\n  EXECUTE IMMEDIATE 'truncate table TBL_DEPOSIT_TYPE';\n  EXECUTE IMMEDIATE 'truncate table TBL_BRANCH';\n  EXECUTE IMMEDIATE 'truncate table TBL_CITY';\n \n  END PRC_RESET;"},{"Name":"PRC_LIKEN","ObjectID":273392,"Digest":"efb88129b273654966e361626ace93c1c31ecd393090bab6736aa300b89769a4","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LIKEN\" (\n    INPAR_RUNDATE IN DATE )\nAS\nBEGIN\n  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_CUR_ID,\n    REF_CUS_ID,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_ID,\n    REF_BRANCH,\n    DUE_DATE,\n    BALANCE,\n    other_type\n  )\nWITH t_hami AS\n  (SELECT REF_LEGER_CODE as id,\n    SUM(BALANCE) as mande,\n    COUNT(balance) as cnt,\n    REF_CUR_ID as arz,\n    max(other_type) as other\n  FROM tbl_value\n  GROUP BY REF_LEGER_CODE,\n    ref_cur_id--t_hami\n  ),\n  t_df\nAS\n  (SELECT ledger_code as id,\n    SUM(ABS(balance)) as mande,\n    REF_CUR_ID as arz\n  FROM TBL_LEDGER_ARCHIVE\n  where eff_date = INPAR_RUNDATE\n  GROUP BY LEDGER_CODE,\n    REF_CUR_ID --t_df\n  ),\n   DIFF AS\n  (SELECT DF.ID,\n    ((DF.MANDE - TH.MANDE)/th.mande) DIV,\n    df.arz,\n    th.other\n  FROM T_DF DF,\n    T_HAMI TH\n  WHERE   TH.ID    = DF.ID\n--  AND (TH.ID LIKE '1%'\n--  OR TH.ID LIKE '2%')\n  )\nSELECT --0,\nh.ref_modality_type,\n  H.ref_cur_id,\n  H.ref_cus_id,\n  H.ref_type,\n  H.ref_leger_code,\n  H.ref_id,\n  H.ref_branch,\n  H.due_date,\n\n  CASE\n    WHEN REF_id IS not NULL\n    THEN FLOOR(DIV*NVL(balance, 0))\n    ELSE NULL\n  END BED,\n  6\nFROM DIFF D\nJOIN TBL_VALUE H\nON D.ID    = H.ref_leger_code\nWHERE DIV \u003c\u003e 0;\ncommit;\n\nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    BALANCE,\n    DUE_DATE,\n    other_type,\n    ref_id,\n    ref_cty_id,\n    ref_cus_id,\n    ref_branch\n  )\n\n\nWITH t_hami AS\n  (SELECT REF_LEGER_CODE as id,\n   max(rEF_MODALITY_TYPE) as modal,\n    SUM(BALANCE) as mande,\n    COUNT(nvl(balance,0)) as cnt,\n    REF_CUR_ID as arz,\n    max(other_type) as other,\n    max(ref_id) as code,\n    max(ref_cty_id) as city_id,\n    max(ref_cus_id) as cus_id,\n    max(ref_branch) as branch_id\n  FROM tbl_value\n  GROUP BY REF_LEGER_CODE,\n    ref_cur_id--t_hami\n  ),\n  t_df\nAS\n  (SELECT ledger_code as id,\n    SUM(ABS(balance)) as mande,\n    REF_CUR_ID as arz\n  FROM TBL_LEDGER_ARCHIVE\n  where eff_date = INPAR_RUNDATE\n  GROUP BY LEDGER_CODE,\n    REF_CUR_ID --t_dif\n  ),\n   DIFF AS\n  (SELECT DF.ID,\n    ((DF.MANDE - TH.MANDE)) DIV,\n    df.arz,\n    modal,\n    other,\n    code,\n    cus_id,\n    branch_id,\n    city_id\n  FROM T_DF DF,\n    T_HAMI TH\n  WHERE  TH.ID    = DF.ID\n-- AND (TH.ID LIKE '1%'\n-- OR TH.ID LIKE '2%')\n  )\nselect modal,id,4,round(div),INPAR_RUNDATE+1,6,code,city_id,cus_id,branch_id\nfrom diff \nwhere div\u003c\u003e0;\n\n\n\ncommit;\n\nEND PRC_LIKEN;"},{"Name":"PRC_REPORT_PROFILE","ObjectID":274169,"Digest":"affaa014d3c35e66547e85b8852f27945af6d409d10a48e3d9e927a431f7d9e0","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_REPORT_PROFILE\" (\n INPAR_INSERT_OR_UPDATE     IN NUMBER\n ,INPAR_NAME                 IN VARCHAR2\n ,INPAR_DES                  IN VARCHAR2\n ,INPAR_CREATE_DATE          IN VARCHAR2\n ,INPAR_REF_USER             IN VARCHAR2\n ,INPAR_STATUS               IN NUMBER\n ,INPAR_REF_LEDGER_PROFILE   IN VARCHAR2\n ,INPAR_REF_TIMING_PROFILE   IN VARCHAR2\n ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2  /*meghdare 1 bazei va meghdare 2 tarikhi*/\n ,INPAR_REF_DEP_PROFILE      IN VARCHAR2\n ,INPAR_REF_LON_PROFILE      IN VARCHAR2\n ,INPAR_REF_BRN_PROFILE      IN VARCHAR2\n ,INPAR_REF_CUS_PROFILE      IN VARCHAR2\n ,INPAR_REF_CUR_PROFILE      IN VARCHAR2\n ,INPAR_TYPE                 IN VARCHAR2\n ,INPAR_CATEGORY             IN VARCHAR2\n ,inpar_liken                in varchar2   -- if \"bazeh\" column  in tbl_report = 1 then use liken else dont use liken\n ,OUTPAR_ID                  OUT VARCHAR2\n) AS \n  /*\n  Programmer Name: sobhan sadeghzadeh\n  Editor Name:\n  Release Date/Time:1396/04/25\n  Edit Name: \n  Version: 1\n  Category:\n  Description: az in prc baraye sakht gozarsh bar asase profile haye entekhab shode estefade mishavad \n  \n  */\n VAR_VERSION      NUMBER;\n VAR_MAX_ID       NUMBER;\n VAR_MIN_ID       NUMBER;\n VAR_NAME_COUNT   VARCHAR2(2000);\nBEGIN\n VAR_VERSION   := 1;\n\n/*barrasi inke aya gozareshi hamname  gozaresh jadid mojud mibashad ya na */\n SELECT\n  COUNT(NAME)\n INTO\n  VAR_NAME_COUNT\n FROM TBL_REPORT\n WHERE NAME       = INPAR_NAME\n  AND\n   STATUS     = 1\n  AND\n   TYPE       = INPAR_TYPE\n  AND\n   CATEGORY   = INPAR_CATEGORY;\n\n/* agar name gozaresh tekrari bashad ,meghdare output=-1 mishavad va gozaresh sakhte nemishavad*/\n\n IF\n  ( INPAR_INSERT_OR_UPDATE = 1 AND VAR_NAME_COUNT != 0 )\n THEN\n  OUTPAR_ID   :=-1;\n  return;\n ELSE\n\n/* if(inpar_insert_or_update= 1)  ==\u003e new report*/\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 1 )\n  THEN\n  --reserve new seq id \n  outpar_id := pragg.TBL_REPORT_SEQ1.nextval;\n  \n   INSERT INTO TBL_REPORT (\n   id, \n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_LEDGER_PROFIEL\n   ,REF_TIMING_PROFILE\n   ,TIMING_PROFILE_TYPE\n   ,REF_DEP_PROFILE\n   ,REF_LON_PROFILE\n   ,REF_BRN_PROFILE\n   ,REF_CUS_PROFILE\n   ,REF_CUR_PROFILE\n   ,VERSION\n   ,TYPE\n   ,CATEGORY\n   ,Bazeh\n   ) VALUES (\n   outpar_id,\n   INPAR_NAME\n   ,INPAR_DES\n  -- ,TO_DATE(INPAR_CREATE_DATE,'yyyy/mm/dd')\n  ,sysdate\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_REF_LEDGER_PROFILE\n   ,INPAR_REF_TIMING_PROFILE\n   ,INPAR_TIMING_PRFILE_TYPE\n   ,INPAR_REF_DEP_PROFILE\n   ,INPAR_REF_LON_PROFILE\n   ,INPAR_REF_BRN_PROFILE\n   ,INPAR_REF_CUS_PROFILE\n   ,INPAR_REF_CUR_PROFILE\n   ,VAR_VERSION\n   ,INPAR_TYPE\n   ,INPAR_CATEGORY\n   ,inpar_liken\n   );\n\n   COMMIT;\n   \n   \n   /*dar TBL_REPORT   max(id) baraye akharin ruz be be dast amade va dar outpar_id rikhte mishavad*/\n--   SELECT\n--    ID\n--   INTO\n--    OUTPAR_ID\n--   FROM TBL_REPORT\n--   WHERE CREATE_DATE   = (\n--      SELECT\n--       MAX(CREATE_DATE)\n--      FROM TBL_REPORT\n--     )\n--    AND\n--     ID            = (\n--      SELECT\n--       MAX(ID)\n--      FROM TBL_REPORT\n--     );\n  /*chon dar inja in gozaresh jadid mibashad ,meghdare h-id barabare id mibashad */\n\n   UPDATE TBL_REPORT\n    SET\n     H_ID = ID\n   WHERE ID   = OUTPAR_ID;\n\n   COMMIT;\n   ELSE   /*update report*/\n /*var_min_id baraye meghdardehi be h_id estefade mishavad.meghdare tamame reporthayi ke ba name anha barabare name vorudi mibashad barabare var_min_id mibashad.  */\n   SELECT\n    MIN(ID)\n   INTO\n    VAR_MIN_ID\n   FROM TBL_REPORT\n   WHERE NAME   = INPAR_NAME\n   and CATEGORY = INPAR_CATEGORY;\n \n /*baraye update ,gozareshe jadidi ba maghadire jadid  dar TBL_REPORT insert mishavad */\n /*meghdare version 1 vahed afzayesh peyda mikonad.*/\n /*meghdare h_id barabare var_min_id mishavad*/\n\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_LEDGER_PROFIEL\n   ,REF_TIMING_PROFILE\n   ,TIMING_PROFILE_TYPE\n   ,REF_DEP_PROFILE\n   ,REF_LON_PROFILE\n   ,REF_BRN_PROFILE\n   ,REF_CUS_PROFILE\n   ,REF_CUR_PROFILE\n   ,VERSION\n   ,H_ID\n   ,TYPE\n   ,CATEGORY\n   ,Bazeh\n   ) VALUES (\n   INPAR_NAME\n   ,INPAR_DES\n   ,sysdate\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_REF_LEDGER_PROFILE\n   ,INPAR_REF_TIMING_PROFILE\n   ,INPAR_TIMING_PRFILE_TYPE\n   ,INPAR_REF_DEP_PROFILE\n   ,INPAR_REF_LON_PROFILE\n   ,INPAR_REF_BRN_PROFILE\n   ,INPAR_REF_CUS_PROFILE\n   ,INPAR_REF_CUR_PROFILE\n   ,(\n     SELECT\n      MAX(VERSION) + 1\n     FROM TBL_REPORT\n    )\n   ,VAR_MIN_ID\n   ,INPAR_TYPE\n   ,INPAR_CATEGORY\n   ,inpar_liken\n   );\n\n   COMMIT;\n   --===============\n   update tbl_report\n   set status = 0\n   where id not in (select max(id) from tbl_report where h_id = VAR_MIN_ID) and name = INPAR_NAME and type = INPAR_TYPE and CATEGORY =  INPAR_CATEGORY ;\n   commit;\n   --================\n   SELECT\n    OUT_ID\n   INTO\n    OUTPAR_ID\n   FROM (\n     SELECT\n      MAX(ID)\n     ,NAME\n     ,MAX(H_ID) AS OUT_ID\n     FROM TBL_REPORT\n     WHERE NAME   = INPAR_NAME\n     GROUP BY\n      NAME\n    );\n\n  END IF;\n  /*--------------------------------------------------------------------*/\n\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_MAX_ID\n  FROM TBL_REPORT\n  WHERE \n/*    CREATE_DATE =*/\n/*      (SELECT MAX(CREATE_DATE) FROM TBL_REPORT*/\n/*      )*/\n/*      and */\n   NAME   =INPAR_NAME;\n      \n\n/*jadadtarin gazaresh sakhte shode  va akharin taghyorat anjam shode (bar asase var_max_id) ,dar tbl_report_profile  insert mishavad*/\n\n  INSERT INTO TBL_REPORT_PROFILE (\n   REF_REPORT\n  ,REF_LEDGER_PROFILE\n  ,REF_PROFILE_TIME\n  ,REF_PROFILE_CURRENCY\n  ,REF_PROFILE_CUSTOMER\n  ,REF_PROFILE_BRANCH\n  ,REF_PROFILE_DEPOSIT\n  ,REF_PROFILE_LOAN\n  \n  ) VALUES (\n   VAR_MAX_ID\n  ,INPAR_REF_LEDGER_PROFILE\n  ,INPAR_REF_TIMING_PROFILE\n  ,INPAR_REF_CUR_PROFILE\n  ,INPAR_REF_CUS_PROFILE\n  ,INPAR_REF_BRN_PROFILE\n  ,INPAR_REF_DEP_PROFILE\n  ,INPAR_REF_LON_PROFILE\n \n  );\n\n  COMMIT;\n END IF;/*if(inpar_insert_or_update= 1 and inpar_NAME=var_name) then*/\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PRC_UPDATE_REPORT_ID ();\n PRC_UPDATE_DASHBOARD_ID ();\n commit;\n UPDATE TBL_PROFILE TP\n  SET\n   TP.REPORT_CNT =  nvl((\n    SELECT\n     COUNT(*)\n    FROM TBL_REPORT_PROFILE\n    WHERE REF_PROFILE_LOAN   = TP.ID\n   ),0)\n WHERE TP.ID IN (\n   SELECT DISTINCT\n    REF_PROFILE_LOAN\n   FROM TBL_REPORT_PROFILE\n  );\n\n UPDATE TBL_PROFILE TP\n  SET\n   TP.REPORT_CNT =  nvl((\n    SELECT\n     COUNT(*)\n    FROM TBL_REPORT_PROFILE\n    WHERE REF_PROFILE_CURRENCY   = TP.ID\n   ),0)\n WHERE TP.ID IN (\n   SELECT DISTINCT\n    REF_PROFILE_CURRENCY\n   FROM TBL_REPORT_PROFILE  \n  );\n\n UPDATE TBL_PROFILE TP\n  SET\n   TP.REPORT_CNT = nvl((\n    SELECT\n     COUNT(*)\n    FROM TBL_REPORT_PROFILE\n    WHERE REF_PROFILE_CUSTOMER   = TP.ID\n   ),0)\n WHERE TP.ID IN (\n   SELECT DISTINCT\n    REF_PROFILE_CUSTOMER\n   FROM TBL_REPORT_PROFILE\n  );\n\n UPDATE TBL_PROFILE TP\n  SET\n   TP.REPORT_CNT = nvl((\n    SELECT\n     COUNT(*)\n    FROM TBL_REPORT_PROFILE\n    WHERE REF_PROFILE_BRANCH   = TP.ID\n   ),0)\n WHERE TP.ID IN (\n   SELECT DISTINCT\n    REF_PROFILE_BRANCH\n   FROM TBL_REPORT_PROFILE\n  );\n\n UPDATE TBL_PROFILE TP\n  SET\n   TP.REPORT_CNT = nvl((\n    SELECT\n     COUNT(*)\n    FROM TBL_REPORT_PROFILE\n    WHERE REF_PROFILE_DEPOSIT   = TP.ID\n   ),0)\n WHERE TP.ID IN (\n   SELECT DISTINCT\n    REF_PROFILE_DEPOSIT\n   FROM TBL_REPORT_PROFILE\n  );\n\n UPDATE TBL_LEDGER_PROFILE TLP\n  SET\n   TLP.REPORT_CNT =nvl( (\n    SELECT\n     COUNT(*)\n    FROM TBL_REPORT_PROFILE\n    WHERE REF_LEDGER_PROFILE   = TLP.ID\n   ),0)\n WHERE TLP.ID IN (\n   SELECT DISTINCT\n    REF_LEDGER_PROFILE\n   FROM TBL_REPORT_PROFILE\n  );\n\n UPDATE TBL_TIMING_PROFILE TTP\n  SET\n   TTP.REPORT_CNT = nvl((\n    SELECT\n     COUNT(*)\n    FROM TBL_REPORT_PROFILE\n    WHERE REF_PROFILE_TIME   = TTP.ID\n   ),0)\n WHERE TTP.ID IN (\n   SELECT DISTINCT\n    REF_PROFILE_TIME\n   FROM TBL_REPORT_PROFILE\n  );\n   COMMIT;\n\nUPDATE TBL_PROFILE TP\n  SET\n   TP.REPORT_CNT =0\n WHERE  TP.REPORT_CNT is null;\n COMMIT;\n\n   prc_NOTIF_CHECK_REPEAT(OUTPAR_ID);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PRC_REPORT_PROFILE;"},{"Name":"PRC_CREATE_REPORT_REQUEST","ObjectID":274215,"Digest":"3aa2c43a326dd802cc4e3be853928e04c972b4a46fdbe1aa3ede2f676ef96f72","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_CREATE_REPORT_REQUEST\" (\n INPAR_REPORT_ID   IN NUMBER\n ,INPAR_USER_ID     IN VARCHAR2\n ,INPAR_NOTIF_ID    IN NUMBER\n ,OUTPAR_RES        OUT NUMBER--ALAKI\n) AS\n /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/19-10:00\n  Edit Name:\n  Version: 1\n  Description:darkhast baray ijad yek gozaresh jadid \n  */\n  /*------------------------------------------------------------------------------*/\n\n VAR_REP_REQ_ID        NUMBER;\n VAR_NOTIF_ID          VARCHAR2(50);\n VAR_REPPER_DATE       DATE;\n VAR_INPAR_REPORT_ID   NUMBER;\n V_R                   NUMBER;\n LOC_MEGHDAR           VARCHAR2(4000);\n VAR_TYPE              VARCHAR2(200);\nBEGIN\n\n/*yaftane id gozaresh az jadval gozareshat*/\n SELECT\n  MAX(ID)\n INTO\n  VAR_INPAR_REPORT_ID\n FROM TBL_REPORT\n WHERE H_ID   = (\n   SELECT\n    H_ID\n   FROM TBL_REPORT\n   WHERE ID   = INPAR_REPORT_ID\n  )\n GROUP BY\n  H_ID;\n\n/* darj yek darkhast gozaresh jadid dar jadval TBL_REP_REQ*/\n\n INSERT INTO TBL_REPREQ (\n  REF_REPORT_ID\n ,REF_USER_ID\n ,REQ_DATE\n ,STATUS\n ,REF_LEDGER_PROFILE\n ,REF_PROFILE_TIME\n ,REF_PROFILE_CURRENCY\n ,REF_PROFILE_CUSTOMER\n ,REF_PROFILE_BRANCH\n ,REF_PROFILE_DEPOSIT\n ,REF_PROFILE_LOAN\n ,REF_HID_REPORT\n ,TYPE\n ,CATEGORY\n ) VALUES (\n  VAR_INPAR_REPORT_ID\n ,INPAR_USER_ID\n ,SYSDATE\n ,0\n ,(\n   SELECT\n    REF_LEDGER_PROFILE\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_TIME\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_CURRENCY\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_CUSTOMER\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_BRANCH\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_DEPOSIT\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_LOAN\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    H_ID\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    TYPE\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    CATEGORY\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n );\n\n COMMIT;\n  \n  /*yaftan id darkhast ijad shode*/\n SELECT\n  MAX(ID)\n INTO\n  VAR_REP_REQ_ID\n FROM TBL_REPREQ;\n  /*--------------------------*/\n\n SELECT\n  TYPE\n INTO\n  VAR_TYPE\n FROM TBL_REPORT\n WHERE ID   = VAR_INPAR_REPORT_ID;\n\n  IF( VAR_TYPE = 'duedate' )THEN\n    PKG_DUE_DATE.PRC_DUE_DATE_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'IDPS' ) THEN\n    PKG_IDPS.PRC_IDPS_REP_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( upper(VAR_TYPE) = 'COM2' ) THEN\n    PKG_COM.PRC_COM_direct_cost(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'LCR' ) THEN\n    PKG_LCR.PRC_LCR_REP_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'duedate_loan' ) THEN\n    PKG_DUE_DATE_LOAN.PRC_DUE_DATE_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'NOP' ) THEN\n    PKG_NOP.PRC_REPORT_VALUE_NOP(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DDDR' ) THEN\n    PKG_DUE_DATE_DEPOSIT_RATE.PRC_DDDR_GET_DETAIL(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'GAP_NIIM' ) THEN\n    PKG_GAP_NIIM.PRC_GAP_NIIM_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DDLT' ) THEN\n    PKG_DUE_DATE_LOAN_TYPE.prc_DDLT_GET_DETAIL(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'COMSTAT' ) THEN\n    pkg_comparative_statistic.PRC_com_stat_report_value(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'CRINDEX' ) THEN\n    pkg_creditRisk_branch_index.PRC_cr_br_index_report_value(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DEPOSIT' ) THEN -- CAT: WES\n    DYNAMIC_LQ.pkg_WES.PRC_DEP_REPORT_VALUE(VAR_INPAR_REPORT_ID, VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'LOAN' ) THEN -- CAT: WES\n    DYNAMIC_LQ.pkg_WES.PRC_DEP_REPORT_VALUE(VAR_INPAR_REPORT_ID, VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'SHOCK' ) THEN\n    pkg_shock.PRC_shock_report_value(VAR_INPAR_REPORT_ID); \n  ELSIF ( UPPER(VAR_TYPE) = 'SENSANALYSIS' ) THEN\n    pkg_sensivity_analysis_test.PRC_SENS_ANALYSIS_REP_VALUE(VAR_INPAR_REPORT_ID); \n  ELSIF ( UPPER(VAR_TYPE) = 'DURATION2' ) THEN\n    PKG_DU_GAP_PROF.PRC_DU_GAP_PROF_REPORT_VALUE(VAR_INPAR_REPORT_ID,VAR_REP_REQ_ID);--PRC_DU_GAP_PROF_REPORT_VALUE\n      ELSIF ( UPPER(VAR_TYPE) = 'CAR' ) THEN\n    PKG_CAR.PRC_CAR_FINAL_REPORT(VAR_INPAR_REPORT_ID,VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = '107' ) THEN\n    DYNAMIC_LQ.PRC_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n    DYNAMIC_LQ.PRC_AGGREGATION(VAR_REP_REQ_ID);\n  ELSIF (UPPER(VAR_TYPE)= 'AES') THEN\n    DYNAMIC_LQ.PKG_AES.PRC_REPORT_VALUE(VAR_REP_REQ_ID);\n ELSE\n  \n  /*ejra prasijer baray filter kardan dadeh hay gozersh*/\n  PRC_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  \n  /*ejra tajmi*/\n  PRC_AGGREGATION(VAR_REP_REQ_ID);\n  \n  /*PRC_GET_QUERY_REPORT(var_Rep_Req_ID,var_report_name);*/\n END IF;\n  \n  /*berozresani vaziat gozaresh be payan yafte dar jadval darkhastha */\n\n UPDATE TBL_REPREQ\n  SET\n   STATUS = 1\n WHERE ID   = VAR_REP_REQ_ID;\n\n COMMIT;\n  \n /* prc_liken(to_date('15-NOV-17'));*/\n  /*berozresani elanat*/\n PRC_NOTIFICATION(\n  'update'\n ,INPAR_NOTIF_ID\n ,''\n ,''\n ,''\n ,'finished'\n ,0\n ,''\n ,0\n ,VAR_REP_REQ_ID\n ,''\n ,'0'\n ,VAR_NOTIF_ID\n );\n  \n  /*khoroji alaki, jeddi nagir*/\n\n OUTPAR_RES   := VAR_NOTIF_ID;\nEXCEPTION\n WHEN OTHERS THEN\n  LOC_MEGHDAR   := SQLERRM;\n  PRC_NOTIFICATION(\n   'update'\n  ,INPAR_NOTIF_ID\n  ,''\n  ,''\n  ,''\n  ,'error'\n  ,0\n  ,''\n  ,0\n  ,VAR_REP_REQ_ID\n  ,''\n  ,'1'\n  ,VAR_NOTIF_ID\n  );\n\n  COMMIT;\n  DELETE FROM TBL_REPREQ WHERE ID   = VAR_REP_REQ_ID;\n\n  COMMIT;\n  LOC_MEGHDAR   := SQLERRM;\n  UPDATE TBL_NOTIFICATIONS\n   SET\n    ERROR = LOC_MEGHDAR\n  WHERE ID   = INPAR_NOTIF_ID;\n\n  COMMIT;\n/*     INSERT INTO TABLE1 (P) VALUES (LOC_MEGHDAR);*/\n/*       LOC_MEGHDAR := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;*/\n/*       INSERT INTO TABLE1 (P) VALUES (LOC_MEGHDAR);*/\nEND PRC_CREATE_REPORT_REQUEST;"},{"Name":"PRC_DELETE_REPORT","ObjectID":274310,"Digest":"f4bb4b087caeddf87e9ff9405f8d43cf3c0352589c33fe40847db494f9b49a9f","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DELETE_REPORT\" \n(\n  inpar_ID IN NUMBER,\n  outpar out VARCHAR2\n\n) AS \nvar_CATEGORY VARCHAR2(200);\nvar_h_id number;\n\n /*\n  Programmer Name: sobhan sadeghzade\n  Editor Name:\n  Release Date/Time:1396/04/28\n  Edit Name:\n  Version: 1\n  Category:\n  Description:  namayesh nadadane report hayi ke hazf mishavand \n  report hayi ke baraye anha status=0 bashad namayesh dade nemishavnd.\n  \n  \n  ** gozareshate \"SENSITIVE\" be tore kamel hazf mishavand \n  \n  baraye gozaresh haye \"SENSITIVE\" ==\u003e id=inpar_ID\n  baraye sayere gozareshat ==\u003e h_id=inpar_ID\n \n  */\nBEGIN\n--select h_id into var_h_id from tbl_report where id = inpar_ID;\n  \n\n  update tbl_report set STATUS=0 where h_id=inpar_ID;\n  commit;\n  outpar:=null;\n  update tbl_report set STATUS=0 where id=inpar_ID;\n  commit;\n\n\n       \n  \nEND PRC_DELETE_REPORT;"},{"Name":"PRC_NOTIFICATION","ObjectID":274402,"Digest":"8c56cc607551bd450d7859c5d2dc084def5d1b5dcb570bfe47cd310f3d86ecb5","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_NOTIFICATION\" \n(\n  INPAR_OPT_TYPE IN VARCHAR2\n, INPAR_ID IN NUMBER  DEFAULT NULL\n, INPAR_TYPE IN VARCHAR2  DEFAULT NULL\n, INPAR_class IN VARCHAR2  DEFAULT NULL\n, INPAR_TITLE IN VARCHAR2 DEFAULT NULL\n, INPAR_STATUS IN VARCHAR2 DEFAULT NULL\n, INPAR_USER_ID IN VARCHAR2 DEFAULT NULL\n, INPAR_DESCRIPTION IN VARCHAR2 DEFAULT NULL\n, INPAR_REF_REPORT IN VARCHAR2 DEFAULT NULL \n, INPAR_REF_REPREQ IN VARCHAR2 DEFAULT NULL\n, INPAR_REF_REPPER_DATE IN varchar2 DEFAULT NULL\n, inpar_flag   IN varchar2 DEFAULT NULL\n, OUTPAR_STATUS OUT VARCHAR2\n)   AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:anjam amaliyat hay lazem baray darj - beroz resani - hazf va daryaft elanat\n  */\n  --------------------------------------------------------------------------------\n\n\nBEGIN\n\n\nIF INPAR_OPT_TYPE = 'insert' THEN \n  --=======INSERT================ Darj yek elan jadid.\nINSERT\nINTO TBL_NOTIFICATIONS\n  (\n   \n    TITLE,\n    TYPE,\n    class,\n    REF_USER,\n    START_TIME,\n    STATUS,\n    DESCRIPTION,\n    REF_REPORT\n  )\n  VALUES\n  (\n   \n    INPAR_TITLE,\n    INPAR_TYPE,\n    INPAR_class,\n    INPAR_USER_ID,\n    sysdate,\n    'progress',\n    INPAR_DESCRIPTION,\n    INPAR_REF_REPORT\n  );\n  \n  select max(id) into OUTPAR_STATUS from TBL_NOTIFICATIONS;\n  Commit;\n END IF; \n \nIF INPAR_OPT_TYPE = 'update' THEN \n  --=======UPDATE================Berozresani yek elan mojod.\n   UPDATE TBL_NOTIFICATIONS\n   SET STATUS           =INPAR_STATUS \n   , END_TIME = sysdate \n   , REF_REPREQ = INPAR_REF_REPREQ\n   , REF_REPPER_DATE = INPAR_REF_REPPER_DATE\n   , flag = inpar_flag\n   WHERE ID        = INPAR_ID\n   ;\n   Commit;\n END IF; \n\nIF INPAR_OPT_TYPE = 'delete' THEN\n  --=======DELETE================  Haz yek elan mojod.\n  DELETE\n  FROM TBL_NOTIFICATIONS\n  WHERE ID        = INPAR_ID;\n  Commit;\nEND IF;\n\nIF INPAR_OPT_TYPE = 'check' THEN\n  --=======CHECK STATUS================  Bargardandan tamimi vaziyat yek elan mojod.\n  SELECT \n  STATUS\n  into OUTPAR_STATUS\n  FROM TBL_NOTIFICATIONS\n  \n  where ID = INPAR_ID;\nCommit;\nEND IF;\n\n\nIF INPAR_OPT_TYPE = 'getall' THEN\n  --=======GET ALL================ Bargardandan tamami elanat mojod. \n  SELECT \n  'SELECT ID as \"id\",\n  TITLE  as \"title\",\n  TYPE as \"type\",\n  class as \"class\",\n  REF_USER  as \"user\",\n  to_char(START_TIME,''yyyy/MM/dd'') as \"startTime\",\n  to_char(END_TIME,''yyyy/mm/dd'') as \"endTime\",\n    STATUS as \"status\",\n  DESCRIPTION as \"des\"\n  ,ref_repreq as \"ref\"\n  ,ref_repper_date as \"perDate\"\n  ,REF_REPORT as \"refReport\"\n  , flag as \"changed\"\nFROM TBL_NOTIFICATIONS\norder by START_TIME desc\n'\n\n  into OUTPAR_STATUS\n  FROM dual\n    ;\n\nEND IF;\n\n   IF (INPAR_OPT_TYPE = 'visited') then\n \n update pragg.TBL_NOTIFICATIONS set STATUS='visited' ,flag = 0 where id=INPAR_ID;\n commit;\n \n end if;\n \n  \nEND PRC_NOTIFICATION;"},{"Name":"PRC_SIMILAR_PROFILE","ObjectID":274546,"Digest":"62b3be68469953416a63236171dd459aafe7275777056f7034131b6ee3f815e8","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_SIMILAR_PROFILE\" \n(\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: NAVID.SEDIGH\n  Release Date/Time:1396/05/2-16:00\n  Version: 1.0\n  Category:2\n  Description: in procedure bare sakhte profile moshabeh dar risk naghdinegi\n               estefade mishavad.\n  */\n--------------------------------------------------------------------------------\n  inpar_type in varchar2, --zamani --ledger --other\n  inpar_id in number ,\n  inpar_name in varchar2,\n  inpar_des in varchar2,\n  outpar_id out VARCHAR2 --id\n  \n  ) as \n  \n  iidd number;\n  profile_id varchar2(40); --h_id\n  outpar_id2 varchar(40); -- id\n  begin\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n  if(upper(inpar_type)='OTHER') then\n  \n  \n  select  max(id) into iidd\n  FROM TBL_PROFILE\n  where h_id = inpar_id\n  group by name ;\n  \n   INSERT INTO TBL_PROFILE\n  (\n   \n    TYPE,\n    CREATE_DATE,\n    REF_USER,\n    STATUS,\n    VERSION,\n    ITEM_CNT\n    \n  )\n \n  (\n   select type, sysdate,ref_user,status,1,ITEM_CNT from tbl_profile where id = iidd\n  );\n             --==================================================\n  SELECT id\n    INTO outpar_id2\n    FROM TBL_PROFILE\n    WHERE id =  (SELECT MAX(id) FROM TBL_PROFILE );\n    \n      outpar_id:=outpar_id2;\n    \n             --====================================================   \n    update TBL_PROFILE\n    set H_ID= id,\n    name = inpar_name,\n    des = inpar_des\n    where id = outpar_id;\n    commit;\n             --==================================================== \n    SELECT h_id\n    INTO profile_id\n    FROM TBL_PROFILE\n    WHERE id =  (SELECT MAX(id) FROM TBL_PROFILE );\n    \n    \n    outpar_id := outpar_id||','||profile_id;\n              --====================================================    \n  INSERT INTO TBL_PROFILE_DETAIL\n  (\n   \n    REF_PROFILE, \n    SRC_COLUMN,\n    CONDITION\n  )\n  (select outpar_id2,src_column,condition from TBL_PROFILE_DETAIL where REF_PROFILE= iidd);\n  commit;\n              --====================================================\n  end if; \n  \n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nif(upper(inpar_type)='ZAMANI') then\n\nselect  max(id) into iidd\nFROM TBL_TIMING_PROFILE\nwhere h_id = inpar_id\ngroup by name ;\n\n             --==================================================\nINSERT INTO TBL_TIMING_PROFILE\n  (\n   \n   \n    TYPE,\n    CREATE_DATE,\n    REF_USER,\n    STATUS,\n    VERSION \n  )\n  (\n   select type, sysdate,ref_user,status,1 from tbl_TIMING_profile where id = iidd\n  );\n  commit;\n             --==================================================  \n    SELECT id\n    INTO outpar_id2\n    FROM TBL_TIMING_PROFILE\n    WHERE  id =  (SELECT MAX(id) FROM TBL_TIMING_PROFILE );\n      \n      outpar_id:=outpar_id2;\n             --==================================================      \n     update TBL_TIMING_PROFILE\n    set H_ID= id,\n    name = inpar_name,\n    des = inpar_des\n    where id = outpar_id;\n    commit;     \n             --===================================================  \n             --==================================================== \n    SELECT h_id\n    INTO profile_id\n    FROM TBL_TIMING_PROFILE\n    WHERE id =  (SELECT MAX(id) FROM TBL_TIMING_PROFILE );\n   \n   outpar_id := outpar_id||','||profile_id;\n              --====================================================              \n  \n  INSERT INTO TBL_TIMING_PROFILE_DETAIL\n  (\n    \n    REF_TIMING_PROFILE,\n    PERIOD_NAME,\n    PERIOD_DATE,\n    PERIOD_START,\n    PERIOD_END,\n    PERIOD_COLOR,\n    PERIOD_STATUS\n  )\n  (select outpar_id2,period_name,PERIOD_DATE,PERIOD_START,PERIOD_END,PERIOD_COLOR,PERIOD_STATUS from TBL_TIMING_PROFILE_DETAIL where REF_TIMING_PROFILE=iidd);\n  commit;\n             --==================================================  \nend if; \n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nif(upper(INPAR_TYPE) in ('TBL_LEDGER', 'CUR_SENS','NIIM','NPL','CAR','COM')) then\n\nselect  max(id) into iidd\n  FROM TBL_LEDGER_PROFILE\n  where h_id = inpar_id\n  group by name ;\n             --==================================================\nINSERT INTO TBL_LEDGER_PROFILE\n  (\n    CREATE_DATE,\n    REF_USER,\n    STATUS,\n    type,\n    VERSION\n\n  )\n  (\n   select  sysdate,ref_user,status,type,1 from TBL_LEDGER_PROFILE where id = iidd\n  );\n  commit;\n             --==================================================  \nSELECT id\n    INTO outpar_id2\n    FROM TBL_LEDGER_PROFILE\n    WHERE  id =  (SELECT MAX(id) FROM TBL_LEDGER_PROFILE );\n      outpar_id:=outpar_id2;\n             --==================================================      \n     update TBL_LEDGER_PROFILE\n    set H_ID= id,\n    name = inpar_name,\n    des = inpar_des,\n    type = inpar_type\n    where id = outpar_id;\n    commit;      \n                 --============================================== \n    SELECT h_id\n    INTO profile_id\n    FROM TBL_LEDGER_PROFILE\n    WHERE id =  (SELECT MAX(id) FROM TBL_LEDGER_PROFILE );\n   outpar_id := outpar_id||','||profile_id;\n             --==================================================\n             --==================================================  \n             \n   INSERT\nINTO TBL_LEDGER_PROFILE_DETAIL\n  (\n   \n    REF_LEDGER_PROFILE,\n    CODE,\n    NAME,\n    PARENT_CODE,\n    DEPTH,\n    STATUS\n  )\n(select outpar_id2,code,name,PARENT_CODE,DEPTH,STATUS from TBL_LEDGER_PROFILE_DETAIL where REF_LEDGER_PROFILE= iidd);\ncommit;\n\nupdate TBL_LEDGER_PROFILE_DETAIL\nset PARENT_CODE = outpar_id2\nwhere ref_ledger_profile =outpar_id2 and depth =1;\ncommit;\n             --==================================================  \nend if;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nend prc_similar_profile;"},{"Name":"PRC_IS_EMPTY","ObjectID":274551,"Digest":"2fdd5328d54265f9d8503b8e22afc7f8cdb61f9802e4add7a57473fa4193139a","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_IS_EMPTY\" as \ncnt number;\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: NAVID.Seddigh\n  Release Date/Time:1396/05/2-16:00\n  Version: 1.0\n  Category:2\n  Description: In procedure profile haE bedoone Item va Item dar ra az ham mojaza\n               mikonad.\n  */\n--------------------------------------------------------------------------------\nbegin\n\n    --====================\n    /* in halghe for rooye satre jadvale tbl_profile harekat mikonad va har profile \n    ra baresi mikonad ke aya dar jadvale tbl_profile_detial meghdar darad ya na?! */\n   \n for i in ( select max(id) as id from tbl_profile where STATUS = 1)\n loop\n    select count(*) into cnt from tbl_profile_detail where REF_PROFILE = i.id ;\n    if (cnt = 0) then \n      update tbl_profile set is_empty = 1 where id = i.id;\n      commit;\n    else if(cnt \u003e 0 ) then\n      update tbl_profile set is_empty = 0 where id = i.id;\n      commit;\n    end if;\n    end if;\n end loop;\n    --====================\n     /* in halghe for rooye satre jadvale tbl_ledger_profile harekat mikonad va har profile \n    ra baresi mikonad ke aya dar jadvale tbl_ledger_profile_detial meghdar darad ya na ?!*/\ncnt:=0; \nfor i in(select  id from tbl_ledger_profile where STATUS = 1)\n  loop \n    select count(*) into cnt from tbl_ledger_profile_detail where ref_ledger_profile = i.id;\n    if(cnt=0) then \n      update tbl_ledger_profile set is_empty = 1 where id = i.id;\n      commit;\n    else if(cnt\u003e0) then\n      update tbl_ledger_profile set is_empty = 0 where id = i.id;\n      commit;\n    end if;\n    end if;\n  end loop;\n     --====================\n      /* in halghe for rooye satre jadvale tbl_timing_profile harekat mikonad va har profile \n    ra baresi mikonad ke aya dar jadvale tbl_timing_profile_detail meghdar darad ya na ?!*/\ncnt:=0;\nfor i in(select  id from tbl_timing_profile where STATUS = 1)\n  loop \n    select count(*) into cnt from tbl_timing_profile_detail where ref_timing_profile = i.id;\n    if(cnt=0) then \n      update tbl_timing_profile set is_empty = 1 where id = i.id;\n      commit;\n    else if(cnt\u003e0) then\n      update tbl_timing_profile set is_empty = 0 where id = i.id;\n      commit;\n    end if;\n    end if;\n  end loop;\n   --====================\nend prc_is_empty;"},{"Name":"PRC_DELETE_ZAMANI_DETAIL","ObjectID":274865,"Digest":"2585dd9267ebb413532f0d2da0b4b389f809c1b443f49f0aced51d63de52912f","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DELETE_ZAMANI_DETAIL\" (\nINPAR_NAME               IN VARCHAR2 ,\n    INPAR_DES                IN VARCHAR2 ,\n    INPAR_TYPE               IN VARCHAR2 ,\n    INPAR_CREATE_DATE        IN VARCHAR2 , --be date in future\n    INPAR_REF_USER           IN VARCHAR2 , -- number\n    INPAR_STATUS             IN VARCHAR2 , --number\n    \n    inpar_REF_TIMING_PROFILE IN VARCHAR2 ,\n    \n    inpar_id                 IN NUMBER,\n    outpar_id OUT NUMBER\n)\nas \niidd number;\n  --------------------------------------------------------------------------------\n  /*\n  Programmer Name: NAVID\n  Release Date/Time:1396/05/05-12:00\n  Version: 1.0\n  Category:2\n  Description:\n  */\n  --------------------------------------------------------------------------------\nbegin\n \n---\n SELECT MAX(id)\n      INTO iidd\n      FROM TBL_TIMING_PROFILE\n      WHERE h_id = INPAR_REF_TIMING_PROFILE\n      GROUP BY name ;\n---\n  INSERT\nINTO TBL_TIMING_PROFILE_DETAIL_TEMP\n  (\n    ID,\n    REF_TIMING_PROFILE,\n    PERIOD_NAME,\n    PERIOD_DATE,\n    PERIOD_START,\n    PERIOD_END,\n    PERIOD_COLOR,\n    PERIOD_STATUS\n  )\n  (SELECT ID,\n  REF_TIMING_PROFILE,\n  PERIOD_NAME,\n  PERIOD_DATE,\n  PERIOD_START,\n  PERIOD_END,\n  PERIOD_COLOR,\n  PERIOD_STATUS\nFROM TBL_TIMING_PROFILE_DETAIL where ref_timing_profile = iidd );\n\n\ncommit;\n\n\n\n\ndelete from TBL_TIMING_PROFILE_DETAIL_TEMP\nwhere id= inpar_id;\n    \n        COMMIT;\n INSERT\n      INTO TBL_TIMING_PROFILE\n        (\n          NAME,\n          DES,\n          TYPE,\n          CREATE_DATE,\n          REF_USER,\n          STATUS,\n          version,\n          H_ID\n        )\n        VALUES\n        (\n          upper(INPAR_NAME) ,\n          INPAR_DES ,\n          INPAR_TYPE ,\n          sysdate ,\n          INPAR_REF_USER ,\n          INPAR_STATUS,\n          (SELECT MAX(version)+1 FROM TBL_TIMING_PROFILE  where H_ID = inpar_REF_TIMING_PROFILE),\n          inpar_REF_TIMING_PROFILE\n        );\n      COMMIT;\n      SELECT id\n      INTO outpar_id\n      FROM TBL_TIMING_PROFILE\n      WHERE CREATE_DATE =\n        (SELECT MAX(CREATE_DATE) FROM TBL_TIMING_PROFILE\n        )\n      AND id =\n        (SELECT MAX(id) FROM TBL_TIMING_PROFILE\n        );\n        \n        INSERT\nINTO TBL_TIMING_PROFILE_DETAIL\n  (\n   \n    REF_TIMING_PROFILE,\n    PERIOD_NAME,\n    PERIOD_DATE,\n    PERIOD_START,\n    PERIOD_END,\n    PERIOD_COLOR,\n    PERIOD_STATUS\n  )\n  (SELECT \n  outpar_id,\n  PERIOD_NAME,\n  PERIOD_DATE,\n  PERIOD_START,\n  PERIOD_END,\n  PERIOD_COLOR,\n  PERIOD_STATUS\nFROM TBL_TIMING_PROFILE_DETAIL_temp where ref_timing_profile=iidd );\ncommit;\n EXECUTE immediate 'truncate table TBL_TIMING_PROFILE_DETAIL_temp';\n  \nend prc_delete_zamani_detail;"},{"Name":"PRC_DELETE_ARCHIVE","ObjectID":275242,"Digest":"d3f30b6a6ae7cdfcaf37bfa60a2d0ea0e2dcc0fc855fa56563fb24b7f237e393","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DELETE_ARCHIVE\" (\n INPAR_REP_REQ_ID   IN NUMBER\n ,OUT_PAR            OUT NUMBER\n)\n AS\n /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description: be manzore hazf kardan gozareshat archiv shode az in procedure estefade mishavad.\n  */\n  /*------------------------------------------------------------------------------*/\nBEGIN\n DELETE FROM TBL_REPREQ WHERE ID   = INPAR_REP_REQ_ID;\n\n COMMIT;\n DELETE FROM TBL_REPVAL WHERE REF_REPREQ_ID   = INPAR_REP_REQ_ID;\n\n COMMIT;\n    /****** hazf ref_zamani marbot be gozaresh hazf shode*****--*/\n DELETE FROM TBL_REPPER WHERE REF_REQ_ID   = INPAR_REP_REQ_ID;\n \n COMMIT;\n DELETE FROM TBL_DUE_DATE_DETAIL WHERE REP_REQ    = INPAR_REP_REQ_ID;\n\n COMMIT;\n  DELETE FROM TBL_STATE_REP_PROFILE_DETAIL WHERE VERSION    = INPAR_REP_REQ_ID;\n\n COMMIT;\n  DELETE FROM TBL_NOTIFICATIONS WHERE  REF_REPREQ  = INPAR_REP_REQ_ID;\n\n  COMMIT;\n    delete from TBL_DU_GAP_PROF_DETAIL where REF_REPREQ =INPAR_REP_REQ_ID;\n      COMMIT;\n\n    \n OUT_PAR   := 0;\nEND PRC_DELETE_ARCHIVE;"},{"Name":"PRC_UPDATE_REPORT_ID","ObjectID":275310,"Digest":"b95efb26eb17878dfcab0a437e38b9c88f6393b9c6ff213925254eda665407e5","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_UPDATE_REPORT_ID\" as \n\nledger number;\ntiming number;\nloan number;\ncurrency number;\ncustomer number;\nbranch number;\ndeposit number;\nv_st number;\n\nbegin\n  --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name: \n  Release Date/Time:1396/05/09-16:00\n  Edit Name: \n  Version: 1.1\n  Category:2\n  Description: zamani ke version profili taghir konad, satr be satre jadvale \n               tbl_report_profile peymayesh mishavad va ID profile ha bar asase\n               be rooz tarin version update mishavad.\n  */\n  --------------------------------------------------------------------------------\n\n    \nfor i in (select * from tbl_report_profile) \nloop\n    if(i.ref_profile_loan is not null) then\n    select max(id) into loan from tbl_profile\n    where h_id in(\n    select h_id from tbl_profile p\n    where p.id in (select ref_profile_loan from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and r.STATUS=1 and ref_profile_loan = i.ref_profile_loan ));\n    select status into v_st from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and rp.id = i.id; \n    if(v_st !=0) then\n      update tbl_report_profile \n      set ref_profile_loan = loan\n      where id = i.id;\n      commit; \n      end if;\n    end if;\n    v_st:=null;\n    if(i.ref_profile_currency is not null) then\n    select max(id) into currency from tbl_profile\n    where h_id in(\n    select h_id from tbl_profile p\n    where p.id in (select ref_profile_currency from tbl_report_profile rp ,tbl_report r where rp.REF_REPORT = r.id and r.STATUS=1 and ref_profile_currency = i.ref_profile_currency));\n    select status into v_st from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and rp.id = i.id;\n    if(v_st !=0) then\n      update tbl_report_profile \n      set ref_profile_currency = currency\n      where id = i.id;\n      commit; \n      end if;\n    end if;\n    v_st:=null;\n    if(i.ref_profile_customer is not null) then\n    select max(id) into customer from tbl_profile\n    where h_id in(\n    select h_id from tbl_profile p\n    where p.id in (select ref_profile_customer from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and r.STATUS=1 and ref_profile_customer = i.ref_profile_customer ));\n    select status into v_st from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and rp.id = i.id;\n    if(v_st !=0) then\n      update tbl_report_profile \n      set ref_profile_customer = customer\n      where id = i.id;\n      commit; \n      end if;\n    end if;\n    v_st:=null;\n    if(i.ref_profile_branch is not null) then\n    select max(id) into branch from tbl_profile\n    where h_id in(\n    select h_id from tbl_profile p\n    where p.id in (select ref_profile_branch from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and r.STATUS=1 and ref_profile_branch = i.ref_profile_branch  ));\n    select status into v_st from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and rp.id = i.id;\n    if(v_st !=0) then\n      update tbl_report_profile \n      set ref_profile_branch = branch\n      where id = i.id;\n      commit; \n      end if;\n    end if;\n    v_st:= null;\n    if(i.ref_profile_deposit is not null) then\n    select max(id) into deposit from tbl_profile\n    where h_id in(\n    select h_id from tbl_profile p\n    where p.id in (select ref_profile_deposit from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and r.STATUS=1 and ref_profile_deposit = i.ref_profile_deposit  ));\n    select status into v_st from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and rp.id = i.id;\n    if(v_st !=0) then\n      update tbl_report_profile \n      set ref_profile_deposit = deposit\n      where id = i.id;\n      commit; \n      end if;\n    end if;\n    v_st:=null; \n    if(i.ref_ledger_profile is not null) then\n    select max(id) into ledger from tbl_ledger_profile\n    where h_id in(\n    select h_id from tbl_ledger_profile p\n    where p.id in (select ref_ledger_profile from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and r.STATUS=1 and ref_ledger_profile = i.ref_ledger_profile  ));\n     select (select status from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and rp.id = i.id)  into v_st  from dual;\n    if(v_st !=0) then\n      update tbl_report_profile \n      set ref_ledger_profile = ledger\n      where id = i.id;\n      commit; \n      end if;\n    end if;\n    v_st:=null;\n    if(i.ref_profile_time is not null) then\n    select max(id) into timing from tbl_timing_profile\n    where h_id in(\n    select h_id from tbl_timing_profile p\n    where p.id in (select ref_profile_time from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and r.STATUS=1 and ref_profile_time = i.ref_profile_time  ));\n      select (select status from tbl_report_profile rp,tbl_report r where rp.REF_REPORT = r.id and rp.id = i.id)  into v_st  from dual;\n    if(v_st !=0) then\n      update tbl_report_profile \n      set ref_profile_time = timing\n      where id = i.id; \n      commit; \n     end if;\n     end if;\n     v_st := null;\nend loop;\n\n--================================= For dynamic risk \nfor i in (select * from DYNAMIC_LQ.REPORTS) \nloop\n    if(i.LEDGER_PROFILE_ID is not null) then\n    select max(id) into ledger from tbl_ledger_profile\n    where h_id in(\n    select h_id from tbl_ledger_profile p\n    where p.id in (select LEDGER_PROFILE_ID from DYNAMIC_LQ.REPORTS  where  LEDGER_PROFILE_ID = i.LEDGER_PROFILE_ID ));\n    \n      update DYNAMIC_LQ.REPORTS \n      set LEDGER_PROFILE_ID = ledger\n      where id = i.id;\n      commit; \n    end if;\n\n\n\n    if(i.CUR_PROFILE_ID is not null) then\n    select max(id) into currency from tbl_profile\n    where h_id in(\n    select h_id from tbl_profile p\n    where p.id in (select CUR_PROFILE_ID from DYNAMIC_LQ.REPORTS  where  CUR_PROFILE_ID = i.CUR_PROFILE_ID));\n    \n    \n      update DYNAMIC_LQ.REPORTS \n      set CUR_PROFILE_ID = currency\n      where id = i.id;\n      commit; \n    end if;\n \n \n \n    if(i.TIMING_PROFILE_ID is not null) then\n    select max(id) into timing from tbl_timing_profile\n    where h_id in(\n    select h_id from tbl_timing_profile p\n    where p.id in (select TIMING_PROFILE_ID from DYNAMIC_LQ.REPORTS where  TIMING_PROFILE_ID = i.TIMING_PROFILE_ID  ));\n    \n      update DYNAMIC_LQ.REPORTS \n      set TIMING_PROFILE_ID = timing\n      where id = i.id; \n      commit; \n     end if;\n   \nend loop;\n\n--===================================\nend prc_update_report_id;"},{"Name":"PRC_LEDGER_ARCHIVE","ObjectID":276092,"Digest":"55cd053c729cb8d181448533e4e49f2ee7c885a074f7caa9ec022784171f45f1","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LEDGER_ARCHIVE\" (inpar_date in date)\nas\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description: baraye enteghal daftar kol be jadval  TBL_LEDGER_ARCHIVE be manzore negah dashtane tarikhie daftarkol\n  */\n  --------------------------------------------------------------------------------\n  \n    \n  var_partition VARCHAR2(100):= to_char(inpar_date,'j');\n  var_partition_name VARCHAR2(100):= 'P'||to_char(inpar_date,'j');\n  var_execute_query varchar(2000);\n  var_exist varchar2(100);\n\n  \n\n\n\nbegin\n\n     select count(*) into var_exist from ALL_TAB_PARTITIONS where  table_name= 'TBL_LEDGER_ARCHIVE' and substr(PARTITION_NAME,2) in (var_partition);\n     \n     if(var_exist\u003c1)\n     then\n\n     EXECUTE IMMEDIATE ' ALTER TABLE TBL_LEDGER_ARCHIVE ADD PARTITION P'||var_partition||' VALUES ('||var_partition||')';\n     else \n\n\n\n     EXECUTE IMMEDIATE  'ALTER TABLE TBL_LEDGER_ARCHIVE TRUNCATE PARTITION P'||var_partition||'';\n\n\nend if;\n\n\n\n\n  /******ebteda hame bargha ra dar TBL_LEDGER_ARCHIVE mirizim va baed az an be tartib sath be sath bala miaim va sum childha ro hesab mikonim ******/\n  \n  \n\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,name,eff_date,CUR_BALANCE,NUMBER_DATE)\nselect a.GL_CODE, substr(a.GL_CODE,1,7)||'00', 5, sum (a.final_bal), b.id, max(a.gl_name),inpar_date,0,var_partition from dadekavan_day.balance_mv a, satrap_day.bi_table_arz@satrap b where \ntrunc(a.effdate) \u003c= trunc(inpar_date) and a.curr_cod = b.nam and  a.curr_cod ='IRR'  group by GL_CODE,b.id;\ncommit;\n\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,name,eff_date,CUR_BALANCE,NUMBER_DATE)\nselect a.GL_CODE, substr(a.GL_CODE,1,7)||'00', 5, sum (a.final_bal_moadel), b.id, max(a.gl_name),inpar_date, sum (a.final_bal) ,var_partition from dadekavan_day.balance_mv a, satrap_day.bi_table_arz@satrap b where \ntrunc(a.effdate) \u003c= trunc(inpar_date) and a.curr_cod = b.nam and  a.curr_cod \u003c\u003e'IRR'  group by GL_CODE,b.id;\ncommit;\n\n\n\n\nselect '\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,CUR_BALANCE,NUMBER_DATE)\n(select PARENT_CODE, substr(PARENT_CODE,1,5)||''0000'', 4, sum(BALANCE), REF_CUR_ID,'''||inpar_date||''',sum(CUR_BALANCE),\n'||var_partition||' from TBL_LEDGER_ARCHIVE  PARTITION ('||var_partition_name||') where depth = 5 and EFF_DATE = '''||inpar_date||'''  group by PARENT_CODE,REF_CUR_ID);'\ninto var_execute_query from dual;\n\nDBMS_OUTPUT.PUT_LINE(var_execute_query);\nEXECUTE IMMEDIATE 'BEGIN ' || var_execute_query || ' END;';\ncommit;\n\n\nselect '\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,cur_balance,NUMBER_DATE)\n(select PARENT_CODE, substr(PARENT_CODE,1,3)||''000000'', 3, sum(BALANCE), REF_CUR_ID,'''||inpar_date||''',sum(CUR_BALANCE),\n'||var_partition||'  from TBL_LEDGER_ARCHIVE PARTITION ('||var_partition_name||') where depth = 4 and EFF_DATE = '''||inpar_date||''' group by PARENT_CODE,REF_CUR_ID);'\ninto var_execute_query from dual;\n\n\nEXECUTE IMMEDIATE 'BEGIN ' || var_execute_query || ' END;';\ncommit;\n\nselect '\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,cur_balance,NUMBER_DATE)\n(select PARENT_CODE, substr(PARENT_CODE,1,1)||''00000000'', 2, sum(BALANCE), REF_CUR_ID,'''||inpar_date||''',sum(CUR_BALANCE),\n'||var_partition||'   from TBL_LEDGER_ARCHIVE  PARTITION ('||var_partition_name||') where depth = 3 and EFF_DATE = '''||inpar_date||''' group by PARENT_CODE,REF_CUR_ID);'\ninto var_execute_query from dual;\n\n\nEXECUTE IMMEDIATE 'BEGIN ' || var_execute_query || ' END;';\ncommit;\n\n\nselect '\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,CUR_BALANCE,NUMBER_DATE)\n(select PARENT_CODE, 0, 1, sum(BALANCE), REF_CUR_ID ,'''||inpar_date||''',sum(CUR_BALANCE),\n'||var_partition||'   from TBL_LEDGER_ARCHIVE PARTITION ('||var_partition_name||') where depth = 2 and EFF_DATE = '''||inpar_date||''' group by PARENT_CODE,REF_CUR_ID);'\ninto var_execute_query from dual;\n\n\nEXECUTE IMMEDIATE 'BEGIN ' || var_execute_query || ' END;';\ncommit;\n\n\n\n\n\nselect '\nUPDATE TBL_LEDGER_ARCHIVE  PARTITION ('||var_partition_name||') t\nSET t.NAME =\n  (SELECT MAX(GL_NAME)\n  FROM DADEKAVAN_DAY.gf1glet\n  WHERE  GL_CODE   = t.ledger_code\n  )\nWHERE t.eff_date = '''||inpar_date||'''\nand t.depth\u003c\u003e 5;'\ninto var_execute_query from dual;\n\n\nEXECUTE IMMEDIATE 'BEGIN ' || var_execute_query || ' END;';\ncommit;\n\n\n\nEND ;"},{"Name":"PRC_LEDGER_BRANCH","ObjectID":276106,"Digest":"ca2cebeb860163cc11bc8524f7b6642b368eb01dbd17b723a1370fefbce3ba31","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LEDGER_BRANCH\" (inpar_date in date)\nas\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:baraye enteghal daftar kol ba tafkik shobe be jadval  TBL_LEDGER_BRANCH  ast.\n  */\n  --------------------------------------------------------------------------------\n  \n  var_partition VARCHAR2(100):= to_char(inpar_date,'j');\n  var_partition_name VARCHAR2(100):= 'P'||to_char(inpar_date,'j');\n  var_execute_query varchar(2000);\n  var_exist varchar2(100);\n\n  \n\nbegin\n\n     select count(*) into var_exist from ALL_TAB_PARTITIONS where  table_name= 'TBL_LEDGER_BRANCH' and substr(PARTITION_NAME,2) in (var_partition);\n     \n     if(var_exist\u003c1)\n     then\n\n     EXECUTE IMMEDIATE ' ALTER TABLE TBL_LEDGER_BRANCH ADD PARTITION P'||var_partition||' VALUES ('||var_partition||')';\n     else \n\n\n\n     EXECUTE IMMEDIATE  'ALTER TABLE TBL_LEDGER_BRANCH TRUNCATE PARTITION P'||var_partition||'';\n\n\nend if;\n\n\n\n\n/******ebteda hame bargha ra ba tafkik shobe dar TBL_LEDGER_BRANCH mirizim va baed az an be tartib sath be sath bala miaim va sum childha ro hesab mikonim ******/\n\ninsert into TBL_LEDGER_BRANCH(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,name,eff_date,ref_branch,NUMBER_DATE)\nselect a.GL_CODE, substr(a.GL_CODE,1,7)||'00', 5, sum (a.final_bal), b.CUR_ID, max(a.gl_name),inpar_date,a.br_code+10000 ,var_partition from dadekavan_day.balance_mv a, TBL_CURRENCY b where \ntrunc(a.effdate) \u003c= trunc(inpar_date) and a.curr_cod = b.SWIFT_CODE group by GL_CODE,b.CUR_ID,a.br_code;\ncommit;\n\n\nselect ' \ninsert into TBL_LEDGER_BRANCH(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,ref_branch,NUMBER_DATE)\n(select PARENT_CODE, substr(PARENT_CODE,1,5)||''0000'', 4, sum(BALANCE), REF_CUR_ID,'''||inpar_date||''',ref_branch ,'||var_partition||' from TBL_LEDGER_BRANCH PARTITION ('||var_partition_name||') where depth = 5 and EFF_DATE = '''||inpar_date||'''  group by PARENT_CODE,REF_CUR_ID,ref_branch );'\ninto var_execute_query from dual;\n\nDBMS_OUTPUT.PUT_LINE(var_execute_query);\nEXECUTE IMMEDIATE 'BEGIN ' || var_execute_query || ' END;';\ncommit;\n\n\n\nselect '\ninsert into TBL_LEDGER_BRANCH(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,ref_branch,NUMBER_DATE)\n(select PARENT_CODE, substr(PARENT_CODE,1,3)||''000000'', 3, sum(BALANCE), REF_CUR_ID,'''||inpar_date||''',ref_branch  ,'||var_partition||' from TBL_LEDGER_BRANCH PARTITION ('||var_partition_name||') where depth = 4 and EFF_DATE = '''||inpar_date||''' group by PARENT_CODE,REF_CUR_ID,ref_branch );'\ninto var_execute_query from dual;\n\nEXECUTE IMMEDIATE 'begin '||var_execute_query||' end;';\ncommit;\n\n\nselect '\ninsert into TBL_LEDGER_BRANCH(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,ref_branch,NUMBER_DATE)\n(select PARENT_CODE, substr(PARENT_CODE,1,1)||''00000000'', 2, sum(BALANCE), REF_CUR_ID,'''||inpar_date||''',ref_branch  ,'||var_partition||' from TBL_LEDGER_BRANCH PARTITION ('||var_partition_name||') where depth = 3 and EFF_DATE = '''||inpar_date||''' group by PARENT_CODE,REF_CUR_ID,ref_branch );'\ninto var_execute_query from dual;\n\nEXECUTE IMMEDIATE 'begin '||var_execute_query||' end;';\ncommit;\n\n\nselect '\ninsert into TBL_LEDGER_BRANCH(LEDGER_CODE,PARENT_CODE,DEPTH,BALANCE,REF_CUR_ID,eff_date,ref_branch,NUMBER_DATE)\n(select PARENT_CODE, 0, 1, sum(BALANCE), REF_CUR_ID ,'''||inpar_date||''',ref_branch ,'||var_partition||'  from TBL_LEDGER_BRANCH PARTITION ('||var_partition_name||') where depth = 2 and EFF_DATE = '''||inpar_date||''' group by PARENT_CODE,REF_CUR_ID,ref_branch );'\ninto var_execute_query from dual;\n\n\n\nEXECUTE IMMEDIATE 'begin '||var_execute_query||' end;';\ncommit;\n\nselect '\nUPDATE TBL_LEDGER_BRANCH  PARTITION ('||var_partition_name||') t\nSET t.NAME =\n  (SELECT MAX(GL_NAME)\n  FROM DADEKAVAN_DAY.gf1glet\n  WHERE  GL_CODE   = t.ledger_code\n  )\nWHERE t.eff_date = '''||inpar_date||'''\nand t.depth\u003c\u003e 5;'\ninto var_execute_query from dual;\n\nEXECUTE IMMEDIATE 'begin '||var_execute_query||' end;';\ncommit;\n\nEND ;"},{"Name":"PRC_REPORT_SETTING","ObjectID":276110,"Digest":"b480c5e7a73851b57c2a9d14ce6a406c7f96c073a340f9381a2f2de41562d35c","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_REPORT_SETTING\" (\nINPAR_REP_ID IN NUMBER\n,  INPAR_SHOW_SAYER IN VARCHAR2 \n, INPAR_SHOW_MANDE IN VARCHAR2 \n, INPAR_LEVELS IN VARCHAR2\n,OUTPAR_ONE OUT NUMBER\n) AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:\n  */\n  --------------------------------------------------------------------------------\nvar_rep_Id number;\nBEGIN\n\nselect count(*) into var_rep_id from Tbl_Report_Setting where Rep_Id = inpar_rep_id;\n\nif (Var_Rep_Id != 0) then\n\nUPDATE TBL_REPORT_SETTING\nSET Show_Sayer=Inpar_Show_Sayer,Show_Mande=Inpar_Show_Mande , Levels = Inpar_Levels where Rep_Id = Inpar_Rep_Id;\nCommit;\n\n  else\n  INSERT\nINTO TBL_REPORT_SETTING\n  (\n   \n    SHOW_SAYER,\n    SHOW_MANDE,\n    LEVELS,\n    REP_ID\n  )\n  VALUES\n  (\n    INPAR_SHOW_SAYER,\n    INPAR_SHOW_MANDE,\n    INPAR_LEVELS,\n    INPAR_REP_ID\n  );\n  commit;\n  end if;\n  Outpar_One := 1;\nEND PRC_REPORT_SETTING;"},{"Name":"PRC_DASHBOARD_PROFILE","ObjectID":276118,"Digest":"7d93d18a6edc08b03161796b21ef1a448312ea966dfe09d3953d36a93e68a21e","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DASHBOARD_PROFILE\" \n(\n  inpar_ledger_profile in varchar2 \n, inpar_timing_profile in varchar2 ,\ninpar_type in varchar,\n outpar_id out varchar2 \n) as \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: NAVID\n  Release Date/Time:1396/05/17-16:00\n  Version: 1.0\n  Category:2\n  Description: in procedure baraE entekhabe profile haE mibashad ke in profileha\n               gharar ast baraE namayesh gozareshate dashbord estefade shavad va\n               masiri ke az in procedure estefade mikonad ebarat ast az : \n               (Tanzimat -\u003e Modiriyate gozareshat -\u003e TanzimateDashboard).khoroji\n               dar jadvali be name TBL_dashboard_profile zakhire mishavad ke in \n               jadval tanha yek satr darad.\n  */\n--------------------------------------------------------------------------------\nvar_ledger number;\nvar_timing number;\nbegin\n\nUPDATE TBL_DASHBOARD_PROFILE\nSET REF_LEDGER_PROFILE = inpar_ledger_profile,\nREF_TIMING_PROFILE = inpar_timing_profile,\n typee = inpar_type;\ncommit; \n-----------------------------------------\noutpar_id := 1;\nend prc_dashboard_profile;"},{"Name":"PRC_J_PRE_AGGREGATION","ObjectID":276169,"Digest":"89eb71bd7ca6e6605b5c89bbb391bd44ae55752b4be9246926260b3f8599b463","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_J_PRE_AGGREGATION\" AS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: rasool_jahani\n  Editor Name: \n  Release Date/Time:1396/02/24-10:00\n  Edit Name: 1396/02/10-10:00\n  Version: 1.1\n  Category:2\n  Description: enteghal har code sarfasl dar har baze zamani be jadval aggrigation\n               enteghal profile zamani be jadval repper\n               tajmie daftar kol baraye har baze zamani dar repval\n */\n--------------------------------------------------------------------------------\n\nBEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_J_VALUE';\n\n---/////////////////////////////////\n---/////Insert  Sood Seporde  /////\n--////////////////////////////////\nINSERT\nINTO TBL_J_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID\n   )\nSELECT 21,\n  PAY.REF_DEP_ID,\n  sum(PROFIT_AMOUNT),\n  --PROFIT_AMOUNT,\n  DEP.REF_BRANCH,\n  trunc(PAY.DUE_DATE),\n  DEP.REF_DEPOSIT_TYPE,\n  AC.LEDGER_CODE_PROFIT,\n  DEP.REF_CURRENCY,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  DEP.REF_CUSTOMER\nFROM AKIN.TBL_DEPOSIT_INTEREST_PAYMENT PAY\nJOIN AKIN.TBL_DEPOSIT DEP\nON PAY.REF_DEP_ID = DEP.DEP_ID\nJOIN AKIN.TBL_DEPOSIT_ACCOUNTING AC\nON DEP.REF_DEPOSIT_ACCOUNTING = AC.DEP_ACC_ID \nJOIN TBL_BRANCH BRN\nON BRN.BRN_ID = DEP.REF_BRANCH\nGROUP BY trunc(PAY.DUE_DATE) ,\n  AC.LEDGER_CODE_PROFIT,\n  DEP.REF_BRANCH,\n  DEP.REF_CURRENCY,\n  DEP.REF_CUSTOMER,\n  DEP.REF_DEPOSIT_TYPE,\n  PAY.REF_DEP_ID,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID;\n---/////////////////////////////////\n---////Insert  Sood Tashilat  /////\n--////////////////////////////////\ncommit;\nINSERT\nINTO TBL_J_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID\n   )\nSELECT 11,\n  PAY.REF_LON_ID,\n  sum(PROFIT_AMOUNT),\n  --PROFIT_AMOUNT,\n  LON.REF_BRANCH,\n  trunc(PAY.DUE_DATE),\n  LON.REF_LOAN_TYPE,\n  AC.LEDGER_CODE_PROFIT,\n  LON.REF_CURRENCY,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  LON.REF_CUSTOMER\nFROM AKIN.TBL_LOAN_PAYMENT PAY\nJOIN AKIN.TBL_LOAN LON\nON PAY.REF_LON_ID = LON.LON_ID\nJOIN AKIN.TBL_LOAN_ACCOUNTING AC\nON LON.REF_LOAN_ACCOUNTING = AC.LON_ACC_ID \nJOIN TBL_BRANCH BRN\nON BRN.BRN_ID = LON.REF_BRANCH\nGROUP BY trunc(PAY.DUE_DATE) ,\n  AC.LEDGER_CODE_PROFIT,\n  LON.REF_BRANCH,\n  LON.REF_CURRENCY,\n  LON.REF_CUSTOMER,\n  LON.REF_LOAN_TYPE,\n  PAY.REF_LON_ID,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID;\n---/////////////////////////////////\n---////Insert  Asl Aghsat  ////////\n--////////////////////////////////\ncommit;\n\nINSERT\nINTO TBL_J_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID\n   )\nSELECT 1,\n  PAY.REF_LON_ID,\n  sum(PAY.AMOUNT),\n  LON.REF_BRANCH,\n  trunc(PAY.DUE_DATE),\n  LON.REF_LOAN_TYPE,\n  AC.LEDGER_CODE_SELF,\n  LON.REF_CURRENCY,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID,\n  LON.REF_CUSTOMER\nFROM AKIN.TBL_LOAN_PAYMENT PAY\nJOIN AKIN.TBL_LOAN LON\nON PAY.REF_LON_ID = LON.LON_ID\nJOIN AKIN.TBL_LOAN_ACCOUNTING AC\nON LON.REF_LOAN_ACCOUNTING = AC.LON_ACC_ID \nJOIN TBL_BRANCH BRN\nON BRN.BRN_ID = LON.REF_BRANCH\nGROUP BY trunc(PAY.DUE_DATE) ,\n  AC.LEDGER_CODE_SELF,\n  LON.REF_BRANCH,\n  LON.REF_CURRENCY,\n  LON.REF_CUSTOMER,\n  LON.REF_LOAN_TYPE,\n  PAY.REF_LON_ID,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID;\n---/////////////////////////////////\n---//////Insert Asl Seporde  //////\n--////////////////////////////////\ncommit;\n\nINSERT\nINTO TBL_J_VALUE\n  (\n    REF_MODALITY_TYPE,\n    REF_ID,\n    BALANCE,\n    REF_BRANCH,\n    DUE_DATE,\n    REF_TYPE,\n    REF_LEGER_CODE,\n    REF_CUR_ID,\n    REF_STA_ID,\n    REF_CTY_ID,\n    REF_CUS_ID\n   )\nSELECT 2,\nDEP.DEP_ID,\nSUM(DEP.BALANCE),\nDEP.REF_BRANCH,\nCASE\n    WHEN  trunc(DEP.DUE_DATE) IS NULL\n    THEN sysdate +1\n    ELSE  trunc(DEP.DUE_DATE)\n  END AS DUE_DATE ,\nDEP.REF_DEPOSIT_TYPE,\nAC.LEDGER_CODE_SELF,\nDEP.REF_CURRENCY,\nBRN.REF_STA_ID,\nBRN.REF_CTY_ID,\nDEP.REF_CUSTOMER\nFROM AKIN.TBL_DEPOSIT DEP\nJOIN AKIN.TBL_DEPOSIT_ACCOUNTING AC\nON DEP.REF_DEPOSIT_ACCOUNTING = AC.DEP_ACC_ID\nJOIN TBL_BRANCH BRN\nON DEP.REF_BRANCH = BRN.BRN_ID\nWHERE \n  CASE\n    WHEN  trunc(DEP.DUE_DATE) IS NULL\n    THEN sysdate +1\n    ELSE  trunc(DEP.DUE_DATE)\n  END \u003e sysdate\n  GROUP BY trunc(DEP.DUE_DATE) ,\n  DEP.DEP_ID,\n  AC.LEDGER_CODE_SELF,\n  DEP.REF_BRANCH,\n  DEP.REF_CURRENCY,\n  DEP.REF_CUSTOMER,\n  DEP.REF_DEPOSIT_TYPE,\n  BRN.REF_STA_ID,\n  BRN.REF_CTY_ID;\n\nEND PRC_J_PRE_AGGREGATION;"},{"Name":"PRC_J_REPORT_VALUE","ObjectID":276170,"Digest":"58b9acf448302eed60efa2aec455b1bbe001b32120694d2520a48e62d2e6c105","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_J_REPORT_VALUE\" ( INPAR_ID_REPORT IN NUMBER ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name: 1396/02/24-18:00\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n              albate lazem be zekr ast ke dar inja faghat baraye gozareshat tarikhi in kar anjam mishavad.\n  */\n  /*------------------------------------------------------------------------------*/\n\n VAR_QUERY    VARCHAR2(4000);\n ID_LOAN      NUMBER;\n ID_DEP       NUMBER;\n ID_CUR       NUMBER;\n ID_CUS       NUMBER;\n ID_BRANCH    NUMBER;\n ID_TIMING    NUMBER;\n DATE_TYPE1   DATE := SYSDATE;\nBEGIN\n SYS.DBMS_OUTPUT.ENABLE(3000000);\n EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n SELECT\n  REF_PROFILE_CURRENCY\n INTO\n  ID_CUR\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = INPAR_ID_REPORT;\n\n SELECT\n  REF_PROFILE_CUSTOMER\n INTO\n  ID_CUS\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = INPAR_ID_REPORT;\n\n SELECT\n  REF_PROFILE_BRANCH\n INTO\n  ID_BRANCH\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = INPAR_ID_REPORT;\n\n SELECT\n  REF_PROFILE_DEPOSIT\n INTO\n  ID_DEP\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = INPAR_ID_REPORT;\n\n SELECT\n  REF_PROFILE_TIME\n INTO\n  ID_TIMING\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = INPAR_ID_REPORT;\n\n SELECT\n  REF_PROFILE_LOAN\n INTO\n  ID_LOAN\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = INPAR_ID_REPORT;\n    /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n FOR I IN (\n  SELECT\n   TTPD.ID\n  ,TTP.TYPE\n  ,TTPD.PERIOD_NAME\n  ,TTPD.PERIOD_DATE\n  ,TTPD.PERIOD_START\n  ,TTPD.PERIOD_END\n  ,TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP\n  ,    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n   AND\n    TTP.ID   = ID_TIMING\n ) LOOP\n  IF\n   ( I.TYPE = 1 )\n  THEN     /******agar profile zamani entekhab shode bazehee bashad *****--*/\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,  \nREF_ID,  \nBALANCE,  \nREF_BRANCH,  \nDUE_DATE,  \nREF_TYPE,  \nREF_LEGER_CODE,  \nREF_CUR_ID,  \nREF_STA_ID,  \nREF_CTY_ID,  \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_J_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ')  AND DUE_DATE \u003e to_date(''' ||\n    DATE_TYPE1 ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    DATE_TYPE1 ||\n    ''')+' ||\n    I.PERIOD_DATE ||\n    '  ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,  \nREF_ID,  \nBALANCE,  \nREF_BRANCH,  \nDUE_DATE,  \nREF_TYPE,  \nREF_LEGER_CODE,  \nREF_CUR_ID,  \nREF_STA_ID,  \nREF_CTY_ID,  \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_J_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ') AND DUE_DATE \u003e to_date(''' ||\n    DATE_TYPE1 ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    DATE_TYPE1 ||\n    ''')+' ||\n    I.PERIOD_DATE ||\n    '  ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n  ELSE     /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,  \nREF_ID, \nBALANCE,\nREF_BRANCH,  \nDUE_DATE,  \nREF_TYPE,  \nREF_LEGER_CODE,  \nREF_CUR_ID,  \nREF_STA_ID,  \nREF_CTY_ID,  \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_J_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ') AND DUE_DATE \u003e to_date(''' ||\n    I.PERIOD_START ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    I.PERIOD_END ||\n    ''') ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,  \nREF_ID,  \nBALANCE,\nREF_BRANCH,  \nDUE_DATE,  \nREF_TYPE,  \nREF_LEGER_CODE,  \nREF_CUR_ID,  \nREF_STA_ID,  \nREF_CTY_ID,  \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,  \nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_J_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ') AND DUE_DATE \u003e to_date(''' ||\n    I.PERIOD_START ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    I.PERIOD_END ||\n    ''') ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n  END IF;\n END LOOP;\n\nEND PRC_J_REPORT_VALUE;"},{"Name":"PRC_J_ARCH_REPORT_REQUEST","ObjectID":276194,"Digest":"000117ce854cc805b6dd664041fe4bd01e0189eadc15f3e696c9fa28cfce901d","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_J_ARCH_REPORT_REQUEST\" (\n    INPAR_REPORT_ID IN NUMBER ,\n    INPAR_USER_ID   IN VARCHAR2 ,\n    INPAR_NOTIF_ID  IN NUMBER ,\n    INPAR_REQ_DATE IN VARCHAR2 ,\n    OUTPAR_RES OUT NUMBER )\nAS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:servic darkhast ijad gozaresh tarikhi(az dade hay archive)\n  */\n  --------------------------------------------------------------------------------\n var_Rep_Req_ID  NUMBER;\n  var_notif_id    VARCHAR2(50);\n  var_repper_date DATE;\nBEGIN\n\nDELETE FROM TBL_RATE WHERE TYPE = 'TBL_DEPOSIT';\n  DELETE FROM TBL_RATE WHERE TYPE = 'TBL_LOAN';\ncommit;\nAKIN.Prc_J_Transfer_Accounting(to_date(Inpar_Req_Date,'yyyy-mm-dd'));\nAKIN.Prc_J_Transfer_Deposit(to_date(Inpar_Req_Date,'yyyy-mm-dd'));\nAKIN.Prc_J_Transfer_Deposit_Profit(to_date(Inpar_Req_Date,'yyyy-mm-dd'));\nAKIN.Prc_J_Transfer_Loan(to_date(Inpar_Req_Date,'yyyy-mm-dd'));\nAKIN.Prc_J_Transfer_Payment(to_date(Inpar_Req_Date,'yyyy-mm-dd'));\nPRC_J_PRE_AGGREGATION();\n  ----------------------------------------TBL_RATE  TBL_LOAN\n  INSERT\n  INTO PRAGG.TBL_RATE\n    (\n      RATE,\n      TYPE\n    )\n  SELECT DISTINCT RATE AS NERKH_SUD,\n    'TBL_LOAN'\n  FROM AKIN.TBL_LOAN\n  WHERE RATE IS NOT NULL;\n  COMMIT;\n  ----------------------------------------UPDATE TBL_LOAN RATE\n  UPDATE AKIN.TBL_LOAN a\n  SET a.REF_RATE =\n    (SELECT r.ref_rate\n    FROM tbl_rate r\n    WHERE r.rate = a.rate\n    AND r.type   ='TBL_LOAN'\n    );\n  COMMIT;\n  ----------------------------------------TBL_RATE   TBL_DEPOSIT\n  INSERT\n  INTO PRAGG.TBL_RATE\n    (\n      RATE,\n      TYPE\n    )\n  SELECT DISTINCT RATE AS NERKH_SUD,\n    'TBL_DEPOSIT'\n  FROM AKIN.TBL_DEPOSIT\n  WHERE RATE IS NOT NULL;\n  COMMIT;\n  ----------------------------------------UPDATE TBL_DEPOSIT RATE\n  UPDATE AKIN.TBL_DEPOSIT a\n  SET a.REF_RATE =\n    (SELECT r.ref_rate\n    FROM tbl_rate r\n    WHERE r.rate = a.rate\n    AND r.type   ='TBL_DEPOSIT'\n    );\n  COMMIT;\n\n--------------------------------------------------\n\n-- darj yek darkhast gozaresh jadid dar jadval TBL_REP_REQ\n\n  INSERT\n  INTO TBL_REPREQ\n    (\n      REF_REPORT_ID,\n      REF_USER_ID,\n      REQ_DATE,\n      STATUS,\n      REF_LEDGER_PROFILE,\n      REF_PROFILE_TIME,\n      REF_PROFILE_CURRENCY,\n      REF_PROFILE_CUSTOMER,\n      REF_PROFILE_BRANCH,\n      REF_PROFILE_DEPOSIT,\n      REF_PROFILE_LOAN,\n      REF_HID_REPORT,\n      TYPE,\n      CATEGORY,\n      DATA_DATE\n    )\n    VALUES\n    (\n      INPAR_REPORT_ID,\n      INPAR_USER_ID,\n      sysdate,\n      0,\n      (SELECT REF_LEDGER_PROFILE\n      FROM TBL_REPORT_PROFILE\n      WHERE REF_REPORT = INPAR_REPORT_ID\n      ),\n      (SELECT REF_PROFILE_TIME\n      FROM TBL_REPORT_PROFILE\n      WHERE REF_REPORT = INPAR_REPORT_ID\n      ),\n      (SELECT REF_PROFILE_CURRENCY\n      FROM TBL_REPORT_PROFILE\n      WHERE REF_REPORT = INPAR_REPORT_ID\n      ),\n      (SELECT REF_PROFILE_CUSTOMER\n      FROM TBL_REPORT_PROFILE\n      WHERE REF_REPORT = INPAR_REPORT_ID\n      ),\n      (SELECT REF_PROFILE_BRANCH\n      FROM TBL_REPORT_PROFILE\n      WHERE REF_REPORT = INPAR_REPORT_ID\n      ),\n      (SELECT REF_PROFILE_DEPOSIT\n      FROM TBL_REPORT_PROFILE\n      WHERE REF_REPORT = INPAR_REPORT_ID\n      ),\n      (SELECT REF_PROFILE_LOAN\n      FROM TBL_REPORT_PROFILE\n      WHERE REF_REPORT = INPAR_REPORT_ID\n      ),\n      (SELECT H_ID FROM TBL_REPORT WHERE id = INPAR_REPORT_ID\n      ) ,\n      (SELECT TYPE FROM TBL_REPORT WHERE id = INPAR_REPORT_ID\n      ) ,\n      (SELECT CATEGORY FROM TBL_REPORT WHERE id = INPAR_REPORT_ID\n      )\n      ,to_date(Inpar_Req_Date,'yyyy-mm-dd')\n    );\n  COMMIT;\n  \n  \n    --yaftan id darkhast ijad shode\n  SELECT MAX(id) INTO var_Rep_Req_ID FROM TBL_REPREQ ;\n  --PRC_NOTIFICATION( 'insert', 0,'report', INPAR_NOTIF_TITLE, 'progress', INPAR_USER_ID,'Create Report Request'||INPAR_NOTIF_TITLE,var_Rep_Req_ID,aa );\n  \n  \n    --ejra prasijer baray filter kardan dadeh hay gozersh\n  PRC_J_REPORT_VALUE(INPAR_REPORT_ID);\n  \n    --ejra tajmi\n  PRC_AGGREGATION(var_Rep_Req_ID);\n\n  \n   --berozresani vaziat gozaresh be payan yafte dar jadval darkhastha \n  UPDATE TBL_REPREQ\nSET STATUS                    =1\nWHERE ID                 = var_Rep_Req_ID;\ncommit;\n  \n  \n  \n    --berozresani elanat\n  PRC_NOTIFICATION( 'update', INPAR_NOTIF_ID,'', '' ,'', 'finished', 0,'',0,var_Rep_Req_ID,'',0,var_notif_id );\n  \n  \n    --khoroji alaki\n  OUTPAR_RES := var_notif_id; \n  \n \n  \nEND PRC_J_ARCH_REPORT_REQUEST;"},{"Name":"PRC_ARCH_ADD_REQ_DATE","ObjectID":276366,"Digest":"9f10789c26c13d201205440c319822c8e6bce2536e50d161ae64ebb50fc54304","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_ARCH_ADD_REQ_DATE\" \n(\n  INPAR_REQ_DATE IN VARCHAR2 \n, INPAR_DESCRIPTION IN VARCHAR2 \n, OUTPAR_OUT OUT number \n) AS \n\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/20-10:00\n  Edit Name:\n  Version: 1\n  Description:ezafe kardan yek tarikh baray arshiv kardan dade dar an rooz.\n  */\n  --------------------------------------------------------------------------------\n  \nBEGIN\n--darj tarikh jadid dar list tarikhhay lazem\nINSERT\nINTO TBL_ARCHIVE_DATES@pragg_to_archive \n  (\n    ARCHIVE_DATE,\n    DESCRIPTION\n    )\n  VALUES\n  (\n   to_date (INPAR_REQ_DATE,'yyyy/mm/dd','nls_calendar=persian') ,\n    INPAR_DESCRIPTION\n  );\nCommit;\n  Outpar_Out := 1;\nEND PRC_ARCH_ADD_REQ_DATE;"},{"Name":"PRC_ARCH_REMOVE_DATA","ObjectID":276372,"Digest":"725f3f8158dcfe34d2fc4f7b5b991ea36fb8ff951debd45a88be24d4f056bc80","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_ARCH_REMOVE_DATA\" (\n    INPAR_REMOVE_DATE IN VARCHAR2 ,\n    OUTPAR_OUT OUT NUMBER  )\n\n     --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/20-10:00\n  Edit Name:\n  Version: 1\n  Description:hazf yek tarikh az list tarikhhay darkhasti baray arshiv dade\n  */\n  --------------------------------------------------------------------------------\nAS\n  var_exc NUMBER;\n  var_remove_date date;\nBEGIN\n  --tabdil tarikh vorodi be shamsi\n  Var_Remove_Date := to_date(INPAR_REMOVE_DATE,'yyyy/mm/dd','nls_calendar=persian');\n  \n  --barresi inke aya dadeh baray tarikh vorodi arshiv shode ya na\n  SELECT EXISTENT\n  INTO var_exc\n  FROM tbl_ARCHIVE_DATES@pragg_to_archive\n  WHERE ARCHIVE_DATE = Var_Remove_Date;\n  \n  \n  \n  \n  IF (Var_Exc        = 0) THEN\n  --agar dade baray in rooz vojod nadasht\n    DELETE FROM TBL_ARCHIVE_DATES@pragg_to_archive  WHERE ARCHIVE_DATE = Var_Remove_Date;\n  ELSE\n  --agar dade vojod dasht\n  DELETE FROM TBL_ARCHIVE_DATES@pragg_to_archive  WHERE ARCHIVE_DATE = Var_Remove_Date;\n  \n  \n  --hazf dade hay arshiv shode\n  DELETE FROM ARZ_RELATION@pragg_to_archive  WHERE EFFDATE = Var_Remove_Date;\n  \n  DELETE FROM DAY_GL@pragg_to_archive WHERE EFFDATE   = Var_Remove_Date;\n  \n  DELETE FROM DEPOSIT@pragg_to_archive WHERE EFFDATE=Var_Remove_Date ;\n  \n  DELETE FROM ETELAATE_MOSHTARI@pragg_to_archive WHERE EFFDATE =Var_Remove_Date ;\n  \n  DELETE FROM ETELAATE_SHOBE@pragg_to_archive WHERE EFFDATE = Var_Remove_Date;\n  \n  DELETE FROM LOAN@pragg_to_archive WHERE  EFFDATE =Var_Remove_Date ;\n  \n  DELETE FROM NOE_SEPORDE@pragg_to_archive WHERE EFFDATE = Var_Remove_Date;\n  \n  DELETE FROM NOE_TASHILAT@pragg_to_archive WHERE  EFFDATE     = Var_Remove_Date;\n  \n  DELETE FROM PAYMENT@pragg_to_archive WHERE EFFDATE  =Var_Remove_Date;\n  \n  DELETE FROM SEPORDE_DAFTAR_KOL@pragg_to_archive WHERE EFFDATE =Var_Remove_Date ;\n  \n  DELETE FROM SEPORDE_MOSHTARI@pragg_to_archive WHERE EFFDATE = Var_Remove_Date;\n  \n  DELETE FROM SEPORDE_SOOD@pragg_to_archive WHERE EFFDATE = Var_Remove_Date;\n  \n  DELETE FROM SEPORDE_SOOD_PELEKANI@pragg_to_archive WHERE EFFDATE = Var_Remove_Date;\n  \n  DELETE FROM SEPORDE_SOOD_TAVAFOGHI@pragg_to_archive WHERE EFFDATE    = Var_Remove_Date;\n  \n  DELETE FROM TASHILAT_DAFTAR_KOL@pragg_to_archive WHERE EFFDATE = Var_Remove_Date;\n \n  \n  END IF;\n  \n  \n OUTPAR_OUT := 1;\nEND PRC_ARCH_REMOVE_DATA;"},{"Name":"PRC_DASHBOARD_GAP","ObjectID":276392,"Digest":"511ff14c1f48a54acc5d35849ec6ea65d668e6833b69433f440e67bb55cad29a","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DASHBOARD_GAP\" AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/05/24-10:00\n  Edit Name:  \n  Version: 1.1\n  Category:2\n  Description: be dast avardane maghadir shekaf baraye nemodarhaye shekafe riali va shekafe riali be tafkik ostan\n  */\n  /*------------------------------------------------------------------------------*/\n\n VAR_QUERY    VARCHAR2(4000);\n ID_LOAN      NUMBER;\n ID_DEP       NUMBER;\n ID_CUR       NUMBER;\n ID_CUS       NUMBER;\n ID_BRANCH    NUMBER;\n ID_TIMING    NUMBER;\n DATE_TYPE1   DATE := SYSDATE;\nBEGIN\n  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';\n\n SYS.DBMS_OUTPUT.ENABLE(3000000);\n    /****** baraye inke in gozaresh ro besazim niaz be daftar kol va profile zamani darim ke karbar az pish entekhab karde\n    ba estefade az profilhaye ke karbar entekhab kare az value group by gerefte va dar TBL_VALUE_TEMP mirizim\n    va gozaresh haye ro ke mad nazaremone az in jadval estekhraj mikonim\n    *****--*/\n EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n SELECT\n  NULL\n INTO\n  ID_CUR\n FROM DUAL;\n\n SELECT\n  NULL\n INTO\n  ID_CUS\n FROM DUAL;\n\n SELECT\n  NULL\n INTO\n  ID_BRANCH\n FROM DUAL;\n\n SELECT\n  NULL\n INTO\n  ID_DEP\n FROM DUAL;\n\n SELECT\n  REF_TIMING_PROFILE\n INTO\n  ID_TIMING\n FROM TBL_DASHBOARD_PROFILE;\n\n SELECT\n  NULL\n INTO\n  ID_LOAN\n FROM DUAL;\n\n FOR I IN (\n  SELECT\n   TTPD.ID\n  ,TTP.TYPE\n  ,TTPD.PERIOD_NAME\n  ,TTPD.PERIOD_DATE\n  ,TTPD.PERIOD_START\n  ,TTPD.PERIOD_END\n  ,TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP\n  ,    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n   AND\n    TTP.ID   = ID_TIMING\n ) LOOP\n  IF\n   ( I.TYPE = 1 )\n  THEN\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,   \nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE, \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ')  AND DUE_DATE \u003e to_date(''' ||\n    DATE_TYPE1 ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    DATE_TYPE1 ||\n    ''')+' ||\n    I.PERIOD_DATE ||\n    '  ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,   \nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE, \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ')  AND DUE_DATE \u003e to_date(''' ||\n    DATE_TYPE1 ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    DATE_TYPE1 ||\n    ''')+' ||\n    I.PERIOD_DATE ||\n    '  ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n   DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n  ELSE\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,   \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ') AND DUE_DATE \u003e to_date(''' ||\n    I.PERIOD_START ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    I.PERIOD_END ||\n    ''') ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n   SELECT\n    '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,   \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n''' ||\n    I.ID ||\n    ''',\n''' ||\n    I.PERIOD_NAME ||\n    ''',\n''' ||\n    I.PERIOD_COLOR ||\n    '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n    ') AND REF_CUR_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n    ')' ||\n    ' AND REF_CUS_ID IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n    ')' ||\n    ' AND REF_BRANCH IN ( ' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n    ') AND DUE_DATE \u003e to_date(''' ||\n    I.PERIOD_START ||\n    ''') and DUE_DATE \u003c= to_date(''' ||\n    I.PERIOD_END ||\n    ''') ;'\n   INTO\n    VAR_QUERY\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n   COMMIT;\n  END IF;\n END LOOP;\n\n COMMIT;\n EXECUTE IMMEDIATE 'truncate table TBL_DASHBOARD_GAP_RIALI';\n INSERT INTO TBL_DASHBOARD_GAP_RIALI (\n  NAME\n ,PERIODID\n ,VALUE_IN\n ,VALUE_OUT\n ) SELECT\n  (\n   SELECT\n    PERIOD_NAME\n   FROM TBL_TIMING_PROFILE_DETAIL\n   WHERE ID   = A.REF_TIMING_ID\n  ) AS NAME\n ,A.REF_TIMING_ID\n ,A.\"in\"\n ,B.\"out\"\n FROM (\n   SELECT DISTINCT\n    REF_TIMING_ID\n   ,SUM(BALANCE) AS \"in\"\n   FROM TBL_VALUE_TEMP\n   WHERE REF_MODALITY_TYPE IN (\n     1,11\n    )\n   GROUP BY\n    REF_TIMING_ID\n  ) A\n ,    (\n   SELECT DISTINCT\n    REF_TIMING_ID\n   ,SUM(BALANCE) AS \"out\"\n   FROM TBL_VALUE_TEMP\n   WHERE REF_MODALITY_TYPE IN (\n     2,21\n    )\n   GROUP BY\n    REF_TIMING_ID\n  ) B\n WHERE A.REF_TIMING_ID   = B.REF_TIMING_ID\n ORDER BY A.REF_TIMING_ID;\n\n COMMIT;\n EXECUTE IMMEDIATE 'truncate table TBL_DASHBOARD_GAP_STATE';\n INSERT INTO TBL_DASHBOARD_GAP_STATE (\n  STATE_CODE\n ,STATE_NAME\n ,VALUE_IN\n ,PERIOD_NAME\n ,PERIOD_ID\n ) SELECT\n  REF_STA_ID\n ,(\n   SELECT\n    STA_NAME\n   FROM TBL_STATE\n   WHERE STA_ID   = REF_STA_ID\n  ) AS NAME\n ,SUM(BALANCE) AS VALUE\n ,MAX(TIMING_NAME)\n ,REF_TIMING_ID\n FROM TBL_VALUE_TEMP\n WHERE REF_MODALITY_TYPE IN (\n   1,11\n  )\n GROUP BY\n  REF_STA_ID\n ,REF_TIMING_ID;\n\n COMMIT;\n INSERT INTO TBL_DASHBOARD_GAP_STATE (\n  STATE_CODE\n ,STATE_NAME\n ,VALUE_OUT\n ,PERIOD_NAME\n ,PERIOD_ID\n ) SELECT\n  REF_STA_ID\n ,(\n   SELECT\n    STA_NAME\n   FROM TBL_STATE\n   WHERE STA_ID   = REF_STA_ID\n  ) AS NAME\n ,SUM(BALANCE) AS VALUE\n ,MAX(TIMING_NAME)\n ,REF_TIMING_ID\n FROM TBL_VALUE_TEMP\n WHERE REF_MODALITY_TYPE IN (\n   2,21\n  )\n GROUP BY\n  REF_STA_ID\n ,REF_TIMING_ID;\n\n COMMIT;\n INSERT INTO TBL_DASHBOARD_GAP_STATE (\n  STATE_CODE\n ,STATE_NAME\n ,VALUE_IN\n ,PERIOD_NAME\n ,PERIOD_ID\n ) SELECT\n  *\n FROM (\n   SELECT\n    TBL_STATE.STA_ID\n   ,TBL_STATE.STA_NAME\n   ,0\n   ,A.PERIOD_NAME\n   ,A.ID\n   FROM TBL_STATE\n   ,    (\n     SELECT\n      ID\n     ,REF_TIMING_PROFILE\n     ,PERIOD_NAME\n     FROM TBL_TIMING_PROFILE_DETAIL\n     WHERE REF_TIMING_PROFILE   = (\n       SELECT\n        REF_TIMING_PROFILE\n       FROM TBL_DASHBOARD_PROFILE\n      )\n    ) A\n  ) B\n WHERE B.STA_ID || B.ID NOT IN (\n   SELECT\n    STATE_CODE || PERIOD_ID\n   FROM TBL_DASHBOARD_GAP_STATE\n   WHERE VALUE_OUT IS NULL\n  );\n\n COMMIT;\n INSERT INTO TBL_DASHBOARD_GAP_STATE (\n  STATE_CODE\n ,STATE_NAME\n ,VALUE_OUT\n ,PERIOD_NAME\n ,PERIOD_ID\n ) SELECT\n  *\n FROM (\n   SELECT\n    TBL_STATE.STA_ID\n   ,TBL_STATE.STA_NAME\n   ,0\n   ,A.PERIOD_NAME\n   ,A.ID\n   FROM TBL_STATE\n   ,    (\n     SELECT\n      ID\n     ,REF_TIMING_PROFILE\n     ,PERIOD_NAME\n     FROM TBL_TIMING_PROFILE_DETAIL\n     WHERE REF_TIMING_PROFILE   = (\n       SELECT\n        REF_TIMING_PROFILE\n       FROM TBL_DASHBOARD_PROFILE\n      )\n    ) A\n  ) B\n WHERE B.STA_ID || B.ID NOT IN (\n   SELECT\n    STATE_CODE || PERIOD_ID\n   FROM TBL_DASHBOARD_GAP_STATE\n   WHERE VALUE_IN IS NULL\n  );\n\nEND PRC_DASHBOARD_GAP;"},{"Name":"PRC_UPDATE_DASHBOARD_ID","ObjectID":276460,"Digest":"e9e7c24282faf97b748a9a4dc3b59e57f5f6613701c820efb6c5323a7d34502a","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_UPDATE_DASHBOARD_ID\" as \n\nledger number;\ntiming number;\n\n\n\n\nbegin\n  --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name: \n  Release Date/Time:1396/05/24-10:00\n  Edit Name: \n  Version: 1.1\n  Category:2\n  Description: zamani ke profile ha version jadid bokhorand, dar safeh va javdal\n               tanzimate version jadide profile be soorate automatic update mishavad.\n  */\n  --------------------------------------------------------------------------------\n\n    \n    select max(id) into ledger from tbl_ledger_profile\n    where h_id in(\n    select h_id from tbl_ledger_profile \n    where id in (select ref_ledger_profile from tbl_dashboard_profile ));\n   \n      update tbl_dashboard_profile \n      set ref_ledger_profile = ledger;\n      commit; \n \n \n    \n   \n    select max(id) into timing from tbl_timing_profile\n    where h_id in(\n    select h_id from tbl_timing_profile \n    where id in (select ref_timing_profile from tbl_dashboard_profile ));\n      \n    \n      update tbl_dashboard_profile \n      set ref_timing_profile = timing;\n      commit; \n      \n \n\nend prc_update_dashboard_id;"},{"Name":"PRC_ADD_USERS","ObjectID":276463,"Digest":"87d78a47d5311ae174223229ebb91e53b7d3b03b0b0757c294b73c9eca2ca1e4","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_ADD_USERS\" \n(\n  INPAR_NAME IN VARCHAR2 \n, INPAR_USERNAME IN VARCHAR2 \n, OUTPAR OUT VARCHAR2 \n) AS \nBEGIN\n  \n  insert into tbl_users (name,USERNAME) values (INPAR_NAME,INPAR_USERNAME);\n  commit; \n  select max(id) into outpar from  tbl_users ;\n  \n  \nEND PRC_add_USERS;"},{"Name":"PRC_DELETE_USERS","ObjectID":276536,"Digest":"74a818ff22d3a7fc9e96056141bea7374757d7fd9cce98335408f179435c77c0","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DELETE_USERS\" \n(\n  INPAR_USERNAME IN VARCHAR2 \n, OUTPAR OUT VARCHAR2 \n) AS \nBEGIN\n  delete from tbl_users where USERNAME=INPAR_USERNAME;\n  OUTPAR:=null;\nEND PRC_DELETE_USERS;"},{"Name":"PRC_DASHBOARD_DAILY_REPORT","ObjectID":276676,"Digest":"5e4e3d78a1f0d640e2085f4677394297ffc8523057a23dc0157120297bbfccdc","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DASHBOARD_DAILY_REPORT\" \n AS \n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name:  morteza.sahi\n  Editor Name:\n  Release Date/Time:1396/05/26-10:00\n  Edit Name:\n  Version: 1\n  Description:  sakht gozaresh dashbord (gozareshe rozane);\n  */\n  /*------------------------------------------------------------------------------*/\nBEGIN\n EXECUTE IMMEDIATE 'truncate table TBL_DASHBOaRD_DAILY_REPORT';\n  /****** az jadval value maghadir marbot be  vorodi ha bar asa  roz jame shode va az jame maghadir khorouji kam mishavad(tafrigh da jadval va ba virtual anjam mishavad)*****--*/\n INSERT INTO TBL_DASHBOARD_DAILY_REPORT ( DUE_DATE,IN_FLOW,OUT_FLOW ) SELECT\n  A.DUE_DATE\n ,A.\"in\"\n ,B.\"out\"\n FROM (\n   SELECT DISTINCT\n    DUE_DATE\n   ,SUM(BALANCE) AS \"in\"\n   FROM TBL_VALUE\n   WHERE DUE_DATE \u003c SYSDATE + 365\n    AND\n     DUE_DATE \u003e= SYSDATE\n    AND\n     REF_MODALITY_TYPE IN (\n      1,11\n     )\n   GROUP BY\n    DUE_DATE\n  ) A\n ,    (\n   SELECT DISTINCT\n    DUE_DATE\n   ,SUM(BALANCE) AS \"out\"\n   FROM TBL_VALUE\n   WHERE DUE_DATE \u003c SYSDATE + 365\n    AND\n     DUE_DATE \u003e= SYSDATE\n    AND\n     REF_MODALITY_TYPE IN (\n      2,21\n     )\n   GROUP BY\n    DUE_DATE\n  ) B\n WHERE A.DUE_DATE   = B.DUE_DATE\n ORDER BY A.DUE_DATE;\n\nEND PRC_DASHBOARD_DAILY_REPORT;"},{"Name":"PRC_DASHBOARD_STATE","ObjectID":276682,"Digest":"9ea1328ea3a59aaa23b08da6e880771f350bc3a73b073095d2189ad068538ee1","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DASHBOARD_STATE\" \n AS\n  /*\n  Programmer Name: navid \u0026 morteza\n  Release Date/Time:1396/08/25\n  Version: 1.0\n  Category:\n  Description:\n  */\nBEGIN\n EXECUTE IMMEDIATE 'truncate table TBL_DASHBOARD_STATE';\n INSERT INTO TBL_DASHBOARD_STATE ( STATE_ID,NODE_ID,BALANCE ) SELECT\n  N.REF_STA_ID\n ,N.LEDGER_CODE\n ,ABS(SUM(NVL(N.BALANCE,0) ) )\n FROM (\n   SELECT\n    L.LEDGER_CODE\n   ,L.BALANCE\n   ,TB.REF_STA_ID\n   FROM TBL_BRANCH TB\n   ,    (\n     SELECT\n      LEDGER_CODE\n     ,SUM(BALANCE) AS BALANCE\n     ,REF_BRANCH\n     FROM TBL_LEDGER_BRANCH\n     WHERE DEPTH   = 1\n      AND\n       TRUNC(EFF_DATE) = (\n        SELECT\n         MAX(TRUNC(EFF_DATE) )\n        FROM TBL_LEDGER_BRANCH\n       )\n     GROUP BY\n      REF_BRANCH\n     ,LEDGER_CODE\n    ) L\n   WHERE L.REF_BRANCH   = TB.BRN_ID\n  ) N\n GROUP BY\n  N.REF_STA_ID\n ,N.LEDGER_CODE;\n\n COMMIT;\n INSERT INTO TBL_DASHBOARD_STATE ( STATE_ID,NODE_ID,BALANCE ) SELECT\n  B.STA_ID\n ,A.NODE_ID\n ,0\n FROM (\n   SELECT\n    NODE_ID\n   FROM TBL_DASHBOARD_STATE\n   GROUP BY\n    NODE_ID\n  ) A\n ,    TBL_STATE B\n WHERE A.NODE_ID || B.STA_ID NOT IN (\n   SELECT\n    NODE_ID || STATE_ID\n   FROM TBL_DASHBOARD_STATE\n  );\n\n COMMIT;\nEND PRC_DASHBOARD_STATE;"},{"Name":"PRC_PROFILE_UPDATE","ObjectID":276945,"Digest":"13206d058fe329a7d938258bbe5a0a41b1acdb749f39b22c3e7d5b9cef551483","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_PROFILE_UPDATE\" (\n    INPAR_DES IN VARCHAR2, --new\n    INPAR_REF_USER_UPDATE IN VARCHAR2, --new\n    INPAR_UPDATE_DATE IN varchar2, --new\n    INPAR_TYPE IN VARCHAR2 ,\n    inpar_h_id IN VARCHAR2,\n    outpar out VARCHAR2)\nAS\n  var_max_id      NUMBER;\n  var_max_version NUMBER;\n  var_SRC_COLUMN  VARCHAR2(2000);\n  var_CONDITION   VARCHAR2(2000);\n /*\n  Programmer Name: sobhan sadeghzade\n  Editor Name:\n  Release Date/Time:1396/05/30\n  Edit Name:\n  Version: 1\n  Category:\n  Description:\n  az in prc baraye update tozihat,tarikhe be ruz resani va shakhsi ke taghyirat ra anjam dade ast estefade mishavad \n  */\nBEGIN\n  ------------------------ tbl_profile\n--profile haye marbuz be jadvalhaye TBL_LOAN,TBL_DEPOSIT,TBL_BRANCH,TBL_CUSTOMER,TBL_CURRENCY dar jadval tbl_profile gharar darand va mghadire be ruz resani shode dar in jadvale tbl_profile be ruz resani mishavand.\n--akharin satr marbut be profile update mishavad \n  IF (upper(INPAR_TYPE)='TBL_LOAN' OR upper(INPAR_TYPE)='TBL_DEPOSIT' OR upper(INPAR_TYPE)='TBL_BRANCH' OR upper(INPAR_TYPE)='TBL_CUSTOMER' OR upper(INPAR_TYPE)='TBL_CURRENCY') THEN\n    SELECT MAX(id) INTO var_max_id FROM tbl_profile WHERE h_id=inpar_h_id;\n    UPDATE tbl_profile\n    SET DES          =INPAR_DES,\n      UPDATE_DATE    =to_date(INPAR_UPDATE_DATE,'YYYY/MM/DD HH:MI:SS'),\n      REF_USER_UPDATE=INPAR_REF_USER_UPDATE\n    WHERE id         =var_max_id\n    AND h_id         =inpar_h_id;\n \n    --------------------------------tbl_timing_profile\n --profile haye zamani dar jadval tbl_timing_profile gharar darand va mghadire be ruz resani shode dar in jadval  be ruz resani mishavand.   \n --akharin satr marbut be profile update mishavad \n  elsif(INPAR_TYPE='1' OR INPAR_TYPE='2') THEN\n    SELECT MAX(id) INTO var_max_id FROM tbl_timing_profile WHERE h_id=inpar_h_id;\n    UPDATE tbl_timing_profile\n    SET DES          =INPAR_DES,\n      UPDATE_DATE    =to_date(INPAR_UPDATE_DATE,'YYYY/MM/DD HH:MI:SS'),\n      REF_USER_UPDATE=INPAR_REF_USER_UPDATE\n    WHERE id         =var_max_id\n    AND h_id         =inpar_h_id;\n \n    -------------------------tbl_ledger_profile\n     --profile daftare kol dar jadval tbl_timing_profile gharar darand va mghadire be ruz resani shode dar in jadval  be ruz resani mishavand.   \n --akharin satr marbut be profile update mishavad \n  elsif(upper(INPAR_TYPE)='TBL_LEDGER') THEN\n    SELECT MAX(id) INTO var_max_id FROM TBL_LEDGER_profile WHERE h_id=inpar_h_id;\n    UPDATE tbl_ledger_profile\n    SET DES =INPAR_DES\n\n    WHERE id =var_max_id\n    AND h_id =inpar_h_id ;\n\n  END IF;\n  COMMIT;\n  outpar:='1';\nEND PRC_PROFILE_UPDATE;"},{"Name":"PRC_DELETE_UNUSED_PROFILE","ObjectID":277025,"Digest":"10f06312d65fa75da3e2a2f456915f2638e7dbc27823453677f355fe55a8af4f","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DELETE_UNUSED_PROFILE\" \n AS\n /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahi\n  Editor Name: \n  Release Date/Time:1396/05/08-16:00\n  Edit Name: \n  Version: 1.1\n  Category:2\n  Description: hazf kardane profile hayee ke dar archive va gozareshat dige estefade nemishavand\n  */\n  /*------------------------------------------------------------------------------*/\nBEGIN\n  /****** hazf kardane profilhaye daftar kol az jadval detail*****--*/\n DELETE FROM TBL_LEDGER_PROFILE_DETAIL WHERE REF_LEDGER_PROFILE IN (\n   SELECT\n    ID\n   FROM TBL_LEDGER_PROFILE\n   WHERE ID NOT IN (\n      (\n       SELECT DISTINCT\n        REF_LEDGER_PROFILE\n       FROM TBL_REPREQ\n      )\n     )\n    AND\n     STATUS   = 0\n    AND\n     H_ID \u003c\u003e ID\n  );\n\n COMMIT;\n    /****** hazf kardane profilhaye daftar kol az jadval profil*****--*/\n DELETE FROM TBL_LEDGER_PROFILE WHERE ID NOT IN (\n    (\n     SELECT DISTINCT\n      REF_LEDGER_PROFILE\n     FROM TBL_REPREQ\n    )\n   )\n  AND\n   STATUS   = 0\n  AND\n   H_ID \u003c\u003e ID;\n\n COMMIT;\n DELETE FROM TBL_TIMING_PROFILE_DETAIL WHERE REF_TIMING_PROFILE IN (\n   SELECT\n    ID\n   FROM TBL_TIMING_PROFILE\n   WHERE ID NOT IN (\n      (\n       SELECT DISTINCT\n        TBL_REPREQ.REF_PROFILE_TIME\n       FROM TBL_REPREQ\n      )\n     )\n    AND\n     STATUS   = 0\n    AND\n     H_ID \u003c\u003e ID\n  );\n\n COMMIT;\n  /****** hazf kardane profilhaye zamani az profile *****--*/\n DELETE FROM TBL_TIMING_PROFILE WHERE ID NOT IN (\n    (\n     SELECT DISTINCT\n      TBL_REPREQ.REF_PROFILE_TIME\n     FROM TBL_REPREQ\n    )\n   )\n  AND\n   STATUS   = 0\n  AND\n   H_ID \u003c\u003e ID;\n\n COMMIT;\n    /****** hazf kardane profilhaye zamani az detail*****--*/\n DELETE FROM TBL_PROFILE_DETAIL WHERE REF_PROFILE IN (\n   SELECT\n    ID\n   FROM TBL_PROFILE\n   WHERE ID NOT IN (\n      SELECT DISTINCT\n       *\n      FROM (\n        SELECT DISTINCT\n         NVL(REF_PROFILE_CURRENCY,0)\n        FROM TBL_REPREQ\n        UNION\n        SELECT DISTINCT\n         NVL(REF_PROFILE_BRANCH,0)\n        FROM TBL_REPREQ\n        UNION\n        SELECT DISTINCT\n         NVL(REF_PROFILE_CUSTOMER,0)\n        FROM TBL_REPREQ\n        UNION\n        SELECT DISTINCT\n         NVL(REF_PROFILE_DEPOSIT,0)\n        FROM TBL_REPREQ\n        UNION\n        SELECT DISTINCT\n         NVL(REF_PROFILE_LOAN,0)\n        FROM TBL_REPREQ\n       )\n     )\n    AND\n     STATUS   = 0\n    AND\n     H_ID \u003c\u003e ID\n  );\n\n COMMIT;\n    /****** hazf kardane profilhaye digar az jadval profile*****--*/\n DELETE FROM TBL_PROFILE WHERE ID NOT IN (\n    SELECT DISTINCT\n     *\n    FROM (\n      SELECT DISTINCT\n       NVL(REF_PROFILE_CURRENCY,0)\n      FROM TBL_REPREQ\n      UNION\n      SELECT DISTINCT\n       NVL(REF_PROFILE_BRANCH,0)\n      FROM TBL_REPREQ\n      UNION\n      SELECT DISTINCT\n       NVL(REF_PROFILE_CUSTOMER,0)\n      FROM TBL_REPREQ\n      UNION\n      SELECT DISTINCT\n       NVL(REF_PROFILE_DEPOSIT,0)\n      FROM TBL_REPREQ\n      UNION\n      SELECT DISTINCT\n       NVL(REF_PROFILE_LOAN,0)\n      FROM TBL_REPREQ\n     )\n   )\n  AND\n   STATUS   = 0\n  AND\n   H_ID \u003c\u003e ID;\n\nEND PRC_DELETE_UNUSED_PROFILE;"},{"Name":"MAKING_DEPOSIT","ObjectID":280245,"Digest":"13182c06beea5e9fcf641fc9d2fb85e05cee659fc7a27f20e6ae09ba54fc74f3","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"MAKING_DEPOSIT\" \n IS\nBEGIN\n FOR I IN 1..1000 LOOP\n  INSERT INTO AKIN.TBL_DEPOSIT (\n   DEP_ID\n  ,REF_DEPOSIT_TYPE\n  ,REF_BRANCH\n  ,REF_CUSTOMER\n  ,DUE_DATE\n  ,BALANCE\n  ,OPENING_DATE\n  ,RATE\n  ,MODALITY_TYPE\n,REF_DEPOSIT_ACCOUNTING\n  ,REF_CURRENCY\n  ) VALUES (\n   I\n  ,TRUNC(DBMS_RANDOM.VALUE(1,10) )\n  ,TRUNC(DBMS_RANDOM.VALUE(1,310) )\n  ,TRUNC(DBMS_RANDOM.VALUE(1,300) )\n  ,SYSDATE + TRUNC(DBMS_RANDOM.VALUE(1,2000) )\n  ,TRUNC(DBMS_RANDOM.VALUE(1000000,1000000000) )\n  ,SYSDATE - TRUNC(DBMS_RANDOM.VALUE(10,400) )\n  ,1\n  ,1\n  ,TRUNC(DBMS_RANDOM.VALUE(3,10) )\n  ,4\n  );\n\n END LOOP;\nEND;"},{"Name":"PRC_UPDATE_PERIOD_DURATION","ObjectID":281830,"Digest":"90e3618ff44c7f5235864a1e327971a822d79388cd8f54dacf7c224b7338e49f","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_UPDATE_PERIOD_DURATION\" \nas\nbegin\nupdate TBL_TIMING_PROFILE tt set tt.PERIOD_DURATION = (select a.PERIOD_DURATION from  (\nSELECT REF_TIMING_PROFILE,sum(PERIOD_DATE)as PERIOD_DURATION FROM TBL_TIMING_PROFILE_DETAIL where REF_TIMING_PROFILE in (select id from TBL_TIMING_PROFILE where type = 1)\ngroup by TBL_TIMING_PROFILE_DETAIL.REF_TIMING_PROFILE)a where A.REF_TIMING_PROFILE = tt.id)\nwhere tt.type = 1 ;\ncommit;\nupdate TBL_TIMING_PROFILE tt set tt.PERIOD_DURATION = \n(select a.PERIOD_DURATION from  (\nselect REF_TIMING_PROFILE,max(PERIOD_END)-min(PERIOD_START)as PERIOD_DURATION from TBL_TIMING_PROFILE_DETAIL where REF_TIMING_PROFILE in (select id from TBL_TIMING_PROFILE where type = 2)\ngroup by TBL_TIMING_PROFILE_DETAIL.REF_TIMING_PROFILE)a where A.REF_TIMING_PROFILE = tt.id)\nwhere tt.type = 2 ;\ncommit;\nend;"},{"Name":"PRC_LCR_UPDATE_GI_CALC","ObjectID":281831,"Digest":"51856af0a7791b6fb32b04b5672ad55a149bd66620acf37bfc746d14ab06accd","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LCR_UPDATE_GI_CALC\" (\n    INPAR_ref_report IN VARCHAR2 )\nAS\n  \nBEGIN\n \n  FOR i IN\n  (SELECT * FROM TBL_LCR_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_LCR_REP_PROFILE_DETAIL\n      SET value        = pkg_lcr.FNC_LCR_GI_CALC(i.profile_id)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_lcr_update_gi_calc;"},{"Name":"PRC_LEDGER_SENS_PROFILE_REPORT","ObjectID":281950,"Digest":"db5ae72e0b3a597a204360f058bc9e47aed821c5135bb791a65e57f0a9c36097","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LEDGER_SENS_PROFILE_REPORT\" (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,inpar_ledger_profile     in varchar2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_LEDGER_PROFIEL\n   ,TYPE\n   ,CATEGORY\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,inpar_ledger_profile\n   ,INPAR_TYPE\n   ,'ledger-sens'\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n     \n     update tbl_report set h_id =OUTPAR_ID\n     where id = OUTPAR_ID;\n     commit;\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,REF_LEDGER_PROFIEL = inpar_ledger_profile\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\nend prc_ledger_sens_profile_report;"},{"Name":"PRC_STATE_REPORT_PROFILE","ObjectID":282384,"Digest":"69c120e0830cc79babc86d3a26bc75e2c2984cff93cd44b88e16f0ee186e3061","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_STATE_REPORT_PROFILE\" (\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_REF_USER         IN VARCHAR2 ,\n    INPAR_STATUS           IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    inpar_ledger_profile in varchar2,\n    inpar_timing_profile in varchar2,\n    inpar_dep_profile in varchar2,\n    inpar_loan_profile in varchar2,\n    inpar_brn_profile in varchar2,\n    inpar_cus_profile in varchar2,\n    inpar_cur_profile in varchar2,\n    inpar_timing_profile_type in varchar2,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 , -- manzoor riali,....\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        TYPE,\n        REF_LEDGER_PROFIEL,\n        ref_timing_profile,\n        REF_DEP_PROFILE,\n        REF_LON_PROFILE,\n        REF_BRN_PROFILE,\n        REF_CUS_PROFILE,\n        REF_CUR_PROFILE,\n        TIMING_PROFILE_TYPE\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n   'STATE' ,\n    INPAR_TYPE,\n    inpar_ledger_profile ,\n    inpar_timing_profile,\n    inpar_dep_profile ,\n    inpar_loan_profile ,\n    inpar_brn_profile ,\n    inpar_cus_profile ,\n    inpar_cur_profile ,\n    inpar_timing_profile_type\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME   = INPAR_NAME ,\n      DES      = INPAR_DES ,\n      REF_USER = INPAR_REF_USER ,\n      STATUS   = INPAR_STATUS ,\n      TYPE     = INPAR_TYPE,\n  REF_LEDGER_PROFIEL       =   inpar_ledger_profile ,\n  REF_TIMING_PROFILE             =   inpar_timing_profile,\n  REF_DEP_PROFILE             =   inpar_dep_profile ,\n      REF_LON_PROFILE         =   inpar_loan_profile ,\n      REF_BRN_PROFILE   =   inpar_brn_profile ,\n        REF_CUS_PROFILE       =   inpar_cus_profile ,\n           REF_CUR_PROFILE    =   inpar_cur_profile ,\n           timing_profile_type    =   inpar_timing_profile_type\n    WHERE ID   = INPAR_ID;\n    COMMIT;\n  END IF;\n  --=============\n\n  --==============\nEND PRC_STATE_REPORT_PROFILE;"},{"Name":"PRC_LEGAL_DEPOSIT","ObjectID":282425,"Digest":"4c8a4f6a5c3bb3a26b0c7fbaf4da83b452431090e46672b4eec7b6e01ad31634","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LEGAL_DEPOSIT\" \n(\n  INPAR_DATE IN DATE \n  --,  inpar_ledger_code in varchar2\n) AS \nLOC_SEPORDE_GHANUNI NUMBER;\n  LOC_NESBAT NUMBER;\n  LOC_MEGHDAR VARCHAR2(500);\nBEGIN\n--  SELECT abs(balance) into loc_seporde_ghanuni -- 53340024266\n-- FROM TBL_LEDGER_ARCHIVE\n-- WHERE ledger_code = 3100700070 and eff_date = INPAR_DATE;\n-- \n-- \n---- \n-- SELECT loc_seporde_ghanuni / SUM(balance) INTO LOC_NESBAT\n-- FROM TBL_value\n-- WHERE REF_LEGER_CODE IN (SELECT distinct AKIN.TBL_DEPOSIT_ACCOUNTING.LEDGER_CODE_SELF FROM AKIN.TBL_DEPOSIT_ACCOUNTING);\n-- \n    INSERT INTO TBL_value(REF_MODALITY_TYPE, --ID_INSERT = 3\n                                          REF_LEGER_CODE, \n                                         DUE_DATE, \n                                          REF_CUR_ID, \n                                          BALANCE,\n                                          other_type)\n \n SELECT 2, --inpar_ledger_code\n          3100700070\n        ,TARIKH_MOASSER, 4, TRUNC(SUM(mande)) AS MANDE,3   FROM\n  (\n  SELECT 2, \n  3100700070,\n  td.dep_id,\n  CASE WHEN tv.due_date IS NULL THEN TRUNC(inpar_date)+1 ELSE tv.due_date END AS TARIKH_MOASSER, \n  tv.REF_CUR_ID,\n  case when td.MODALITY_TYPE = 2 then  (tv.balance)* 0.1  else (tv.balance)* 0.12 end as mande  \n    FROM TBL_VALUE tv , AKIN.TBL_DEPOSIT td\n    WHERE  tv.ref_leger_code IN (SELECT DISTINCT akin.TBL_DEPOSIT_ACCOUNTING.LEDGER_CODE_SELF FROM AKIN.TBL_DEPOSIT_ACCOUNTING)\n    and td.dep_id = tv.ref_id\n    )\n\n    GROUP BY TARIKH_MOASSER, REF_CUR_ID;\n    COMMIT;\n    ------------------------------------------------------------------\n    SELECT loc_seporde_ghanuni - SUM(balance) INTO LOC_MEGHDAR \n    FROM TBL_value WHERE REF_LEGER_CODE = 3100700070;\n  \n    INSERT INTO TBL_value(REF_MODALITY_TYPE, --ID_INSERT = 3.1\n                                          REF_LEGER_CODE, \n                                          DUE_DATE, \n                                          REF_CUR_ID, \n                                          BALANCE,\n                                          other_type)\n    VALUES(2, 3100700070, TRUNC(inpar_date)+1 , 4, ROUND(LOC_MEGHDAR),3.1);\n    COMMIT;\n    \nEND PRC_LEGAL_DEPOSIT;"},{"Name":"UPDATE_LEDGER_NODE_ID_TYPE","ObjectID":282953,"Digest":"85a8e6164c82e48188c65ce561fe63200e79c942836f9922ce1f5dd4249bfbb4","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"UPDATE_LEDGER_NODE_ID_TYPE\" \n AS \nBEGIN\n\nfor i in (select * from pragg.tbl_ledger where PARENT_CODE=0 and node_type is not null) loop\n\nif(i.ledger_code=10000000000 or i.ledger_code=50000000000 or i.ledger_code=30000000000) then  -- type=2\nUPDATE pragg.tbl_ledger\nSET node_type      ='2'\nWHERE ledger_code IN\n  (SELECT LEDGER_CODE\n  FROM pragg.tbl_ledger\n    CONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\n    START WITH LEDGER_CODE       = i.ledger_code\n  );\n  \nELSIF (i.ledger_code=40000000000 or i.ledger_code=20000000000 ) then  -- type=1\nUPDATE pragg.tbl_ledger\nSET node_type      ='1'\nWHERE ledger_code IN\n  (SELECT LEDGER_CODE\n  FROM pragg.tbl_ledger\n    CONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\n    START WITH LEDGER_CODE       = i.ledger_code\n  ); \n   end if;\n end loop; \n   commit;\nEND update_ledger_node_id_type;"},{"Name":"PRC_LEDGER_PROFILE_INSERT_ALL","ObjectID":283125,"Digest":"3caa2d7ba6265a948c8098cc52bef0abccd0710eb66332b4a49acfcc6baa97d6","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LEDGER_PROFILE_INSERT_ALL\" (\n INPAR_QUERY    IN CLOB\n ,INPAR_ID       IN NUMBER\n ,OUTPAR_QUERY   OUT VARCHAR2\n)\n AS\n var_id number;\nBEGIN\nselect max(id) into var_id from tbl_ledger_profile where h_id = INPAR_ID;\n EXECUTE IMMEDIATE 'begin ' || INPAR_QUERY || ' end;';\n --EXECUTE IMMEDIATE INPAR_QUERY;\n OUTPAR_QUERY   := 1;\n\n\nEND PRC_LEDGER_PROFILE_INSERT_ALL;"},{"Name":"PRC_DUE_DATE_REPORT_VALUE","ObjectID":285613,"Digest":"1525eb26418c05a4086efb81311762711886fc37c8bd44742b9296138d5d8c3f","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_DUE_DATE_REPORT_VALUE\" (\n    INPAR_ID_REPORT IN NUMBER )\nAS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n  VAR_QUERY  VARCHAR2(4000);\n  ID_LOAN    NUMBER;\n  ID_DEP     NUMBER;\n  ID_CUR     NUMBER;\n  ID_CUS     NUMBER;\n  ID_BRANCH  NUMBER;\n  ID_TIMING  NUMBER;\n  DATE_TYPE1 DATE := SYSDATE;\n  var_rep_req number;\nBEGIN\n--  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n\n  SELECT REF_TIMING_PROFILE\n  INTO ID_TIMING\n  FROM TBL_REPORT \n  WHERE ID = INPAR_ID_REPORT;\n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n   INSERT\n  INTO TBL_REPREQ\n    (\n      REF_REPORT_ID,\n      REF_USER_ID,\n      REQ_DATE,\n      STATUS,\n      REF_LEDGER_PROFILE,\n      REF_PROFILE_TIME,\n      REF_PROFILE_CURRENCY,\n      REF_PROFILE_CUSTOMER,\n      REF_PROFILE_BRANCH,\n      REF_PROFILE_DEPOSIT,\n      REF_PROFILE_LOAN,\n      REF_HID_REPORT,\n      TYPE,\n      CATEGORY\n    )\n  values(\n  INPAR_ID_REPORT,\n  (select REF_USER from tbl_report where id =INPAR_ID_REPORT ),\n  sysdate,\n  0,\n  0,\n  ID_TIMING,\n  0,0,0,0,0,0,'DUE_DATE','DUE_DATE'\n  );\n  commit;\n\n  select max(id) into var_rep_req from tbl_repreq ;\n\n  FOR I IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  )\n  LOOP\n    IF ( I.TYPE = 1 ) THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n      SELECT '  \nINSERT INTO TBL_DUE_DATE_DETAIL (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,BRANCH\n ,TYPE\n ,RATE,\n name\n)   \n   SELECT\n '||var_rep_req||'\n ,100000 ||\n REF_BRANCH ||\n 100 ||\n REF_DEPOSIT_TYPE AS BACHE2\n ,100000 ||\n REF_BRANCH ||\n 100 ||\n REF_DEPOSIT_TYPE ||\n RATE AS BACHE1\n ,SUM(BALANCE)\n ,4\n ,'||I.ID||'\n ,REF_BRANCH\n ,REF_DEPOSIT_TYPE\n ,RATE\n , ''نرخ سود '' || RATE\nFROM AKIN.TBL_DEPOSIT\nWHERE  AND DUE_DATE \u003e to_date('''\n        || DATE_TYPE1\n        || ''') and DUE_DATE \u003c= to_date('''\n        || DATE_TYPE1\n        || ''')+'\n        || I.PERIOD_DATE\n        || '\n AND\n  RATE IS NOT NULL\nGROUP BY\n REF_BRANCH\n ,REF_DEPOSIT_TYPE\n ,RATE;'    \n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n        DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \nINSERT INTO TBL_DUE_DATE_DETAIL (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,BRANCH\n ,TYPE\n ,RATE,\n name\n) \nSELECT\n '||var_rep_req||'\n ,100000 ||\n REF_BRANCH ||\n 100 ||\n REF_DEPOSIT_TYPE AS BACHE2\n ,100000 ||\n REF_BRANCH ||\n 100 ||\n REF_DEPOSIT_TYPE ||\n RATE AS BACHE1\n ,SUM(BALANCE)\n ,4\n ,'||I.ID||'\n ,REF_BRANCH\n ,REF_DEPOSIT_TYPE\n ,RATE\n , ''نرخ سود '' || RATE\nFROM AKIN.TBL_DEPOSIT\nWHERE DUE_DATE \u003e to_date('''\n        || I.PERIOD_START\n        || ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date('''\n        || I.PERIOD_END\n        || ''',''dd-mm-yyyy'') \n AND\n  RATE IS NOT NULL\nGROUP BY\n REF_BRANCH\n ,REF_DEPOSIT_TYPE\n ,RATE;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n\n    END IF;\n  END LOOP;\n  COMMIT;\nEND PRC_due_date_report_value;"},{"Name":"PRC_INSERT_COM_RESULT","ObjectID":290108,"Digest":"cbdf94e0889fe38f7cb77bf0b25afb14c7d0a790e53ba4ba6aa995a7f0f1d7fe","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_INSERT_COM_RESULT\" \nAS\nVAR_DATE DATE;\nBEGIN\nSELECT MAX(EFF_DATE) INTO VAR_DATE FROM TBL_COM_VALUE;\nFOR I IN 1..60 LOOP\n--------------------------------------------------------------------------------\nINSERT INTO TBL_COM_RESULT (\nEFF_DATE ,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) AS direct\n ,(HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD)) AS indirect\n , (ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) + (HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,10,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODCi' AS ODCi,'VOi' AS VOi,'Vi' AS Vi,'sd' AS sd,'VTi' AS VTi,'SOD' AS SOD,'LD' AS LD,'IC' AS IC,'HCi' AS HCi,'NODi' AS NODi,'NDi' AS NDi,'VCi'\nAS VCi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;  \n --*********************************************************\n\n \n  INSERT INTO TBL_COM_RESULT (\n  EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,\n BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n    ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) - ((VDi/V)*sd)/(VDi*(1-SDD-LD)) AS direct\n ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) AS indirect\n ,  ((VDi/V)*sd)/(VDi*(1-SDD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,9,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VDi' AS VDi,'V' AS V,'sd' AS sd,'SDD' AS SDD,'LD' AS LD,'HCi' AS HCi,'NDDi' AS NDDi,'NDi' AS NDi,'VCi'\nAS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n COMMIT;\n-- ******************************************************\n INSERT INTO TBL_COM_RESULT (\n EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,((VSi/V)*sd)/(VSi*(1-SSD-LD))  AS direct\n ,((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) AS indirect\n , ((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) + ((VSi/V)*sd)/(VSi*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,8,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VSi' AS VSi,'V' AS V,'sd' AS sd,'SSD' AS SSD,'LD' AS LD,'HCi' AS HCi,'NSDi' AS NSDi,'NDi' AS NDi,'VCi' AS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n \n COMMIT;\n--*************************************************************\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD))  AS direct\n ,(HCI*(NTDi/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) AS indirect\n , (TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD)) +  (HCI*(NTDI/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,7,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--*************************************************************\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(Dci-sd1*(Vi/V))/(Vi*(1-SD-LD))  AS direct\n ,(HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD))  AS indirect\n , (Dci-sd1*(Vi/V))/(Vi*(1-SD-LD)) +  (HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,6,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'Dci' AS Dci,'sd' AS sd1,'Vi' AS Vi,'V' AS V,'SD' AS SD,'LD' AS LD,'HrCi' AS HrCi,'RCi' AS RCi,'Dpi' AS Dpi,'Eci' as Eci\n  ,'Ici' AS Ici,'EECi' AS EECi,'OCi' AS OCi,'Mci' as Mci,'NPLCi' AS NPLCi,'FCi' AS FCi  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n  COMMIT;\n -- ************************************************************\n  --================================================================ type = 1\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(DC-SD1)/(V*(1-SD-LD)) AS direct\n ,(OC+CC+FC+NPLC)/(V*(1-SD-LD)) AS indirect\n , ((DC-SD1)/(V*(1-SD-LD))+(OC+CC+FC+NPLC)/(V*(1-SD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '1' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'DC' AS DC,'sd' AS SD1,'V' AS V,'SD' AS SD, 'LD' as LD, 'OC' as OC, 'CC' as CC\n   ,'FC' as FC,'NPLC' as NPLC\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--============================================================================================\n/*\n--====================================================================================type = 2 \nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDC-(VT/V)*SD1)/(VS*(1-SSD-LD)) AS direct\n ,(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD)) AS indirect\n , ((TDC-(VT/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '2' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDC' AS TDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--=================================================================================================\n*/\n/*\n--====================================================================================type = 3\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))AS direct\n ,(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) AS indirect\n , (SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '3' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n*/\n/*\n--=======================================================================type = 4\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODC-(VO/V)*SD1)/(VO*(1-SOD-LD)) AS direct\n ,(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD)) AS indirect\n , (ODC-(VO/V)*SD1)/(VO*(1-SOD-LD))+(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '4' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\nCOMMIT;\n--==============================================================================\n*/\n/*\n--========================================================================type = 5\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,((VD/V)*SD1)/(VD*(1-SDD-LD)) AS direct\n , (HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD)) AS indirect\n , ((VD/V)*SD1)/(VD*(1-SDD-LD))-(HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '5' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD,'SDD' as SDD,'NDD' as NDD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--=============================================================================\n*/\n--====================================================================================type = 11\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBB-(MTBB/V)*SD1)/(MTBB*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '11' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBB' as SPBB, 'MTBB' as MTBB\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n--====================================================================================type = 12\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBM-(MTBM/V)*SD1)/(MTBM*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '12' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBM' as SPBM, 'MTBM' as MTBM\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n\n\nEND LOOP;\n\nFOR I IN 335..365 LOOP\n\nINSERT INTO TBL_COM_RESULT (\nEFF_DATE ,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) AS direct\n ,(HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD)) AS indirect\n , (ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) + (HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,10,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODCi' AS ODCi,'VOi' AS VOi,'Vi' AS Vi,'sd' AS sd,'VTi' AS VTi,'SOD' AS SOD,'LD' AS LD,'IC' AS IC,'HCi' AS HCi,'NODi' AS NODi,'NDi' AS NDi,'VCi'\nAS VCi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;  \n --*********************************************************\n\n \n  INSERT INTO TBL_COM_RESULT (\n  EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n \n  ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) - ((VDi/V)*sd)/(VDi*(1-SDD-LD)) AS direct\n ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) AS indirect\n ,  ((VDi/V)*sd)/(VDi*(1-SDD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,9,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VDi' AS VDi,'V' AS V,'sd' AS sd,'SDD' AS SDD,'LD' AS LD,'HCi' AS HCi,'NDDi' AS NDDi,'NDi' AS NDi,'VCi'\nAS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n COMMIT;\n-- ******************************************************\n INSERT INTO TBL_COM_RESULT (\n EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,((VSi/V)*sd)/(VSi*(1-SSD-LD))  AS direct\n ,((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) AS indirect\n , ((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) + ((VSi/V)*sd)/(VSi*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,8,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VSi' AS VSi,'V' AS V,'sd' AS sd,'SSD' AS SSD,'LD' AS LD,'HCi' AS HCi,'NSDi' AS NSDi,'NDi' AS NDi,'VCi' AS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n \n COMMIT;\n--*************************************************************\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD))  AS direct\n ,(HCI*(NTDi/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) AS indirect\n , (TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD)) +  (HCI*(NTDI/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,7,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--*************************************************************\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(Dci-sd1*(Vi/V))/(Vi*(1-SD-LD))  AS direct\n ,(HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD))  AS indirect\n , (Dci-sd1*(Vi/V))/(Vi*(1-SD-LD)) +  (HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,6,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'Dci' AS Dci,'sd' AS sd1,'Vi' AS Vi,'V' AS V,'SD' AS SD,'LD' AS LD,'HrCi' AS HrCi,'RCi' AS RCi,'Dpi' AS Dpi,'Eci' as Eci\n  ,'Ici' AS Ici,'EECi' AS EECi,'OCi' AS OCi,'Mci' as Mci,'NPLCi' AS NPLCi,'FCi' AS FCi  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n  COMMIT;\n -- ************************************************************\n  --================================================================ type = 1\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(DC-SD1)/(V*(1-SD-LD)) AS direct\n ,(OC+CC+FC+NPLC)/(V*(1-SD-LD)) AS indirect\n , ((DC-SD1)/(V*(1-SD-LD))+(OC+CC+FC+NPLC)/(V*(1-SD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '1' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'DC' AS DC,'sd' AS SD1,'V' AS V,'SD' AS SD, 'LD' as LD, 'OC' as OC, 'CC' as CC\n   ,'FC' as FC,'NPLC' as NPLC\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--============================================================================================\n/*\n--====================================================================================type = 2 \nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDC-(VT/V)*SD1)/(VS*(1-SSD-LD)) AS direct\n ,(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD)) AS indirect\n , ((TDC-(VT/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '2' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDC' AS TDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--=================================================================================================\n*/\n/*\n--====================================================================================type = 3\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))AS direct\n ,(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) AS indirect\n , (SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '3' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n*/\n/*\n--=======================================================================type = 4\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODC-(VO/V)*SD1)/(VO*(1-SOD-LD)) AS direct\n ,(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD)) AS indirect\n , (ODC-(VO/V)*SD1)/(VO*(1-SOD-LD))+(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '4' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\nCOMMIT;\n--==============================================================================\n*/\n/*\n--========================================================================type = 5\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n\n  , ((VD/V)*SD1)/(VD*(1-SDD-LD))-(HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD))  AS direct\n , (HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD)) AS indirect\n ,  ((VD/V)*SD1)/(VD*(1-SDD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '5' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD,'SDD' as SDD,'NDD' as NDD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n*/\n--=========================================================================\n--====================================================================================type = 11\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBB-(MTBB/V)*SD1)/(MTBB*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '11' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBB' as SPBB, 'MTBB' as MTBB\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n--====================================================================================type = 12\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBM-(MTBM/V)*SD1)/(MTBM*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '12' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBM' as SPBM, 'MTBM' as MTBM\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n\n\n\n\nEND LOOP;\n\n\n\n\nEND;"},{"Name":"PRC_INSERT_COM_RESULT_TEST","ObjectID":291060,"Digest":"0c65535e1a9886c0147424483e402cc13c545cfae3c8e8aa46dca9120b6cb51e","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_INSERT_COM_RESULT_TEST\" \nAS\nNBB number;\nKM number;\nJA number;\nGH number;\nNBM number;\nBM number;\nNSS number;\nNBB_value number;\nKM_value number;\nJA_value number;\nGH_value number;\nNBM_value number;\nBM_value number;\nNSS_value number;\nVAR_DATE DATE;\nhajme_seporde number;\ntotal_indirect number;\nhajme_seporde_shobe number;\n\nBEGIN\nSELECT MAX(EFF_DATE) INTO VAR_DATE FROM TBL_COM_VALUE;\n--=======newwww\nselect ref_ledger_code into NSS from tbl_com_rep_profile_detail where title = 'NSS';\nselect balance into NSS_value from TBL_LEDGER_ARCHIVE where LEDGER_CODE = NSS and TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY');\n\n\nselect ref_ledger_code into NBB from tbl_com_rep_profile_detail where title = 'NBB';\nselect balance into NBB_value from TBL_LEDGER_ARCHIVE where LEDGER_CODE = NBB and TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY');\n\nselect ref_ledger_code into KM from tbl_com_rep_profile_detail where title = 'KM';\nselect balance into KM_value from TBL_LEDGER_ARCHIVE where LEDGER_CODE = KM and TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY');\n\nselect ref_ledger_code into JA from tbl_com_rep_profile_detail where title = 'JA';\nselect balance into JA_value from TBL_LEDGER_ARCHIVE where LEDGER_CODE = JA and TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY');\n\nselect ref_ledger_code into GH from tbl_com_rep_profile_detail where title = 'GH';\nselect balance into GH_value from TBL_LEDGER_ARCHIVE where LEDGER_CODE = GH and TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY');\n\nselect ref_ledger_code into NBM from tbl_com_rep_profile_detail where title = 'NBM';\nselect balance into NBM_value from TBL_LEDGER_ARCHIVE where LEDGER_CODE = NBM and TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY');\n\nselect ref_ledger_code into BM from tbl_com_rep_profile_detail where title = 'BM';\nselect balance into BM_value from TBL_LEDGER_ARCHIVE where LEDGER_CODE = BM and TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY');\n\nhajme_seporde := NBB_value + KM_value + JA_value + GH_value + NBM_value + BM_value + NSS_value; \n\nNBB_value := (NBB_value/hajme_seporde)*total_indirect;\nKM_value := (KM_value/hajme_seporde)*total_indirect;\nJA_value := (JA_value/hajme_seporde)*total_indirect;\nGH_value := (GH_value/hajme_seporde)*total_indirect;\nNBM_value := (NBM_value/hajme_seporde)*total_indirect;\nBM_value := (BM_value/hajme_seporde)*total_indirect;\nNSS_value :=(NSS_value/hajme_seporde)*total_indirect;\n\nhajme_seporde_shobe:=NBB_value + KM_value + JA_value + GH_value + NBM_value + BM_value+ NSS_value;\n\nNBM_value:= (NBM_value/hajme_seporde_shobe)*1 ;\nNBB_value:= (NBB_value/hajme_seporde_shobe)*1;\n\n\n\n--============ biroone halghe\n --================================================================ type = 1\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY'),\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(DC-SD1)/(V*(1-SD-LD)) AS direct\n ,(OC+CC+FC+NPLC)/(V*(1-SD-LD)) AS indirect \n , ((DC-SD1)/(V*(1-SD-LD))+(OC+CC+FC+NPLC)/(V*(1-SD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '1' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') \n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY')\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'DC' AS DC,'sd' AS SD1,'V' AS V,'SD' AS SD, 'LD' as LD, 'OC' as OC, 'CC' as CC\n   ,'FC' as FC,'NPLC' as NPLC\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n\n\n--============\nFOR I IN 1..60 LOOP\n--------------------------------------------------------------------------------\nINSERT INTO TBL_COM_RESULT (\nEFF_DATE ,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) AS direct\n ,(HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD)) AS indirect\n , (ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) + (HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,10,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODCi' AS ODCi,'VOi' AS VOi,'Vi' AS Vi,'sd' AS sd,'VTi' AS VTi,'SOD' AS SOD,'LD' AS LD,'IC' AS IC,'HCi' AS HCi,'NODi' AS NODi,'NDi' AS NDi,'VCi'\nAS VCi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;  \n --*********************************************************\n\n \n  INSERT INTO TBL_COM_RESULT (\n  EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,\n BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n    ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) - ((VDi/V)*sd)/(VDi*(1-SDD-LD)) AS direct\n ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) AS indirect\n ,  ((VDi/V)*sd)/(VDi*(1-SDD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,9,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VDi' AS VDi,'V' AS V,'sd' AS sd,'SDD' AS SDD,'LD' AS LD,'HCi' AS HCi,'NDDi' AS NDDi,'NDi' AS NDi,'VCi'\nAS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n COMMIT;\n-- ******************************************************\n INSERT INTO TBL_COM_RESULT (\n EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,((VSi/V)*sd)/(VSi*(1-SSD-LD))  AS direct\n ,((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) AS indirect\n , ((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) + ((VSi/V)*sd)/(VSi*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,8,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VSi' AS VSi,'V' AS V,'sd' AS sd,'SSD' AS SSD,'LD' AS LD,'HCi' AS HCi,'NSDi' AS NSDi,'NDi' AS NDi,'VCi' AS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n \n COMMIT;\n--*************************************************************type = 7 \n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD))  AS direct\n ,(HCI*(NTDi/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) AS indirect\n , (TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD)) +  (HCI*(NTDI/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,7,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n\n--=========================================type = 71\n\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPSBSH -(MSBSH /VI ) *SD1 )/(MSBSH *(1 -NSGHSBMB -LD ))  AS direct\n ,(HCI *(TASSBSH/NDI)+VCI *(MSBSH/VI))/(MSBSH*( 1-NSGHSBMB -LD )) AS indirect\n , (SPSBSH -(MSBSH /VI ) *SD1 )/(MSBSH *(1 -NSGHSBMB -LD )) + (HCI *(TASSBSH/NDI)+VCI *(MSBSH/VI))/(MSBSH*( 1-NSGHSBMB -LD )) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,71,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI,'SPSBSH' as SPSBSH\n   ,'MSBSH' as MSBSH,'NSGHSBMB' as NSGHSBMB,'TASSBSH' as TASSBSH\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n\n\n\n\n\n\n\n--============================================type = 72\n\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPSKSH-(MSKSH /VI)*SD1)/(MSKSH*(1-NSGHSKMB -LD))  AS direct\n ,(HCI*(TASSSKSH/NDI)+VCI*(MSKSH/VI))/(MSKSH*(1-NSGHSKMB-LD)) AS indirect\n , (SPSKSH-(MSKSH /VI)*SD1)/(MSKSH*(1-NSGHSKMB -LD)) +  (HCI*(TASSSKSH/NDI)+VCI*(MSKSH/VI))/(MSKSH*(1-NSGHSKMB-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,72,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI\n   ,'SPSKSH' as SPSKSH,'MSKSH' as MSKSH, 'NSGHSKMB' as NSGHSKMB,'TASSSKSH' as TASSSKSH\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--*************************************************************\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(Dci-sd1*(Vi/V))/(Vi*(1-SD-LD))  AS direct\n ,(HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD))  AS indirect\n , (Dci-sd1*(Vi/V))/(Vi*(1-SD-LD)) +  (HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,6,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'Dci' AS Dci,'sd' AS sd1,'Vi' AS Vi,'V' AS V,'SD' AS SD,'LD' AS LD,'HrCi' AS HrCi,'RCi' AS RCi,'Dpi' AS Dpi,'Eci' as Eci\n  ,'Ici' AS Ici,'EECi' AS EECi,'OCi' AS OCi,'Mci' as Mci,'NPLCi' AS NPLCi,'FCi' AS FCi  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n  COMMIT;\n -- ************************************************************\n \n\n--============================================================================================\n/*\n--====================================================================================type = 2 \nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDC-(VT/V)*SD1)/(VS*(1-SSD-LD)) AS direct\n ,(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD)) AS indirect\n , ((TDC-(VT/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '2' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDC' AS TDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--=================================================================================================\n*/\n/*\n--====================================================================================type = 3\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))AS direct\n ,(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) AS indirect\n , (SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '3' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n*/\n/*\n--=======================================================================type = 4\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODC-(VO/V)*SD1)/(VO*(1-SOD-LD)) AS direct\n ,(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD)) AS indirect\n , (ODC-(VO/V)*SD1)/(VO*(1-SOD-LD))+(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '4' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\nCOMMIT;\n--==============================================================================\n*/\n/*\n--========================================================================type = 5\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,((VD/V)*SD1)/(VD*(1-SDD-LD)) AS direct\n , (HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD)) AS indirect\n , ((VD/V)*SD1)/(VD*(1-SDD-LD))-(HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '5' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD,'SDD' as SDD,'NDD' as NDD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--=============================================================================\n*/\n--====================================================================================type = 11\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBB-(MTBB/V)*SD1)/(MTBB*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '11' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBB' as SPBB, 'MTBB' as MTBB\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n--====================================================================================type = 12\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBM-(MTBM/V)*SD1)/(MTBM*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '12' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBM' as SPBM, 'MTBM' as MTBM\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n\n\nEND LOOP;\n\nFOR I IN 335..365 LOOP\n\nINSERT INTO TBL_COM_RESULT (\nEFF_DATE ,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) AS direct\n ,(HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD)) AS indirect\n , (ODCi-(VOi/Vi)*sd)/(VTi*(1-SOD-LD)) + (HCi*(NODi/NDi)+VCi*(VOi/Vi))/(VOi*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,10,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODCi' AS ODCi,'VOi' AS VOi,'Vi' AS Vi,'sd' AS sd,'VTi' AS VTi,'SOD' AS SOD,'LD' AS LD,'IC' AS IC,'HCi' AS HCi,'NODi' AS NODi,'NDi' AS NDi,'VCi'\nAS VCi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;  \n --*********************************************************\n\n \n  INSERT INTO TBL_COM_RESULT (\n  EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n \n  ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) - ((VDi/V)*sd)/(VDi*(1-SDD-LD)) AS direct\n ,(HCi*(NDDi/NDi)+VCi*(VDi/Vi))/(VDi*(1-SDD-LD)) AS indirect\n ,  ((VDi/V)*sd)/(VDi*(1-SDD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,9,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VDi' AS VDi,'V' AS V,'sd' AS sd,'SDD' AS SDD,'LD' AS LD,'HCi' AS HCi,'NDDi' AS NDDi,'NDi' AS NDi,'VCi'\nAS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n COMMIT;\n-- ******************************************************\n INSERT INTO TBL_COM_RESULT (\n EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,((VSi/V)*sd)/(VSi*(1-SSD-LD))  AS direct\n ,((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) AS indirect\n , ((HCi*(NSDi/NDi)+VCi*(VSi/Vi))/(VSi*(1-SSD-LD))) + ((VSi/V)*sd)/(VSi*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,8,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'VSi' AS VSi,'V' AS V,'sd' AS sd,'SSD' AS SSD,'LD' AS LD,'HCi' AS HCi,'NSDi' AS NSDi,'NDi' AS NDi,'VCi' AS VCi,'Vi' AS Vi )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n \n COMMIT;\n--************************************************************* type = 7\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD))  AS direct\n ,(HCI*(NTDi/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) AS indirect\n , (TDCI-(VTI/VI)*SD1)/(VTI*(1-STD-LD)) +  (HCI*(NTDI/NDI)+VCI*(VTI/VI))/(VTI*(1-STD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,7,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--=========================================type = 71\n\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPSBSH -(MSBSH /VI ) *SD1 )/(MSBSH *(1 -NSGHSBMB -LD ))  AS direct\n ,(HCI *(TASSBSH/NDI)+VCI *(MSBSH/VI))/(MSBSH*( 1-NSGHSBMB -LD )) AS indirect\n , (SPSBSH -(MSBSH /VI ) *SD1 )/(MSBSH *(1 -NSGHSBMB -LD )) + (HCI *(TASSBSH/NDI)+VCI *(MSBSH/VI))/(MSBSH*( 1-NSGHSBMB -LD )) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,71,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI,'SPSBSH' as SPSBSH\n   ,'MSBSH' as MSBSH,'NSGHSBMB' as NSGHSBMB,'TASSBSH' as TASSBSH\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n\n\n\n\n\n\n\n--============================================type = 72\n\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPSKSH-(MSKSH /VI)*SD1)/(MSKSH*(1-NSGHSKMB -LD))  AS direct\n ,(HCI*(TASSSKSH/NDI)+VCI*(MSKSH/VI))/(MSKSH*(1-NSGHSKMB-LD)) AS indirect\n , (SPSKSH-(MSKSH /VI)*SD1)/(MSKSH*(1-NSGHSKMB -LD)) +  (HCI*(TASSSKSH/NDI)+VCI*(MSKSH/VI))/(MSKSH*(1-NSGHSKMB-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,72,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDCi' AS TDCI,'VTi' AS VTI,'sd' AS SD1,'Vi' AS VI,'LD' AS LD,'STD' AS STD,'HCi' AS HCI,'NTDi' AS NTDI,'VCi' AS VCI,'NDI' as NDI\n   ,'SPSKSH' as SPSKSH,'MSKSH' as MSKSH, 'NSGHSKMB' as NSGHSKMB,'TASSSKSH' as TASSSKSH\n   )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n\n\n\n\n\n\n\n--*************************************************************\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(Dci-sd1*(Vi/V))/(Vi*(1-SD-LD))  AS direct\n ,(HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD))  AS indirect\n , (Dci-sd1*(Vi/V))/(Vi*(1-SD-LD)) +  (HrCi+RCi+Dpi+Eci+Ici+EECi+OCi+Mci+NPLCi+FCi)/(Vi*(1-SD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n ,6,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'Dci' AS Dci,'sd' AS sd1,'Vi' AS Vi,'V' AS V,'SD' AS SD,'LD' AS LD,'HrCi' AS HrCi,'RCi' AS RCi,'Dpi' AS Dpi,'Eci' as Eci\n  ,'Ici' AS Ici,'EECi' AS EECi,'OCi' AS OCi,'Mci' as Mci,'NPLCi' AS NPLCi,'FCi' AS FCi  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n  COMMIT;\n -- ************************************************************\n  --================================================================ type = 1\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(DC-SD1)/(V*(1-SD-LD)) AS direct\n ,(OC+CC+FC+NPLC)/(V*(1-SD-LD)) AS indirect\n , ((DC-SD1)/(V*(1-SD-LD))+(OC+CC+FC+NPLC)/(V*(1-SD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '1' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'DC' AS DC,'sd' AS SD1,'V' AS V,'SD' AS SD, 'LD' as LD, 'OC' as OC, 'CC' as CC\n   ,'FC' as FC,'NPLC' as NPLC\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--============================================================================================\n/*\n--====================================================================================type = 2 \nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(TDC-(VT/V)*SD1)/(VS*(1-SSD-LD)) AS direct\n ,(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD)) AS indirect\n , ((TDC-(VT/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NTD/ND)+VC*(VT/V))/(VT*(1-STD-LD))) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '2' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'TDC' AS TDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n--=================================================================================================\n*/\n/*\n--====================================================================================type = 3\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))AS direct\n ,(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) AS indirect\n , (SDC-(VS/V)*SD1)/(VS*(1-SSD-LD))+(HC*(NSD/ND)+VC*(VS/V))/(VS*(1-SSD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '3' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n*/\n/*\n--=======================================================================type = 4\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(ODC-(VO/V)*SD1)/(VO*(1-SOD-LD)) AS direct\n ,(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD)) AS indirect\n , (ODC-(VO/V)*SD1)/(VO*(1-SOD-LD))+(HC*(NOD/ND)+VC*(VO/V))/(VO*(1-SOD-LD))  TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '4' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\nCOMMIT;\n--==============================================================================\n*/\n/*\n--========================================================================type = 5\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n\n  , ((VD/V)*SD1)/(VD*(1-SDD-LD))-(HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD))  AS direct\n , (HC*(NDD/ND)+VC*(VD/V))/(VD*(1-SDD-LD)) AS indirect\n ,  ((VD/V)*SD1)/(VD*(1-SDD-LD)) TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '5' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'ODC' AS ODC,'VO' AS VO,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SOD' as SOD, 'NOD' as NOD,'SDD' as SDD,'NDD' as NDD\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\nCOMMIT;\n*/\n--=========================================================================\n--====================================================================================type = 11\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBB-(MTBB/V)*SD1)/(MTBB*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '11' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBB' as SPBB, 'MTBB' as MTBB\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n--====================================================================================type = 12\n\nINSERT INTO TBL_COM_RESULT ( EFF_DATE,\n CHILD\n  ,direct\n ,indirect\n ,TOTAL\n ,DEPTH\n ,PARENT\n ,NAME\n ,type,BALANCE\n ) SELECT to_date(VAR_DATE,'DD-MM-YYYY') -I,\n 100000 || REF_BRANCH AS REF_BRANCH\n  ,(SPBM-(MTBM/V)*SD1)/(MTBM*(1-SSD-LD)) AS direct\n ,1000 AS indirect\n , 1000 TOTAL\n ,3 AS DEPTH\n ,TB.REF_STA_ID\n ,TB.NAME\n , '12' as type,\n  (SELECT balance\n  FROM tbl_ledger_branch\n  WHERE TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -i\n  AND LEDGER_CODE                      =10611011101\n  AND tbl_ledger_branch.REF_BRANCH     = tb.BRN_ID\n  ) AS BALANCE\n FROM (\n  SELECT\n   TBL_COM_VALUE.REF_BRANCH\n   ,TBL_COM_VALUE.TITLE\n  ,TBL_COM_VALUE.VALUE\n   FROM TBL_COM_VALUE where TO_DATE(EFF_DATE,'DD-MM-YYYY') =to_date(VAR_DATE,'DD-MM-YYYY') -I\n  \n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( 'SDC' AS SDC,'VT' AS VT,'V' AS V, 'sd' as SD1, 'VS' as VS, 'SSD' as SSD\n   ,'LD' as LD,'HC' as HC, 'NTD' as NTD,'ND' as ND,'VC' as VC,'VD' as VD,'STD' as STD,\n   'NSD' as NSD, 'SPBM' as SPBM, 'MTBM' as MTBM\n  )\n  )\n ,    TBL_BRANCH TB\nWHERE TB.BRN_ID   = REF_BRANCH;\n\n\nCOMMIT;\n--=========================================================================================\n\n\n\n\n\nEND LOOP;\n\n\n\n\nEND;"},{"Name":"PRC_NOTIF_CHECK_REPEAT","ObjectID":292000,"Digest":"cf535782d497e62fed6767259391759ccaeb12267300feb023573c81906ffabc","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_NOTIF_CHECK_REPEAT\" ( INPAR_REPORT IN NUMBER )  AS\n\n VAR_REF_LEDGER_PROFILE     NUMBER;\n VAR_REF_PROFILE_TIME       NUMBER;\n VAR_REF_PROFILE_CURRENCY   NUMBER;\n VAR_REF_PROFILE_CUSTOMER   NUMBER;\n VAR_REF_PROFILE_BRANCH     NUMBER;\n VAR_REF_PROFILE_DEPOSIT    NUMBER;\n VAR_REF_PROFILE_LOAN       NUMBER;\n REF_LEDGER_PROFILE_NEW     NUMBER;\n REF_PROFILE_TIME_NEW       NUMBER;\n REF_PROFILE_CURRENCY_NEW   NUMBER;\n REF_PROFILE_CUSTOMER_NEW   NUMBER;\n REF_PROFILE_BRANCH_NEW     NUMBER;\n REF_PROFILE_DEPOSIT_NEW    NUMBER;\n REF_PROFILE_LOAN_NEW       NUMBER;\n var_count   number;\n  \n--pragma autonomous_transaction;\nBEGIN\n SELECT\n  REF_LEDGER_PROFILE\n ,REF_PROFILE_TIME\n ,REF_PROFILE_CURRENCY\n ,REF_PROFILE_CUSTOMER\n ,REF_PROFILE_BRANCH\n ,REF_PROFILE_DEPOSIT\n ,REF_PROFILE_LOAN\n INTO\n  VAR_REF_LEDGER_PROFILE,VAR_REF_PROFILE_TIME,VAR_REF_PROFILE_CURRENCY,VAR_REF_PROFILE_CUSTOMER,VAR_REF_PROFILE_BRANCH,VAR_REF_PROFILE_DEPOSIT\n,VAR_REF_PROFILE_LOAN\n FROM TBL_REPORT_PROFILE where REF_REPORT =INPAR_REPORT;\n\n\n\nSELECT\n    count(ID) into var_count\n   FROM TBL_REPREQ\n   WHERE TBL_REPREQ.REF_REPORT_ID   in (select id from tbl_report where h_id = ( select h_id from tbl_report where id = INPAR_REPORT));\n\nif(var_count \u003c\u003e 0)\nthen\n SELECT\n  REF_LEDGER_PROFILE\n ,REF_PROFILE_TIME\n ,REF_PROFILE_CURRENCY\n ,REF_PROFILE_CUSTOMER\n ,REF_PROFILE_BRANCH\n ,REF_PROFILE_DEPOSIT\n ,REF_PROFILE_LOAN\n INTO\n  REF_LEDGER_PROFILE_NEW,REF_PROFILE_TIME_NEW,REF_PROFILE_CURRENCY_NEW,REF_PROFILE_CUSTOMER_NEW,REF_PROFILE_BRANCH_NEW,REF_PROFILE_DEPOSIT_NEW\n,REF_PROFILE_LOAN_NEW\n FROM TBL_REPREQ\n WHERE ID                         = (\n   SELECT\n    MAX(ID)\n   FROM TBL_REPREQ\n   WHERE TBL_REPREQ.REF_REPORT_ID   in (select id from tbl_report where h_id = ( select h_id from tbl_report where id = INPAR_REPORT))\n  )\n  and trunc(REQ_DATE) = trunc(sysdate);\nelse\n\nselect 0,0,0,0,0,0,0\nINTO\n  REF_LEDGER_PROFILE_NEW,REF_PROFILE_TIME_NEW,REF_PROFILE_CURRENCY_NEW,REF_PROFILE_CUSTOMER_NEW,REF_PROFILE_BRANCH_NEW,REF_PROFILE_DEPOSIT_NEW\n,REF_PROFILE_LOAN_NEW\nfrom dual;\n\n\n\n\nend if;\n IF\n  ( VAR_REF_LEDGER_PROFILE \u003c\u003e REF_LEDGER_PROFILE_NEW OR VAR_REF_PROFILE_TIME \u003c\u003e REF_PROFILE_TIME_NEW OR VAR_REF_PROFILE_CURRENCY \u003c\u003e REF_PROFILE_CURRENCY_NEW\nOR VAR_REF_PROFILE_CUSTOMER \u003c\u003e REF_PROFILE_CUSTOMER_NEW OR VAR_REF_PROFILE_BRANCH \u003c\u003e REF_PROFILE_BRANCH_NEW OR VAR_REF_PROFILE_DEPOSIT \u003c\u003e REF_PROFILE_DEPOSIT_NEW\nOR VAR_REF_PROFILE_LOAN \u003c\u003e REF_PROFILE_LOAN_NEW )\n THEN\n  update TBL_NOTIFICATIONS set FLAG =1;\n \n END IF;\n\nEND prc_NOTIF_CHECK_REPEAT;"},{"Name":"PRC_NOTIF_DAILY_DELETE","ObjectID":292224,"Digest":"6244f0983ec79912b0063baa1d48bc73239fa5c695e2a723735afd7c38b21732","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_NOTIF_DAILY_DELETE\" as \nbegin\n\n\n--EXECUTE IMMEDIATE  'truncate table TBL_NOTIFICATIONS_TEMP';\n\nINSERT INTO TBL_NOTIFICATIONS_TEMP (\n ID\n ,TITLE\n ,TYPE\n ,REF_USER\n ,START_TIME\n ,END_TIME\n ,STATUS\n ,DESCRIPTION\n ,OPT_TYPE\n ,REF_REPORT\n ,REF_REPREQ\n ,REF_REPPER_DATE\n ,CLASS\n ,ERROR\n ,FLAG\n)\nSELECT\n ID\n ,TITLE\n ,TYPE\n ,REF_USER\n ,START_TIME\n ,END_TIME\n ,STATUS\n ,DESCRIPTION\n ,OPT_TYPE\n ,REF_REPORT\n ,REF_REPREQ\n ,REF_REPPER_DATE\n ,CLASS\n ,ERROR\n ,FLAG\nFROM TBL_NOTIFICATIONS;\ncommit;\n  delete \n  from TBL_NOTIFICATIONS\n  where trunc(END_TIME) \u003c\u003e trunc(sysdate)\n  and upper(status) = 'VISITED';\n  commit;\nend prc_notif_daily_delete;"},{"Name":"PRC_TEST_DELAY2","ObjectID":294443,"Digest":"f878616cdeca3e9a2425bef8f7ef1e3e6166d2d5c96e09fba53af45f04370a26","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_TEST_DELAY2\" (IN_TIME in number) AS \n\n  \n\nv_now DATE;\nbegin\n-- 1) Get the date \u0026 time \nSELECT SYSDATE \n  INTO v_now\n  FROM DUAL;\n\n-- 2) Loop until the original timestamp plus the amount of seconds \u003c= current date\nLOOP\n  EXIT WHEN v_now + (IN_TIME * (1/86400)) \u003c= SYSDATE;\nEND LOOP;\n\nEND PRC_TEST_DELAY2;"},{"Name":"TEST_LOCK2","ObjectID":294989,"Digest":"3cb8e5b02c7a9ca7ecb2966e825a4c273835f0fbfd464028d650a26205083081","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"TEST_LOCK2\" (inpar_num in number) AS \n\nl_status number;\n    l_lock_handle varchar2(128);\n    l_lock_request integer;\nBEGIN\n\n\n\n DBMS_LOCK.ALLOCATE_UNIQUE ( lockname =\u003e  'xx', lockhandle =\u003e l_lock_handle);\n    l_status := DBMS_LOCK.REQUEST(lockhandle =\u003e l_lock_handle, timeout =\u003e 15);\n   if (l_status = 0) then\n      -- Plase your code here\n        update ZTEST_LOCK\n  set value = 1;\n  commit;\n      -- Only one thread can work here\n      l_lock_request  := DBMS_LOCK.release(l_lock_handle);\n  \n    \nelse\n DBMS_LOCK.ALLOCATE_UNIQUE ( lockname =\u003e  'yy', lockhandle =\u003e l_lock_handle);\n    l_status := DBMS_LOCK.REQUEST(lockhandle =\u003e l_lock_handle, timeout =\u003e 15);\n update ZTEST_LOCK\n  set value = 22222222\n  where value = 1;\n  commit;\n  l_lock_request  := DBMS_LOCK.release(l_lock_handle);\nend if;\n\n\nEND TEST_LOCK2;"},{"Name":"TEST_LOCK","ObjectID":294990,"Digest":"0f7b62b5d704596d5f4c295f5d4a6744b3b136e781981789b478be0aa3585a7f","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"TEST_LOCK\" AS \nl_status number;\n    l_lock_handle varchar2(128);\n    l_lock_request integer;\nBEGIN\n\n--\n--\n-- DBMS_LOCK.ALLOCATE_UNIQUE ( lockname =\u003e  'NAME_OF_YOUR_LOCK', lockhandle =\u003e l_lock_handle);\n--    l_status := DBMS_LOCK.REQUEST(lockhandle =\u003e l_lock_handle, timeout =\u003e 15);\n--    if (l_status = 0) then\n--      -- Plase your code here\n--   update ZTEST_LOCK\n--  set value = 22222222\n--  where value = 11111111;\n--  commit;\n--      -- Only one thread can work here\n--      l_lock_request  := DBMS_LOCK.release(l_lock_handle);\n--  \n--    end if;\n\n\n update ZTEST_LOCK\n  set value = 22222222\n  where value = 11111111;\n  commit;\n\nEND TEST_LOCK;"},{"Name":"PRC_LOG","ObjectID":295515,"Digest":"33d3015a8586b7ed44aa32ad078ac95e12b53dc6f7378ac91890295a4e3f8d9d","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_LOG\" (\n/*\n  Programmer Name: MYM\n  Release Date/Time: 1397/03/05\n  Version: 1.0\n  Category: 2\n  Description: POR KARDAN JADVAL LOG V DETAIL\n  */\n    INPAR_NAM       IN VARCHAR2,\n    INPAR_MEGHDAR   IN VARCHAR2,\n    INPAR_SCHEMA    IN VARCHAR2,\n    INPAR_PROCEDURE IN VARCHAR2,\n    INPAR_SHOMARE_KHAT    IN NUMBER,\n    INPAR_PARAMETR IN NUMBER)\nIS\n  LOC_NAM_FARSI VARCHAR2(200);\n  LOC_AKHARIN_LOG NUMBER;\nBEGIN\n  LOC_NAM_FARSI :=\n  CASE\n    WHEN INPAR_NAM LIKE 'NEGASHT_TIME' THEN 'زمان اجراي نگاشت '|| INPAR_PARAMETR\n    WHEN INPAR_NAM LIKE 'NEGASHT_CNT' THEN 'تعداد سطرهاي نگاشت '|| INPAR_PARAMETR\n    \n    WHEN INPAR_NAM LIKE 'DEP_CNT' THEN    'تعداد سپرده‌ها'\n    WHEN INPAR_NAM LIKE 'DEP_TIME' THEN 'زمان انتقال سپرده'\n    WHEN INPAR_NAM LIKE 'DEP_IGN_CNT' THEN    'تعداد سپرده معيوب'\n    WHEN INPAR_NAM LIKE 'DEP_ACC_CNT' THEN  'تعداد حسابداري سپرده'\n    WHEN INPAR_NAM LIKE 'DEP_ACC_TIME' THEN 'زمان انتقال حسابداري سپرده'\n    \n    WHEN INPAR_NAM LIKE 'LOAN_CNT' THEN    'تعداد تسهيلات'\n    WHEN INPAR_NAM LIKE 'LOAN_TIME' THEN 'زمان انتقال تسهيلات'\n    WHEN INPAR_NAM LIKE 'LOAN_IGN_CNT' THEN    'تعداد تسهيلات معيوب'\n    WHEN INPAR_NAM LIKE 'LOAN_ACC_CNT' THEN    'تعداد تسهيلات'\n    WHEN INPAR_NAM LIKE 'LOAN_ACC_TIME' THEN 'زمان انتقال حسابداري تسهيلات'\n    \n    WHEN INPAR_NAM LIKE 'PAY_CNT' THEN    'تعداد اقساط'\n    WHEN INPAR_NAM LIKE 'PAY_TIME' THEN 'زمان انتقال اقساط'\n    WHEN INPAR_NAM LIKE 'PAY_IGN_CNT' THEN 'تعداد اقساط معيوب'\n    \n    WHEN INPAR_NAM LIKE 'EXP_CODE' THEN 'کد خطا'\n    WHEN INPAR_NAM LIKE 'EXP_MSG' THEN 'پيام خطا'\n    WHEN INPAR_NAM LIKE 'EXP_TRC' THEN 'پيگرد خطا'\n  END;\n     SELECT MAX(ID) INTO LOC_AKHARIN_LOG FROM TBL_LOG;\n    INSERT INTO TBL_LOG_DETAIL(REF_LOG, NAM, NAM_FARSI, MEGHDAR, SCHEMA, SHOMARE_KHAT, PROCEDURE )\n      VALUES (LOC_AKHARIN_LOG, INPAR_NAM, LOC_NAM_FARSI, INPAR_MEGHDAR, INPAR_SCHEMA, INPAR_SHOMARE_KHAT, INPAR_PROCEDURE );\n\n  END;"},{"Name":"TEST_GAP_NIIM","ObjectID":295780,"Digest":"6a67da9a537743705230f1a242e34e72c01aa32e3fd478395e28b52b75758171","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"TEST_GAP_NIIM\" AS\n VAR_DATE   DATE;\n VAR_MAX    DATE;\nBEGIN\n SELECT\n  MAX(TRUNC(DUE_DATE) )\n INTO\n  VAR_MAX\n FROM TBL_VALUE_temp;\n\n VAR_DATE   := SYSDATE;\n \n LOOP\n  INSERT INTO TBL_GAP_NIIM_VALUE ( TYPE,GAP_RATE,EFF_DATE ) ( SELECT\n   ID\n  ,RATE\n  ,DT\n  FROM (\n    SELECT\n     REF_MODALITY_TYPE as id\n    ,ROUND(\n      SUM(BALANCE) / 30\n     ,2\n     ) as rate\n    FROM TBL_VALUE\n    WHERE DUE_DATE BETWEEN TRUNC(VAR_DATE) AND TRUNC(VAR_DATE + 30)\n     AND\n      REF_MODALITY_TYPE IN (\n       11,21\n      )\n    GROUP BY\n     REF_MODALITY_TYPE\n   )\n  ,    (\n    SELECT\n     TRUNC(VAR_DATE - 1 + ROWNUM) DT\n    FROM DUAL\n    CONNECT BY\n     ROWNUM \u003c 31\n   )\n  );\n\n  COMMIT;\n  VAR_DATE   := VAR_DATE + 30;\n  EXIT WHEN trunc(VAR_DATE) \u003e trunc(VAR_MAX);\n END LOOP;\n\nEND TEST_GAP_NIIM;"},{"Name":"SATTAR_UPDATE","ObjectID":299743,"Digest":"e084ae3d75dcfab49e7f2ecb6b6d23ea0f0fbe8dcbc933a8f24d2175b83e65b1","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"SATTAR_UPDATE\" (INPAR_REF_REQ_ID in number) as  --1246\n\nVAR_MAX_LEVEL_LEDGER number;\n--i number;\n\nbegin\n\n\n\nselect max(depth) into VAR_MAX_LEVEL_LEDGER from tbl_repval;\n\n\n        update tbl_repval\n        set value =   round(dbms_random.value*10000000000,0)\n        where depth = 5 and tbl_repval.REF_REPREQ_ID = inpar_ref_req_id;\n        commit;\n        \n        \nfor i in (select distinct ref_repper_id from tbl_repval where ref_repreq_id = INPAR_REF_REQ_ID and REF_REPPER_ID\u003e0 and REF_REPPER_ID is not null)\n\nloop\n\n        \n        --=======\n        \n        update tbl_repval g\n        set g.value =   (select a.\"value\" from (select sum(value) as \"value\",PARENT_CODE\n        from tbl_repval\n        where depth = 5 and REF_REPREQ_ID = INPAR_REF_REQ_ID and ref_repper_id = i.ref_repper_id\n        group by PARENT_CODE) a\n        \n        \n         where g.LEDGER_CODE = a.parent_code and depth = 4 and  REF_REPREQ_ID = INPAR_REF_REQ_ID \n        ) where depth = 4 and ref_repper_id = i.ref_repper_id;\n        commit;\n--        --======\n        \n          --=======\n        \n         update tbl_repval g\n        set g.value =   (select a.\"value\" from (select sum(value) as \"value\",PARENT_CODE\n        from tbl_repval\n        where depth = 4 and REF_REPREQ_ID = INPAR_REF_REQ_ID and ref_repper_id = i.ref_repper_id\n        group by PARENT_CODE) a\n        \n        where g.LEDGER_CODE = a.parent_code and depth = 3 and  REF_REPREQ_ID = INPAR_REF_REQ_ID \n        \n        )  where depth = 3 and ref_repper_id = i.ref_repper_id;\n          commit;\n      \n        \n        \n        --======\n        \n        \n          --=======\n        \n         update tbl_repval g\n        set g.value =   (select a.\"value\" from (select sum(value) as \"value\",PARENT_CODE\n        from tbl_repval\n        where depth = 3 and REF_REPREQ_ID = INPAR_REF_REQ_ID and ref_repper_id = i.ref_repper_id\n        group by PARENT_CODE) a\n        \n        where g.LEDGER_CODE = a.parent_code and depth = 2 and  REF_REPREQ_ID = INPAR_REF_REQ_ID \n        \n        ) where depth = 2 and ref_repper_id = i.ref_repper_id;\n          commit;\n      \n        \n        --======\n        \n          --=======\n        \n        update tbl_repval g\n        set g.value =   (select a.\"value\" from (select sum(value) as \"value\",PARENT_CODE\n        from tbl_repval\n        where depth = 2 and REF_REPREQ_ID = INPAR_REF_REQ_ID and ref_repper_id = i.ref_repper_id\n        group by PARENT_CODE) a\n        \n        where g.LEDGER_CODE = a.parent_code and depth = 1 and  REF_REPREQ_ID = INPAR_REF_REQ_ID \n        \n        ) where depth = 1  and ref_repper_id = i.ref_repper_id;\n          commit;\n\n  \n  --======\n  end loop;\nend sattar_update;"},{"Name":"PRC_OTHER_CODE","ObjectID":304792,"Digest":"09929a4dd6aef9e5572c197ebd22a078b908e8da7237cb9652259529694ed609","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_OTHER_CODE\" \nas\n  code VARCHAR2(32000);\n\nbegin\n\n\n  SELECT WMSYS.WM_CONCAT(dk.ID)\nINTO code\n  FROM akin.TEJARAT_GL dk\n  WHERE dk.DEPTH = 4\n  AND dk.mande  \u003c\u003e 0\n  AND dk.ID     \u003c\u003e 3100700070\n  AND dk.id NOT IN\n    (SELECT DISTINCT ref_leger_code FROM TBL_VALUE where ref_leger_code is not null\n    );\n  -- DBMS_OUTPUT.PUT_LINE(code);\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID\n    )\n SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4\nFROM\n  (SELECT 4,a.REF_SARFASL,a.tarikh,\n round( CASE\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 11\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 12\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 13\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 14\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 15\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 16\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 17\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 18\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 19\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.YEK_MAH)/100\n    ELSE NULL\n  END,0) BES,\n    0 as bed,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1 as tarikh,\n    TSN.YEK_MAH\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.YEK_MAH \u003c\u003e '0'\n  ) a,\n  akin.TEJARAT_GL tg\nWHERE a.REF_SARFASL = TG.id )a,\n  akin.TEJARAT_GL tg\nWHERE tg.id = a.ref_sarfasl;\n\ncommit;\n\n\n\n INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID\n    )\n SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4\nFROM\n  (SELECT 4,a.REF_SARFASL,a.tarikh,\n round( CASE\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 11\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 12\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 13\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 14\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 15\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 16\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 17\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 18\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 19\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.SEMAH_TA_YEKSAL)/100\n    ELSE NULL\n  END,0) BES,\n    0 as bed,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1 as tarikh,\n    TSN.SEMAH_TA_YEKSAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.SEMAH_TA_YEKSAL \u003c\u003e '0'\n  ) a,\n  akin.TEJARAT_GL tg\nWHERE a.REF_SARFASL = TG.id )a,\n  akin.TEJARAT_GL tg\nWHERE tg.id = a.ref_sarfasl;\n\ncommit;\n\n\n\n\n\n\n\n INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID\n    )\n SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4\nFROM\n  (SELECT 4,a.REF_SARFASL,a.tarikh,\n round( CASE\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 11\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 12\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 13\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 14\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 15\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 16\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 17\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 18\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 19\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BISHTAR_AZ_5SAL)/100\n    ELSE NULL\n  END,0) BES,\n    0 as bed,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1 as tarikh,\n    TSN.BISHTAR_AZ_5SAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.BISHTAR_AZ_5SAL \u003c\u003e '0'\n  ) a,\n  akin.TEJARAT_GL tg\nWHERE a.REF_SARFASL = TG.id )a,\n  akin.TEJARAT_GL tg\nWHERE tg.id = a.ref_sarfasl;\n\ncommit;\n\n\n\n\n\n\n\n INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID\n    )\n SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4\nFROM\n  (SELECT 4,a.REF_SARFASL,a.tarikh,\n round( CASE\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 11\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n    WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 12\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 13\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 14\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 15\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 16\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 17\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 18\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n     WHEN tg.id IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 4\n        START WITH ID       = 19\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.MANDE)*(a.BEDONE_JARIAN)/100\n    ELSE NULL\n  END,0) BES,\n    0 as bed,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1 as tarikh,\n    TSN.BEDONE_JARIAN\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.BEDONE_JARIAN \u003c\u003e '0'\n  ) a,\n  akin.TEJARAT_GL tg\nWHERE a.REF_SARFASL = TG.id )a,\n  akin.TEJARAT_GL tg\nWHERE tg.id = a.ref_sarfasl;\n\ncommit;\n\n\n\n\n\n\n\ncommit;\nend prc_other_code;"},{"Name":"PRC_REPORT_CREATE","ObjectID":304815,"Digest":"fdd7d7055eff6713a974e5756837c03b106dd9d01c421f6c574a421b8cdf17fb","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_REPORT_CREATE\" \n(\n  I_NAME IN VARCHAR2\n, I_DES IN VARCHAR2\n, I_USER IN VARCHAR2\n, I_INSERT_UPDATE IN VARCHAR2 \n, I_STATUS IN VARCHAR2\n, I_TYPE IN VARCHAR2\n, I_CATEGORY IN VARCHAR2\n, I_PROFILE_LON IN VARCHAR2 \n, I_PROFILE_DEP IN VARCHAR2 \n, I_PROFILE_BRN IN VARCHAR2 \n, I_PROFILE_CUR IN VARCHAR2 \n, I_PROFILE_LEDGER IN VARCHAR2 \n, I_PROFILE_TIMING IN VARCHAR2\n, I_PROFILE_CUS IN VARCHAR2\n, I_ID IN  VARCHAR2 \n, O_ID OUT VARCHAR2\n) AS \n  V_INSERT_UPDATE NUMBER;\nBEGIN\n  -- CHECK IF REPORT NAME IS EXIST\n  \n  \n  IF (UPPER(I_INSERT_UPDATE) = 'INSERT') THEN\n    V_INSERT_UPDATE := 1;\n  ELSE \n    V_INSERT_UPDATE := 0;\n  END IF;\n  \n  IF (UPPER(I_TYPE) = 'AES' )THEN \n    DYNAMIC_LQ.PKG_AES.PRC_REP_PROFILE_REPORT (\n  I_NAME\n ,I_DES\n ,I_USER\n ,I_PROFILE_dep\n ,I_PROFILE_LON\n ,I_PROFILE_BRN\n ,I_TYPE\n ,I_STATUS \n ,V_INSERT_UPDATE\n ,I_ID, o_id);\n  END IF;\nEND PRC_REPORT_CREATE;"},{"Name":"PRC_REPORT_DELETE","ObjectID":305297,"Digest":"684fcce15221a5180210652e61597d078e98923371cb2dcf78c20e85b1a4404a","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"PRC_REPORT_DELETE\" \n(\n  I_REPORT IN NUMBER,\n  I_SERVESTD OUT NUMBER\n) AS \nBEGIN\n    \n   --IF (UPPER(I_TYPE) = 'AES' )THEN \n    DYNAMIC_LQ.PKG_AES.PRC_DELETE_REPORT(I_REPORT);\n  --END IF;\nEND PRC_REPORT_DELETE;"},{"Name":"MAINTAINPARTITIONS","ObjectID":314839,"Digest":"82303ee2a3f9f0ed9a05a803d362d5a841c13f0897dc2073649566cd8e1fbc7b","SQLCode":"\n  CREATE OR REPLACE PROCEDURE \"PRAGG\".\"MAINTAINPARTITIONS\" IS\n\n    CURSOR PartTables IS\n    SELECT TABLE_NAME, PARTITION_NAME, HIGH_VALUE\n    FROM USER_TAB_PARTITIONS\n    WHERE TABLE_NAME LIKE  'TBL_LEDGER_ARCHIVE'\n    ORDER BY TABLE_NAME, PARTITION_POSITION;\n\n    cur SYS_REFCURSOR;\n    r INTEGER;\n    highValue VARCHAR2(100);\n\nBEGIN\n   FOR aTab IN PartTables LOOP\n      EXECUTE IMMEDIATE 'BEGIN :ret := '||aTab.HIGH_VALUE||'; END;' USING OUT highValue;\n      IF highValue NOT IN ('DEFAULT', 'MAXVALUE') THEN\n         OPEN cur FOR 'SELECT ROWNUM FROM '||aTab.TABLE_NAME||' PARTITION ('||aTab.PARTITION_NAME||') WHERE ROWNUM \u003c= 1';\n         FETCH cur INTO r;\n         IF cur%NOTFOUND THEN\n            EXECUTE IMMEDIATE 'ALTER TABLE '||aTab.TABLE_NAME||' DROP PARTITION '||aTab.PARTITION_NAME||' UPDATE INDEXES';\n         END IF;\n         CLOSE cur;\n      END IF;\n   END LOOP;\nEND;"}],"Packages":[{"Name":"PKG_CURRENCY_SENSIVITY","ObjectID":279946,"Digest":"2c405f57474741fdf074b6960aacbbc21731d797c8afc50f43814ac13492207c","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CURRENCY_SENSIVITY\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GET_QUERY_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_DATE_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_INFO_CUR_SENS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_RATE_CUR_SECS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CHANGING_CURRENCY (\n  INPAR_REPORT_ID     IN VARCHAR2\n ,INPAR_CHANGE_RATE   IN NUMBER\n ,INPAR_CURRENCY      IN VARCHAR2\n ,OUTPUT              OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_TITLE_CUR_SECS ( VAR IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CUR_SENSIVITY_REPORT (\n  VAR_REF_ID_REPORT   IN NUMBER\n ,VAR_QUERY_CUR       OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_REP_DETAI_PROFIL_CUR_SENS (\n  INPAR_REF_REPORT_ID   IN NUMBER\n ,INPAR_NAME            IN VARCHAR2\n ,INPAR_PROFILE_ID      IN NUMBER\n ,OUTPUT                OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_REPORT (\n  INPAR_ID   IN NUMBER\n ,OUTPAR     OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_CUR_RATE ( VAR IN NUMBER ) RETURN VARCHAR2;\n /*=============================================================*/\n\n PROCEDURE PRC_REPORT_CUR_SENS (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_DEC                IN VARCHAR2\n ,INPAR_BRANCH_ID          IN NUMBER\n ,INPAR_CATEGORY           IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_DATE               IN VARCHAR2\n ,OUTPAR_ID                OUT NUMBER\n );\n /*=============================================================*/\n\nEND PKG_CURRENCY_SENSIVITY;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CURRENCY_SENSIVITY\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_GET_QUERY_DATE_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := VAR;\n  VAR_QUERY   := 'SELECT  WMSYS.Wm_Concat(to_char( \"date\",''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\nFROM  (SELECT distinct\n EFF_DATE \"date\"\nFROM TBL_LEDGER_BRANCH)'\n;\n  RETURN VAR_QUERY;\n END FNC_GET_QUERY_DATE_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_QUERY_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR_QUERY    VARCHAR2(3000);\n  VAR_QUERY2   VARCHAR2(3000);\n  VAR_CUR      VARCHAR2(3000);\n BEGIN\n  VAR_CUR   := VAR;\n  SELECT\n   WM_CONCAT(ID)\n  INTO\n   VAR_CUR\n  FROM (\n    SELECT DISTINCT\n     TLA.REF_CUR_ID AS ID\n    FROM TBL_LEDGER_ARCHIVE TLA\n    ,    TBL_CURRENCY TC\n    WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n     AND\n      TLA.REF_CUR_ID \u003c\u003e 4\n   );\n\n  SELECT\n   WM_CONCAT('nvl(\"' ||\n   ID ||\n   '\",0) as \"' ||\n   ID ||\n   '\"')\n  INTO\n   VAR_QUERY2\n  FROM (\n    SELECT DISTINCT\n     TLA.REF_CUR_ID AS ID\n    FROM TBL_LEDGER_ARCHIVE TLA\n    ,    TBL_CURRENCY TC\n    WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n     AND\n      TLA.REF_CUR_ID \u003c\u003e 4\n   );\n\n  SELECT\n   'SELECT name as \"name\",PROFILE_ID as  \"id\",\n ' ||\n   VAR_QUERY2 ||\n   '\nFROM (\n  SELECT\n   name,MANDE,REF_CURRENCY,PROFILE_ID\n  FROM TBL_CUR_SENSIVITY_REPORT where REF_REPORT =' ||\n   VAR ||\n   '\n )\n  PIVOT ( MAX ( MANDE )\n   FOR REF_CURRENCY\n   IN ( ' ||\n   VAR_CUR ||\n   ')\n  )\n '\n  INTO\n   VAR_QUERY\n  FROM DUAL;\n\n  RETURN VAR_QUERY;\n END FNC_GET_QUERY_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_QUERY_INFO_CUR_SENS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := 'SELECT\n NAME as \"name\"\n ,DES as \"des\"\n ,REF_BRN_PROFILE \"branch\",\n  BALANCE_SENSIVITY as \"balance\",\n   to_char(CREATE_DATE,''yyyy/mm/dd'',''nls_calendar=persian'') AS \"sensitiveDate\"\nFROM TBL_REPORT\nWHERE ID   = '\n|| INAPR_REPORT_ID || '';\n  RETURN VAR_QUERY;\n END FNC_GET_QUERY_INFO_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_RATE_CUR_SECS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := 'SELECT\n tcc.CHANGE_RATE \"rate\"\n ,tcc.CURRENCY \"id\"\n ,TC.CUR_NAME \"name\"\nFROM TBL_CHANGE_CURRENCY tcc,TBL_CURRENCY tc\nwhere tcc.CURRENCY \u003c\u003e 4 and TC.CUR_ID = TCC.CURRENCY\nand TCC.REPORT_ID='\n|| INAPR_REPORT_ID || '';\n  RETURN VAR_QUERY;\n END FNC_GET_RATE_CUR_SECS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_TITLE_CUR_SECS ( VAR IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := VAR;\n  VAR_QUERY   := 'SELECT DISTINCT tla.REF_CUR_ID \"id\" ,TC.CUR_NAME \"name\" FROM TBL_LEDGER_ARCHIVE tla,TBL_CURRENCY tc where \nTLA.REF_CUR_ID = TC.CUR_ID\nand tla.REF_CUR_ID \u003c\u003e 4'\n;\n  RETURN VAR_QUERY;\n END FNC_GET_TITLE_CUR_SECS;\n\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_CUR_SENSIVITY_REPORT (\n  VAR_REF_ID_REPORT   IN NUMBER\n ,VAR_QUERY_CUR       OUT VARCHAR2\n ) AS\n\n  ID_BRANCH    NUMBER;\n  VAR_DATE     DATE;\n  ID_LEDGER    NUMBER;\n  VAR_QUERY    VARCHAR2(30000);\n  SUM_REPORT   VARCHAR2(30000);\n BEGIN\n \n delete from TBL_CUR_SENSIVITY_REPORT where REF_REPORT = VAR_REF_ID_REPORT;\n commit;\n \n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   ID_BRANCH\n  FROM TBL_REPORT\n  WHERE ID   = VAR_REF_ID_REPORT;\n\n  SELECT\n   CREATE_DATE\n  INTO\n   VAR_DATE\n  FROM TBL_REPORT\n  WHERE ID   = VAR_REF_ID_REPORT;\n\n  FOR I IN (\n   SELECT\n    TRD.REF_ID\n   ,TRD.NAME\n   ,TRD.PROFILE_ID\n   ,ARZ.\"id\"\n   FROM TBL_REP_DETAIL_PROFIL_CUR_SECS TRD\n   ,    (\n     SELECT DISTINCT\n      TLA.REF_CUR_ID \"id\"\n     FROM TBL_LEDGER_ARCHIVE TLA\n     ,    TBL_CURRENCY TC\n     WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n      AND\n       TLA.REF_CUR_ID \u003c\u003e 4\n    ) ARZ\n   WHERE TRD.REF_ID   = VAR_REF_ID_REPORT\n  ) LOOP\n   SELECT\n    NVL(\n     PKG_LEDGER_REPORT_MAP.FNC_GI_CALC(\n      I.PROFILE_ID\n     ,VAR_REF_ID_REPORT\n     ,I.\"id\"\n     ,VAR_DATE\n     )\n    ,0\n    )\n   INTO\n    SUM_REPORT\n   FROM DUAL;\n\n   INSERT INTO TBL_CUR_SENSIVITY_REPORT (\n    NAME\n   ,REF_CURRENCY\n   ,MANDE\n   ,PROFILE_ID\n   ,REF_REPORT\n   ) VALUES (\n    I.NAME\n   ,I.\"id\"\n   ,SUM_REPORT\n   ,I.PROFILE_ID\n   ,I.REF_ID\n   );\n\n  END LOOP;\n\n  COMMIT;\n  INSERT INTO TBL_CUR_SENSIVITY_REPORT ( NAME,REF_CURRENCY,MANDE ) SELECT\n   B.NAME\n  ,A.ID\n  ,0\n  FROM (\n    SELECT DISTINCT\n     TLA.REF_CUR_ID AS ID\n    FROM TBL_LEDGER_ARCHIVE TLA\n    ,    TBL_CURRENCY TC\n    WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n     AND\n      TLA.REF_CUR_ID NOT IN (\n       SELECT\n        TBL_CUR_SENSIVITY_REPORT.REF_CURRENCY\n       FROM TBL_CUR_SENSIVITY_REPORT\n      )\n     AND\n      TLA.REF_CUR_ID \u003c\u003e 4\n   ) A\n  ,    (\n    SELECT DISTINCT\n     NAME\n    FROM TBL_CUR_SENSIVITY_REPORT\n   ) B;\n\n  COMMIT;\n  INSERT INTO TBL_CUR_SENSIVITY_REPORT (\n   NAME\n  ,REF_CURRENCY\n  ,MANDE\n  ,PROFILE_ID\n  ) ( SELECT\n   NAME\n  ,1\n  ,0\n  ,PROFILE_ID\n  FROM TBL_REP_DETAIL_PROFIL_CUR_SECS\n  WHERE REF_ID   = 460\n   AND\n    NAME NOT IN (\n     SELECT DISTINCT\n      NAME\n     FROM TBL_CUR_SENSIVITY_REPORT\n    )\n  );\n\n  COMMIT;\n  UPDATE TBL_REPORT\n   SET\n    BALANCE_SENSIVITY = (\n     SELECT\n      SUM(SUM_RIAL)\n     FROM (\n       SELECT\n        B.\"id\"\n       ,A.ARZ * B.\"rate\" AS SUM_RIAL\n       FROM (\n         SELECT\n          A.REF_CURRENCY\n         ,A.A - B.B ARZ\n         FROM (\n           SELECT\n            REF_CURRENCY\n           ,\n            SUM(MANDE) A\n           FROM TBL_CUR_SENSIVITY_REPORT\n           WHERE NAME IN (\n             'b1','a1'\n            )\n           GROUP BY\n            REF_CURRENCY\n          ) A\n         ,    (\n           SELECT\n            REF_CURRENCY\n           ,\n            SUM(MANDE) B\n           FROM TBL_CUR_SENSIVITY_REPORT\n           WHERE NAME IN (\n             'b2','a2'\n            )\n           GROUP BY\n            REF_CURRENCY\n          ) B\n         WHERE A.REF_CURRENCY   = B.REF_CURRENCY\n        ) A\n       ,    (\n         SELECT\n          \"id\"\n         ,NVL(CHANGE_RATE,0) \"rate\"\n         FROM (\n           SELECT DISTINCT\n            TLA.REF_CUR_ID \"id\"\n           ,\n            TC.CUR_NAME \"name\"\n           FROM TBL_LEDGER_ARCHIVE TLA\n           ,\n                TBL_CURRENCY TC\n           WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n          ) A\n          LEFT JOIN (\n           SELECT\n            *\n           FROM TBL_CURRENCY_REL TCR\n           WHERE TCR.REL_DATE                = (\n             SELECT\n              MAX(REL_DATE)\n             FROM TBL_CURRENCY_REL\n             WHERE TBL_CURRENCY_REL.REL_DATE   = (\n               SELECT\n                MAX(REL_DATE)\n               FROM TBL_CURRENCY_REL\n              )\n            )\n          ) B ON A.\"id\"   = B.SRC_CUR_ID\n         WHERE \"id\" \u003c\u003e 4\n        ) B\n       WHERE A.REF_CURRENCY   = B.\"id\"\n      )\n    )\n  WHERE ID   = VAR_REF_ID_REPORT;\n\n  COMMIT;\n  UPDATE TBL_CUR_SENSIVITY_REPORT T\n   SET\n    T.PROFILE_ID = (\n     SELECT DISTINCT\n      C.PROFILE_ID\n     FROM TBL_REP_DETAIL_PROFIL_CUR_SECS C\n     WHERE C.REF_ID   = VAR_REF_ID_REPORT\n      AND\n       C.NAME     = T.NAME\n    );\n\n  COMMIT;\n  SELECT\n   PKG_CURRENCY_SENSIVITY.FNC_GET_QUERY_CUR_SENS(VAR_REF_ID_REPORT)\n  INTO\n   VAR_QUERY_CUR\n  FROM DUAL;\n\n END PRC_CUR_SENSIVITY_REPORT;\n\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_REP_DETAI_PROFIL_CUR_SENS (\n  INPAR_REF_REPORT_ID   IN NUMBER /*output of PRC_REPORT_CUR_SENS ==\u003e*/\n ,INPAR_NAME            IN VARCHAR2\n ,INPAR_PROFILE_ID      IN NUMBER\n ,OUTPUT                OUT VARCHAR2\n )\n  AS\n BEGIN\n  INSERT INTO TBL_REP_DETAIL_PROFIL_CUR_SECS ( REF_ID,NAME,PROFILE_ID ) VALUES ( INPAR_REF_REPORT_ID,INPAR_NAME,INPAR_PROFILE_ID );\n\n  OUTPUT   := NULL;\n END PRC_REP_DETAI_PROFIL_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n\n PROCEDURE PRC_DELETE_REPORT (\n  INPAR_ID   IN NUMBER\n ,OUTPAR     OUT VARCHAR2\n ) AS\n  VAR_CATEGORY   VARCHAR2(200);\n BEGIN\n  SELECT\n   CATEGORY\n  INTO\n   VAR_CATEGORY\n  FROM TBL_REPORT\n  WHERE H_ID   = INPAR_ID;\n\n  IF\n   ( UPPER(VAR_CATEGORY) != 'SENSITIVE' )\n  THEN   /* hameye gozareshha be joz gozareshat \"SENSITIVE\"*/\n   UPDATE TBL_REPORT\n    SET\n     STATUS = 0\n   WHERE H_ID   = INPAR_ID;\n\n   OUTPAR   := NULL;\n  END IF;\n\n EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n   SELECT\n    CATEGORY\n   INTO\n    VAR_CATEGORY\n   FROM TBL_REPORT\n   WHERE ID   = INPAR_ID;\n\n   IF\n    ( UPPER(VAR_CATEGORY) = 'SENSITIVE' )\n   THEN\n    DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n    DELETE FROM TBL_REP_DETAIL_PROFIL_CUR_SECS WHERE REF_ID   = INPAR_ID;\n\n   END IF;\n\n END PRC_DELETE_REPORT;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_CUR_RATE ( VAR IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := VAR;\n  VAR_QUERY   := 'select \"id\",\"name\",nvl(change_rate,0) \"rate\" from (SELECT DISTINCT tla.REF_CUR_ID \"id\" ,TC.CUR_NAME \"name\" FROM TBL_LEDGER_ARCHIVE tla,TBL_CURRENCY tc where \nTLA.REF_CUR_ID = TC.CUR_ID)a left join (select * from TBL_CURRENCY_REL tcr where tcr.rel_date = (select max(rel_date)from TBL_CURRENCY_REL ))b\non a.\"id\" = b.SRC_CUR_ID where \"id\" \u003c\u003e 4'\n;\n  RETURN VAR_QUERY;\n END FNC_GET_CUR_RATE;\n\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_CHANGING_CURRENCY (\n  INPAR_REPORT_ID     IN VARCHAR2\n ,INPAR_CHANGE_RATE   IN NUMBER\n ,INPAR_CURRENCY      IN VARCHAR2\n ,OUTPUT              OUT VARCHAR2\n )\n  AS\n BEGIN\n  INSERT INTO TBL_CHANGE_CURRENCY ( REPORT_ID,CHANGE_RATE,CURRENCY ) VALUES ( INPAR_REPORT_ID,INPAR_CHANGE_RATE,INPAR_CURRENCY );\n\n END PRC_CHANGING_CURRENCY;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_REPORT_CUR_SENS (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_DEC                IN VARCHAR2\n ,INPAR_BRANCH_ID          IN NUMBER\n ,INPAR_CATEGORY           IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_DATE               IN VARCHAR2\n ,OUTPAR_ID                OUT NUMBER\n )\n  AS\n BEGIN\n/*if  :  inpar_insert_or_update=-1  ==\u003einsert  else update */\n  IF\n   ( INPAR_INSERT_OR_UPDATE =-1 )\n  THEN  /*insert*/\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,REF_BRN_PROFILE\n   ,CATEGORY\n   ,TYPE\n   ,CREATE_DATE\n   ,STATUS /*alaki*/\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DEC\n   ,INPAR_BRANCH_ID\n   ,INPAR_CATEGORY\n   ,INPAR_TYPE\n   ,TO_DATE(INPAR_DATE,'yyyy/mm/dd','nls_calendar=persian')\n   ,1 /*alaki*/\n   );\n\n   SELECT\n    MAX(ID)\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CATEGORY   = INPAR_CATEGORY;\n /**/\n\n   DELETE FROM TBL_CHANGE_CURRENCY WHERE REPORT_ID   = OUTPAR_ID;\n\n  ELSE /*  !=-1  ==\u003e update (id report)*/\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DEC\n    ,REF_BRN_PROFILE = INPAR_BRANCH_ID\n   WHERE ID   = INPAR_INSERT_OR_UPDATE;\n\n   OUTPAR_ID   := INPAR_INSERT_OR_UPDATE;\n   DELETE FROM TBL_REP_DETAIL_PROFIL_CUR_SECS WHERE REF_ID   = INPAR_INSERT_OR_UPDATE;\n\n   DELETE FROM TBL_CHANGE_CURRENCY WHERE REPORT_ID   = INPAR_INSERT_OR_UPDATE;\n\n  END IF;\n END PRC_REPORT_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\nEND PKG_CURRENCY_SENSIVITY;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CURRENCY_SENSIVITY\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GET_QUERY_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_DATE_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_INFO_CUR_SENS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_RATE_CUR_SECS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CHANGING_CURRENCY (\n  INPAR_REPORT_ID     IN VARCHAR2\n ,INPAR_CHANGE_RATE   IN NUMBER\n ,INPAR_CURRENCY      IN VARCHAR2\n ,OUTPUT              OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_TITLE_CUR_SECS ( VAR IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CUR_SENSIVITY_REPORT (\n  VAR_REF_ID_REPORT   IN NUMBER\n ,VAR_QUERY_CUR       OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_REP_DETAI_PROFIL_CUR_SENS (\n  INPAR_REF_REPORT_ID   IN NUMBER\n ,INPAR_NAME            IN VARCHAR2\n ,INPAR_PROFILE_ID      IN NUMBER\n ,OUTPUT                OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_REPORT (\n  INPAR_ID   IN NUMBER\n ,OUTPAR     OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_CUR_RATE ( VAR IN NUMBER ) RETURN VARCHAR2;\n /*=============================================================*/\n\n PROCEDURE PRC_REPORT_CUR_SENS (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_DEC                IN VARCHAR2\n ,INPAR_BRANCH_ID          IN NUMBER\n ,INPAR_CATEGORY           IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_DATE               IN VARCHAR2\n ,OUTPAR_ID                OUT NUMBER\n );\n /*=============================================================*/\n\nEND PKG_CURRENCY_SENSIVITY;"},{"Name":"PKG_CURRENCY_SENSIVITY","ObjectID":279947,"Digest":"2c405f57474741fdf074b6960aacbbc21731d797c8afc50f43814ac13492207c","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CURRENCY_SENSIVITY\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GET_QUERY_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_DATE_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_INFO_CUR_SENS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_RATE_CUR_SECS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CHANGING_CURRENCY (\n  INPAR_REPORT_ID     IN VARCHAR2\n ,INPAR_CHANGE_RATE   IN NUMBER\n ,INPAR_CURRENCY      IN VARCHAR2\n ,OUTPUT              OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_TITLE_CUR_SECS ( VAR IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CUR_SENSIVITY_REPORT (\n  VAR_REF_ID_REPORT   IN NUMBER\n ,VAR_QUERY_CUR       OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_REP_DETAI_PROFIL_CUR_SENS (\n  INPAR_REF_REPORT_ID   IN NUMBER\n ,INPAR_NAME            IN VARCHAR2\n ,INPAR_PROFILE_ID      IN NUMBER\n ,OUTPUT                OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_REPORT (\n  INPAR_ID   IN NUMBER\n ,OUTPAR     OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_CUR_RATE ( VAR IN NUMBER ) RETURN VARCHAR2;\n /*=============================================================*/\n\n PROCEDURE PRC_REPORT_CUR_SENS (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_DEC                IN VARCHAR2\n ,INPAR_BRANCH_ID          IN NUMBER\n ,INPAR_CATEGORY           IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_DATE               IN VARCHAR2\n ,OUTPAR_ID                OUT NUMBER\n );\n /*=============================================================*/\n\nEND PKG_CURRENCY_SENSIVITY;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CURRENCY_SENSIVITY\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_GET_QUERY_DATE_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := VAR;\n  VAR_QUERY   := 'SELECT  WMSYS.Wm_Concat(to_char( \"date\",''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\nFROM  (SELECT distinct\n EFF_DATE \"date\"\nFROM TBL_LEDGER_BRANCH)'\n;\n  RETURN VAR_QUERY;\n END FNC_GET_QUERY_DATE_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_QUERY_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR_QUERY    VARCHAR2(3000);\n  VAR_QUERY2   VARCHAR2(3000);\n  VAR_CUR      VARCHAR2(3000);\n BEGIN\n  VAR_CUR   := VAR;\n  SELECT\n   WM_CONCAT(ID)\n  INTO\n   VAR_CUR\n  FROM (\n    SELECT DISTINCT\n     TLA.REF_CUR_ID AS ID\n    FROM TBL_LEDGER_ARCHIVE TLA\n    ,    TBL_CURRENCY TC\n    WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n     AND\n      TLA.REF_CUR_ID \u003c\u003e 4\n   );\n\n  SELECT\n   WM_CONCAT('nvl(\"' ||\n   ID ||\n   '\",0) as \"' ||\n   ID ||\n   '\"')\n  INTO\n   VAR_QUERY2\n  FROM (\n    SELECT DISTINCT\n     TLA.REF_CUR_ID AS ID\n    FROM TBL_LEDGER_ARCHIVE TLA\n    ,    TBL_CURRENCY TC\n    WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n     AND\n      TLA.REF_CUR_ID \u003c\u003e 4\n   );\n\n  SELECT\n   'SELECT name as \"name\",PROFILE_ID as  \"id\",\n ' ||\n   VAR_QUERY2 ||\n   '\nFROM (\n  SELECT\n   name,MANDE,REF_CURRENCY,PROFILE_ID\n  FROM TBL_CUR_SENSIVITY_REPORT where REF_REPORT =' ||\n   VAR ||\n   '\n )\n  PIVOT ( MAX ( MANDE )\n   FOR REF_CURRENCY\n   IN ( ' ||\n   VAR_CUR ||\n   ')\n  )\n '\n  INTO\n   VAR_QUERY\n  FROM DUAL;\n\n  RETURN VAR_QUERY;\n END FNC_GET_QUERY_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_QUERY_INFO_CUR_SENS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := 'SELECT\n NAME as \"name\"\n ,DES as \"des\"\n ,REF_BRN_PROFILE \"branch\",\n  BALANCE_SENSIVITY as \"balance\",\n   to_char(CREATE_DATE,''yyyy/mm/dd'',''nls_calendar=persian'') AS \"sensitiveDate\"\nFROM TBL_REPORT\nWHERE ID   = '\n|| INAPR_REPORT_ID || '';\n  RETURN VAR_QUERY;\n END FNC_GET_QUERY_INFO_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_RATE_CUR_SECS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := 'SELECT\n tcc.CHANGE_RATE \"rate\"\n ,tcc.CURRENCY \"id\"\n ,TC.CUR_NAME \"name\"\nFROM TBL_CHANGE_CURRENCY tcc,TBL_CURRENCY tc\nwhere tcc.CURRENCY \u003c\u003e 4 and TC.CUR_ID = TCC.CURRENCY\nand TCC.REPORT_ID='\n|| INAPR_REPORT_ID || '';\n  RETURN VAR_QUERY;\n END FNC_GET_RATE_CUR_SECS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_TITLE_CUR_SECS ( VAR IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := VAR;\n  VAR_QUERY   := 'SELECT DISTINCT tla.REF_CUR_ID \"id\" ,TC.CUR_NAME \"name\" FROM TBL_LEDGER_ARCHIVE tla,TBL_CURRENCY tc where \nTLA.REF_CUR_ID = TC.CUR_ID\nand tla.REF_CUR_ID \u003c\u003e 4'\n;\n  RETURN VAR_QUERY;\n END FNC_GET_TITLE_CUR_SECS;\n\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_CUR_SENSIVITY_REPORT (\n  VAR_REF_ID_REPORT   IN NUMBER\n ,VAR_QUERY_CUR       OUT VARCHAR2\n ) AS\n\n  ID_BRANCH    NUMBER;\n  VAR_DATE     DATE;\n  ID_LEDGER    NUMBER;\n  VAR_QUERY    VARCHAR2(30000);\n  SUM_REPORT   VARCHAR2(30000);\n BEGIN\n \n delete from TBL_CUR_SENSIVITY_REPORT where REF_REPORT = VAR_REF_ID_REPORT;\n commit;\n \n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   ID_BRANCH\n  FROM TBL_REPORT\n  WHERE ID   = VAR_REF_ID_REPORT;\n\n  SELECT\n   CREATE_DATE\n  INTO\n   VAR_DATE\n  FROM TBL_REPORT\n  WHERE ID   = VAR_REF_ID_REPORT;\n\n  FOR I IN (\n   SELECT\n    TRD.REF_ID\n   ,TRD.NAME\n   ,TRD.PROFILE_ID\n   ,ARZ.\"id\"\n   FROM TBL_REP_DETAIL_PROFIL_CUR_SECS TRD\n   ,    (\n     SELECT DISTINCT\n      TLA.REF_CUR_ID \"id\"\n     FROM TBL_LEDGER_ARCHIVE TLA\n     ,    TBL_CURRENCY TC\n     WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n      AND\n       TLA.REF_CUR_ID \u003c\u003e 4\n    ) ARZ\n   WHERE TRD.REF_ID   = VAR_REF_ID_REPORT\n  ) LOOP\n   SELECT\n    NVL(\n     PKG_LEDGER_REPORT_MAP.FNC_GI_CALC(\n      I.PROFILE_ID\n     ,VAR_REF_ID_REPORT\n     ,I.\"id\"\n     ,VAR_DATE\n     )\n    ,0\n    )\n   INTO\n    SUM_REPORT\n   FROM DUAL;\n\n   INSERT INTO TBL_CUR_SENSIVITY_REPORT (\n    NAME\n   ,REF_CURRENCY\n   ,MANDE\n   ,PROFILE_ID\n   ,REF_REPORT\n   ) VALUES (\n    I.NAME\n   ,I.\"id\"\n   ,SUM_REPORT\n   ,I.PROFILE_ID\n   ,I.REF_ID\n   );\n\n  END LOOP;\n\n  COMMIT;\n  INSERT INTO TBL_CUR_SENSIVITY_REPORT ( NAME,REF_CURRENCY,MANDE ) SELECT\n   B.NAME\n  ,A.ID\n  ,0\n  FROM (\n    SELECT DISTINCT\n     TLA.REF_CUR_ID AS ID\n    FROM TBL_LEDGER_ARCHIVE TLA\n    ,    TBL_CURRENCY TC\n    WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n     AND\n      TLA.REF_CUR_ID NOT IN (\n       SELECT\n        TBL_CUR_SENSIVITY_REPORT.REF_CURRENCY\n       FROM TBL_CUR_SENSIVITY_REPORT\n      )\n     AND\n      TLA.REF_CUR_ID \u003c\u003e 4\n   ) A\n  ,    (\n    SELECT DISTINCT\n     NAME\n    FROM TBL_CUR_SENSIVITY_REPORT\n   ) B;\n\n  COMMIT;\n  INSERT INTO TBL_CUR_SENSIVITY_REPORT (\n   NAME\n  ,REF_CURRENCY\n  ,MANDE\n  ,PROFILE_ID\n  ) ( SELECT\n   NAME\n  ,1\n  ,0\n  ,PROFILE_ID\n  FROM TBL_REP_DETAIL_PROFIL_CUR_SECS\n  WHERE REF_ID   = 460\n   AND\n    NAME NOT IN (\n     SELECT DISTINCT\n      NAME\n     FROM TBL_CUR_SENSIVITY_REPORT\n    )\n  );\n\n  COMMIT;\n  UPDATE TBL_REPORT\n   SET\n    BALANCE_SENSIVITY = (\n     SELECT\n      SUM(SUM_RIAL)\n     FROM (\n       SELECT\n        B.\"id\"\n       ,A.ARZ * B.\"rate\" AS SUM_RIAL\n       FROM (\n         SELECT\n          A.REF_CURRENCY\n         ,A.A - B.B ARZ\n         FROM (\n           SELECT\n            REF_CURRENCY\n           ,\n            SUM(MANDE) A\n           FROM TBL_CUR_SENSIVITY_REPORT\n           WHERE NAME IN (\n             'b1','a1'\n            )\n           GROUP BY\n            REF_CURRENCY\n          ) A\n         ,    (\n           SELECT\n            REF_CURRENCY\n           ,\n            SUM(MANDE) B\n           FROM TBL_CUR_SENSIVITY_REPORT\n           WHERE NAME IN (\n             'b2','a2'\n            )\n           GROUP BY\n            REF_CURRENCY\n          ) B\n         WHERE A.REF_CURRENCY   = B.REF_CURRENCY\n        ) A\n       ,    (\n         SELECT\n          \"id\"\n         ,NVL(CHANGE_RATE,0) \"rate\"\n         FROM (\n           SELECT DISTINCT\n            TLA.REF_CUR_ID \"id\"\n           ,\n            TC.CUR_NAME \"name\"\n           FROM TBL_LEDGER_ARCHIVE TLA\n           ,\n                TBL_CURRENCY TC\n           WHERE TLA.REF_CUR_ID   = TC.CUR_ID\n          ) A\n          LEFT JOIN (\n           SELECT\n            *\n           FROM TBL_CURRENCY_REL TCR\n           WHERE TCR.REL_DATE                = (\n             SELECT\n              MAX(REL_DATE)\n             FROM TBL_CURRENCY_REL\n             WHERE TBL_CURRENCY_REL.REL_DATE   = (\n               SELECT\n                MAX(REL_DATE)\n               FROM TBL_CURRENCY_REL\n              )\n            )\n          ) B ON A.\"id\"   = B.SRC_CUR_ID\n         WHERE \"id\" \u003c\u003e 4\n        ) B\n       WHERE A.REF_CURRENCY   = B.\"id\"\n      )\n    )\n  WHERE ID   = VAR_REF_ID_REPORT;\n\n  COMMIT;\n  UPDATE TBL_CUR_SENSIVITY_REPORT T\n   SET\n    T.PROFILE_ID = (\n     SELECT DISTINCT\n      C.PROFILE_ID\n     FROM TBL_REP_DETAIL_PROFIL_CUR_SECS C\n     WHERE C.REF_ID   = VAR_REF_ID_REPORT\n      AND\n       C.NAME     = T.NAME\n    );\n\n  COMMIT;\n  SELECT\n   PKG_CURRENCY_SENSIVITY.FNC_GET_QUERY_CUR_SENS(VAR_REF_ID_REPORT)\n  INTO\n   VAR_QUERY_CUR\n  FROM DUAL;\n\n END PRC_CUR_SENSIVITY_REPORT;\n\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_REP_DETAI_PROFIL_CUR_SENS (\n  INPAR_REF_REPORT_ID   IN NUMBER /*output of PRC_REPORT_CUR_SENS ==\u003e*/\n ,INPAR_NAME            IN VARCHAR2\n ,INPAR_PROFILE_ID      IN NUMBER\n ,OUTPUT                OUT VARCHAR2\n )\n  AS\n BEGIN\n  INSERT INTO TBL_REP_DETAIL_PROFIL_CUR_SECS ( REF_ID,NAME,PROFILE_ID ) VALUES ( INPAR_REF_REPORT_ID,INPAR_NAME,INPAR_PROFILE_ID );\n\n  OUTPUT   := NULL;\n END PRC_REP_DETAI_PROFIL_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n\n PROCEDURE PRC_DELETE_REPORT (\n  INPAR_ID   IN NUMBER\n ,OUTPAR     OUT VARCHAR2\n ) AS\n  VAR_CATEGORY   VARCHAR2(200);\n BEGIN\n  SELECT\n   CATEGORY\n  INTO\n   VAR_CATEGORY\n  FROM TBL_REPORT\n  WHERE H_ID   = INPAR_ID;\n\n  IF\n   ( UPPER(VAR_CATEGORY) != 'SENSITIVE' )\n  THEN   /* hameye gozareshha be joz gozareshat \"SENSITIVE\"*/\n   UPDATE TBL_REPORT\n    SET\n     STATUS = 0\n   WHERE H_ID   = INPAR_ID;\n\n   OUTPAR   := NULL;\n  END IF;\n\n EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n   SELECT\n    CATEGORY\n   INTO\n    VAR_CATEGORY\n   FROM TBL_REPORT\n   WHERE ID   = INPAR_ID;\n\n   IF\n    ( UPPER(VAR_CATEGORY) = 'SENSITIVE' )\n   THEN\n    DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n    DELETE FROM TBL_REP_DETAIL_PROFIL_CUR_SECS WHERE REF_ID   = INPAR_ID;\n\n   END IF;\n\n END PRC_DELETE_REPORT;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n FUNCTION FNC_GET_CUR_RATE ( VAR IN NUMBER ) RETURN VARCHAR2 AS\n  VAR_QUERY   VARCHAR2(3000);\n BEGIN\n  VAR_QUERY   := VAR;\n  VAR_QUERY   := 'select \"id\",\"name\",nvl(change_rate,0) \"rate\" from (SELECT DISTINCT tla.REF_CUR_ID \"id\" ,TC.CUR_NAME \"name\" FROM TBL_LEDGER_ARCHIVE tla,TBL_CURRENCY tc where \nTLA.REF_CUR_ID = TC.CUR_ID)a left join (select * from TBL_CURRENCY_REL tcr where tcr.rel_date = (select max(rel_date)from TBL_CURRENCY_REL ))b\non a.\"id\" = b.SRC_CUR_ID where \"id\" \u003c\u003e 4'\n;\n  RETURN VAR_QUERY;\n END FNC_GET_CUR_RATE;\n\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_CHANGING_CURRENCY (\n  INPAR_REPORT_ID     IN VARCHAR2\n ,INPAR_CHANGE_RATE   IN NUMBER\n ,INPAR_CURRENCY      IN VARCHAR2\n ,OUTPUT              OUT VARCHAR2\n )\n  AS\n BEGIN\n  INSERT INTO TBL_CHANGE_CURRENCY ( REPORT_ID,CHANGE_RATE,CURRENCY ) VALUES ( INPAR_REPORT_ID,INPAR_CHANGE_RATE,INPAR_CURRENCY );\n\n END PRC_CHANGING_CURRENCY;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\n PROCEDURE PRC_REPORT_CUR_SENS (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_DEC                IN VARCHAR2\n ,INPAR_BRANCH_ID          IN NUMBER\n ,INPAR_CATEGORY           IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_DATE               IN VARCHAR2\n ,OUTPAR_ID                OUT NUMBER\n )\n  AS\n BEGIN\n/*if  :  inpar_insert_or_update=-1  ==\u003einsert  else update */\n  IF\n   ( INPAR_INSERT_OR_UPDATE =-1 )\n  THEN  /*insert*/\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,REF_BRN_PROFILE\n   ,CATEGORY\n   ,TYPE\n   ,CREATE_DATE\n   ,STATUS /*alaki*/\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DEC\n   ,INPAR_BRANCH_ID\n   ,INPAR_CATEGORY\n   ,INPAR_TYPE\n   ,TO_DATE(INPAR_DATE,'yyyy/mm/dd','nls_calendar=persian')\n   ,1 /*alaki*/\n   );\n\n   SELECT\n    MAX(ID)\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CATEGORY   = INPAR_CATEGORY;\n /**/\n\n   DELETE FROM TBL_CHANGE_CURRENCY WHERE REPORT_ID   = OUTPAR_ID;\n\n  ELSE /*  !=-1  ==\u003e update (id report)*/\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DEC\n    ,REF_BRN_PROFILE = INPAR_BRANCH_ID\n   WHERE ID   = INPAR_INSERT_OR_UPDATE;\n\n   OUTPAR_ID   := INPAR_INSERT_OR_UPDATE;\n   DELETE FROM TBL_REP_DETAIL_PROFIL_CUR_SECS WHERE REF_ID   = INPAR_INSERT_OR_UPDATE;\n\n   DELETE FROM TBL_CHANGE_CURRENCY WHERE REPORT_ID   = INPAR_INSERT_OR_UPDATE;\n\n  END IF;\n END PRC_REPORT_CUR_SENS;\n /*=============================================================*/\n /*=============================================================*/\n /*=============================================================*/\nEND PKG_CURRENCY_SENSIVITY;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CURRENCY_SENSIVITY\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GET_QUERY_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_DATE_CUR_SENS ( VAR VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_INFO_CUR_SENS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_GET_RATE_CUR_SECS ( INAPR_REPORT_ID IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CHANGING_CURRENCY (\n  INPAR_REPORT_ID     IN VARCHAR2\n ,INPAR_CHANGE_RATE   IN NUMBER\n ,INPAR_CURRENCY      IN VARCHAR2\n ,OUTPUT              OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_TITLE_CUR_SECS ( VAR IN NUMBER ) RETURN VARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_CUR_SENSIVITY_REPORT (\n  VAR_REF_ID_REPORT   IN NUMBER\n ,VAR_QUERY_CUR       OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_REP_DETAI_PROFIL_CUR_SENS (\n  INPAR_REF_REPORT_ID   IN NUMBER\n ,INPAR_NAME            IN VARCHAR2\n ,INPAR_PROFILE_ID      IN NUMBER\n ,OUTPUT                OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_REPORT (\n  INPAR_ID   IN NUMBER\n ,OUTPAR     OUT VARCHAR2\n );\n/*=============================================================*/\n\n FUNCTION FNC_GET_CUR_RATE ( VAR IN NUMBER ) RETURN VARCHAR2;\n /*=============================================================*/\n\n PROCEDURE PRC_REPORT_CUR_SENS (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_DEC                IN VARCHAR2\n ,INPAR_BRANCH_ID          IN NUMBER\n ,INPAR_CATEGORY           IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_DATE               IN VARCHAR2\n ,OUTPAR_ID                OUT NUMBER\n );\n /*=============================================================*/\n\nEND PKG_CURRENCY_SENSIVITY;"},{"Name":"PKG_LEDGER_REPORT_MAP","ObjectID":280043,"Digest":"b8a813999b33506ef2f2ce2737e67b897736590ed7d8bad4415137e3f6a68eca","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_REPORT_MAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GI_CALC (\n  INPAR_ID           IN NUMBER\n ,INPAR_REF_REPORT   IN NUMBER\n ,INPAR_CUR_ID       IN NUMBER\n ,INPAR_DATE         IN DATE\n ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_AD_FARSIVALIDATE ( STR NVARCHAR2 ) RETURN NVARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_GI_MAP (\n  INPAR_NAME            VARCHAR2\n ,INPAR_DESCRIPTION     VARCHAR2\n ,INPAR_FORMUL          clob\n ,INPAR_STANDARD_TYPE   VARCHAR2\n ,OUTPAR_ID             OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n    /*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA ( INPAR_ID IN VARCHAR2 ) RETURN clob;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA_PROFILE ( INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\nEND PKG_LEDGER_REPORT_MAP;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LEDGER_REPORT_MAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GI_CALC (\n  INPAR_ID           IN NUMBER\n ,INPAR_REF_REPORT   IN NUMBER\n ,INPAR_CUR_ID       IN NUMBER\n ,INPAR_DATE         IN DATE\n ) RETURN VARCHAR2 AS\n  VAR         CLOB;\n  VAR2        CLOB;\n  VAR3        CLOB;\n  ID_BRANCH   NUMBER;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n BEGIN\n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   ID_BRANCH\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REF_REPORT;\n\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = ' ||\n   INPAR_ID ||\n   '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_BRANCH PARTITION ('||VAR_PARTITION||')  DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n     AND\n      DG.REF_CUR_ID    = ' ||\n   INPAR_CUR_ID ||\n   '\n     AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   '''))\n       and DG.REF_BRANCH in (' ||\n   FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n   ')\n    ORDER BY A.LEV\n   )'\n  INTO\n   VAR\n  FROM DUAL;\n -- RETURN VAR ;\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN VAR2;\n END FNC_GI_CALC;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n PROCEDURE PRC_GI_MAP (\n  INPAR_NAME            VARCHAR2\n ,INPAR_DESCRIPTION     VARCHAR2\n ,INPAR_FORMUL          clob\n ,INPAR_STANDARD_TYPE   VARCHAR2\n ,OUTPAR_ID             OUT VARCHAR2\n ) AS\n VAR_COUNT            NUMBER;\nvar_j                NUMBER;\nvar_i                NUMBER;\nVAR_ID               NUMBER;\nVAR_REPORT_ID_UPDATE NUMBER;\nVAR_NAME             VARCHAR2(1000);\nVAR_DESCRIPTION      VARCHAR2(2000);\nVAR_CREATED_DATE     DATE;\nVAR_STANDARD_TYPE    VARCHAR2(20);\n\n BEGIN\n \n var_j :=1;\n var_i:=1;\n \n  SELECT\n   COUNT(DISTINCT NAME)\n  INTO\n   VAR_COUNT\n  FROM TBL_LEDGER_REPORT_MAP\n  WHERE NAME   = ( UPPER(INPAR_NAME) );\n\n  IF\n   ( VAR_COUNT = 0 AND INPAR_NAME \u003c\u003e 'پروفايل استاندارد' )\n  THEN\n  \nselect TBL_LEDGER_REPORT_MAP_SEQ1.nextval INTO VAR_ID from dual;\n      loop\n      \n       INSERT INTO TBL_LEDGER_REPORT_MAP (\n    NAME\n   ,DESCRIPTION\n   ,CREATED_DATE\n   ,STANDARD_TYPE\n   ,FORMULA\n   ,REPORT_MAP_ID\n   ,PRIORITY\n   ) VALUES (\n    PKG_LEDGER_REPORT_MAP.FNC_AD_FARSIVALIDATE(UPPER(INPAR_NAME) )\n   ,INPAR_DESCRIPTION\n   ,SYSDATE\n   ,INPAR_STANDARD_TYPE\n   ,to_char(substr(INPAR_FORMUL,var_j, 4000))\n   ,VAR_ID+1,\n   var_i\n   );\n  \n   COMMIT;\n     \n\n  exit when nvl(LENGTHB((TO_CHAR(SUBSTR(INPAR_FORMUL,var_j, 4000)))),0) \u003c 4000;\n   var_j:= var_j+4000;\n   var_i := var_i+1;\n    end loop;\n\nSELECT REPORT_MAP_ID\nINTO OUTPAR_ID\nFROM TBL_LEDGER_REPORT_MAP\nWHERE id IN\n  ( SELECT MAX(ID) FROM TBL_LEDGER_REPORT_MAP\n  );\n\n\n\n\n\nend if;\n\n  IF ( VAR_COUNT = 1 AND INPAR_NAME \u003c\u003e 'پروفايل استاندارد' ) THEN\n        \nSELECT MAX(REPORT_MAP_ID),\n  MAX(NAME),\n  MAX(DESCRIPTION),\n  MAX(CREATED_DATE),\n  MAX(STANDARD_TYPE) INTO VAR_REPORT_ID_UPDATE,VAR_NAME,VAR_DESCRIPTION,VAR_CREATED_DATE,VAR_STANDARD_TYPE FROM TBL_LEDGER_REPORT_MAP WHERE NAME   = ( UPPER(INPAR_NAME) );\n      \n DELETE FROM TBL_LEDGER_REPORT_MAP WHERE REPORT_MAP_ID = VAR_REPORT_ID_UPDATE;\n COMMIT;\n  \n  var_i:=1;\n        loop\n      \n\n        \n     INSERT\nINTO TBL_LEDGER_REPORT_MAP\n  (\n    NAME ,\n    DESCRIPTION ,\n    CREATED_DATE ,\n    EDITED_DATE,\n    STANDARD_TYPE ,\n    FORMULA ,\n    REPORT_MAP_ID ,\n    PRIORITY\n  )\n  VALUES\n  (\n    VAR_NAME ,\n    VAR_DESCRIPTION ,\n    VAR_CREATED_DATE ,\n    SYSDATE,\n    VAR_STANDARD_TYPE ,\n    TO_CHAR(SUBSTR(INPAR_FORMUL,var_j, 4000)) ,\n   VAR_REPORT_ID_UPDATE,\n    var_i\n  ); \n        \n        \n        \n        \n        \n        \n        \n        \n--   UPDATE TBL_LEDGER_REPORT_MAP\n--    SET\n--     DESCRIPTION = INPAR_DESCRIPTION\n--    ,EDITED_DATE = SYSDATE\n--    ,FORMULA = substr(INPAR_FORMUL,var_j, 4000)\n--   WHERE NAME   = ( UPPER(INPAR_NAME) )\n--   and PRIORITY =var_i ;\n--      \n  \n   COMMIT;\n    \n\n  exit when nvl(LENGTHB((TO_CHAR(SUBSTR(INPAR_FORMUL,var_j, 4000)))),0) \u003c 4000;\n    var_j:= var_j+4000;\n   var_i := var_i+1;\n  \n  \n    end loop;\n\n \n    OUTPAR_ID := VAR_REPORT_ID_UPDATE ;\n\n   COMMIT;\n  \n  end if;\n\n END PRC_GI_MAP;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n FUNCTION FNC_AD_FARSIVALIDATE ( STR NVARCHAR2 ) RETURN NVARCHAR2 AS\n  TEMPSTR   NVARCHAR2(1000);\n BEGIN\n  TEMPSTR   := STR;\n  TEMPSTR   := REPLACE(\n   TEMPSTR\n  ,UNISTR('\\064a')\n  ,UNISTR('\\06cc')\n  );\n  TEMPSTR   := REPLACE(\n   TEMPSTR\n  ,UNISTR('\\0643')\n  ,UNISTR('\\06a9')\n  );\n  RETURN TEMPSTR;\n END FNC_AD_FARSIVALIDATE;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n )\n  AS\n BEGIN\n  OUTPAR_ID   := 0;\n  DELETE FROM TBL_LEDGER_REPORT_MAP WHERE REPORT_MAP_ID   = INPAR_ID;\n\n  COMMIT;\n END PRC_DELETE_PROFILE;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA ( INPAR_ID IN VARCHAR2 ) RETURN clob AS\n  VAR   clob;\n BEGIN\n  VAR   := 'SELECT  min(REPORT_MAP_ID) \"id\",\n  min(name) \"name\",\n  min(description) \"description\",\n  min(CREATED_DATE) \"createdDate\",\n  min(EDITED_DATE) \"editDate\",\n  min(STANDARD_TYPE) \"constant\",rtrim(xmlagg(XMLELEMENT(e,FORMULA).EXTRACT(''//text()'')\n    ).GetClobVal(),'','') \"formula\"\n    FROM ( SELECT * FROM TBL_LEDGER_REPORT_MAP\n    WHERE REPORT_MAP_ID ='\n|| INPAR_ID ||' \nORDER BY PRIORITY)';\n  RETURN VAR;\n END FNC_GET_QUERY_FORMULA;\n\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA_PROFILE ( INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'SELECT MIN(REPORT_MAP_ID)     AS \"id\",\n  MIN(NAME)        AS \"name\",\n  MIN(description) AS \"des\"\nFROM TBL_LEDGER_report_map\nWHERE upper(standard_type) =upper('''\n|| INPAR_TYPE || ''')\nGROUP BY REPORT_MAP_ID\nORDER BY 1 DESC';\n\n\n END FNC_GET_QUERY_FORMULA_PROFILE;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\nEND PKG_LEDGER_REPORT_MAP;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_REPORT_MAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GI_CALC (\n  INPAR_ID           IN NUMBER\n ,INPAR_REF_REPORT   IN NUMBER\n ,INPAR_CUR_ID       IN NUMBER\n ,INPAR_DATE         IN DATE\n ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_AD_FARSIVALIDATE ( STR NVARCHAR2 ) RETURN NVARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_GI_MAP (\n  INPAR_NAME            VARCHAR2\n ,INPAR_DESCRIPTION     VARCHAR2\n ,INPAR_FORMUL          clob\n ,INPAR_STANDARD_TYPE   VARCHAR2\n ,OUTPAR_ID             OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n    /*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA ( INPAR_ID IN VARCHAR2 ) RETURN clob;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA_PROFILE ( INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\nEND PKG_LEDGER_REPORT_MAP;"},{"Name":"PKG_LEDGER_REPORT_MAP","ObjectID":280045,"Digest":"b8a813999b33506ef2f2ce2737e67b897736590ed7d8bad4415137e3f6a68eca","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_REPORT_MAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GI_CALC (\n  INPAR_ID           IN NUMBER\n ,INPAR_REF_REPORT   IN NUMBER\n ,INPAR_CUR_ID       IN NUMBER\n ,INPAR_DATE         IN DATE\n ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_AD_FARSIVALIDATE ( STR NVARCHAR2 ) RETURN NVARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_GI_MAP (\n  INPAR_NAME            VARCHAR2\n ,INPAR_DESCRIPTION     VARCHAR2\n ,INPAR_FORMUL          clob\n ,INPAR_STANDARD_TYPE   VARCHAR2\n ,OUTPAR_ID             OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n    /*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA ( INPAR_ID IN VARCHAR2 ) RETURN clob;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA_PROFILE ( INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\nEND PKG_LEDGER_REPORT_MAP;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LEDGER_REPORT_MAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GI_CALC (\n  INPAR_ID           IN NUMBER\n ,INPAR_REF_REPORT   IN NUMBER\n ,INPAR_CUR_ID       IN NUMBER\n ,INPAR_DATE         IN DATE\n ) RETURN VARCHAR2 AS\n  VAR         CLOB;\n  VAR2        CLOB;\n  VAR3        CLOB;\n  ID_BRANCH   NUMBER;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n BEGIN\n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   ID_BRANCH\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REF_REPORT;\n\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = ' ||\n   INPAR_ID ||\n   '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_BRANCH PARTITION ('||VAR_PARTITION||')  DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n     AND\n      DG.REF_CUR_ID    = ' ||\n   INPAR_CUR_ID ||\n   '\n     AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   '''))\n       and DG.REF_BRANCH in (' ||\n   FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n   ')\n    ORDER BY A.LEV\n   )'\n  INTO\n   VAR\n  FROM DUAL;\n -- RETURN VAR ;\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN VAR2;\n END FNC_GI_CALC;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n PROCEDURE PRC_GI_MAP (\n  INPAR_NAME            VARCHAR2\n ,INPAR_DESCRIPTION     VARCHAR2\n ,INPAR_FORMUL          clob\n ,INPAR_STANDARD_TYPE   VARCHAR2\n ,OUTPAR_ID             OUT VARCHAR2\n ) AS\n VAR_COUNT            NUMBER;\nvar_j                NUMBER;\nvar_i                NUMBER;\nVAR_ID               NUMBER;\nVAR_REPORT_ID_UPDATE NUMBER;\nVAR_NAME             VARCHAR2(1000);\nVAR_DESCRIPTION      VARCHAR2(2000);\nVAR_CREATED_DATE     DATE;\nVAR_STANDARD_TYPE    VARCHAR2(20);\n\n BEGIN\n \n var_j :=1;\n var_i:=1;\n \n  SELECT\n   COUNT(DISTINCT NAME)\n  INTO\n   VAR_COUNT\n  FROM TBL_LEDGER_REPORT_MAP\n  WHERE NAME   = ( UPPER(INPAR_NAME) );\n\n  IF\n   ( VAR_COUNT = 0 AND INPAR_NAME \u003c\u003e 'پروفايل استاندارد' )\n  THEN\n  \nselect TBL_LEDGER_REPORT_MAP_SEQ1.nextval INTO VAR_ID from dual;\n      loop\n      \n       INSERT INTO TBL_LEDGER_REPORT_MAP (\n    NAME\n   ,DESCRIPTION\n   ,CREATED_DATE\n   ,STANDARD_TYPE\n   ,FORMULA\n   ,REPORT_MAP_ID\n   ,PRIORITY\n   ) VALUES (\n    PKG_LEDGER_REPORT_MAP.FNC_AD_FARSIVALIDATE(UPPER(INPAR_NAME) )\n   ,INPAR_DESCRIPTION\n   ,SYSDATE\n   ,INPAR_STANDARD_TYPE\n   ,to_char(substr(INPAR_FORMUL,var_j, 4000))\n   ,VAR_ID+1,\n   var_i\n   );\n  \n   COMMIT;\n     \n\n  exit when nvl(LENGTHB((TO_CHAR(SUBSTR(INPAR_FORMUL,var_j, 4000)))),0) \u003c 4000;\n   var_j:= var_j+4000;\n   var_i := var_i+1;\n    end loop;\n\nSELECT REPORT_MAP_ID\nINTO OUTPAR_ID\nFROM TBL_LEDGER_REPORT_MAP\nWHERE id IN\n  ( SELECT MAX(ID) FROM TBL_LEDGER_REPORT_MAP\n  );\n\n\n\n\n\nend if;\n\n  IF ( VAR_COUNT = 1 AND INPAR_NAME \u003c\u003e 'پروفايل استاندارد' ) THEN\n        \nSELECT MAX(REPORT_MAP_ID),\n  MAX(NAME),\n  MAX(DESCRIPTION),\n  MAX(CREATED_DATE),\n  MAX(STANDARD_TYPE) INTO VAR_REPORT_ID_UPDATE,VAR_NAME,VAR_DESCRIPTION,VAR_CREATED_DATE,VAR_STANDARD_TYPE FROM TBL_LEDGER_REPORT_MAP WHERE NAME   = ( UPPER(INPAR_NAME) );\n      \n DELETE FROM TBL_LEDGER_REPORT_MAP WHERE REPORT_MAP_ID = VAR_REPORT_ID_UPDATE;\n COMMIT;\n  \n  var_i:=1;\n        loop\n      \n\n        \n     INSERT\nINTO TBL_LEDGER_REPORT_MAP\n  (\n    NAME ,\n    DESCRIPTION ,\n    CREATED_DATE ,\n    EDITED_DATE,\n    STANDARD_TYPE ,\n    FORMULA ,\n    REPORT_MAP_ID ,\n    PRIORITY\n  )\n  VALUES\n  (\n    VAR_NAME ,\n    VAR_DESCRIPTION ,\n    VAR_CREATED_DATE ,\n    SYSDATE,\n    VAR_STANDARD_TYPE ,\n    TO_CHAR(SUBSTR(INPAR_FORMUL,var_j, 4000)) ,\n   VAR_REPORT_ID_UPDATE,\n    var_i\n  ); \n        \n        \n        \n        \n        \n        \n        \n        \n--   UPDATE TBL_LEDGER_REPORT_MAP\n--    SET\n--     DESCRIPTION = INPAR_DESCRIPTION\n--    ,EDITED_DATE = SYSDATE\n--    ,FORMULA = substr(INPAR_FORMUL,var_j, 4000)\n--   WHERE NAME   = ( UPPER(INPAR_NAME) )\n--   and PRIORITY =var_i ;\n--      \n  \n   COMMIT;\n    \n\n  exit when nvl(LENGTHB((TO_CHAR(SUBSTR(INPAR_FORMUL,var_j, 4000)))),0) \u003c 4000;\n    var_j:= var_j+4000;\n   var_i := var_i+1;\n  \n  \n    end loop;\n\n \n    OUTPAR_ID := VAR_REPORT_ID_UPDATE ;\n\n   COMMIT;\n  \n  end if;\n\n END PRC_GI_MAP;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n FUNCTION FNC_AD_FARSIVALIDATE ( STR NVARCHAR2 ) RETURN NVARCHAR2 AS\n  TEMPSTR   NVARCHAR2(1000);\n BEGIN\n  TEMPSTR   := STR;\n  TEMPSTR   := REPLACE(\n   TEMPSTR\n  ,UNISTR('\\064a')\n  ,UNISTR('\\06cc')\n  );\n  TEMPSTR   := REPLACE(\n   TEMPSTR\n  ,UNISTR('\\0643')\n  ,UNISTR('\\06a9')\n  );\n  RETURN TEMPSTR;\n END FNC_AD_FARSIVALIDATE;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n )\n  AS\n BEGIN\n  OUTPAR_ID   := 0;\n  DELETE FROM TBL_LEDGER_REPORT_MAP WHERE REPORT_MAP_ID   = INPAR_ID;\n\n  COMMIT;\n END PRC_DELETE_PROFILE;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA ( INPAR_ID IN VARCHAR2 ) RETURN clob AS\n  VAR   clob;\n BEGIN\n  VAR   := 'SELECT  min(REPORT_MAP_ID) \"id\",\n  min(name) \"name\",\n  min(description) \"description\",\n  min(CREATED_DATE) \"createdDate\",\n  min(EDITED_DATE) \"editDate\",\n  min(STANDARD_TYPE) \"constant\",rtrim(xmlagg(XMLELEMENT(e,FORMULA).EXTRACT(''//text()'')\n    ).GetClobVal(),'','') \"formula\"\n    FROM ( SELECT * FROM TBL_LEDGER_REPORT_MAP\n    WHERE REPORT_MAP_ID ='\n|| INPAR_ID ||' \nORDER BY PRIORITY)';\n  RETURN VAR;\n END FNC_GET_QUERY_FORMULA;\n\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA_PROFILE ( INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'SELECT MIN(REPORT_MAP_ID)     AS \"id\",\n  MIN(NAME)        AS \"name\",\n  MIN(description) AS \"des\"\nFROM TBL_LEDGER_report_map\nWHERE upper(standard_type) =upper('''\n|| INPAR_TYPE || ''')\nGROUP BY REPORT_MAP_ID\nORDER BY 1 DESC';\n\n\n END FNC_GET_QUERY_FORMULA_PROFILE;\n/*=============================================================*/\n/*=============================================================*/\n/*=============================================================*/\n\nEND PKG_LEDGER_REPORT_MAP;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_REPORT_MAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*=============================================================*/\n FUNCTION FNC_GI_CALC (\n  INPAR_ID           IN NUMBER\n ,INPAR_REF_REPORT   IN NUMBER\n ,INPAR_CUR_ID       IN NUMBER\n ,INPAR_DATE         IN DATE\n ) RETURN VARCHAR2;\n/*=============================================================*/\n\n FUNCTION FNC_AD_FARSIVALIDATE ( STR NVARCHAR2 ) RETURN NVARCHAR2;\n/*=============================================================*/\n\n PROCEDURE PRC_GI_MAP (\n  INPAR_NAME            VARCHAR2\n ,INPAR_DESCRIPTION     VARCHAR2\n ,INPAR_FORMUL          clob\n ,INPAR_STANDARD_TYPE   VARCHAR2\n ,OUTPAR_ID             OUT VARCHAR2\n );\n/*=============================================================*/\n\n PROCEDURE PRC_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n    /*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA ( INPAR_ID IN VARCHAR2 ) RETURN clob;\n/*=============================================================*/\n\n FUNCTION FNC_GET_QUERY_FORMULA_PROFILE ( INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*=============================================================*/\n\nEND PKG_LEDGER_REPORT_MAP;"},{"Name":"PKG_CAR","ObjectID":280349,"Digest":"68b424d45ea500aeb74ca4274ce126a83436717db487cc7d3b5d928dbabf9870","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CAR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CAR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_REP_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_PERCENT2            IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_CAR_FINAL_REPORT (\n INPAR_REF_REPORT   IN NUMBER\n ,INPAR_REF_REPREQ   IN NUMBER\n);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DATE (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,/*if inpar_insert_or_update-1==\u003e insert   else  ==\u003eupdate*/\n  INPAR_REF_REP_ID         IN NUMBER\n ,INPAR_CAR_DATE           IN VARCHAR2\n ,OUTPUT                   OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_CAR_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_CAR_FINAL_REPORT (\n INPAR_REF_REPREQ   IN NUMBER\n ,INPAR_TYPE         IN NUMBER\n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT ( INPAR_TYPE IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE ( INPAR_VAR IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE_EDIT ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_DATE_ID ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CAR;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CAR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CAR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,TYPE\n   ,CATEGORY\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_TYPE\n   ,'car'\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n   UPDATE TBL_REPORT\n    SET\n     H_ID =  ID\n     where \n  H_ID is null and upper(type) = 'CAR';\n  commit;\n END PRC_CAR_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_REP_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n  ,INPAR_PERCENT2            IN VARCHAR2\n\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_CAR_REP_PROFILE_DETAIL (\n    REF_REP_ID\n   ,NAME\n   ,PROFILE_ID\n   ,PERCENT\n   ,IS_STANDARD\n   ,TYPE\n   ,percent2\n   ) VALUES (\n    INPAR_REF_REP_ID\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_PERCENT\n   ,INPAR_IS_STANDARD\n   ,INPAR_TYPE\n   ,INPAR_PERCENT2\n   );\n\n   COMMIT; \n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_CAR_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REP_ID   = INPAR_REF_REP_ID;*/\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_CAR_REP_PROFILE_DETAIL\n   WHERE ID   = (\n     SELECT\n      MAX(ID)\n     FROM TBL_CAR_REP_PROFILE_DETAIL\n    );\n\n  ELSE\n   UPDATE TBL_CAR_REP_PROFILE_DETAIL\n    SET\n     REF_REP_ID = INPAR_REF_REP_ID\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,PERCENT = INPAR_PERCENT\n    ,IS_STANDARD = INPAR_IS_STANDARD\n    ,TYPE = INPAR_TYPE\n    ,percent2 = INPAR_PERCENT2\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_CAR_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_FINAL_REPORT (\n  INPAR_REF_REPORT   IN NUMBER\n  ,INPAR_REF_REPREQ   IN NUMBER\n )\n  AS\n BEGIN\n \n-- DELETE FROM TBL_CAR_FINAL_REPORT\n--  WHERE ref_report = INPAR_REF_REPORT; \n--  commit; \n--  \n  FOR I IN (\n   SELECT\n    TCP.ID\n   ,TC.ID AS ID_DATE\n   ,TCP.REF_REP_ID\n   ,TC.CAR_DATE\n   ,TCP.NAME\n   ,TCP.PROFILE_ID\n   ,TCP.PERCENT * TCP.PERCENT2 as PERCENT\n   ,TCP.TYPE\n   FROM TBL_CAR_DATE TC\n   ,    TBL_CAR_REP_PROFILE_DETAIL TCP\n   WHERE TC.REF_REP_ID    = TCP.REF_REP_ID\n    AND\n     TCP.REF_REP_ID   = INPAR_REF_REPORT\n  ) LOOP\n   IF\n    ( I.TYPE IN (\n      1,2\n     )\n    )\n   THEN\n    INSERT INTO TBL_CAR_FINAL_REPORT (\n     REF_CAR_REP_DETAIL\n    ,REF_CAR_DATE\n    ,BALANCE\n    ,REF_REPORT\n    ,REPORT_DATE\n    ,NAME\n    ,TYPE\n    ,PERCENT\n    ,REF_REPREQ\n    ) VALUES (\n     I.ID\n    ,I.ID_DATE\n    ,to_char(PKG_CAR.FNC_CAR_GI_CALC(\n      I.PROFILE_ID\n     ,I.CAR_DATE\n     ))\n    ,INPAR_REF_REPORT\n    ,I.CAR_DATE\n    ,I.NAME\n    ,I.TYPE\n    ,I.PERCENT\n    ,INPAR_REF_REPREQ\n    );\n\n    COMMIT;\n   ELSE\n    INSERT INTO TBL_CAR_FINAL_REPORT (\n     REF_CAR_REP_DETAIL\n    ,REF_CAR_DATE\n    ,BALANCE\n    ,REF_REPORT\n    ,REPORT_DATE\n    ,NAME\n    ,TYPE\n    ,PERCENT\n     ,REF_REPREQ\n    ) VALUES (\n     I.ID\n    ,I.ID_DATE\n    ,to_char(PKG_CAR.FNC_CAR_GI_CALC(\n      I.PROFILE_ID\n     ,I.CAR_DATE\n     )) * I.PERCENT / 100\n    ,INPAR_REF_REPORT\n    ,I.CAR_DATE\n    ,I.NAME\n    ,I.TYPE\n    ,I.PERCENT\n    ,INPAR_REF_REPREQ\n    );\n\n    COMMIT;\n   END IF;\n\n   COMMIT;\n   UPDATE TBL_CAR_FINAL_REPORT\n    SET\n     BALANCE = (\n      SELECT  /*+   PARALLEL(auto) */\n       SUM(CURRENT_AMOUNT)\n      FROM AKIN.TBL_LOAN\n      WHERE LON_ID IN (\n        SELECT\n         REF_LON_ID\n        FROM AKIN.TBL_LOAN_PAYMENT\n        WHERE DUE_DATE \u003e= I.CAR_DATE + 1800\n        GROUP BY\n         REF_LON_ID\n       )\n     )\n   WHERE REPORT_DATE   = I.CAR_DATE\n    AND\n     TYPE          = 4;\n\n   COMMIT;\n  END LOOP;\n\n  END PRC_CAR_FINAL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_CAR_REP_PROFILE_DETAIL WHERE REF_REP_ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_CAR_FINAL_REPORT WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_CAR_DATE WHERE REF_REP_ID   = INPAR_ID;\n\n  COMMIT;\n  OUTPAR   := 1;\n END PRC_CAR_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DATE (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER  /*if inpar_insert_or_update-1==\u003e insert   else  ==\u003eupdate*/\n ,INPAR_REF_REP_ID         IN NUMBER\n ,INPAR_CAR_DATE           IN VARCHAR2\n ,OUTPUT                   OUT VARCHAR2\n )\n  AS\n BEGIN\n /*\n  Programmer Name: sobhan\n  Release Date/Time:1396/07/15\n  Version: 1.0\n  Category:\n  Description:\n  */\n  IF\n   ( INPAR_INSERT_OR_UPDATE =-1 )\n  THEN\n   INSERT INTO TBL_CAR_DATE ( REF_REP_ID,CAR_DATE ) ( SELECT\n    INPAR_REF_REP_ID\n   ,TO_DATE(D,'yyyy/mm/dd','nls_calendar=persian')\n   FROM (\n     SELECT\n      INPAR_REF_REP_ID\n     ,REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) AS D\n     FROM DUAL\n     CONNECT BY\n      REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) IS NOT NULL\n    )\n   );\n\n  ELSE\n   DELETE FROM TBL_CAR_DATE WHERE REF_REP_ID   = INPAR_REF_REP_ID;\n\n   INSERT INTO TBL_CAR_DATE ( REF_REP_ID,CAR_DATE ) ( SELECT\n    INPAR_REF_REP_ID\n   ,TO_DATE(D,'yyyy/mm/dd','nls_calendar=persian')\n   FROM (\n     SELECT\n      INPAR_REF_REP_ID\n     ,REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) AS D\n     FROM DUAL\n     CONNECT BY\n      REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) IS NOT NULL\n    )\n   );\n\n  END IF;\n\n  OUTPUT   := NULL;\n END PRC_CAR_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ) RETURN clob AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n\n BEGIN\n  SELECT\n   '\n  SELECT /*+   PARALLEL(auto) */ \n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT /*+   PARALLEL(auto) */ \n     ''(''||DG.BALANCE ||'')''||\n     A.SPLIT_SING AS V\n    FROM (  WITH T AS (\n    select /*+   PARALLEL(auto) */   \n     fnc_agg_formula_for_report_map (' ||\n   INPAR_ID ||\n   ' ) as STR from dual\n   ) SELECT  \n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive PARTITION ('||VAR_PARTITION||') DG\n    WHERE DG.LEDGER_CODE   = to_char(A.SPLIT_VALUES)\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''')))\n '\n  INTO\n   VAR\n  FROM DUAL;\n -- RETURN VAr;\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN to_char(SUBSTR(\n    VAR3\n    ,-1\n    )) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n\n--var2:='select ' ||\n-- case when var is null then '0' else var end ||\n--  ' from dual';\n\nDBMS_OUTPUT.PUT_LINE(var);\n\n  EXECUTE IMMEDIATE 'select ' ||\n case when var is null then '0' else var end ||\n  ' from dual' INTO\n   VAR2;\n \n  --RETURN (to_number(VAR2));\n  RETURN VAR2;\n END FNC_CAR_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''CAR''';\n  RETURN VAR2;\n END FNC_CAR_ALL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_FINAL_REPORT (\n  INPAR_REF_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2 AS\n  VAR           VARCHAR2(10000);\n  VAR_TIMING    VARCHAR2(1000);\n  VAR_TIMING1   VARCHAR2(1000);\n    VAR_TIMING3    VARCHAR2(1000);\n  VAR_TIMING4   VARCHAR2(1000);\n  var_report number;\n BEGIN\n \n select ref_report_id into var_report from TBL_REPREQ where id = INPAR_REF_REPREQ;\n  SELECT\n   WMSYS.WM_CONCAT( (\n    SELECT\n     ID ||\n     ' AS \"x' ||\n     REPLACE(ID,' ','_') ||\n     '\"'\n    FROM DUAL\n   ) )\n  INTO\n   VAR_TIMING\n  FROM TBL_CAR_DATE\n  WHERE REF_REP_ID   = var_report;\n\n  SELECT\n   WMSYS.WM_CONCAT( (\n    SELECT\n     '  \"x' ||\n     REPLACE(ID,' ','_') ||\n     '\"'\n    FROM DUAL\n   ) )\n  INTO\n   VAR_TIMING1\n  FROM TBL_CAR_DATE\n  WHERE REF_REP_ID   = var_report;\n  \n \n\n  SELECT\n   WMSYS.WM_CONCAT( (\n    SELECT\n     '  sum(\"x' ||\n     REPLACE(ID,' ','_') ||\n     '\") as    \"x' ||\n     REPLACE(ID,' ','_') ||\n     '\"'\n    FROM DUAL\n   ) )\n  INTO\n   VAR_TIMING4\n  FROM TBL_CAR_DATE\n  WHERE REF_REP_ID   = var_report;\n\n  IF\n   INPAR_TYPE = 4\n  THEN\n   VAR   := '\n SELECT name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ',type as \"type\" FROM\n(\nSELECT\n    REF_CAR_DATE,\n    BALANCE,\n    NAME,type\nFROM\n    TBL_CAR_FINAL_REPORT\n    where  REF_REPREQ =' ||\n   INPAR_REF_REPREQ ||\n   '\n    and TBL_CAR_FINAL_REPORT.type in (1,2,4)\n)\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n)\nunion    \n    SELECT  name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ',type as \"type\"  FROM\n(\nSELECT\n    max(REF_CAR_DATE) as REF_CAR_DATE,\n    sum(BALANCE) as BALANCE,\n    ''جمع دارايي هاي موزون شده به ريسک'' as NAME,\n      max(type) as type\nFROM\n    TBL_CAR_FINAL_REPORT\n    where  REF_REPREQ =' ||\n   INPAR_REF_REPREQ ||\n   '\n    and TBL_CAR_FINAL_REPORT.type   in (3)\ngroup by REPORT_DATE)\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n)\norder by \"type\"';\n  END IF;\n\n  IF INPAR_TYPE IN (\n    3\n   )\n  THEN\n   VAR   := '    SELECT max(name)  as \"des\",percent,' ||\n   VAR_TIMING4 ||\n   ', 1 \"indent\" FROM\n(\n\nSELECT\nREF_CAR_DATE,\n    BALANCE,\n    NAME,\n    percent\nFROM\n    TBL_CAR_FINAL_REPORT\n    where type = 3 and REF_REPREQ = ' ||\n   INPAR_REF_REPREQ ||\n   ')\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n) group by percent ';\n  END IF;\n\n  IF INPAR_TYPE IN (\n    1\n   )\n  THEN\n   VAR   := '    SELECT name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ' FROM\n(\n\nSELECT\nREF_CAR_DATE,\n    BALANCE,\n    NAME\nFROM\n    TBL_CAR_FINAL_REPORT\n    where type = ' ||\n   INPAR_TYPE ||\n   ' and REF_REPREQ = ' ||\n   INPAR_REF_REPREQ ||\n   ')\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n)';\n  END IF;\n\n  IF INPAR_TYPE IN (\n    2\n   )\n  THEN\n   VAR   := '    SELECT name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ' FROM\n(\n\nSELECT\nREF_CAR_DATE,\n    BALANCE,\n    NAME\nFROM\n    TBL_CAR_FINAL_REPORT\n    where type in (2,4) and REF_REPREQ = ' ||\n   INPAR_REF_REPREQ ||\n   ')\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n)';\n  END IF;\n\n  RETURN VAR;\n END FNC_CAR_FINAL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT ( INPAR_TYPE IN NUMBER ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n   OUTPUT   := 'select name as \"des\" from TBL_CAR_REP_PROFILE_DETAIL where type=1 and IS_STANDARD=1 and REF_REP_ID is null';\n  ELSIF ( INPAR_TYPE = 2 ) THEN\n   OUTPUT   := 'select name as \"des\" from TBL_CAR_REP_PROFILE_DETAIL where  type in (2,4) and IS_STANDARD=1 and REF_REP_ID is null';\n  ELSIF ( INPAR_TYPE = 3 ) THEN\n   OUTPUT   := 'select name as \"des\",PERCENT as \"zarib\" from TBL_CAR_REP_PROFILE_DETAIL where type=3\n and IS_STANDARD=1 and REF_REP_ID is null'\n;\n  END IF;\n\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE ( INPAR_VAR IN NUMBER ) RETURN VARCHAR2 AS\n  VAR      VARCHAR2(2000);\n  OUTPUT   VARCHAR2(2000);\n BEGIN\n  VAR      := INPAR_VAR;\n  OUTPUT   := 'SELECT /*+ parallel(auto) */ distinct LISTAGG(\"date\", '','') WITHIN GROUP (ORDER BY \"date\") AS \"date\"\nFROM   (\nselect /*+ parallel(auto) */ distinct(TO_char(EFF_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\" from TBL_LEDGER_ARCHIVE\n)';\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n   OUTPUT   := 'select id as \"id\",name as \"des\",PROFILE_ID as \"ledgerProfileId\" ,IS_STANDARD as \"isStandard\" from TBL_CAR_REP_PROFILE_DETAIL where type=1   and REF_REP_ID = '\n|| INPAR_REPORT || '  order by IS_STANDARD desc';\n  ELSIF ( INPAR_TYPE = 2 ) THEN\n   OUTPUT   := 'select id as \"id\",name as \"des\",PROFILE_ID as \"ledgerProfileId\",IS_STANDARD as \"isStandard\" from TBL_CAR_REP_PROFILE_DETAIL where type in (2,4)  and REF_REP_ID = '\n|| INPAR_REPORT || '  order by IS_STANDARD desc';\n  ELSIF ( INPAR_TYPE = 3 ) THEN\n   OUTPUT   := 'select id as \"id\",name as \"des\",PROFILE_ID as \"ledgerProfileId\",PERCENT as \"zarib\",PERCENT2 as \"zarib2\",IS_STANDARD as \"isStandard\" from TBL_CAR_REP_PROFILE_DETAIL where type=3\n  and REF_REP_ID = '\n|| INPAR_REPORT || '  order by IS_STANDARD desc';\n  END IF;\n\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE_EDIT ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  \n BEGIN\n\n  OUTPUT   := 'select (TO_char(CAR_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\" from tbl_CAR_DATE where ref_rep_id =' || INPAR_REPORT\n|| '';\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT_DATE_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_DATE_ID ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  var_report number;\n BEGIN\n \n select ref_report_id into var_report from tbl_repreq where id = INPAR_REPORT;\n \n \n  OUTPUT   := 'select  ''x''||ID AS \"value\",(TO_char(CAR_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"header\" from tbl_CAR_DATE where ref_rep_id ='\n|| var_report || '';\n  RETURN OUTPUT;\n END FNC_CAR_GET_DATE_ID;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_CAR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CAR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CAR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_REP_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_PERCENT2            IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_CAR_FINAL_REPORT (\n INPAR_REF_REPORT   IN NUMBER\n ,INPAR_REF_REPREQ   IN NUMBER\n);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DATE (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,/*if inpar_insert_or_update-1==\u003e insert   else  ==\u003eupdate*/\n  INPAR_REF_REP_ID         IN NUMBER\n ,INPAR_CAR_DATE           IN VARCHAR2\n ,OUTPUT                   OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_CAR_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_CAR_FINAL_REPORT (\n INPAR_REF_REPREQ   IN NUMBER\n ,INPAR_TYPE         IN NUMBER\n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT ( INPAR_TYPE IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE ( INPAR_VAR IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE_EDIT ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_DATE_ID ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CAR;"},{"Name":"PKG_CAR","ObjectID":280415,"Digest":"68b424d45ea500aeb74ca4274ce126a83436717db487cc7d3b5d928dbabf9870","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CAR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CAR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_REP_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_PERCENT2            IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_CAR_FINAL_REPORT (\n INPAR_REF_REPORT   IN NUMBER\n ,INPAR_REF_REPREQ   IN NUMBER\n);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DATE (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,/*if inpar_insert_or_update-1==\u003e insert   else  ==\u003eupdate*/\n  INPAR_REF_REP_ID         IN NUMBER\n ,INPAR_CAR_DATE           IN VARCHAR2\n ,OUTPUT                   OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_CAR_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_CAR_FINAL_REPORT (\n INPAR_REF_REPREQ   IN NUMBER\n ,INPAR_TYPE         IN NUMBER\n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT ( INPAR_TYPE IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE ( INPAR_VAR IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE_EDIT ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_DATE_ID ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CAR;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CAR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CAR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,TYPE\n   ,CATEGORY\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_TYPE\n   ,'car'\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n   UPDATE TBL_REPORT\n    SET\n     H_ID =  ID\n     where \n  H_ID is null and upper(type) = 'CAR';\n  commit;\n END PRC_CAR_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_REP_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n  ,INPAR_PERCENT2            IN VARCHAR2\n\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_CAR_REP_PROFILE_DETAIL (\n    REF_REP_ID\n   ,NAME\n   ,PROFILE_ID\n   ,PERCENT\n   ,IS_STANDARD\n   ,TYPE\n   ,percent2\n   ) VALUES (\n    INPAR_REF_REP_ID\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_PERCENT\n   ,INPAR_IS_STANDARD\n   ,INPAR_TYPE\n   ,INPAR_PERCENT2\n   );\n\n   COMMIT; \n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_CAR_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REP_ID   = INPAR_REF_REP_ID;*/\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_CAR_REP_PROFILE_DETAIL\n   WHERE ID   = (\n     SELECT\n      MAX(ID)\n     FROM TBL_CAR_REP_PROFILE_DETAIL\n    );\n\n  ELSE\n   UPDATE TBL_CAR_REP_PROFILE_DETAIL\n    SET\n     REF_REP_ID = INPAR_REF_REP_ID\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,PERCENT = INPAR_PERCENT\n    ,IS_STANDARD = INPAR_IS_STANDARD\n    ,TYPE = INPAR_TYPE\n    ,percent2 = INPAR_PERCENT2\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_CAR_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_FINAL_REPORT (\n  INPAR_REF_REPORT   IN NUMBER\n  ,INPAR_REF_REPREQ   IN NUMBER\n )\n  AS\n BEGIN\n \n-- DELETE FROM TBL_CAR_FINAL_REPORT\n--  WHERE ref_report = INPAR_REF_REPORT; \n--  commit; \n--  \n  FOR I IN (\n   SELECT\n    TCP.ID\n   ,TC.ID AS ID_DATE\n   ,TCP.REF_REP_ID\n   ,TC.CAR_DATE\n   ,TCP.NAME\n   ,TCP.PROFILE_ID\n   ,TCP.PERCENT * TCP.PERCENT2 as PERCENT\n   ,TCP.TYPE\n   FROM TBL_CAR_DATE TC\n   ,    TBL_CAR_REP_PROFILE_DETAIL TCP\n   WHERE TC.REF_REP_ID    = TCP.REF_REP_ID\n    AND\n     TCP.REF_REP_ID   = INPAR_REF_REPORT\n  ) LOOP\n   IF\n    ( I.TYPE IN (\n      1,2\n     )\n    )\n   THEN\n    INSERT INTO TBL_CAR_FINAL_REPORT (\n     REF_CAR_REP_DETAIL\n    ,REF_CAR_DATE\n    ,BALANCE\n    ,REF_REPORT\n    ,REPORT_DATE\n    ,NAME\n    ,TYPE\n    ,PERCENT\n    ,REF_REPREQ\n    ) VALUES (\n     I.ID\n    ,I.ID_DATE\n    ,to_char(PKG_CAR.FNC_CAR_GI_CALC(\n      I.PROFILE_ID\n     ,I.CAR_DATE\n     ))\n    ,INPAR_REF_REPORT\n    ,I.CAR_DATE\n    ,I.NAME\n    ,I.TYPE\n    ,I.PERCENT\n    ,INPAR_REF_REPREQ\n    );\n\n    COMMIT;\n   ELSE\n    INSERT INTO TBL_CAR_FINAL_REPORT (\n     REF_CAR_REP_DETAIL\n    ,REF_CAR_DATE\n    ,BALANCE\n    ,REF_REPORT\n    ,REPORT_DATE\n    ,NAME\n    ,TYPE\n    ,PERCENT\n     ,REF_REPREQ\n    ) VALUES (\n     I.ID\n    ,I.ID_DATE\n    ,to_char(PKG_CAR.FNC_CAR_GI_CALC(\n      I.PROFILE_ID\n     ,I.CAR_DATE\n     )) * I.PERCENT / 100\n    ,INPAR_REF_REPORT\n    ,I.CAR_DATE\n    ,I.NAME\n    ,I.TYPE\n    ,I.PERCENT\n    ,INPAR_REF_REPREQ\n    );\n\n    COMMIT;\n   END IF;\n\n   COMMIT;\n   UPDATE TBL_CAR_FINAL_REPORT\n    SET\n     BALANCE = (\n      SELECT  /*+   PARALLEL(auto) */\n       SUM(CURRENT_AMOUNT)\n      FROM AKIN.TBL_LOAN\n      WHERE LON_ID IN (\n        SELECT\n         REF_LON_ID\n        FROM AKIN.TBL_LOAN_PAYMENT\n        WHERE DUE_DATE \u003e= I.CAR_DATE + 1800\n        GROUP BY\n         REF_LON_ID\n       )\n     )\n   WHERE REPORT_DATE   = I.CAR_DATE\n    AND\n     TYPE          = 4;\n\n   COMMIT;\n  END LOOP;\n\n  END PRC_CAR_FINAL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_CAR_REP_PROFILE_DETAIL WHERE REF_REP_ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_CAR_FINAL_REPORT WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_CAR_DATE WHERE REF_REP_ID   = INPAR_ID;\n\n  COMMIT;\n  OUTPAR   := 1;\n END PRC_CAR_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DATE (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER  /*if inpar_insert_or_update-1==\u003e insert   else  ==\u003eupdate*/\n ,INPAR_REF_REP_ID         IN NUMBER\n ,INPAR_CAR_DATE           IN VARCHAR2\n ,OUTPUT                   OUT VARCHAR2\n )\n  AS\n BEGIN\n /*\n  Programmer Name: sobhan\n  Release Date/Time:1396/07/15\n  Version: 1.0\n  Category:\n  Description:\n  */\n  IF\n   ( INPAR_INSERT_OR_UPDATE =-1 )\n  THEN\n   INSERT INTO TBL_CAR_DATE ( REF_REP_ID,CAR_DATE ) ( SELECT\n    INPAR_REF_REP_ID\n   ,TO_DATE(D,'yyyy/mm/dd','nls_calendar=persian')\n   FROM (\n     SELECT\n      INPAR_REF_REP_ID\n     ,REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) AS D\n     FROM DUAL\n     CONNECT BY\n      REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) IS NOT NULL\n    )\n   );\n\n  ELSE\n   DELETE FROM TBL_CAR_DATE WHERE REF_REP_ID   = INPAR_REF_REP_ID;\n\n   INSERT INTO TBL_CAR_DATE ( REF_REP_ID,CAR_DATE ) ( SELECT\n    INPAR_REF_REP_ID\n   ,TO_DATE(D,'yyyy/mm/dd','nls_calendar=persian')\n   FROM (\n     SELECT\n      INPAR_REF_REP_ID\n     ,REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) AS D\n     FROM DUAL\n     CONNECT BY\n      REGEXP_SUBSTR(\n       INPAR_CAR_DATE\n      ,'[^#]+'\n      ,1\n      ,LEVEL\n      ) IS NOT NULL\n    )\n   );\n\n  END IF;\n\n  OUTPUT   := NULL;\n END PRC_CAR_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ) RETURN clob AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n\n BEGIN\n  SELECT\n   '\n  SELECT /*+   PARALLEL(auto) */ \n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT /*+   PARALLEL(auto) */ \n     ''(''||DG.BALANCE ||'')''||\n     A.SPLIT_SING AS V\n    FROM (  WITH T AS (\n    select /*+   PARALLEL(auto) */   \n     fnc_agg_formula_for_report_map (' ||\n   INPAR_ID ||\n   ' ) as STR from dual\n   ) SELECT  \n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive PARTITION ('||VAR_PARTITION||') DG\n    WHERE DG.LEDGER_CODE   = to_char(A.SPLIT_VALUES)\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''')))\n '\n  INTO\n   VAR\n  FROM DUAL;\n -- RETURN VAr;\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN to_char(SUBSTR(\n    VAR3\n    ,-1\n    )) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n\n--var2:='select ' ||\n-- case when var is null then '0' else var end ||\n--  ' from dual';\n\nDBMS_OUTPUT.PUT_LINE(var);\n\n  EXECUTE IMMEDIATE 'select ' ||\n case when var is null then '0' else var end ||\n  ' from dual' INTO\n   VAR2;\n \n  --RETURN (to_number(VAR2));\n  RETURN VAR2;\n END FNC_CAR_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''CAR''';\n  RETURN VAR2;\n END FNC_CAR_ALL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_FINAL_REPORT (\n  INPAR_REF_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2 AS\n  VAR           VARCHAR2(10000);\n  VAR_TIMING    VARCHAR2(1000);\n  VAR_TIMING1   VARCHAR2(1000);\n    VAR_TIMING3    VARCHAR2(1000);\n  VAR_TIMING4   VARCHAR2(1000);\n  var_report number;\n BEGIN\n \n select ref_report_id into var_report from TBL_REPREQ where id = INPAR_REF_REPREQ;\n  SELECT\n   WMSYS.WM_CONCAT( (\n    SELECT\n     ID ||\n     ' AS \"x' ||\n     REPLACE(ID,' ','_') ||\n     '\"'\n    FROM DUAL\n   ) )\n  INTO\n   VAR_TIMING\n  FROM TBL_CAR_DATE\n  WHERE REF_REP_ID   = var_report;\n\n  SELECT\n   WMSYS.WM_CONCAT( (\n    SELECT\n     '  \"x' ||\n     REPLACE(ID,' ','_') ||\n     '\"'\n    FROM DUAL\n   ) )\n  INTO\n   VAR_TIMING1\n  FROM TBL_CAR_DATE\n  WHERE REF_REP_ID   = var_report;\n  \n \n\n  SELECT\n   WMSYS.WM_CONCAT( (\n    SELECT\n     '  sum(\"x' ||\n     REPLACE(ID,' ','_') ||\n     '\") as    \"x' ||\n     REPLACE(ID,' ','_') ||\n     '\"'\n    FROM DUAL\n   ) )\n  INTO\n   VAR_TIMING4\n  FROM TBL_CAR_DATE\n  WHERE REF_REP_ID   = var_report;\n\n  IF\n   INPAR_TYPE = 4\n  THEN\n   VAR   := '\n SELECT name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ',type as \"type\" FROM\n(\nSELECT\n    REF_CAR_DATE,\n    BALANCE,\n    NAME,type\nFROM\n    TBL_CAR_FINAL_REPORT\n    where  REF_REPREQ =' ||\n   INPAR_REF_REPREQ ||\n   '\n    and TBL_CAR_FINAL_REPORT.type in (1,2,4)\n)\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n)\nunion    \n    SELECT  name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ',type as \"type\"  FROM\n(\nSELECT\n    max(REF_CAR_DATE) as REF_CAR_DATE,\n    sum(BALANCE) as BALANCE,\n    ''جمع دارايي هاي موزون شده به ريسک'' as NAME,\n      max(type) as type\nFROM\n    TBL_CAR_FINAL_REPORT\n    where  REF_REPREQ =' ||\n   INPAR_REF_REPREQ ||\n   '\n    and TBL_CAR_FINAL_REPORT.type   in (3)\ngroup by REPORT_DATE)\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n)\norder by \"type\"';\n  END IF;\n\n  IF INPAR_TYPE IN (\n    3\n   )\n  THEN\n   VAR   := '    SELECT max(name)  as \"des\",percent,' ||\n   VAR_TIMING4 ||\n   ', 1 \"indent\" FROM\n(\n\nSELECT\nREF_CAR_DATE,\n    BALANCE,\n    NAME,\n    percent\nFROM\n    TBL_CAR_FINAL_REPORT\n    where type = 3 and REF_REPREQ = ' ||\n   INPAR_REF_REPREQ ||\n   ')\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n) group by percent ';\n  END IF;\n\n  IF INPAR_TYPE IN (\n    1\n   )\n  THEN\n   VAR   := '    SELECT name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ' FROM\n(\n\nSELECT\nREF_CAR_DATE,\n    BALANCE,\n    NAME\nFROM\n    TBL_CAR_FINAL_REPORT\n    where type = ' ||\n   INPAR_TYPE ||\n   ' and REF_REPREQ = ' ||\n   INPAR_REF_REPREQ ||\n   ')\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n)';\n  END IF;\n\n  IF INPAR_TYPE IN (\n    2\n   )\n  THEN\n   VAR   := '    SELECT name  as \"des\",' ||\n   VAR_TIMING1 ||\n   ' FROM\n(\n\nSELECT\nREF_CAR_DATE,\n    BALANCE,\n    NAME\nFROM\n    TBL_CAR_FINAL_REPORT\n    where type in (2,4) and REF_REPREQ = ' ||\n   INPAR_REF_REPREQ ||\n   ')\nPIVOT \n(\n  sum(BALANCE)\n  FOR (REF_CAR_DATE)\n  IN ( ' ||\n   VAR_TIMING ||\n   ' ) \n  \n)';\n  END IF;\n\n  RETURN VAR;\n END FNC_CAR_FINAL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT ( INPAR_TYPE IN NUMBER ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n   OUTPUT   := 'select name as \"des\" from TBL_CAR_REP_PROFILE_DETAIL where type=1 and IS_STANDARD=1 and REF_REP_ID is null';\n  ELSIF ( INPAR_TYPE = 2 ) THEN\n   OUTPUT   := 'select name as \"des\" from TBL_CAR_REP_PROFILE_DETAIL where  type in (2,4) and IS_STANDARD=1 and REF_REP_ID is null';\n  ELSIF ( INPAR_TYPE = 3 ) THEN\n   OUTPUT   := 'select name as \"des\",PERCENT as \"zarib\" from TBL_CAR_REP_PROFILE_DETAIL where type=3\n and IS_STANDARD=1 and REF_REP_ID is null'\n;\n  END IF;\n\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE ( INPAR_VAR IN NUMBER ) RETURN VARCHAR2 AS\n  VAR      VARCHAR2(2000);\n  OUTPUT   VARCHAR2(2000);\n BEGIN\n  VAR      := INPAR_VAR;\n  OUTPUT   := 'SELECT /*+ parallel(auto) */ distinct LISTAGG(\"date\", '','') WITHIN GROUP (ORDER BY \"date\") AS \"date\"\nFROM   (\nselect /*+ parallel(auto) */ distinct(TO_char(EFF_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\" from TBL_LEDGER_ARCHIVE\n)';\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n   OUTPUT   := 'select id as \"id\",name as \"des\",PROFILE_ID as \"ledgerProfileId\" ,IS_STANDARD as \"isStandard\" from TBL_CAR_REP_PROFILE_DETAIL where type=1   and REF_REP_ID = '\n|| INPAR_REPORT || '  order by IS_STANDARD desc';\n  ELSIF ( INPAR_TYPE = 2 ) THEN\n   OUTPUT   := 'select id as \"id\",name as \"des\",PROFILE_ID as \"ledgerProfileId\",IS_STANDARD as \"isStandard\" from TBL_CAR_REP_PROFILE_DETAIL where type in (2,4)  and REF_REP_ID = '\n|| INPAR_REPORT || '  order by IS_STANDARD desc';\n  ELSIF ( INPAR_TYPE = 3 ) THEN\n   OUTPUT   := 'select id as \"id\",name as \"des\",PROFILE_ID as \"ledgerProfileId\",PERCENT as \"zarib\",PERCENT2 as \"zarib2\",IS_STANDARD as \"isStandard\" from TBL_CAR_REP_PROFILE_DETAIL where type=3\n  and REF_REP_ID = '\n|| INPAR_REPORT || '  order by IS_STANDARD desc';\n  END IF;\n\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE_EDIT ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  \n BEGIN\n\n  OUTPUT   := 'select (TO_char(CAR_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\" from tbl_CAR_DATE where ref_rep_id =' || INPAR_REPORT\n|| '';\n  RETURN OUTPUT;\n END FNC_CAR_GET_INPUT_DATE_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_DATE_ID ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  var_report number;\n BEGIN\n \n select ref_report_id into var_report from tbl_repreq where id = INPAR_REPORT;\n \n \n  OUTPUT   := 'select  ''x''||ID AS \"value\",(TO_char(CAR_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"header\" from tbl_CAR_DATE where ref_rep_id ='\n|| var_report || '';\n  RETURN OUTPUT;\n END FNC_CAR_GET_DATE_ID;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_CAR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CAR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CAR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_REP_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_PERCENT2            IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_CAR_FINAL_REPORT (\n INPAR_REF_REPORT   IN NUMBER\n ,INPAR_REF_REPREQ   IN NUMBER\n);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CAR_DATE (\n  INPAR_INSERT_OR_UPDATE   IN NUMBER\n ,/*if inpar_insert_or_update-1==\u003e insert   else  ==\u003eupdate*/\n  INPAR_REF_REP_ID         IN NUMBER\n ,INPAR_CAR_DATE           IN VARCHAR2\n ,OUTPUT                   OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_CAR_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_CAR_FINAL_REPORT (\n INPAR_REF_REPREQ   IN NUMBER\n ,INPAR_TYPE         IN NUMBER\n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT ( INPAR_TYPE IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE ( INPAR_VAR IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_INPUT_DATE_EDIT ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CAR_GET_DATE_ID ( INPAR_REPORT IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CAR;"},{"Name":"PKG_NIIM","ObjectID":280679,"Digest":"3225a5ae888c04ba88ffc524fff3ff3b6c9e48cc0ee3a8190c9d099baec2d54f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_niim_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NIIM;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_NIIM_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_NIIM_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_NIIM_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_VALUE\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n\n   COMMIT;\n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_NIIM_REP_PROFILE_DETAIL\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,VALUE = INPAR_VALUE\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n    ,TITLE = INPAR_TITLE\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_NIIM_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'niim'\n   ,inpar_type\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  \n  --=============\n  INSERT INTO TBL_NIIM_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) (select(select max(id) from tbl_report where upper(type) = 'NIIM'),NAME\n   ,0\n   ,0\n   ,0\n   ,TYPE\n   ,TITLE\n   from tbl_niim_rep_profile_detail where is_standard=1\n   );\n   COMMIT;\n  --==============\n END PRC_NIIM_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_NIIM_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n if INPAR_ID is not null then\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n|| INPAR_ID || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = (select trunc(max(eff_date)) from  TBL_LEDGER_archive))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN abs(TO_number(VAR2));\n  else \n   RETURN 0;\n  end if;\n END FNC_NIIM_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  \n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\"\nFROM TBL_NIIM_REP_PROFILE_DETAIL where  is_standard =1 and  type = '||INPAR_type||''\n;\n  RETURN OUTPUT;\n END FNC_NIIM_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"description\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''NIIM'' order by id';\n  RETURN VAR2;\n END FNC_NIIM_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_NIIM_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n   pragma autonomous_transaction;\n BEGIN\n pkg_niim.prc_niim_update_gi_calc(INPAR_REPORT);\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\",\n  to_char(VALUE) as \"manualValue\",\n  PROFILE_ID as \"profileId\"\nFROM TBL_NIIM_REP_PROFILE_DETAIL where REF_REPORT = '\n|| INPAR_REPORT || ' AND TYPE = '\n|| INPAR_TYPE || ' order by type ';\n  RETURN OUTPUT;\n END FNC_NIIM_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_niim_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2 )\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_niim_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_niim_REP_PROFILE_DETAIL\n      SET value        = pkg_niim.FNC_niim_GI_CALC(i.profile_id)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_niim_update_gi_calc;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_NIIM;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_niim_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NIIM;"},{"Name":"PKG_NIIM","ObjectID":280680,"Digest":"3225a5ae888c04ba88ffc524fff3ff3b6c9e48cc0ee3a8190c9d099baec2d54f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_niim_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NIIM;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_NIIM_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_NIIM_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_NIIM_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_VALUE\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n\n   COMMIT;\n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_NIIM_REP_PROFILE_DETAIL\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,VALUE = INPAR_VALUE\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n    ,TITLE = INPAR_TITLE\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_NIIM_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'niim'\n   ,inpar_type\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  \n  --=============\n  INSERT INTO TBL_NIIM_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) (select(select max(id) from tbl_report where upper(type) = 'NIIM'),NAME\n   ,0\n   ,0\n   ,0\n   ,TYPE\n   ,TITLE\n   from tbl_niim_rep_profile_detail where is_standard=1\n   );\n   COMMIT;\n  --==============\n END PRC_NIIM_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_NIIM_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n if INPAR_ID is not null then\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n|| INPAR_ID || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = (select trunc(max(eff_date)) from  TBL_LEDGER_archive))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN abs(TO_number(VAR2));\n  else \n   RETURN 0;\n  end if;\n END FNC_NIIM_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  \n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\"\nFROM TBL_NIIM_REP_PROFILE_DETAIL where  is_standard =1 and  type = '||INPAR_type||''\n;\n  RETURN OUTPUT;\n END FNC_NIIM_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"description\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''NIIM'' order by id';\n  RETURN VAR2;\n END FNC_NIIM_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_NIIM_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n   pragma autonomous_transaction;\n BEGIN\n pkg_niim.prc_niim_update_gi_calc(INPAR_REPORT);\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\",\n  to_char(VALUE) as \"manualValue\",\n  PROFILE_ID as \"profileId\"\nFROM TBL_NIIM_REP_PROFILE_DETAIL where REF_REPORT = '\n|| INPAR_REPORT || ' AND TYPE = '\n|| INPAR_TYPE || ' order by type ';\n  RETURN OUTPUT;\n END FNC_NIIM_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_niim_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2 )\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_niim_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_niim_REP_PROFILE_DETAIL\n      SET value        = pkg_niim.FNC_niim_GI_CALC(i.profile_id)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_niim_update_gi_calc;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_NIIM;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NIIM_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_niim_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NIIM_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NIIM;"},{"Name":"PKG_NPL","ObjectID":280715,"Digest":"ff96082f4437872cf6117383b084768a399c9494f8856dc60968bfed8b556242","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NPL\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NPL_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_npl_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_NPL;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NPL\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_NPL_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_NPL_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_NPL_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_VALUE\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n  \n   COMMIT;\n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_NPL_REP_PROFILE_DETAIL\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,VALUE = INPAR_VALUE\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n    ,TITLE = INPAR_TITLE\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_NPL_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'NPL'\n   ,INPAR_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  \n  --=============\n  INSERT INTO TBL_NPL_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) (select(select max(id) from tbl_report where upper(type) = 'NPL') ,NAME\n   ,0\n   ,0\n   ,0\n   ,TYPE\n   ,TITLE\n   from tbl_npl_rep_profile_detail where is_standard=1\n   );\n   COMMIT;\n  --==============\n  \n  \n  \n END PRC_NPL_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_NPL_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n|| INPAR_ID || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = (select trunc(max(eff_date)) from  TBL_LEDGER_archive))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN abs(TO_number(VAR2));\n END FNC_NPL_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  var:= inpar_type;\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\"\nFROM TBL_NPL_REP_PROFILE_DETAIL where  is_standard =1 '\n;\n  RETURN OUTPUT;\n END FNC_NPL_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"description\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''NPL'' order by id';\n  RETURN VAR2;\n END FNC_NPL_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_NPL_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n   pragma autonomous_transaction;\n BEGIN\n pkg_NPL.prc_npl_update_gi_calc(INPAR_REPORT);\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\",\n  to_char(VALUE) as \"manualValue\",\n  PROFILE_ID as \"profileId\"\nFROM TBL_NPL_REP_PROFILE_DETAIL where REF_REPORT = '\n|| INPAR_REPORT || ' AND TYPE = 2 order by type ';\n  RETURN OUTPUT;\n END FNC_NPL_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_npl_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2 )\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_npl_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_npl_REP_PROFILE_DETAIL\n      SET value        = pkg_npl.FNC_npl_GI_CALC(i.profile_id)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_npl_update_gi_calc;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_NPL;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NPL\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NPL_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_npl_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_NPL;"},{"Name":"PKG_NPL","ObjectID":280716,"Digest":"ff96082f4437872cf6117383b084768a399c9494f8856dc60968bfed8b556242","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NPL\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NPL_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_npl_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_NPL;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NPL\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_NPL_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_NPL_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_NPL_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_VALUE\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n  \n   COMMIT;\n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_NPL_REP_PROFILE_DETAIL\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,VALUE = INPAR_VALUE\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n    ,TITLE = INPAR_TITLE\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_NPL_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'NPL'\n   ,INPAR_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  \n  --=============\n  INSERT INTO TBL_NPL_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) (select(select max(id) from tbl_report where upper(type) = 'NPL') ,NAME\n   ,0\n   ,0\n   ,0\n   ,TYPE\n   ,TITLE\n   from tbl_npl_rep_profile_detail where is_standard=1\n   );\n   COMMIT;\n  --==============\n  \n  \n  \n END PRC_NPL_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_NPL_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n|| INPAR_ID || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = (select trunc(max(eff_date)) from  TBL_LEDGER_archive))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN abs(TO_number(VAR2));\n END FNC_NPL_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  var:= inpar_type;\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\"\nFROM TBL_NPL_REP_PROFILE_DETAIL where  is_standard =1 '\n;\n  RETURN OUTPUT;\n END FNC_NPL_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"description\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''NPL'' order by id';\n  RETURN VAR2;\n END FNC_NPL_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_NPL_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n   pragma autonomous_transaction;\n BEGIN\n pkg_NPL.prc_npl_update_gi_calc(INPAR_REPORT);\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\",\n  to_char(VALUE) as \"manualValue\",\n  PROFILE_ID as \"profileId\"\nFROM TBL_NPL_REP_PROFILE_DETAIL where REF_REPORT = '\n|| INPAR_REPORT || ' AND TYPE = 2 order by type ';\n  RETURN OUTPUT;\n END FNC_NPL_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_npl_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2 )\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_npl_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_npl_REP_PROFILE_DETAIL\n      SET value        = pkg_npl.FNC_npl_GI_CALC(i.profile_id)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_npl_update_gi_calc;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_NPL;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NPL\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NPL_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NPL_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_npl_update_gi_calc(INPAR_ref_report IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NPL_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NPL_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_NPL;"},{"Name":"PKG_LCR","ObjectID":281499,"Digest":"f3b0cd558ec2e19de198c3818409d73ae85486f0bb4d49af78802cd67fefe400","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LCR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_rep_value (\n  inpar_report   IN VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_lcr_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GI_CALC ( INPAR_ID IN varchar2,\n    inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_LCR;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LCR\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_LCR_DELETE_REPORT(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR OUT VARCHAR2)\nAS\nBEGIN\n  DELETE FROM TBL_REPORT WHERE ID = INPAR_ID;\n  COMMIT;\n  DELETE FROM TBL_LCR_REP_PROFILE_DETAIL WHERE REF_REPORT = INPAR_ID;\n  COMMIT;\nEND PRC_LCR_DELETE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_LCR_REP_PROFILE_DETAIL(\n    INPAR_REF_REPORT       IN VARCHAR2 ,\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_PROFILE_ID       IN VARCHAR2 ,\n    INPAR_VALUE            IN VARCHAR2 ,\n    INPAR_IS_STANDARD      IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    INPAR_PERCENT          IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_TITLE            IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n\nBEGIN\n\n\n\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_lcr_REP_PROFILE_DETAIL\n      (\n        REF_REPORT ,\n        NAME ,\n        PROFILE_ID ,\n        VALUE ,\n        IS_STANDARD ,\n        percent ,\n        TYPE ,\n        TITLE\n      \n      )\n      VALUES\n      (\n        INPAR_REF_REPORT ,\n        INPAR_NAME ,\n        INPAR_PROFILE_ID ,\n        INPAR_VALUE ,\n        0 ,\n        inpar_percent ,\n        INPAR_TYPE ,\n        INPAR_TITLE\n     \n      );\n    COMMIT;\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n    /*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n    OUTPAR_ID := INPAR_REF_REPORT;\n  ELSE\n    UPDATE TBL_LCR_REP_PROFILE_DETAIL\n    SET REF_REPORT = INPAR_REF_REPORT ,\n      NAME         = INPAR_NAME ,\n      PROFILE_ID   = INPAR_PROFILE_ID ,\n      VALUE        = INPAR_VALUE ,\n      IS_STANDARD  = 0 ,\n      percent      = inpar_percent ,\n      TYPE         = INPAR_TYPE ,\n      TITLE        = INPAR_TITLE\n    WHERE ID       = INPAR_ID;\n  END IF;\n  COMMIT;\nEND PRC_LCR_REP_PROFILE_DETAIL;\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n PROCEDURE PRC_LCR_rep_value (\n  inpar_report   IN VARCHAR2\n ) as\n var_version number;\n VAR_FORMULA VARCHAR2(30000);\n VAR_SUM NUMBER ;\nbegin\n--=============\n \n  \n  select max(id) into var_version from TBL_REPREQ;\n  --===========\n  INSERT\n  INTO TBL_lcr_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      \n      percent ,\n      TYPE ,\n      TITLE,\n      ref_repreq,\n      IS_SPECIAL_TYPE\n    )\n    (SELECT\n        (--SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'\n        inpar_report\n        ),\n        NAME ,\n        0 ,\n        0 ,\n        0 ,\n        \n        percent ,\n        TYPE ,\n        TITLE,\n        var_version,\n        IS_SPECIAL_TYPE\n      FROM tbl_lcr_rep_profile_detail\n      WHERE is_standard=1 and (type \u003c\u003e 2 or title \u003c\u003e1)\n    );\n    --+*********************************************************************************\n        --+*********************************************************************************\n    --+*********************************************************************************\n\n    FOR I IN (SELECT * FROM TBL_LCR_REP_PROFILE_DETAIL WHERE TYPE          = 2\n AND\n TITLE         = 1\n AND\n  IS_STANDARD   = 1 )\nLOOP\n\nSELECT\n FORMULA  INTO VAR_FORMULA\nFROM TBL_LCR_REP_PROFILE_DETAIL\nWHERE TYPE          = 2\n AND\n TITLE         = 1\n AND\n  IS_STANDARD   = 1\n AND\n ID = I.ID;\nif( i.IS_SPECIAL_TYPE \u003c\u003e 'more_than_30')\nthen\n\nSELECT\nNVL(sum(balance),0)   INTO VAR_SUM\nFROM AKIN.TBL_DEPOSIT\nWHERE DUE_DATE\u003c= TRUNC(SYSDATE) + 30\n AND\n  REF_DEPOSIT_ACCOUNTING IN (\n   SELECT\n    AKIN.TBL_DEPOSIT_ACCOUNTING.DEP_ACC_ID\n   FROM AKIN.TBL_DEPOSIT_ACCOUNTING where LEDGER_CODE_SELF in (\n   select regexp_substr(VAR_FORMULA,'[^,]+', 1, level) from dual\n     connect by regexp_substr(VAR_FORMULA, '[^,]+', 1, level) is not null\n   )\n  );\n \n \n   INSERT\n  INTO TBL_lcr_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      percent ,\n      TYPE ,\n      TITLE,\n      ref_repreq,\n      IS_SPECIAL_TYPE\n    )  \n    VALUES(inpar_report,\n        I.NAME ,\n        0 ,\n        VAR_SUM ,\n        0 ,\n        I.percent ,\n        I.TYPE ,\n        I.TITLE,\n        var_version,\n        i.IS_SPECIAL_TYPE);\n        else \n        \n        SELECT\nNVL(sum(balance),0)   INTO VAR_SUM\nFROM AKIN.TBL_DEPOSIT\nWHERE DUE_DATE\u003e TRUNC(SYSDATE) + 30\n AND\n  REF_DEPOSIT_ACCOUNTING IN (\n   SELECT\n    AKIN.TBL_DEPOSIT_ACCOUNTING.DEP_ACC_ID\n   FROM AKIN.TBL_DEPOSIT_ACCOUNTING where LEDGER_CODE_SELF in (\n   select regexp_substr(VAR_FORMULA,'[^,]+', 1, level) from dual\n     connect by regexp_substr(VAR_FORMULA, '[^,]+', 1, level) is not null\n   )\n  );\n \n \n   INSERT\n  INTO TBL_lcr_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      percent ,\n      TYPE ,\n      TITLE,\n      ref_repreq,\n      IS_SPECIAL_TYPE\n    )  \n    VALUES(inpar_report,\n        I.NAME ,\n        0 ,\n        VAR_SUM ,\n        0 ,\n        I.percent ,\n        I.TYPE ,\n        I.TITLE,\n        var_version,\n        i.IS_SPECIAL_TYPE);\n        end if;\n  END LOOP;\n        \n  COMMIT;\n  --==============\nEND PRC_LCR_rep_value;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_LCR_REP_PROFILE_REPORT(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_REF_USER         IN VARCHAR2 ,\n    INPAR_STATUS           IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n\nBEGIN\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        TYPE\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'LCR' ,\n        INPAR_TYPE\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME   = INPAR_NAME ,\n      DES      = INPAR_DES ,\n      REF_USER = INPAR_REF_USER ,\n      STATUS   = INPAR_STATUS ,\n      TYPE     = INPAR_TYPE\n    WHERE ID   = INPAR_ID;\n    COMMIT;\n  END IF;\n  \n  update TBL_REPORT\n  set H_ID = id\n  where type = 'LCR' and H_ID is null;\n  commit;\n--  --=============\n--  \n--  INSERT\n--INTO TBL_REPREQ\n--  (\n--\n--    REF_REPORT_ID,\n--    REQ_DATE,\n--    STATUS,\n--    TYPE,\n--    CATEGORY\n--  )\n--  values\n-- (\n-- OUTPAR_ID\n-- ,sysdate\n-- ,1\n-- ,'LCR'\n--  ,'LCR'\n--  );\n--  commit;\n--  \n--  select max(id) into var_version from TBL_REPREQ;\n--  --===========\n--  INSERT\n--  INTO TBL_lcr_REP_PROFILE_DETAIL\n--    (\n--      REF_REPORT ,\n--      NAME ,\n--      PROFILE_ID ,\n--      VALUE ,\n--      IS_STANDARD ,\n--      percent ,\n--      TYPE ,\n--      TITLE,\n--      ref_repreq\n--    )\n--    (SELECT\n--        (SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'\n--        ),\n--        NAME ,\n--        0 ,\n--        0 ,\n--        0 ,\n--        percent ,\n--        TYPE ,\n--        TITLE,\n--        var_version\n--      FROM tbl_lcr_rep_profile_detail\n--      WHERE is_standard=1\n--    );\n--  COMMIT;\n--  --==============\nEND PRC_LCR_REP_PROFILE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GI_CALC\n  (\n    INPAR_ID IN VARCHAR2,\n    inpar_date in varchar2\n  )\n  RETURN VARCHAR2\nAS\n  VAR CLOB;\n  VAR2 CLOB;\n  VAR3 CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\nBEGIN\n\nif (INPAR_ID is not null) then\n  SELECT /*+  PARALLEL(auto) */ '  \nSELECT  /*+  PARALLEL(auto) */  \nREPLACE(    \nWMSYS.WM_CONCAT(V)   \n,'',''   \n,''''   \n)   \nFROM (    \nSELECT  /*+  PARALLEL(auto) */   \nABS(DG.BALANCE) ||     \nA.SPLIT_SING AS V    \nFROM (      \nWITH T AS (       \nSELECT      \nREPLACE(FORMULA||''+'','','','''') STR       \nFROM TBL_LEDGER_REPORT_MAP       \nWHERE id   = '\n    || INPAR_ID\n    || '   ) SELECT       \nREGEXP_SUBSTR(        \nSTR       \n,''[0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_VALUES      \n,REGEXP_SUBSTR(        \nSTR       \n,''[^0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_SING      \n,LEVEL AS LEV      \nFROM T      \nCONNECT BY       \nLEVEL \u003c= (        \nSELECT         \nLENGTH(REPLACE(STR,''-'',NULL) )        \nFROM T       \n)     \n) A    \n,TBL_LEDGER_archive PARTITION ('||VAR_PARTITION||') DG    \nWHERE DG.LEDGER_CODE   = A.SPLIT_VALUES     \nAND      \nSPLIT_VALUES IS NOT NULL        \nAND      \ntrunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''',''yyyy-mm-dd'')))\n '\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE VAR INTO VAR3;\n  SELECT\n    CASE\n      WHEN SUBSTR( TO_CHAR(VAR3) ,-1 ) IN ( '-','+' )\n      THEN VAR3\n        || '0'\n      ELSE VAR3\n    END\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE 'select ' || NVL(TO_CHAR(VAR),0) || ' from dual' INTO VAR2;\n  RETURN abs(TO_number(VAR2));\n  else\n  RETURN 0;\n  end if;\nEND FNC_LCR_GI_CALC;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GET_INPUT(\n    INPAR_type IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n\n  OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\"\nFROM TBL_LCR_REP_PROFILE_DETAIL where  is_standard =1 and  type = '||INPAR_type||'' ;\n  RETURN OUTPUT;\nEND FNC_LCR_GET_INPUT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GET_REPORT_INFO(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR2 VARCHAR2(3000);\n  var_report VARCHAR2(3000);\nBEGIN\n\nselect ref_report_id into var_report from tbl_repreq where id = INPAR_ID ;\n\n  VAR2 := 'SELECT ID as \"id\",  \nNAME as \"name\",  \nDES as \"description\",  \nCREATE_DATE as \"createDate\",  \nREF_USER as \"refUser\",  \nSTATUS as \"status\",  \nCATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = ' || var_report || ' and upper(category) = ''LCR'' order by id';\n\nRETURN VAR2;\n\n \nEND FNC_LCR_GET_REPORT_INFO;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GET_INPUT_EDIT(\n    INPAR_REPORT IN VARCHAR2,\n    INPAR_TYPE   IN VARCHAR2 )\n  RETURN VARCHAR2\n  \nAS\n  OUTPUT VARCHAR2(32000);\n  VAR    VARCHAR2(32000);\n   var_date  varchar2(100);\n   pragma autonomous_transaction;\nBEGIN\n\nselect /*+ parallel(auto) */  to_char( max(eff_date), 'YYYY-MM-DD') into var_date from tbl_ledger_archive ;\n\n--===========\npkg_LCR.prc_lcr_update_gi_calc(INPAR_REPORT,var_date);\n--============\n\n  OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\",  \nto_char(VALUE) as \"manualValue\",  \nis_special_type as \"isSpecial\",\n458000000000 as \"tazminZemanat\",\nPROFILE_ID as \"profileId\"\nFROM TBL_lcr_REP_PROFILE_DETAIL where REF_repreq = ' || INPAR_REPORT || ' AND TYPE = ' || INPAR_TYPE || ' order by type ';\n\n  RETURN OUTPUT;\n  \nEND FNC_LCR_GET_INPUT_EDIT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE prc_lcr_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2,\n    inpar_date  varchar2)\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_LCR_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_LCR_REP_PROFILE_DETAIL\n      SET value        = pkg_lcr.FNC_LCR_GI_CALC(i.profile_id,inpar_date)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_lcr_update_gi_calc;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nEND PKG_LCR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LCR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_rep_value (\n  inpar_report   IN VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_lcr_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GI_CALC ( INPAR_ID IN varchar2,\n    inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_LCR;"},{"Name":"PKG_LCR","ObjectID":281500,"Digest":"f3b0cd558ec2e19de198c3818409d73ae85486f0bb4d49af78802cd67fefe400","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LCR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_rep_value (\n  inpar_report   IN VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_lcr_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GI_CALC ( INPAR_ID IN varchar2,\n    inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_LCR;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LCR\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_LCR_DELETE_REPORT(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR OUT VARCHAR2)\nAS\nBEGIN\n  DELETE FROM TBL_REPORT WHERE ID = INPAR_ID;\n  COMMIT;\n  DELETE FROM TBL_LCR_REP_PROFILE_DETAIL WHERE REF_REPORT = INPAR_ID;\n  COMMIT;\nEND PRC_LCR_DELETE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_LCR_REP_PROFILE_DETAIL(\n    INPAR_REF_REPORT       IN VARCHAR2 ,\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_PROFILE_ID       IN VARCHAR2 ,\n    INPAR_VALUE            IN VARCHAR2 ,\n    INPAR_IS_STANDARD      IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    INPAR_PERCENT          IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_TITLE            IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n\nBEGIN\n\n\n\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_lcr_REP_PROFILE_DETAIL\n      (\n        REF_REPORT ,\n        NAME ,\n        PROFILE_ID ,\n        VALUE ,\n        IS_STANDARD ,\n        percent ,\n        TYPE ,\n        TITLE\n      \n      )\n      VALUES\n      (\n        INPAR_REF_REPORT ,\n        INPAR_NAME ,\n        INPAR_PROFILE_ID ,\n        INPAR_VALUE ,\n        0 ,\n        inpar_percent ,\n        INPAR_TYPE ,\n        INPAR_TITLE\n     \n      );\n    COMMIT;\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n    /*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n    OUTPAR_ID := INPAR_REF_REPORT;\n  ELSE\n    UPDATE TBL_LCR_REP_PROFILE_DETAIL\n    SET REF_REPORT = INPAR_REF_REPORT ,\n      NAME         = INPAR_NAME ,\n      PROFILE_ID   = INPAR_PROFILE_ID ,\n      VALUE        = INPAR_VALUE ,\n      IS_STANDARD  = 0 ,\n      percent      = inpar_percent ,\n      TYPE         = INPAR_TYPE ,\n      TITLE        = INPAR_TITLE\n    WHERE ID       = INPAR_ID;\n  END IF;\n  COMMIT;\nEND PRC_LCR_REP_PROFILE_DETAIL;\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n PROCEDURE PRC_LCR_rep_value (\n  inpar_report   IN VARCHAR2\n ) as\n var_version number;\n VAR_FORMULA VARCHAR2(30000);\n VAR_SUM NUMBER ;\nbegin\n--=============\n \n  \n  select max(id) into var_version from TBL_REPREQ;\n  --===========\n  INSERT\n  INTO TBL_lcr_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      \n      percent ,\n      TYPE ,\n      TITLE,\n      ref_repreq,\n      IS_SPECIAL_TYPE\n    )\n    (SELECT\n        (--SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'\n        inpar_report\n        ),\n        NAME ,\n        0 ,\n        0 ,\n        0 ,\n        \n        percent ,\n        TYPE ,\n        TITLE,\n        var_version,\n        IS_SPECIAL_TYPE\n      FROM tbl_lcr_rep_profile_detail\n      WHERE is_standard=1 and (type \u003c\u003e 2 or title \u003c\u003e1)\n    );\n    --+*********************************************************************************\n        --+*********************************************************************************\n    --+*********************************************************************************\n\n    FOR I IN (SELECT * FROM TBL_LCR_REP_PROFILE_DETAIL WHERE TYPE          = 2\n AND\n TITLE         = 1\n AND\n  IS_STANDARD   = 1 )\nLOOP\n\nSELECT\n FORMULA  INTO VAR_FORMULA\nFROM TBL_LCR_REP_PROFILE_DETAIL\nWHERE TYPE          = 2\n AND\n TITLE         = 1\n AND\n  IS_STANDARD   = 1\n AND\n ID = I.ID;\nif( i.IS_SPECIAL_TYPE \u003c\u003e 'more_than_30')\nthen\n\nSELECT\nNVL(sum(balance),0)   INTO VAR_SUM\nFROM AKIN.TBL_DEPOSIT\nWHERE DUE_DATE\u003c= TRUNC(SYSDATE) + 30\n AND\n  REF_DEPOSIT_ACCOUNTING IN (\n   SELECT\n    AKIN.TBL_DEPOSIT_ACCOUNTING.DEP_ACC_ID\n   FROM AKIN.TBL_DEPOSIT_ACCOUNTING where LEDGER_CODE_SELF in (\n   select regexp_substr(VAR_FORMULA,'[^,]+', 1, level) from dual\n     connect by regexp_substr(VAR_FORMULA, '[^,]+', 1, level) is not null\n   )\n  );\n \n \n   INSERT\n  INTO TBL_lcr_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      percent ,\n      TYPE ,\n      TITLE,\n      ref_repreq,\n      IS_SPECIAL_TYPE\n    )  \n    VALUES(inpar_report,\n        I.NAME ,\n        0 ,\n        VAR_SUM ,\n        0 ,\n        I.percent ,\n        I.TYPE ,\n        I.TITLE,\n        var_version,\n        i.IS_SPECIAL_TYPE);\n        else \n        \n        SELECT\nNVL(sum(balance),0)   INTO VAR_SUM\nFROM AKIN.TBL_DEPOSIT\nWHERE DUE_DATE\u003e TRUNC(SYSDATE) + 30\n AND\n  REF_DEPOSIT_ACCOUNTING IN (\n   SELECT\n    AKIN.TBL_DEPOSIT_ACCOUNTING.DEP_ACC_ID\n   FROM AKIN.TBL_DEPOSIT_ACCOUNTING where LEDGER_CODE_SELF in (\n   select regexp_substr(VAR_FORMULA,'[^,]+', 1, level) from dual\n     connect by regexp_substr(VAR_FORMULA, '[^,]+', 1, level) is not null\n   )\n  );\n \n \n   INSERT\n  INTO TBL_lcr_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      percent ,\n      TYPE ,\n      TITLE,\n      ref_repreq,\n      IS_SPECIAL_TYPE\n    )  \n    VALUES(inpar_report,\n        I.NAME ,\n        0 ,\n        VAR_SUM ,\n        0 ,\n        I.percent ,\n        I.TYPE ,\n        I.TITLE,\n        var_version,\n        i.IS_SPECIAL_TYPE);\n        end if;\n  END LOOP;\n        \n  COMMIT;\n  --==============\nEND PRC_LCR_rep_value;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_LCR_REP_PROFILE_REPORT(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_REF_USER         IN VARCHAR2 ,\n    INPAR_STATUS           IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n\nBEGIN\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        TYPE\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'LCR' ,\n        INPAR_TYPE\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME   = INPAR_NAME ,\n      DES      = INPAR_DES ,\n      REF_USER = INPAR_REF_USER ,\n      STATUS   = INPAR_STATUS ,\n      TYPE     = INPAR_TYPE\n    WHERE ID   = INPAR_ID;\n    COMMIT;\n  END IF;\n  \n  update TBL_REPORT\n  set H_ID = id\n  where type = 'LCR' and H_ID is null;\n  commit;\n--  --=============\n--  \n--  INSERT\n--INTO TBL_REPREQ\n--  (\n--\n--    REF_REPORT_ID,\n--    REQ_DATE,\n--    STATUS,\n--    TYPE,\n--    CATEGORY\n--  )\n--  values\n-- (\n-- OUTPAR_ID\n-- ,sysdate\n-- ,1\n-- ,'LCR'\n--  ,'LCR'\n--  );\n--  commit;\n--  \n--  select max(id) into var_version from TBL_REPREQ;\n--  --===========\n--  INSERT\n--  INTO TBL_lcr_REP_PROFILE_DETAIL\n--    (\n--      REF_REPORT ,\n--      NAME ,\n--      PROFILE_ID ,\n--      VALUE ,\n--      IS_STANDARD ,\n--      percent ,\n--      TYPE ,\n--      TITLE,\n--      ref_repreq\n--    )\n--    (SELECT\n--        (SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'\n--        ),\n--        NAME ,\n--        0 ,\n--        0 ,\n--        0 ,\n--        percent ,\n--        TYPE ,\n--        TITLE,\n--        var_version\n--      FROM tbl_lcr_rep_profile_detail\n--      WHERE is_standard=1\n--    );\n--  COMMIT;\n--  --==============\nEND PRC_LCR_REP_PROFILE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GI_CALC\n  (\n    INPAR_ID IN VARCHAR2,\n    inpar_date in varchar2\n  )\n  RETURN VARCHAR2\nAS\n  VAR CLOB;\n  VAR2 CLOB;\n  VAR3 CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\nBEGIN\n\nif (INPAR_ID is not null) then\n  SELECT /*+  PARALLEL(auto) */ '  \nSELECT  /*+  PARALLEL(auto) */  \nREPLACE(    \nWMSYS.WM_CONCAT(V)   \n,'',''   \n,''''   \n)   \nFROM (    \nSELECT  /*+  PARALLEL(auto) */   \nABS(DG.BALANCE) ||     \nA.SPLIT_SING AS V    \nFROM (      \nWITH T AS (       \nSELECT      \nREPLACE(FORMULA||''+'','','','''') STR       \nFROM TBL_LEDGER_REPORT_MAP       \nWHERE id   = '\n    || INPAR_ID\n    || '   ) SELECT       \nREGEXP_SUBSTR(        \nSTR       \n,''[0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_VALUES      \n,REGEXP_SUBSTR(        \nSTR       \n,''[^0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_SING      \n,LEVEL AS LEV      \nFROM T      \nCONNECT BY       \nLEVEL \u003c= (        \nSELECT         \nLENGTH(REPLACE(STR,''-'',NULL) )        \nFROM T       \n)     \n) A    \n,TBL_LEDGER_archive PARTITION ('||VAR_PARTITION||') DG    \nWHERE DG.LEDGER_CODE   = A.SPLIT_VALUES     \nAND      \nSPLIT_VALUES IS NOT NULL        \nAND      \ntrunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''',''yyyy-mm-dd'')))\n '\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE VAR INTO VAR3;\n  SELECT\n    CASE\n      WHEN SUBSTR( TO_CHAR(VAR3) ,-1 ) IN ( '-','+' )\n      THEN VAR3\n        || '0'\n      ELSE VAR3\n    END\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE 'select ' || NVL(TO_CHAR(VAR),0) || ' from dual' INTO VAR2;\n  RETURN abs(TO_number(VAR2));\n  else\n  RETURN 0;\n  end if;\nEND FNC_LCR_GI_CALC;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GET_INPUT(\n    INPAR_type IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n\n  OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\"\nFROM TBL_LCR_REP_PROFILE_DETAIL where  is_standard =1 and  type = '||INPAR_type||'' ;\n  RETURN OUTPUT;\nEND FNC_LCR_GET_INPUT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GET_REPORT_INFO(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR2 VARCHAR2(3000);\n  var_report VARCHAR2(3000);\nBEGIN\n\nselect ref_report_id into var_report from tbl_repreq where id = INPAR_ID ;\n\n  VAR2 := 'SELECT ID as \"id\",  \nNAME as \"name\",  \nDES as \"description\",  \nCREATE_DATE as \"createDate\",  \nREF_USER as \"refUser\",  \nSTATUS as \"status\",  \nCATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = ' || var_report || ' and upper(category) = ''LCR'' order by id';\n\nRETURN VAR2;\n\n \nEND FNC_LCR_GET_REPORT_INFO;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_LCR_GET_INPUT_EDIT(\n    INPAR_REPORT IN VARCHAR2,\n    INPAR_TYPE   IN VARCHAR2 )\n  RETURN VARCHAR2\n  \nAS\n  OUTPUT VARCHAR2(32000);\n  VAR    VARCHAR2(32000);\n   var_date  varchar2(100);\n   pragma autonomous_transaction;\nBEGIN\n\nselect /*+ parallel(auto) */  to_char( max(eff_date), 'YYYY-MM-DD') into var_date from tbl_ledger_archive ;\n\n--===========\npkg_LCR.prc_lcr_update_gi_calc(INPAR_REPORT,var_date);\n--============\n\n  OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\",  \nto_char(VALUE) as \"manualValue\",  \nis_special_type as \"isSpecial\",\n458000000000 as \"tazminZemanat\",\nPROFILE_ID as \"profileId\"\nFROM TBL_lcr_REP_PROFILE_DETAIL where REF_repreq = ' || INPAR_REPORT || ' AND TYPE = ' || INPAR_TYPE || ' order by type ';\n\n  RETURN OUTPUT;\n  \nEND FNC_LCR_GET_INPUT_EDIT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE prc_lcr_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2,\n    inpar_date  varchar2)\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_LCR_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_LCR_REP_PROFILE_DETAIL\n      SET value        = pkg_lcr.FNC_LCR_GI_CALC(i.profile_id,inpar_date)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_lcr_update_gi_calc;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nEND PKG_LCR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LCR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_LCR_rep_value (\n  inpar_report   IN VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_LCR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_lcr_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GI_CALC ( INPAR_ID IN varchar2,\n    inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_LCR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_LCR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_LCR;"},{"Name":"PKG_NSFR","ObjectID":281530,"Digest":"261cef806e91568baed2348cdd8a12c4c833993d7cee2900d9705fe1083279e9","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NSFR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NSFR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_NSFR_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GI_CALC ( INPAR_ID IN varchar2,  inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NSFR;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NSFR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_NSFR_DELETE_REPORT(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR OUT VARCHAR2 )\nAS\nBEGIN\n  DELETE FROM TBL_REPORT WHERE ID = INPAR_ID;\n  COMMIT;\n  DELETE FROM TBL_NSFR_REP_PROFILE_DETAIL WHERE REF_REPORT = INPAR_ID;\n  COMMIT;\nEND PRC_NSFR_DELETE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\nPROCEDURE PRC_NSFR_REP_PROFILE_DETAIL(\n    INPAR_REF_REPORT       IN VARCHAR2 ,\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_PROFILE_ID       IN VARCHAR2 ,\n    INPAR_VALUE            IN VARCHAR2 ,\n    INPAR_IS_STANDARD      IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    INPAR_PERCENT          IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_TITLE            IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_NSFR_REP_PROFILE_DETAIL\n      (\n        REF_REPORT ,\n        NAME ,\n        PROFILE_ID ,\n        VALUE ,\n        IS_STANDARD ,\n        percent ,\n        TYPE ,\n        TITLE\n      )\n      VALUES\n      (\n        INPAR_REF_REPORT ,\n        INPAR_NAME ,\n        INPAR_PROFILE_ID ,\n        INPAR_VALUE ,\n        0 ,\n        inpar_percent ,\n        INPAR_TYPE ,\n        INPAR_TITLE\n      );\n    COMMIT;\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n    /*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n    OUTPAR_ID := INPAR_REF_REPORT;\n  ELSE\n    UPDATE TBL_NSFR_REP_PROFILE_DETAIL\n    SET REF_REPORT = INPAR_REF_REPORT ,\n      NAME         = INPAR_NAME ,\n      PROFILE_ID   = INPAR_PROFILE_ID ,\n      VALUE        = INPAR_VALUE ,\n      IS_STANDARD  = 0 ,\n      percent      = inpar_percent ,\n      TYPE         = INPAR_TYPE ,\n      TITLE        = INPAR_TITLE\n    WHERE ID       = INPAR_ID;\n  END IF;\n  COMMIT;\nEND PRC_NSFR_REP_PROFILE_DETAIL;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_NSFR_REP_PROFILE_REPORT(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_REF_USER         IN VARCHAR2 ,\n    INPAR_STATUS           IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        TYPE\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'NSFR' ,\n        INPAR_TYPE\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME   = INPAR_NAME ,\n      DES      = INPAR_DES ,\n      REF_USER = INPAR_REF_USER ,\n      STATUS   = INPAR_STATUS ,\n      TYPE     = INPAR_TYPE\n    WHERE ID   = INPAR_ID;\n    COMMIT;\n  END IF;\n  --=============\n  INSERT\n  INTO TBL_NSFR_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      percent ,\n      TYPE ,\n      TITLE\n    )\n    (SELECT\n        (SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'NSFR'\n        ),\n        NAME ,\n        0 ,\n        0 ,\n        0 ,\n        0 ,\n        TYPE ,\n        TITLE\n      FROM tbl_NSFR_rep_profile_detail\n      WHERE is_standard=1\n    );\n  COMMIT;\n  --==============\nEND PRC_NSFR_REP_PROFILE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GI_CALC\n  (\n    INPAR_ID IN VARCHAR2,\n    inpar_date in varchar2\n  )\n  RETURN VARCHAR2\nAS\n  VAR CLOB;\n  VAR2 CLOB;\n  VAR3 CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\nBEGIN\n\nif (INPAR_ID is not null) then\n  SELECT /*+  PARALLEL(auto) */ '  \nSELECT  /*+  PARALLEL(auto) */  \nREPLACE(    \nWMSYS.WM_CONCAT(V)   \n,'',''   \n,''''   \n)   \nFROM (    \nSELECT  /*+  PARALLEL(auto) */   \nABS(DG.BALANCE) ||     \nA.SPLIT_SING AS V    \nFROM (      \nWITH T AS (       \nSELECT      \nREPLACE(FORMULA||''+'','','','''') STR       \nFROM TBL_LEDGER_REPORT_MAP       \nWHERE id   = '\n    || INPAR_ID\n    || '   ) SELECT       \nREGEXP_SUBSTR(        \nSTR       \n,''[0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_VALUES      \n,REGEXP_SUBSTR(        \nSTR       \n,''[^0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_SING      \n,LEVEL AS LEV      \nFROM T      \nCONNECT BY       \nLEVEL \u003c= (        \nSELECT         \nLENGTH(REPLACE(STR,''-'',NULL) )        \nFROM T       \n)     \n) A    \n,TBL_LEDGER_archive  PARTITION ('||VAR_PARTITION||')  DG    \nWHERE DG.LEDGER_CODE   = A.SPLIT_VALUES     \nAND      \nSPLIT_VALUES IS NOT NULL        \nAND      \ntrunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''',''yyyy-mm-dd'')))\n '\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE VAR INTO VAR3;\n  SELECT\n    CASE\n      WHEN SUBSTR( TO_CHAR(VAR3) ,-1 ) IN ( '-','+' )\n      THEN VAR3\n        || '0'\n      ELSE VAR3\n    END\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE 'select ' || NVL(TO_CHAR(VAR),0) || ' from dual' INTO VAR2;\n  RETURN abs(TO_number(VAR2));\n  else\n  RETURN 0;\n  end if;\nEND FNC_NSFR_GI_CALC;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GET_INPUT(\n    INPAR_type IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n  OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\"\nFROM TBL_NSFR_REP_PROFILE_DETAIL where  is_standard =1 and  type = '||INPAR_type||'' ;\n  RETURN OUTPUT;\nEND FNC_NSFR_GET_INPUT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GET_REPORT_INFO(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR2 VARCHAR2(3000);\nBEGIN\n  VAR2 := 'SELECT ID as \"id\",  \nNAME as \"name\",  \nDES as \"description\",  \nCREATE_DATE as \"createDate\",  \nREF_USER as \"refUser\",  \nSTATUS as \"status\",  \nCATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = ' || INPAR_ID || ' and upper(category) = ''NSFR'' order by id';\n  RETURN VAR2;\nEND FNC_NSFR_GET_REPORT_INFO;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GET_INPUT_EDIT(\n    INPAR_REPORT IN VARCHAR2,\n    INPAR_TYPE   IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\n var_date  varchar2(100);\n   pragma autonomous_transaction;\nBEGIN\n\nselect /*+ parallel(auto) */  to_char( max(eff_date), 'YYYY-MM-DD') into var_date from tbl_ledger_archive ;\n\n--===========\npkg_NSFR.prc_NSFR_update_gi_calc(INPAR_REPORT,var_date);\n--============\n\n   OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\",  \nto_char(VALUE) as \"manualValue\",  \nPROFILE_ID as \"profileId\"\nFROM TBL_NSFR_REP_PROFILE_DETAIL where REF_REPORT = ' || INPAR_REPORT || ' AND TYPE = ' || INPAR_TYPE || ' order by type ';\n  RETURN OUTPUT;\nEND FNC_NSFR_GET_INPUT_EDIT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE prc_NSFR_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2,\n    inpar_date  varchar2 )\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_NSFR_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_NSFR_REP_PROFILE_DETAIL\n      SET value        = pkg_NSFR.FNC_NSFR_GI_CALC(i.profile_id,inpar_date)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_NSFR_update_gi_calc;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nEND PKG_NSFR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NSFR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NSFR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_NSFR_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GI_CALC ( INPAR_ID IN varchar2,  inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NSFR;"},{"Name":"PKG_NSFR","ObjectID":281531,"Digest":"261cef806e91568baed2348cdd8a12c4c833993d7cee2900d9705fe1083279e9","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NSFR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NSFR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_NSFR_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GI_CALC ( INPAR_ID IN varchar2,  inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NSFR;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NSFR\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_NSFR_DELETE_REPORT(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR OUT VARCHAR2 )\nAS\nBEGIN\n  DELETE FROM TBL_REPORT WHERE ID = INPAR_ID;\n  COMMIT;\n  DELETE FROM TBL_NSFR_REP_PROFILE_DETAIL WHERE REF_REPORT = INPAR_ID;\n  COMMIT;\nEND PRC_NSFR_DELETE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\nPROCEDURE PRC_NSFR_REP_PROFILE_DETAIL(\n    INPAR_REF_REPORT       IN VARCHAR2 ,\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_PROFILE_ID       IN VARCHAR2 ,\n    INPAR_VALUE            IN VARCHAR2 ,\n    INPAR_IS_STANDARD      IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    INPAR_PERCENT          IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_TITLE            IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_NSFR_REP_PROFILE_DETAIL\n      (\n        REF_REPORT ,\n        NAME ,\n        PROFILE_ID ,\n        VALUE ,\n        IS_STANDARD ,\n        percent ,\n        TYPE ,\n        TITLE\n      )\n      VALUES\n      (\n        INPAR_REF_REPORT ,\n        INPAR_NAME ,\n        INPAR_PROFILE_ID ,\n        INPAR_VALUE ,\n        0 ,\n        inpar_percent ,\n        INPAR_TYPE ,\n        INPAR_TITLE\n      );\n    COMMIT;\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n    /*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n    OUTPAR_ID := INPAR_REF_REPORT;\n  ELSE\n    UPDATE TBL_NSFR_REP_PROFILE_DETAIL\n    SET REF_REPORT = INPAR_REF_REPORT ,\n      NAME         = INPAR_NAME ,\n      PROFILE_ID   = INPAR_PROFILE_ID ,\n      VALUE        = INPAR_VALUE ,\n      IS_STANDARD  = 0 ,\n      percent      = inpar_percent ,\n      TYPE         = INPAR_TYPE ,\n      TITLE        = INPAR_TITLE\n    WHERE ID       = INPAR_ID;\n  END IF;\n  COMMIT;\nEND PRC_NSFR_REP_PROFILE_DETAIL;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_NSFR_REP_PROFILE_REPORT(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_REF_USER         IN VARCHAR2 ,\n    INPAR_STATUS           IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        TYPE\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'NSFR' ,\n        INPAR_TYPE\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME   = INPAR_NAME ,\n      DES      = INPAR_DES ,\n      REF_USER = INPAR_REF_USER ,\n      STATUS   = INPAR_STATUS ,\n      TYPE     = INPAR_TYPE\n    WHERE ID   = INPAR_ID;\n    COMMIT;\n  END IF;\n  --=============\n  INSERT\n  INTO TBL_NSFR_REP_PROFILE_DETAIL\n    (\n      REF_REPORT ,\n      NAME ,\n      PROFILE_ID ,\n      VALUE ,\n      IS_STANDARD ,\n      percent ,\n      TYPE ,\n      TITLE\n    )\n    (SELECT\n        (SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'NSFR'\n        ),\n        NAME ,\n        0 ,\n        0 ,\n        0 ,\n        0 ,\n        TYPE ,\n        TITLE\n      FROM tbl_NSFR_rep_profile_detail\n      WHERE is_standard=1\n    );\n  COMMIT;\n  --==============\nEND PRC_NSFR_REP_PROFILE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GI_CALC\n  (\n    INPAR_ID IN VARCHAR2,\n    inpar_date in varchar2\n  )\n  RETURN VARCHAR2\nAS\n  VAR CLOB;\n  VAR2 CLOB;\n  VAR3 CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\nBEGIN\n\nif (INPAR_ID is not null) then\n  SELECT /*+  PARALLEL(auto) */ '  \nSELECT  /*+  PARALLEL(auto) */  \nREPLACE(    \nWMSYS.WM_CONCAT(V)   \n,'',''   \n,''''   \n)   \nFROM (    \nSELECT  /*+  PARALLEL(auto) */   \nABS(DG.BALANCE) ||     \nA.SPLIT_SING AS V    \nFROM (      \nWITH T AS (       \nSELECT      \nREPLACE(FORMULA||''+'','','','''') STR       \nFROM TBL_LEDGER_REPORT_MAP       \nWHERE id   = '\n    || INPAR_ID\n    || '   ) SELECT       \nREGEXP_SUBSTR(        \nSTR       \n,''[0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_VALUES      \n,REGEXP_SUBSTR(        \nSTR       \n,''[^0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_SING      \n,LEVEL AS LEV      \nFROM T      \nCONNECT BY       \nLEVEL \u003c= (        \nSELECT         \nLENGTH(REPLACE(STR,''-'',NULL) )        \nFROM T       \n)     \n) A    \n,TBL_LEDGER_archive  PARTITION ('||VAR_PARTITION||')  DG    \nWHERE DG.LEDGER_CODE   = A.SPLIT_VALUES     \nAND      \nSPLIT_VALUES IS NOT NULL        \nAND      \ntrunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''',''yyyy-mm-dd'')))\n '\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE VAR INTO VAR3;\n  SELECT\n    CASE\n      WHEN SUBSTR( TO_CHAR(VAR3) ,-1 ) IN ( '-','+' )\n      THEN VAR3\n        || '0'\n      ELSE VAR3\n    END\n  INTO VAR\n  FROM DUAL;\n  EXECUTE IMMEDIATE 'select ' || NVL(TO_CHAR(VAR),0) || ' from dual' INTO VAR2;\n  RETURN abs(TO_number(VAR2));\n  else\n  RETURN 0;\n  end if;\nEND FNC_NSFR_GI_CALC;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GET_INPUT(\n    INPAR_type IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n  OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\"\nFROM TBL_NSFR_REP_PROFILE_DETAIL where  is_standard =1 and  type = '||INPAR_type||'' ;\n  RETURN OUTPUT;\nEND FNC_NSFR_GET_INPUT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GET_REPORT_INFO(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR2 VARCHAR2(3000);\nBEGIN\n  VAR2 := 'SELECT ID as \"id\",  \nNAME as \"name\",  \nDES as \"description\",  \nCREATE_DATE as \"createDate\",  \nREF_USER as \"refUser\",  \nSTATUS as \"status\",  \nCATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = ' || INPAR_ID || ' and upper(category) = ''NSFR'' order by id';\n  RETURN VAR2;\nEND FNC_NSFR_GET_REPORT_INFO;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nFUNCTION FNC_NSFR_GET_INPUT_EDIT(\n    INPAR_REPORT IN VARCHAR2,\n    INPAR_TYPE   IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\n var_date  varchar2(100);\n   pragma autonomous_transaction;\nBEGIN\n\nselect /*+ parallel(auto) */  to_char( max(eff_date), 'YYYY-MM-DD') into var_date from tbl_ledger_archive ;\n\n--===========\npkg_NSFR.prc_NSFR_update_gi_calc(INPAR_REPORT,var_date);\n--============\n\n   OUTPUT := 'select   \nid as \"id\",  \nNAME as \"infoGroup\",  \nTYPE as \"type\",  \nTITLE as \"title\",  \nPERCENT as \"percent\",  \nto_char(VALUE) as \"manualValue\",  \nPROFILE_ID as \"profileId\"\nFROM TBL_NSFR_REP_PROFILE_DETAIL where REF_REPORT = ' || INPAR_REPORT || ' AND TYPE = ' || INPAR_TYPE || ' order by type ';\n  RETURN OUTPUT;\nEND FNC_NSFR_GET_INPUT_EDIT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE prc_NSFR_update_gi_calc(\n    INPAR_ref_report IN VARCHAR2,\n    inpar_date  varchar2 )\nAS\nBEGIN\n  FOR i IN\n  (SELECT * FROM TBL_NSFR_REP_PROFILE_DETAIL WHERE ref_report = INPAR_ref_report\n  )\n  LOOP\n    IF(i.profile_id IS NOT NULL) THEN\n      UPDATE TBL_NSFR_REP_PROFILE_DETAIL\n      SET value        = pkg_NSFR.FNC_NSFR_GI_CALC(i.profile_id,inpar_date)\n      WHERE ref_report = INPAR_ref_report\n      AND i.id         =id ;\n      COMMIT;\n    END IF;\n  END LOOP;\nEND prc_NSFR_update_gi_calc;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nEND PKG_NSFR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NSFR\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NSFR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_PERCENT            IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NSFR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_NSFR_update_gi_calc(INPAR_ref_report IN VARCHAR2,\n INPAR_date IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GI_CALC ( INPAR_ID IN varchar2,  inpar_date in varchar2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NSFR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NSFR_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NSFR;"},{"Name":"PKG_IDPS","ObjectID":281720,"Digest":"907c9916b4b77ffbfa12f8b1edf028b8231f6b7e00d56a9d849e5b101e881766","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_IDPS\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi and Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_IDPS_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_REF_BRANCH_ID      IN VARCHAR2\n ,INPAR_FIRST              IN VARCHAR2\n ,INPAR_END                IN VARCHAR2\n ,LENGTH                   IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_DELETE_REPORT (\n  INPAR_rep_req   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_TREE_AGG (\n  I_START_DATE   IN DATE,\n  I_END_DATE IN DATE\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_FINAL_RESULT (\n  INPAR_REPreq   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN CLOB;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION fnc_idps_get_detail_name(\n  INPAR_rep_req IN VARCHAR2 \n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_idps_rep_value (\n  INPAR_ID   IN VARCHAR2\n );\n  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_IDPS;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_IDPS\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_DELETE_REPORT (\n  INPAR_rep_req   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n -- var_report number;\n BEGIN\n \n  -- select ref_report_id into var_report from TBL_REPREQ where ID = INPAR_REP_REQ; \n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_rep_req;\n\n  COMMIT;\n  DELETE FROM TBL_IDPS_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_rep_req;\n\n  COMMIT;\n END PRC_IDPS_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_TREE_AGG (\n  I_START_DATE   IN DATE,\n  I_END_DATE IN DATE\n ) AS\n /*\n  @AUTHOR MYM\n  @DATE 1397-10-22\n  @WHAT READ LEDGER AND CREATE AGGREGATION TREE\n */\n v_MAX_LEVEL NUMBER;\n V_AGHLAM_DAR_RAH NUMBER;\n V_MOVAZENE NUMBER;\n \n BEGIN\n    -- TRUNCATE LAST DATA\n    EXECUTE IMMEDIATE 'TRUNCATE TABLE TBL_IDPS_TREE_AGG';\n    \n    -- INSERTING ALL LEAF'S VALUES, BASED ON IDPS_TREE\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, PARENT_CODE, BALANCE, DEPTH, REF_BRANCH, EFF_DATE)\n    select /*+ parallel(auto) */ DISTINCT t.LEDGER_CODE, Tt.NAME, t.PARENT_CODE, TT.balance*T.sign, t.depth, TT.REF_BRANCH, TRUNC(TT.EFF_DATE)\n    from TBL_IDPS_TREE t, TBL_LEDGER_BRANCH tt\n    where t.leaf = 1 and t.LEDGER_CODE = tt.ledger_code AND TRUNC(TT.EFF_DATE) BETWEEN TRUNC(I_START_DATE) AND TRUNC(I_END_DATE); \n    -- ALL LEAFS INSERTED, EXCEPT natije, aqlAm bAlAye dArAyi, aqlAm bAlAye bedehi\n    -- THEY WILL BE UPDATED BEFORE AT THE FINAL STAGE\n    COMMIT;\n    \n    -- OBTAIN DEPTH OF TREE FOR FOLLOWING LOOP\n    SELECT NVL(MAX(DEPTH),0) INTO V_MAX_LEVEL\n    FROM PRAGG.TBL_IDPS_TREE;\n    \n    -- LOOP FOR AGGREAGATION OF LEDGER\n    FOR I IN REVERSE 1..V_MAX_LEVEL\n    LOOP\n      INSERT INTO PRAGG.TBL_IDPS_TREE_AGG(LEDGER_CODE, REF_BRANCH, PARENT_CODE, BALANCE, NAME, DEPTH, REF_CUR_ID, DEBT_FLOW, CRE_FLOW, CUR_BALANCE, EFF_DATE)\n      with tmp_AGG as(\n      select /*+ parallel(auto) */ PARENT_CODE ID, REF_BRANCH, trunc(EFF_DATE) eff_date, sum(balance) balance\n      from TBL_IDPS_TREE_AGG\n      where depth = I\n      group by PARENT_CODE, REF_BRANCH, trunc(EFF_DATE))\n      select /*+ parallel(auto) */ distinct t.ID, T.REF_BRANCH, tt.PARENT_CODE, t.balance*tt.sign, tt.name, tt.depth, NULL, NULL, NULL, NULL, TRUNC(T.EFF_DATE)\n      from TMP_AGG t, TBL_IDPS_TREE tt\n      where t.ID = tt.LEDGER_CODE;\n      COMMIT;\n    END LOOP;\n  \n    -- UPDATE SOME LEDGER CODE BASED ON EXCEL FILE FORMULA\n    -- AGHLAM BALAYE KHAT DARAYI VA BEDEHI\n    SELECT NVL(SUM(BALANCE),0) INTO V_AGHLAM_DAR_RAH\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE IN (10115020000, 10125020000);\n    \n    SELECT NVL(SUM(BALANCE),0) INTO V_MOVAZENE\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE IN (20214110000, 10215190000);\n    \n    -- dArAyi\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, EFF_DATE, REF_BRANCH, BALANCE, DEPTH)\n    SELECT /*+ parallel(auto) */ 7, 'جمع اقلام بالاي خط دارائي ها', EFF_DATE, REF_BRANCH, SUM(BALANCE)+(CASE WHEN V_MOVAZENE \u003c 0 THEN V_MOVAZENE ELSE 0 END) + (CASE WHEN V_AGHLAM_DAR_RAH \u003c 0 THEN V_AGHLAM_DAR_RAH ELSE 0 END), 1\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE = 1 \n    GROUP BY EFF_DATE, REF_BRANCH;\n    -- bedehi\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, EFF_DATE, REF_BRANCH, BALANCE, DEPTH)\n    SELECT /*+ parallel(auto) */ 5, 'جمع اقلام بالاي خط بدهي ها', EFF_DATE, REF_BRANCH, SUM(BALANCE)+(CASE WHEN V_MOVAZENE \u003e 0 THEN V_MOVAZENE ELSE 0 END) + (CASE WHEN V_AGHLAM_DAR_RAH \u003e 0 THEN V_AGHLAM_DAR_RAH ELSE 0 END), 1\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE = 2 \n    GROUP BY EFF_DATE, REF_BRANCH;\n    -- natije\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, EFF_DATE, REF_BRANCH, BALANCE, DEPTH)\n    SELECT /*+ parallel(auto) */ 9, 'نتيجه', EFF_DATE, REF_BRANCH, SUM(BALANCE), 1\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE IN (1, 8)\n    GROUP BY EFF_DATE, REF_BRANCH;\n    -- DELETE LEAFS WITHOUT NAME\n    DELETE FROM tbl_idps_tree_agg\n    WHERE NAME IS NULL AND ledger_code NOT IN (SELECT DISTINCT nvl((parent_code),0) FROM tbl_idps_tree);\n    \n END PRC_TREE_AGG;\n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_REF_BRANCH_ID      IN VARCHAR2\n ,INPAR_FIRST              IN VARCHAR2\n ,INPAR_END                IN VARCHAR2\n ,LENGTH                   IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n ) AS\n  VAR_FIRST    DATE;\n  VAR_REPORT   NUMBER;\n  VAR_END      DATE;\n  VAR_ALAN     DATE;\n  VAR_I        NUMBER;\n BEGIN\n  VAR_FIRST   := TO_DATE(INPAR_FIRST,'yyyy/mm/dd','nls_calendar=persian');\n  VAR_END     := TO_DATE(INPAR_END,'yyyy/mm/dd','nls_calendar=persian');\n  VAR_I       := 1;\n  \n  --RESERVE ID FOR NEW REPORT ON TBL_REPORT TABLE\n  \n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n  \n    OUTPAR_ID := TBL_REPORT_SEQ1.NEXTVAL;\n\n   INSERT INTO TBL_REPORT (\n   ID,\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ,FIRST_DATE\n   ,LAST_DATE\n   ,REF_BRN_PROFILE\n   ,BAZEH\n   ) VALUES (\n   OUTPAR_ID,\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'idps'\n   ,INPAR_TYPE\n   ,VAR_FIRST\n   ,VAR_END\n   ,INPAR_REF_BRANCH_ID\n   ,LENGTH\n   );\n\n   COMMIT;\n--   SELECT\n--    ID\n--   INTO\n--    OUTPAR_ID\n--   FROM TBL_REPORT\n--   WHERE CREATE_DATE   = (\n--      SELECT\n--       MAX(CREATE_DATE)\n--      FROM TBL_REPORT\n--     )\n--    AND\n--     ID            = (\n--      SELECT\n--       MAX(ID)\n--      FROM TBL_REPORT\n--     );\n     \n  /*=============*/\n\n   VAR_ALAN   := VAR_FIRST;\n   WHILE ( VAR_ALAN \u003c VAR_END ) LOOP\n    INSERT INTO TBL_IDPS_REP_PROFILE_DETAIL (\n     NAME\n    ,DES\n    ,PERIOD_NAME\n    ,REF_BRANCH_ID\n    ,REF_REPORT\n    ,FIRST\n    ,END\n    ) VALUES (\n     INPAR_NAME\n    ,INPAR_DES\n    ,VAR_I\n    ,INPAR_REF_BRANCH_ID\n    ,OUTPAR_ID\n    ,VAR_ALAN\n    ,CASE\n      WHEN VAR_ALAN + LENGTH \u003e VAR_END THEN VAR_END\n      ELSE VAR_ALAN + LENGTH\n     END\n    );\n\n    VAR_ALAN   := VAR_ALAN + LENGTH;\n    VAR_I      := VAR_I + 1;\n    COMMIT;\n    DBMS_OUTPUT.PUT_LINE(VAR_FIRST);\n   END LOOP;\n\n  /*outpar_id := var_report;*/\n  \n  /*==============*/\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,FIRST_DATE = VAR_FIRST\n    ,LAST_DATE = VAR_END\n    ,REF_BRN_PROFILE = INPAR_REF_BRANCH_ID\n    ,BAZEH = LENGTH\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n   \n   /*================*/\n   DELETE FROM TBL_IDPS_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n   COMMIT;\n/*  VAR_FIRST      :=TO_DATE(inpar_first);*/\n/*  VAR_END        :=TO_DATE(inpar_end);*/\n   VAR_I      := 1;\n   VAR_ALAN   := VAR_FIRST;\n   WHILE ( VAR_ALAN \u003c VAR_END ) LOOP\n    INSERT INTO TBL_IDPS_REP_PROFILE_DETAIL (\n     NAME\n    ,DES\n    ,PERIOD_NAME\n    ,REF_BRANCH_ID\n    ,REF_REPORT\n    ,FIRST\n    ,END\n    ) VALUES (\n     INPAR_NAME\n    ,INPAR_DES\n    ,VAR_I\n    ,INPAR_REF_BRANCH_ID\n    ,INPAR_ID\n    ,VAR_ALAN\n    ,CASE\n      WHEN VAR_ALAN + LENGTH \u003e VAR_END THEN VAR_END\n      ELSE VAR_ALAN + LENGTH\n     END\n    );\n\n    VAR_ALAN   := VAR_ALAN + LENGTH;\n    VAR_I      := VAR_I + 1;\n    COMMIT;\n    DBMS_OUTPUT.PUT_LINE(VAR_FIRST);\n   END LOOP;\n\n   /*================*/\n\n  END IF;\n  \n  update tbl_report set  H_ID = id where upper(CATEGORY) ='IDPS' AND H_ID IS NULL;\n  commit;\n--  \n--  EXCEPTION \n--    WHEN OTHERS THEN\n--      RAISE;\n END PRC_IDPS_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT /*+ PARALLEL(AUTO) */ ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\n   ,to_char(to_date(first_date),''yyyy/mm/dd'',''nls_calendar=persian'') as \"startDate\"\n  ,to_char(to_date(last_date),''yyyy/mm/dd'',''nls_calendar=persian'') as \"endDate\"\n  ,bazeh as \"duration\",ref_brn_profile as \"branchProfile\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''IDPS'' order by id';\n  RETURN VAR2;\n END FNC_IDPS_GET_REPORT_INFO;\n \n  \n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_FINAL_RESULT (\n  INPAR_REPreq   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN CLOB AS\n  VAR_BRANCH    NUMBER;\n  VAR           CLOB;\n  VAR_TIMING    CLOB;\n  VAR_TIMING2   CLOB;\n  var_report number;\n BEGIN\n \n select REF_REPORT_ID into var_report from TBL_REPREQ where ID = INPAR_REPreq;\n \n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   VAR_BRANCH\n  FROM TBL_REPORT\n  WHERE ID   = var_report;\n\n  SELECT\n   WMSYS.WM_CONCAT(PERIOD_NAME ||\n   ' as \"x' ||\n   PERIOD_NAME ||\n   '\"')\n  INTO\n   VAR_TIMING\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = var_report;\n\n  SELECT\n   WMSYS.WM_CONCAT('\"x' ||\n   PERIOD_NAME ||\n   '\"')\n  INTO\n   VAR_TIMING2\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = var_report;\n\n var:= ' select /*+ PARALLEL(AUTO) */  \"parent\",\"level\",\"id\",\"name\",' ||\n   VAR_TIMING2 ||\n   ' from(select /*+ PARALLEL(AUTO) */  \"parent\",\"level\",\"id\",\"name\",' ||\n   VAR_TIMING2 ||\n   ' from(\nSELECT /*+ PARALLEL(AUTO) */ \n \nID as \"id\"\n ,NAME as \"name\"\n ,PARENT as \"parent\"\n ,DEPTH as \"level\"\n ,VALUE as \"value\"\n ,PERIOD as \"period\"\n ,TYPE\n FROM TBL_IDPS_REP_VALUE\n  where REF_REPREQ = '||INPAR_REPreq||' and type = '||INPAR_type||' \n)\n PIVOT (max(\"value\") for \"period\" in (' ||\n   VAR_TIMING ||\n   '))  order by \"id\",\"level\") start with \"level\" = 1\n connect by PRIOR \"id\"= \"parent\"';\n\n  RETURN VAR;\n END FNC_IDPS_FINAL_RESULT;\n\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_DETAIL_NAME ( INPAR_rep_req IN VARCHAR2 ) RETURN VARCHAR2\n  AS\n  var_report NUMBER;\n BEGIN\n select ref_report_id into var_report from TBL_REPREQ where id = INPAR_rep_req;\n  RETURN 'select ''x''||PERIOD_NAME as \"value\",to_char(to_date(END,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') \"header\"  from TBL_IDPS_REP_PROFILE_DETAIL where ref_report='|| var_report || ' order by to_number(PERIOD_NAME)\n';\n END FNC_IDPS_GET_DETAIL_NAME;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_REP_VALUE ( INPAR_ID IN VARCHAR2 ) AS\n  VAR_BRANCH       NUMBER;\n  VAR_REP_REQ_ID   NUMBER;\n  VAR              VARCHAR2(32000);\n  var_first        VARCHAR2(32000);\n  var_end          VARCHAR2(32000);\n BEGIN\n \n \n \n \n  \n \n \n  SELECT\n MAX(ID) into  VAR_BRANCH\nFROM TBL_PROFILE\nWHERE H_ID   = (\n  SELECT\n   REF_BRN_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_ID\n );\n\n\n\n  select to_date(first_date) into var_first from tbl_report where id =  INPAR_ID;\n  select to_date(last_date) into var_end from tbl_report where id =  INPAR_ID;\n\n\n   PRC_TREE_AGG (var_first, var_end);\n  \n \n \n \n \n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REP_REQ_ID\n  FROM TBL_REPREQ;\n  EXECUTE IMMEDIATE   ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n SUM((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 1\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n-------------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------------\n\nVAR :=' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n SUM((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 1\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n  \n  \n  \n  \n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n round(AVG((BALANCE)),2) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 2\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\nMAX((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 3\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n MIN((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 4\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\nSUM((DEBT_FLOW)) as \"value\",\nMAX(A.PERIOD_NAME) as \"period\",\n5\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n  SUM((CRE_FLOW)) as \"value\",\nMAX(A.PERIOD_NAME) as \"period\",\n6\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  COMMIT;\n END PRC_IDPS_REP_VALUE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_IDPS;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_IDPS\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi and Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_IDPS_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_REF_BRANCH_ID      IN VARCHAR2\n ,INPAR_FIRST              IN VARCHAR2\n ,INPAR_END                IN VARCHAR2\n ,LENGTH                   IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_DELETE_REPORT (\n  INPAR_rep_req   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_TREE_AGG (\n  I_START_DATE   IN DATE,\n  I_END_DATE IN DATE\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_FINAL_RESULT (\n  INPAR_REPreq   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN CLOB;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION fnc_idps_get_detail_name(\n  INPAR_rep_req IN VARCHAR2 \n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_idps_rep_value (\n  INPAR_ID   IN VARCHAR2\n );\n  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_IDPS;"},{"Name":"PKG_IDPS","ObjectID":281721,"Digest":"907c9916b4b77ffbfa12f8b1edf028b8231f6b7e00d56a9d849e5b101e881766","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_IDPS\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi and Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_IDPS_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_REF_BRANCH_ID      IN VARCHAR2\n ,INPAR_FIRST              IN VARCHAR2\n ,INPAR_END                IN VARCHAR2\n ,LENGTH                   IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_DELETE_REPORT (\n  INPAR_rep_req   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_TREE_AGG (\n  I_START_DATE   IN DATE,\n  I_END_DATE IN DATE\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_FINAL_RESULT (\n  INPAR_REPreq   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN CLOB;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION fnc_idps_get_detail_name(\n  INPAR_rep_req IN VARCHAR2 \n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_idps_rep_value (\n  INPAR_ID   IN VARCHAR2\n );\n  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_IDPS;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_IDPS\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_DELETE_REPORT (\n  INPAR_rep_req   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n -- var_report number;\n BEGIN\n \n  -- select ref_report_id into var_report from TBL_REPREQ where ID = INPAR_REP_REQ; \n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_rep_req;\n\n  COMMIT;\n  DELETE FROM TBL_IDPS_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_rep_req;\n\n  COMMIT;\n END PRC_IDPS_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_TREE_AGG (\n  I_START_DATE   IN DATE,\n  I_END_DATE IN DATE\n ) AS\n /*\n  @AUTHOR MYM\n  @DATE 1397-10-22\n  @WHAT READ LEDGER AND CREATE AGGREGATION TREE\n */\n v_MAX_LEVEL NUMBER;\n V_AGHLAM_DAR_RAH NUMBER;\n V_MOVAZENE NUMBER;\n \n BEGIN\n    -- TRUNCATE LAST DATA\n    EXECUTE IMMEDIATE 'TRUNCATE TABLE TBL_IDPS_TREE_AGG';\n    \n    -- INSERTING ALL LEAF'S VALUES, BASED ON IDPS_TREE\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, PARENT_CODE, BALANCE, DEPTH, REF_BRANCH, EFF_DATE)\n    select /*+ parallel(auto) */ DISTINCT t.LEDGER_CODE, Tt.NAME, t.PARENT_CODE, TT.balance*T.sign, t.depth, TT.REF_BRANCH, TRUNC(TT.EFF_DATE)\n    from TBL_IDPS_TREE t, TBL_LEDGER_BRANCH tt\n    where t.leaf = 1 and t.LEDGER_CODE = tt.ledger_code AND TRUNC(TT.EFF_DATE) BETWEEN TRUNC(I_START_DATE) AND TRUNC(I_END_DATE); \n    -- ALL LEAFS INSERTED, EXCEPT natije, aqlAm bAlAye dArAyi, aqlAm bAlAye bedehi\n    -- THEY WILL BE UPDATED BEFORE AT THE FINAL STAGE\n    COMMIT;\n    \n    -- OBTAIN DEPTH OF TREE FOR FOLLOWING LOOP\n    SELECT NVL(MAX(DEPTH),0) INTO V_MAX_LEVEL\n    FROM PRAGG.TBL_IDPS_TREE;\n    \n    -- LOOP FOR AGGREAGATION OF LEDGER\n    FOR I IN REVERSE 1..V_MAX_LEVEL\n    LOOP\n      INSERT INTO PRAGG.TBL_IDPS_TREE_AGG(LEDGER_CODE, REF_BRANCH, PARENT_CODE, BALANCE, NAME, DEPTH, REF_CUR_ID, DEBT_FLOW, CRE_FLOW, CUR_BALANCE, EFF_DATE)\n      with tmp_AGG as(\n      select /*+ parallel(auto) */ PARENT_CODE ID, REF_BRANCH, trunc(EFF_DATE) eff_date, sum(balance) balance\n      from TBL_IDPS_TREE_AGG\n      where depth = I\n      group by PARENT_CODE, REF_BRANCH, trunc(EFF_DATE))\n      select /*+ parallel(auto) */ distinct t.ID, T.REF_BRANCH, tt.PARENT_CODE, t.balance*tt.sign, tt.name, tt.depth, NULL, NULL, NULL, NULL, TRUNC(T.EFF_DATE)\n      from TMP_AGG t, TBL_IDPS_TREE tt\n      where t.ID = tt.LEDGER_CODE;\n      COMMIT;\n    END LOOP;\n  \n    -- UPDATE SOME LEDGER CODE BASED ON EXCEL FILE FORMULA\n    -- AGHLAM BALAYE KHAT DARAYI VA BEDEHI\n    SELECT NVL(SUM(BALANCE),0) INTO V_AGHLAM_DAR_RAH\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE IN (10115020000, 10125020000);\n    \n    SELECT NVL(SUM(BALANCE),0) INTO V_MOVAZENE\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE IN (20214110000, 10215190000);\n    \n    -- dArAyi\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, EFF_DATE, REF_BRANCH, BALANCE, DEPTH)\n    SELECT /*+ parallel(auto) */ 7, 'جمع اقلام بالاي خط دارائي ها', EFF_DATE, REF_BRANCH, SUM(BALANCE)+(CASE WHEN V_MOVAZENE \u003c 0 THEN V_MOVAZENE ELSE 0 END) + (CASE WHEN V_AGHLAM_DAR_RAH \u003c 0 THEN V_AGHLAM_DAR_RAH ELSE 0 END), 1\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE = 1 \n    GROUP BY EFF_DATE, REF_BRANCH;\n    -- bedehi\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, EFF_DATE, REF_BRANCH, BALANCE, DEPTH)\n    SELECT /*+ parallel(auto) */ 5, 'جمع اقلام بالاي خط بدهي ها', EFF_DATE, REF_BRANCH, SUM(BALANCE)+(CASE WHEN V_MOVAZENE \u003e 0 THEN V_MOVAZENE ELSE 0 END) + (CASE WHEN V_AGHLAM_DAR_RAH \u003e 0 THEN V_AGHLAM_DAR_RAH ELSE 0 END), 1\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE = 2 \n    GROUP BY EFF_DATE, REF_BRANCH;\n    -- natije\n    INSERT INTO TBL_IDPS_TREE_AGG(LEDGER_CODE, NAME, EFF_DATE, REF_BRANCH, BALANCE, DEPTH)\n    SELECT /*+ parallel(auto) */ 9, 'نتيجه', EFF_DATE, REF_BRANCH, SUM(BALANCE), 1\n    FROM TBL_IDPS_TREE_AGG\n    WHERE LEDGER_CODE IN (1, 8)\n    GROUP BY EFF_DATE, REF_BRANCH;\n    -- DELETE LEAFS WITHOUT NAME\n    DELETE FROM tbl_idps_tree_agg\n    WHERE NAME IS NULL AND ledger_code NOT IN (SELECT DISTINCT nvl((parent_code),0) FROM tbl_idps_tree);\n    \n END PRC_TREE_AGG;\n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_REF_BRANCH_ID      IN VARCHAR2\n ,INPAR_FIRST              IN VARCHAR2\n ,INPAR_END                IN VARCHAR2\n ,LENGTH                   IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n ) AS\n  VAR_FIRST    DATE;\n  VAR_REPORT   NUMBER;\n  VAR_END      DATE;\n  VAR_ALAN     DATE;\n  VAR_I        NUMBER;\n BEGIN\n  VAR_FIRST   := TO_DATE(INPAR_FIRST,'yyyy/mm/dd','nls_calendar=persian');\n  VAR_END     := TO_DATE(INPAR_END,'yyyy/mm/dd','nls_calendar=persian');\n  VAR_I       := 1;\n  \n  --RESERVE ID FOR NEW REPORT ON TBL_REPORT TABLE\n  \n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n  \n    OUTPAR_ID := TBL_REPORT_SEQ1.NEXTVAL;\n\n   INSERT INTO TBL_REPORT (\n   ID,\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ,FIRST_DATE\n   ,LAST_DATE\n   ,REF_BRN_PROFILE\n   ,BAZEH\n   ) VALUES (\n   OUTPAR_ID,\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'idps'\n   ,INPAR_TYPE\n   ,VAR_FIRST\n   ,VAR_END\n   ,INPAR_REF_BRANCH_ID\n   ,LENGTH\n   );\n\n   COMMIT;\n--   SELECT\n--    ID\n--   INTO\n--    OUTPAR_ID\n--   FROM TBL_REPORT\n--   WHERE CREATE_DATE   = (\n--      SELECT\n--       MAX(CREATE_DATE)\n--      FROM TBL_REPORT\n--     )\n--    AND\n--     ID            = (\n--      SELECT\n--       MAX(ID)\n--      FROM TBL_REPORT\n--     );\n     \n  /*=============*/\n\n   VAR_ALAN   := VAR_FIRST;\n   WHILE ( VAR_ALAN \u003c VAR_END ) LOOP\n    INSERT INTO TBL_IDPS_REP_PROFILE_DETAIL (\n     NAME\n    ,DES\n    ,PERIOD_NAME\n    ,REF_BRANCH_ID\n    ,REF_REPORT\n    ,FIRST\n    ,END\n    ) VALUES (\n     INPAR_NAME\n    ,INPAR_DES\n    ,VAR_I\n    ,INPAR_REF_BRANCH_ID\n    ,OUTPAR_ID\n    ,VAR_ALAN\n    ,CASE\n      WHEN VAR_ALAN + LENGTH \u003e VAR_END THEN VAR_END\n      ELSE VAR_ALAN + LENGTH\n     END\n    );\n\n    VAR_ALAN   := VAR_ALAN + LENGTH;\n    VAR_I      := VAR_I + 1;\n    COMMIT;\n    DBMS_OUTPUT.PUT_LINE(VAR_FIRST);\n   END LOOP;\n\n  /*outpar_id := var_report;*/\n  \n  /*==============*/\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,FIRST_DATE = VAR_FIRST\n    ,LAST_DATE = VAR_END\n    ,REF_BRN_PROFILE = INPAR_REF_BRANCH_ID\n    ,BAZEH = LENGTH\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n   \n   /*================*/\n   DELETE FROM TBL_IDPS_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n   COMMIT;\n/*  VAR_FIRST      :=TO_DATE(inpar_first);*/\n/*  VAR_END        :=TO_DATE(inpar_end);*/\n   VAR_I      := 1;\n   VAR_ALAN   := VAR_FIRST;\n   WHILE ( VAR_ALAN \u003c VAR_END ) LOOP\n    INSERT INTO TBL_IDPS_REP_PROFILE_DETAIL (\n     NAME\n    ,DES\n    ,PERIOD_NAME\n    ,REF_BRANCH_ID\n    ,REF_REPORT\n    ,FIRST\n    ,END\n    ) VALUES (\n     INPAR_NAME\n    ,INPAR_DES\n    ,VAR_I\n    ,INPAR_REF_BRANCH_ID\n    ,INPAR_ID\n    ,VAR_ALAN\n    ,CASE\n      WHEN VAR_ALAN + LENGTH \u003e VAR_END THEN VAR_END\n      ELSE VAR_ALAN + LENGTH\n     END\n    );\n\n    VAR_ALAN   := VAR_ALAN + LENGTH;\n    VAR_I      := VAR_I + 1;\n    COMMIT;\n    DBMS_OUTPUT.PUT_LINE(VAR_FIRST);\n   END LOOP;\n\n   /*================*/\n\n  END IF;\n  \n  update tbl_report set  H_ID = id where upper(CATEGORY) ='IDPS' AND H_ID IS NULL;\n  commit;\n--  \n--  EXCEPTION \n--    WHEN OTHERS THEN\n--      RAISE;\n END PRC_IDPS_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT /*+ PARALLEL(AUTO) */ ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\n   ,to_char(to_date(first_date),''yyyy/mm/dd'',''nls_calendar=persian'') as \"startDate\"\n  ,to_char(to_date(last_date),''yyyy/mm/dd'',''nls_calendar=persian'') as \"endDate\"\n  ,bazeh as \"duration\",ref_brn_profile as \"branchProfile\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''IDPS'' order by id';\n  RETURN VAR2;\n END FNC_IDPS_GET_REPORT_INFO;\n \n  \n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_FINAL_RESULT (\n  INPAR_REPreq   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN CLOB AS\n  VAR_BRANCH    NUMBER;\n  VAR           CLOB;\n  VAR_TIMING    CLOB;\n  VAR_TIMING2   CLOB;\n  var_report number;\n BEGIN\n \n select REF_REPORT_ID into var_report from TBL_REPREQ where ID = INPAR_REPreq;\n \n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   VAR_BRANCH\n  FROM TBL_REPORT\n  WHERE ID   = var_report;\n\n  SELECT\n   WMSYS.WM_CONCAT(PERIOD_NAME ||\n   ' as \"x' ||\n   PERIOD_NAME ||\n   '\"')\n  INTO\n   VAR_TIMING\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = var_report;\n\n  SELECT\n   WMSYS.WM_CONCAT('\"x' ||\n   PERIOD_NAME ||\n   '\"')\n  INTO\n   VAR_TIMING2\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = var_report;\n\n var:= ' select /*+ PARALLEL(AUTO) */  \"parent\",\"level\",\"id\",\"name\",' ||\n   VAR_TIMING2 ||\n   ' from(select /*+ PARALLEL(AUTO) */  \"parent\",\"level\",\"id\",\"name\",' ||\n   VAR_TIMING2 ||\n   ' from(\nSELECT /*+ PARALLEL(AUTO) */ \n \nID as \"id\"\n ,NAME as \"name\"\n ,PARENT as \"parent\"\n ,DEPTH as \"level\"\n ,VALUE as \"value\"\n ,PERIOD as \"period\"\n ,TYPE\n FROM TBL_IDPS_REP_VALUE\n  where REF_REPREQ = '||INPAR_REPreq||' and type = '||INPAR_type||' \n)\n PIVOT (max(\"value\") for \"period\" in (' ||\n   VAR_TIMING ||\n   '))  order by \"id\",\"level\") start with \"level\" = 1\n connect by PRIOR \"id\"= \"parent\"';\n\n  RETURN VAR;\n END FNC_IDPS_FINAL_RESULT;\n\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_DETAIL_NAME ( INPAR_rep_req IN VARCHAR2 ) RETURN VARCHAR2\n  AS\n  var_report NUMBER;\n BEGIN\n select ref_report_id into var_report from TBL_REPREQ where id = INPAR_rep_req;\n  RETURN 'select ''x''||PERIOD_NAME as \"value\",to_char(to_date(END,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') \"header\"  from TBL_IDPS_REP_PROFILE_DETAIL where ref_report='|| var_report || ' order by to_number(PERIOD_NAME)\n';\n END FNC_IDPS_GET_DETAIL_NAME;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_REP_VALUE ( INPAR_ID IN VARCHAR2 ) AS\n  VAR_BRANCH       NUMBER;\n  VAR_REP_REQ_ID   NUMBER;\n  VAR              VARCHAR2(32000);\n  var_first        VARCHAR2(32000);\n  var_end          VARCHAR2(32000);\n BEGIN\n \n \n \n \n  \n \n \n  SELECT\n MAX(ID) into  VAR_BRANCH\nFROM TBL_PROFILE\nWHERE H_ID   = (\n  SELECT\n   REF_BRN_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_ID\n );\n\n\n\n  select to_date(first_date) into var_first from tbl_report where id =  INPAR_ID;\n  select to_date(last_date) into var_end from tbl_report where id =  INPAR_ID;\n\n\n   PRC_TREE_AGG (var_first, var_end);\n  \n \n \n \n \n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REP_REQ_ID\n  FROM TBL_REPREQ;\n  EXECUTE IMMEDIATE   ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n SUM((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 1\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n-------------------------------------------------------------------------------------------------------\n\n-------------------------------------------------------------------------------------------------------\n\nVAR :=' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n SUM((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 1\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n  \n  \n  \n  \n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n round(AVG((BALANCE)),2) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 2\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\nMAX((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 3\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n MIN((BALANCE)) as \"value\",\n MAX(A.PERIOD_NAME) as \"period\",\n 4\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\nSUM((DEBT_FLOW)) as \"value\",\nMAX(A.PERIOD_NAME) as \"period\",\n5\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  EXECUTE IMMEDIATE ' BEGIN INSERT /*+ PARALLEL(AUTO) */  INTO TBL_IDPS_REP_VALUE (\n REF_REPREQ\n ,ID\n ,NAME\n ,PARENT\n ,DEPTH\n ,VALUE\n ,PERIOD\n ,TYPE\n) \n\nSELECT /*+ PARALLEL(AUTO) */ \n' ||\n  VAR_REP_REQ_ID ||\n  ',\n LEDGER_CODE AS \"id\",\n  max(name) as \"name\",\n max(parent_code) as \"parent\",\n max(depth) as \"level\",\n  SUM((CRE_FLOW)) as \"value\",\nMAX(A.PERIOD_NAME) as \"period\",\n6\nFROM TBL_IDPS_TREE_AGG,(\n  SELECT /*+ PARALLEL(AUTO) */ \n   TBL_IDPS_REP_PROFILE_DETAIL.END,\n   PERIOD_NAME\n  FROM TBL_IDPS_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = ' ||\n  INPAR_ID ||\n  '\n )A\nWHERE EFF_DATE =A.END  AND REF_BRANCH IN (  ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH) ||\n  ' ) GROUP BY LEDGER_CODE,A.END; end;';\n\n  COMMIT;\n END PRC_IDPS_REP_VALUE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_IDPS;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_IDPS\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi and Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_IDPS_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_REF_BRANCH_ID      IN VARCHAR2\n ,INPAR_FIRST              IN VARCHAR2\n ,INPAR_END                IN VARCHAR2\n ,LENGTH                   IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_IDPS_DELETE_REPORT (\n  INPAR_rep_req   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_TREE_AGG (\n  I_START_DATE   IN DATE,\n  I_END_DATE IN DATE\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_IDPS_FINAL_RESULT (\n  INPAR_REPreq   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN CLOB;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION fnc_idps_get_detail_name(\n  INPAR_rep_req IN VARCHAR2 \n) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_idps_rep_value (\n  INPAR_ID   IN VARCHAR2\n );\n  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_IDPS;"},{"Name":"PKG_LEDGER_SENS","ObjectID":281966,"Digest":"47f1a8a5e6e9f26312a74f8e1b29b819b4958f78098c28342f771a50e7c672d0","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_SENS\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_ledger_sens_profile_report(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      inpar_ledger_profile   IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      INPAR_TYPE             IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_query_date(\n      VAR VARCHAR2 )\n    RETURN VARCHAR2;\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_report(\n      inpar_report IN VARCHAR2 ,\n      inpar_date           IN VARCHAR2 \n   --   INPAR_CURRENCY       IN VARCHAR2\n   )\n    RETURN VARCHAR2;\n  /*=============================================================*/\nEND pkg_ledger_sens;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LEDGER_SENS\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_ledger_sens_profile_report(\n  inpar_name               in varchar2\n ,inpar_des                in varchar2\n ,inpar_ref_user           in varchar2\n ,inpar_status             in varchar2\n ,inpar_ledger_profile     in varchar2\n ,inpar_insert_or_update   in varchar2\n ,inpar_id                 in varchar2\n ,inpar_type               in varchar2\n ,outpar_id                out varchar2\n ) as\n  begin\n    IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_LEDGER_PROFIEL\n   ,TYPE\n   ,CATEGORY\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,inpar_ledger_profile\n   ,INPAR_TYPE\n   ,'ledgerSens'\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n     \n     update tbl_report set h_id =OUTPAR_ID\n     where id = OUTPAR_ID;\n     commit;\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,REF_LEDGER_PROFIEL = inpar_ledger_profile\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  end prc_ledger_sens_profile_report;\n/*=============================================================*/\nfunction fnc_ledger_sens_get_query_date (var varchar2 )return varchar2 as\n VAR_QUERY VARCHAR2(3000);\n  begin\n   VAR_QUERY := VAR;\n  VAR_QUERY := 'SELECT  WMSYS.Wm_Concat(to_char( \"date\",''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\nFROM  (SELECT distinct \nEFF_DATE \"date\"\nFROM TBL_LEDGER_ARCHIVE)';\n  RETURN VAR_QUERY;\n  end fnc_ledger_sens_get_query_date;\n/*=============================================================*/\nfunction fnc_ledger_sens_get_report(\n    inpar_report in varchar2 ,\n    inpar_date           in varchar2 \n    --inpar_currency       in varchar2\n    )\n  return varchar2 as\n  var_ledger_profile number;\n  var_max_ledger_profile number;\n  \n  VAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\n\n  begin\n  select REF_LEDGER_PROFIEL into var_ledger_profile  from TBL_REPORT where ID = inpar_report;\n  select max(id) into var_max_ledger_profile from TBL_LEDGER_PROFILE where H_ID = var_ledger_profile;\n RETURN 'select  det.CODE as \"id\" ,max(det.REF_LEDGER_PROFILE) as \"ledgerProfile\",max(det.NAME) as \"name\",max(le.eff_date) as \"date\",\nmax(det.PARENT_CODE) as \"parent\", max(det.DEPTH) as \"level\",sum(le.BALANCE) as \"balance\"\nfrom TBL_LEDGER_PROFILE_DETAIL det left JOIN TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') le\non det.code = le.LEDGER_CODE\nwhere det.REF_LEDGER_PROFILE = '||var_max_ledger_profile||' and trunc(le.eff_date) = to_date('''||INPAR_DATE||''',''yyyy-mm-dd'') \ngroup by det.code\norder by det.code';\n  end fnc_ledger_sens_get_report;\n\nend pkg_ledger_sens;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_SENS\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_ledger_sens_profile_report(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      inpar_ledger_profile   IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      INPAR_TYPE             IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_query_date(\n      VAR VARCHAR2 )\n    RETURN VARCHAR2;\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_report(\n      inpar_report IN VARCHAR2 ,\n      inpar_date           IN VARCHAR2 \n   --   INPAR_CURRENCY       IN VARCHAR2\n   )\n    RETURN VARCHAR2;\n  /*=============================================================*/\nEND pkg_ledger_sens;"},{"Name":"PKG_LEDGER_SENS","ObjectID":281967,"Digest":"47f1a8a5e6e9f26312a74f8e1b29b819b4958f78098c28342f771a50e7c672d0","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_SENS\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_ledger_sens_profile_report(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      inpar_ledger_profile   IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      INPAR_TYPE             IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_query_date(\n      VAR VARCHAR2 )\n    RETURN VARCHAR2;\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_report(\n      inpar_report IN VARCHAR2 ,\n      inpar_date           IN VARCHAR2 \n   --   INPAR_CURRENCY       IN VARCHAR2\n   )\n    RETURN VARCHAR2;\n  /*=============================================================*/\nEND pkg_ledger_sens;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LEDGER_SENS\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_ledger_sens_profile_report(\n  inpar_name               in varchar2\n ,inpar_des                in varchar2\n ,inpar_ref_user           in varchar2\n ,inpar_status             in varchar2\n ,inpar_ledger_profile     in varchar2\n ,inpar_insert_or_update   in varchar2\n ,inpar_id                 in varchar2\n ,inpar_type               in varchar2\n ,outpar_id                out varchar2\n ) as\n  begin\n    IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_LEDGER_PROFIEL\n   ,TYPE\n   ,CATEGORY\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,inpar_ledger_profile\n   ,INPAR_TYPE\n   ,'ledgerSens'\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n     \n     update tbl_report set h_id =OUTPAR_ID\n     where id = OUTPAR_ID;\n     commit;\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,REF_LEDGER_PROFIEL = inpar_ledger_profile\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  end prc_ledger_sens_profile_report;\n/*=============================================================*/\nfunction fnc_ledger_sens_get_query_date (var varchar2 )return varchar2 as\n VAR_QUERY VARCHAR2(3000);\n  begin\n   VAR_QUERY := VAR;\n  VAR_QUERY := 'SELECT  WMSYS.Wm_Concat(to_char( \"date\",''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\nFROM  (SELECT distinct \nEFF_DATE \"date\"\nFROM TBL_LEDGER_ARCHIVE)';\n  RETURN VAR_QUERY;\n  end fnc_ledger_sens_get_query_date;\n/*=============================================================*/\nfunction fnc_ledger_sens_get_report(\n    inpar_report in varchar2 ,\n    inpar_date           in varchar2 \n    --inpar_currency       in varchar2\n    )\n  return varchar2 as\n  var_ledger_profile number;\n  var_max_ledger_profile number;\n  \n  VAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\n\n  begin\n  select REF_LEDGER_PROFIEL into var_ledger_profile  from TBL_REPORT where ID = inpar_report;\n  select max(id) into var_max_ledger_profile from TBL_LEDGER_PROFILE where H_ID = var_ledger_profile;\n RETURN 'select  det.CODE as \"id\" ,max(det.REF_LEDGER_PROFILE) as \"ledgerProfile\",max(det.NAME) as \"name\",max(le.eff_date) as \"date\",\nmax(det.PARENT_CODE) as \"parent\", max(det.DEPTH) as \"level\",sum(le.BALANCE) as \"balance\"\nfrom TBL_LEDGER_PROFILE_DETAIL det left JOIN TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') le\non det.code = le.LEDGER_CODE\nwhere det.REF_LEDGER_PROFILE = '||var_max_ledger_profile||' and trunc(le.eff_date) = to_date('''||INPAR_DATE||''',''yyyy-mm-dd'') \ngroup by det.code\norder by det.code';\n  end fnc_ledger_sens_get_report;\n\nend pkg_ledger_sens;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LEDGER_SENS\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_ledger_sens_profile_report(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      inpar_ledger_profile   IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      INPAR_TYPE             IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_query_date(\n      VAR VARCHAR2 )\n    RETURN VARCHAR2;\n  /*=============================================================*/\n  FUNCTION fnc_ledger_sens_get_report(\n      inpar_report IN VARCHAR2 ,\n      inpar_date           IN VARCHAR2 \n   --   INPAR_CURRENCY       IN VARCHAR2\n   )\n    RETURN VARCHAR2;\n  /*=============================================================*/\nEND pkg_ledger_sens;"},{"Name":"PKG_CONC","ObjectID":281979,"Digest":"4d5c31be236e51b93d45243babaa1b91ac1164a1d54828da1207c225d8e70407","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*------------تمرکز سپرده*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CONC_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_MAIN_REPORT RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_DETAIL_REPORT ( INPAR_STATE IN NUMBER ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_BRANCH_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGING_QUERY (\n  INPAR_PAGE_SIZE     IN NUMBER\n ,INPAR_PAGE_NUMBER   IN NUMBER\n ) RETURN CLOB;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGE_NUMBER ( INAPR_PAGE_SIZE IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_region RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_detail ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_all ( REG IN NUMBER )   RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CONC;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CONC\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CONC_REP_PROFILE_REPORT\n  AS\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_CONC_RPORT_DETAIL';\n\n  INSERT /*+ APPEND  PARALLEL(auto) */ INTO TBL_CONC_RPORT_DETAIL (\n   CUSTOMER_NUMBER\n  ,REF_BRANCH\n  ,BALANCE\n  ,BRANCH_NAME\n  ,REF_CITY\n  ,CITY_NAME\n  ,REF_STATE\n  ,STATE_NAME\n  ,REGION_NAME\n  ,REGION_ID\n  ,MODALITY_TYPE\n  ) SELECT  /*+   PARALLEL(auto) */\n   A.REF_CUSTOMER\n  ,A.REF_BRANCH\n  ,A.BALANCE\n  ,B.NAME\n  ,B.REF_CTY_ID\n  ,B.CITY_NAME\n  ,B.REF_STA_ID\n  ,B.STA_NAME\n  ,B.REGION_NAME\n  ,B.REGION_ID\n  ,A.MODALITY_TYPE\n  FROM (\n    SELECT  /*+   PARALLEL(auto) */\n     REF_CUSTOMER\n    ,REF_BRANCH\n    ,SUM(BALANCE) AS BALANCE\n    ,case when max(REF_DEPOSIT_TYPE) in (43,44,540,541,542,543,544,556,557,559,560)then 4 else MAX(MODALITY_TYPE) end AS MODALITY_TYPE\n    FROM AKIN.TBL_DEPOSIT\n    GROUP BY\n     REF_CUSTOMER\n    ,REF_BRANCH\n   ) A\n  ,    TBL_BRANCH B\n  WHERE A.REF_BRANCH   = B.BRN_ID;\n\n END PRC_CONC_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_REPORT RETURN VARCHAR2 AS\n  VAR_SUM_BALANCE   NUMBER;\n BEGIN\n  SELECT\n   SUM(BALANCE)\n  INTO\n   VAR_SUM_BALANCE\n  FROM TBL_CONC_RPORT_DETAIL;\n\n  RETURN 'select ref_state \"hc-key\",sum(balance) \"value\",max(state_name)\"name\",to_char(0||round(sum(balance)/' || VAR_SUM_BALANCE || ',5)) as \"percent\" from tbl_conc_rport_detail group by ref_state order by ref_state'\n;\n END FNC_CONC_STATE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_MAIN_REPORT RETURN clob AS\n  VAR_COUNT         NUMBER;\n  VAR_SUM_BALANCE   NUMBER;\n  VAR_PERCENT_100   NUMBER;\n BEGIN\n   \n   return 'WITH tmp AS\n                (SELECT \n                  customer_number,\n                  balance,\n                  count(balance) over (partition BY 1) total_count,\n                  sum(balance) over (partition BY 1) total_balance,\n                  ceil(((row_number() over (partition BY 1 order by balance DESC)/COUNT(balance) over (partition BY 1)))*10) deck\n                FROM tbl_conc_rport_detail\n                )\n              SELECT /*+ parallel(auto) */\n                deck \"1\",\n                SUM(SUM(balance)) over (partition BY 1 order by deck) \"value\",\n                SUM(count(balance)) over (partition BY 1 order by deck) \"count\",\n                 0||to_char(round(SUM(SUM(balance)) over (partition BY 1 order by deck) / max(total_balance), 5)) \"percent\"\n              FROM tmp\n              GROUP BY deck\n              ORDER BY deck';\n\n END FNC_CONC_MAIN_REPORT;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_DETAIL_REPORT ( INPAR_STATE IN NUMBER ) RETURN clob AS\n  VAR_COUNT         NUMBER;\n  VAR_SUM_BALANCE   NUMBER;\n  VAR_PERCENT_100   NUMBER;\n BEGIN\n  SELECT /*+ parallel(auto) */\n   COUNT(DISTINCT CUSTOMER_NUMBER)\n  INTO\n   VAR_COUNT\n  FROM TBL_CONC_RPORT_DETAIL\n  WHERE REF_STATE   = INPAR_STATE;\n\n  SELECT /*+ parallel(auto) */\n   SUM(BALANCE)\n  INTO\n   VAR_SUM_BALANCE\n  FROM TBL_CONC_RPORT_DETAIL\n  WHERE REF_STATE   = INPAR_STATE;\n\n  SELECT /*+ parallel(auto) */\n   TO_CHAR(ROUND(\n    SUM(BALANCE) / VAR_SUM_BALANCE\n   ,5\n   ) * 100)\n  INTO\n   VAR_PERCENT_100\n  FROM (\n    SELECT /*+ parallel(auto) */\n     CUSTOMER_NUMBER\n    ,BALANCE\n    FROM (\n      SELECT /*+ parallel(auto) */\n       CUSTOMER_NUMBER\n      ,SUM(BALANCE) AS BALANCE\n      FROM TBL_CONC_RPORT_DETAIL\n      WHERE REF_STATE   = INPAR_STATE\n      GROUP BY\n       CUSTOMER_NUMBER\n     )\n    ORDER BY BALANCE DESC\n   )\n  WHERE ROWNUM \u003c= 100;\n\n\n return 'WITH tmp AS\n                (SELECT \n                  customer_number,\n                  balance,\n                  count(balance) over (partition BY 1) total_count,\n                  sum(balance) over (partition BY 1) total_balance,\n                  ceil(((row_number() over (partition BY 1 order by balance DESC)/COUNT(balance) over (partition BY 1)))*10) deck\n                FROM tbl_conc_rport_detail\n                where ref_state = '||  INPAR_STATE  ||'\n                )\n              SELECT /*+ parallel(auto) */\n                deck \"1\",\n                deck*10 \"ha\",\n                SUM(SUM(balance)) over (partition BY 1 order by deck) \"value\",\n                SUM(count(balance)) over (partition BY 1 order by deck) \"count\",\n                (round(SUM(SUM(balance)) over (partition BY 1 order by deck) / max(total_balance), 5)) \"percent\",\n                '|| VAR_PERCENT_100   || ' \"top100\"\n              FROM tmp\n              GROUP BY deck\n              ORDER BY deck';\n\n END FNC_CONC_STATE_DETAIL_REPORT;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_BRANCH_REPORT RETURN VARCHAR2 AS\n  VAR_SUM_BALANCE   NUMBER;\n BEGIN\n  SELECT\n   SUM(BALANCE)\n  INTO\n   VAR_SUM_BALANCE\n  FROM TBL_CONC_RPORT_DETAIL;\n\n  RETURN 'SELECT\n to_number(REF_BRANCH)\"id\"\n ,BALANCE \"value\"\n ,NAME as \"name\"\n ,to_char(0||round(BALANCE/' || VAR_SUM_BALANCE || ',6)) \"percent\"\nFROM (\n  SELECT\n   REF_BRANCH\n  ,SUM(BALANCE) AS BALANCE\n  ,MAX(TBL_BRANCH.NAME) AS NAME\n  FROM TBL_CONC_RPORT_DETAIL\n  ,  TBL_BRANCH\n  WHERE TBL_BRANCH.BRN_ID   = TBL_CONC_RPORT_DETAIL.REF_BRANCH\n  GROUP BY\n   REF_BRANCH\n )\nORDER BY BALANCE DESC'\n;\n END FNC_CONC_BRANCH_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGING_QUERY (\n/*======YEK QUERY V PAGE-SIZE V PAGE-NUMBER MIGIRE VA DADEHASHO PAS MIDE*/\n  INPAR_PAGE_SIZE     IN NUMBER\n ,INPAR_PAGE_NUMBER   IN NUMBER\n ) RETURN CLOB AS\n\n  LOC_QUERY     CLOB;\n  LOC_LOW       NUMBER := ( INPAR_PAGE_NUMBER - 1 ) * INPAR_PAGE_SIZE + 1;\n  LOC_UP        NUMBER := INPAR_PAGE_NUMBER * INPAR_PAGE_SIZE;\n  INPAR_QUERY   CLOB := PKG_CONC.FNC_CONC_BRANCH_REPORT ();\n  begin\n LOC_QUERY := 'SELECT * FROM (\n                              SELECT ROWNUM \"رديف\", t.*\n                              FROM (' || INPAR_QUERY ||')T)\n                              WHERE  \"رديف\" BETWEEN ' || LOC_LOW || ' AND ' ||LOC_UP;\n RETURN LOC_QUERY;\n END FNC_PAGING_QUERY;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGE_NUMBER ( INAPR_PAGE_SIZE IN NUMBER ) RETURN VARCHAR2 AS\n  LOC_QUERY     VARCHAR2(4000);\n  LOC_CNT       VARCHAR2(4000);\n  INPAR_QUERY   VARCHAR2(32000);\n BEGIN\n  INPAR_QUERY   := PKG_CONC.FNC_CONC_BRANCH_REPORT ();\n  LOC_QUERY     := 'SELECT FLOOR((COUNT(*)/' ||\n  INAPR_PAGE_SIZE ||\n  ')+1)  FROM (' ||\n  INPAR_QUERY ||\n  ')';\n  EXECUTE IMMEDIATE LOC_QUERY INTO\n   LOC_CNT;\n  RETURN LOC_CNT;\n END FNC_PAGE_NUMBER;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_TOP100_CUSTOMER (reg IN NUMBER) RETURN VARCHAR2 AS\n \n  BEGIN\n   IF (reg IS NULL) THEN\n      RETURN ' \n       \n         with c as ( select  \"customerNumber\",\"balance\",MODALITY_TYPE from (\n SELECT /*+   PARALLEL(auto) */\n CUSTOMER_NUMBER \"customerNumber\"\n ,BALANCE \"balance\"\n ,MODALITY_TYPE\nFROM TBL_CONC_RPORT_DETAIL\n     ORDER BY BALANCE DESC\n ) where ROWNUM\u003c101)\n, cn as (select /*+   PARALLEL(auto) */  CUS_ID,NAME||'' ''||FAMILY as name from tbl_customer )\nselect /*+   PARALLEL(auto) */ c.\"customerNumber\" ,c.\"balance\" ,cn.name as \"customerName\",c.MODALITY_TYPE from c left join cn on c.\"customerNumber\" = cn.CUS_ID\n       ORDER BY c.\"balance\" DESC \n      ' ;\n\n   ELSe \n         RETURN ' \n         with c as (select  \"customerNumber\",\"balance\",MODALITY_TYPE from (\n SELECT /*+   PARALLEL(auto) */\n CUSTOMER_NUMBER \"customerNumber\"\n ,BALANCE \"balance\"\n ,MODALITY_TYPE\nFROM TBL_CONC_RPORT_DETAIL\nwhere REGION_ID = '||reg||'\n     ORDER BY BALANCE DESC\n ) where ROWNUM\u003c101)\n, cn as (select /*+   PARALLEL(auto) */  CUS_ID,NAME||'' ''||FAMILY as name from tbl_customer )\nselect /*+   PARALLEL(auto) */ c.\"customerNumber\" ,c.\"balance\" ,cn.name as \"customerName\", c.MODALITY_TYPE from c left join cn on c.\"customerNumber\" = cn.CUS_ID\n            ORDER BY c.\"balance\" DESC \n         ' ;\n    END IF;\n  END FNC_GET_TOP100_CUSTOMER;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_region RETURN VARCHAR2 AS\n \n  BEGIN\n  return ' select \"name\",\"id\" from \n (select ''کل'' \"name\" , null \"id\" from dual\nunion \n  select distinct region_name \"name\", region_id \"id\" from tbl_branch)\n order by \n case\n when \"id\" is null then 000\n when \"id\"= 20 then 001\n else  \"id\"\n end';\n  END FNC_GET_region;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_TOP100_CUSTOMER_detail (reg IN NUMBER) RETURN VARCHAR2 AS\n \n  BEGIN\n  \n  \n  return   'select  \"customerNumber\", \"customerName\",nvl(\"1\",0) as \"1\",nvl(\"3\",0) as \"3\",nvl(\"2\",0) as \"2\",nvl(\"4\",0) as \"4\" ,nvl(\"5\",0) as \"5\" from (\n  '||PKG_CONC.FNC_GET_TOP100_CUSTOMER(reg)||'\n  \n  )\n            PIVOT\n            (max(\"balance\") FOR MODALITY_TYPE IN (1 as \"1\",2 as \"2\",3 as \"3\",4 as \"4\",5 as \"5\"))\n            ORDER BY nvl(\"1\",0)+nvl(\"2\",0)+nvl(\"3\",0)+nvl(\"4\",0)+nvl(\"5\",0) DESC';\n  \n  \n  END FNC_GET_TOP100_CUSTOMER_detail;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_TOP100_CUSTOMER_all( REG IN NUMBER )  RETURN VARCHAR2 AS\n \n  BEGIN\n  \n  if (reg = 1) then\n  return   'WITH S AS (\n SELECT /*+   PARALLEL(auto) */\n  CUSTOMER_NUMBER\n ,REGION_ID\n ,REGION_NAME\n ,BALANCE\n ,ROW_NUMBER() OVER(PARTITION BY\n   REGION_ID\n   ORDER BY\n    BALANCE\n   DESC\n  ) AS ROWNUMS\n FROM TBL_CONC_RPORT_DETAIL\n),C AS (\n SELECT /*+   PARALLEL(auto) */\n  CUS_ID\n ,NAME ||\n  '' '' ||\n  FAMILY AS NAME\n FROM TBL_CUSTOMER\n) SELECT\n REGION_NAME AS \"regionName\"\n ,C.NAME AS \"customerName\"\n ,S.CUSTOMER_NUMBER as \"customerNumber\",\n s.BALANCE as \"balance\"\nFROM S\n ,    C\nWHERE S.CUSTOMER_NUMBER   = C.CUS_ID\n AND\n  S.ROWNUMS \u003c= 100 ORDER BY REGION_NAME,balance DESC';\n  else \n  return 'select  \"customerNumber\", \"customerName\",\"regionName\",nvl(\"1\",0) as \"1\",nvl(\"3\",0) as \"3\",nvl(\"2\",0) as \"2\",nvl(\"4\",0) as \"4\" ,nvl(\"5\",0) as \"5\" from (\nWITH S AS (\n SELECT /*+   PARALLEL(auto) */\n  CUSTOMER_NUMBER\n ,REGION_ID\n ,REGION_NAME\n ,BALANCE\n ,modality_type\n ,ROW_NUMBER() OVER(PARTITION BY\n   REGION_ID\n   ORDER BY\n    BALANCE\n   DESC\n  ) AS ROWNUMS\n FROM TBL_CONC_RPORT_DETAIL\n),C AS (\n SELECT /*+   PARALLEL(auto) */\n  CUS_ID\n ,NAME ||\n  '' '' ||\n  FAMILY AS NAME\n FROM TBL_CUSTOMER\n) SELECT\n REGION_NAME AS \"regionName\"\n ,C.NAME AS  \"customerName\"\n ,S.CUSTOMER_NUMBER as \"customerNumber\",\n s.BALANCE as \"balance\"\n ,modality_type\nFROM S\n ,    C\nWHERE S.CUSTOMER_NUMBER   = C.CUS_ID\n AND\n  S.ROWNUMS \u003c= 100 ORDER BY REGION_NAME,balance DESC\n  \n  )\n            PIVOT\n            (max(\"balance\") FOR MODALITY_TYPE IN (1 as \"1\",2 as \"2\",3 as \"3\",4 as \"4\",5 as \"5\"))\n            ORDER BY  \"regionName\",nvl(\"1\",0)+nvl(\"2\",0)+nvl(\"3\",0)+nvl(\"4\",0)+nvl(\"5\",0) DESC';\n  end if ;\n  \n  \n  \n  \n  END FNC_GET_TOP100_CUSTOMER_all;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CONC;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*------------تمرکز سپرده*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CONC_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_MAIN_REPORT RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_DETAIL_REPORT ( INPAR_STATE IN NUMBER ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_BRANCH_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGING_QUERY (\n  INPAR_PAGE_SIZE     IN NUMBER\n ,INPAR_PAGE_NUMBER   IN NUMBER\n ) RETURN CLOB;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGE_NUMBER ( INAPR_PAGE_SIZE IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_region RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_detail ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_all ( REG IN NUMBER )   RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CONC;"},{"Name":"PKG_CONC","ObjectID":281980,"Digest":"4d5c31be236e51b93d45243babaa1b91ac1164a1d54828da1207c225d8e70407","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*------------تمرکز سپرده*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CONC_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_MAIN_REPORT RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_DETAIL_REPORT ( INPAR_STATE IN NUMBER ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_BRANCH_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGING_QUERY (\n  INPAR_PAGE_SIZE     IN NUMBER\n ,INPAR_PAGE_NUMBER   IN NUMBER\n ) RETURN CLOB;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGE_NUMBER ( INAPR_PAGE_SIZE IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_region RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_detail ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_all ( REG IN NUMBER )   RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CONC;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CONC\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_CONC_REP_PROFILE_REPORT\n  AS\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_CONC_RPORT_DETAIL';\n\n  INSERT /*+ APPEND  PARALLEL(auto) */ INTO TBL_CONC_RPORT_DETAIL (\n   CUSTOMER_NUMBER\n  ,REF_BRANCH\n  ,BALANCE\n  ,BRANCH_NAME\n  ,REF_CITY\n  ,CITY_NAME\n  ,REF_STATE\n  ,STATE_NAME\n  ,REGION_NAME\n  ,REGION_ID\n  ,MODALITY_TYPE\n  ) SELECT  /*+   PARALLEL(auto) */\n   A.REF_CUSTOMER\n  ,A.REF_BRANCH\n  ,A.BALANCE\n  ,B.NAME\n  ,B.REF_CTY_ID\n  ,B.CITY_NAME\n  ,B.REF_STA_ID\n  ,B.STA_NAME\n  ,B.REGION_NAME\n  ,B.REGION_ID\n  ,A.MODALITY_TYPE\n  FROM (\n    SELECT  /*+   PARALLEL(auto) */\n     REF_CUSTOMER\n    ,REF_BRANCH\n    ,SUM(BALANCE) AS BALANCE\n    ,case when max(REF_DEPOSIT_TYPE) in (43,44,540,541,542,543,544,556,557,559,560)then 4 else MAX(MODALITY_TYPE) end AS MODALITY_TYPE\n    FROM AKIN.TBL_DEPOSIT\n    GROUP BY\n     REF_CUSTOMER\n    ,REF_BRANCH\n   ) A\n  ,    TBL_BRANCH B\n  WHERE A.REF_BRANCH   = B.BRN_ID;\n\n END PRC_CONC_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_REPORT RETURN VARCHAR2 AS\n  VAR_SUM_BALANCE   NUMBER;\n BEGIN\n  SELECT\n   SUM(BALANCE)\n  INTO\n   VAR_SUM_BALANCE\n  FROM TBL_CONC_RPORT_DETAIL;\n\n  RETURN 'select ref_state \"hc-key\",sum(balance) \"value\",max(state_name)\"name\",to_char(0||round(sum(balance)/' || VAR_SUM_BALANCE || ',5)) as \"percent\" from tbl_conc_rport_detail group by ref_state order by ref_state'\n;\n END FNC_CONC_STATE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_MAIN_REPORT RETURN clob AS\n  VAR_COUNT         NUMBER;\n  VAR_SUM_BALANCE   NUMBER;\n  VAR_PERCENT_100   NUMBER;\n BEGIN\n   \n   return 'WITH tmp AS\n                (SELECT \n                  customer_number,\n                  balance,\n                  count(balance) over (partition BY 1) total_count,\n                  sum(balance) over (partition BY 1) total_balance,\n                  ceil(((row_number() over (partition BY 1 order by balance DESC)/COUNT(balance) over (partition BY 1)))*10) deck\n                FROM tbl_conc_rport_detail\n                )\n              SELECT /*+ parallel(auto) */\n                deck \"1\",\n                SUM(SUM(balance)) over (partition BY 1 order by deck) \"value\",\n                SUM(count(balance)) over (partition BY 1 order by deck) \"count\",\n                 0||to_char(round(SUM(SUM(balance)) over (partition BY 1 order by deck) / max(total_balance), 5)) \"percent\"\n              FROM tmp\n              GROUP BY deck\n              ORDER BY deck';\n\n END FNC_CONC_MAIN_REPORT;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_DETAIL_REPORT ( INPAR_STATE IN NUMBER ) RETURN clob AS\n  VAR_COUNT         NUMBER;\n  VAR_SUM_BALANCE   NUMBER;\n  VAR_PERCENT_100   NUMBER;\n BEGIN\n  SELECT /*+ parallel(auto) */\n   COUNT(DISTINCT CUSTOMER_NUMBER)\n  INTO\n   VAR_COUNT\n  FROM TBL_CONC_RPORT_DETAIL\n  WHERE REF_STATE   = INPAR_STATE;\n\n  SELECT /*+ parallel(auto) */\n   SUM(BALANCE)\n  INTO\n   VAR_SUM_BALANCE\n  FROM TBL_CONC_RPORT_DETAIL\n  WHERE REF_STATE   = INPAR_STATE;\n\n  SELECT /*+ parallel(auto) */\n   TO_CHAR(ROUND(\n    SUM(BALANCE) / VAR_SUM_BALANCE\n   ,5\n   ) * 100)\n  INTO\n   VAR_PERCENT_100\n  FROM (\n    SELECT /*+ parallel(auto) */\n     CUSTOMER_NUMBER\n    ,BALANCE\n    FROM (\n      SELECT /*+ parallel(auto) */\n       CUSTOMER_NUMBER\n      ,SUM(BALANCE) AS BALANCE\n      FROM TBL_CONC_RPORT_DETAIL\n      WHERE REF_STATE   = INPAR_STATE\n      GROUP BY\n       CUSTOMER_NUMBER\n     )\n    ORDER BY BALANCE DESC\n   )\n  WHERE ROWNUM \u003c= 100;\n\n\n return 'WITH tmp AS\n                (SELECT \n                  customer_number,\n                  balance,\n                  count(balance) over (partition BY 1) total_count,\n                  sum(balance) over (partition BY 1) total_balance,\n                  ceil(((row_number() over (partition BY 1 order by balance DESC)/COUNT(balance) over (partition BY 1)))*10) deck\n                FROM tbl_conc_rport_detail\n                where ref_state = '||  INPAR_STATE  ||'\n                )\n              SELECT /*+ parallel(auto) */\n                deck \"1\",\n                deck*10 \"ha\",\n                SUM(SUM(balance)) over (partition BY 1 order by deck) \"value\",\n                SUM(count(balance)) over (partition BY 1 order by deck) \"count\",\n                (round(SUM(SUM(balance)) over (partition BY 1 order by deck) / max(total_balance), 5)) \"percent\",\n                '|| VAR_PERCENT_100   || ' \"top100\"\n              FROM tmp\n              GROUP BY deck\n              ORDER BY deck';\n\n END FNC_CONC_STATE_DETAIL_REPORT;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_BRANCH_REPORT RETURN VARCHAR2 AS\n  VAR_SUM_BALANCE   NUMBER;\n BEGIN\n  SELECT\n   SUM(BALANCE)\n  INTO\n   VAR_SUM_BALANCE\n  FROM TBL_CONC_RPORT_DETAIL;\n\n  RETURN 'SELECT\n to_number(REF_BRANCH)\"id\"\n ,BALANCE \"value\"\n ,NAME as \"name\"\n ,to_char(0||round(BALANCE/' || VAR_SUM_BALANCE || ',6)) \"percent\"\nFROM (\n  SELECT\n   REF_BRANCH\n  ,SUM(BALANCE) AS BALANCE\n  ,MAX(TBL_BRANCH.NAME) AS NAME\n  FROM TBL_CONC_RPORT_DETAIL\n  ,  TBL_BRANCH\n  WHERE TBL_BRANCH.BRN_ID   = TBL_CONC_RPORT_DETAIL.REF_BRANCH\n  GROUP BY\n   REF_BRANCH\n )\nORDER BY BALANCE DESC'\n;\n END FNC_CONC_BRANCH_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGING_QUERY (\n/*======YEK QUERY V PAGE-SIZE V PAGE-NUMBER MIGIRE VA DADEHASHO PAS MIDE*/\n  INPAR_PAGE_SIZE     IN NUMBER\n ,INPAR_PAGE_NUMBER   IN NUMBER\n ) RETURN CLOB AS\n\n  LOC_QUERY     CLOB;\n  LOC_LOW       NUMBER := ( INPAR_PAGE_NUMBER - 1 ) * INPAR_PAGE_SIZE + 1;\n  LOC_UP        NUMBER := INPAR_PAGE_NUMBER * INPAR_PAGE_SIZE;\n  INPAR_QUERY   CLOB := PKG_CONC.FNC_CONC_BRANCH_REPORT ();\n  begin\n LOC_QUERY := 'SELECT * FROM (\n                              SELECT ROWNUM \"رديف\", t.*\n                              FROM (' || INPAR_QUERY ||')T)\n                              WHERE  \"رديف\" BETWEEN ' || LOC_LOW || ' AND ' ||LOC_UP;\n RETURN LOC_QUERY;\n END FNC_PAGING_QUERY;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGE_NUMBER ( INAPR_PAGE_SIZE IN NUMBER ) RETURN VARCHAR2 AS\n  LOC_QUERY     VARCHAR2(4000);\n  LOC_CNT       VARCHAR2(4000);\n  INPAR_QUERY   VARCHAR2(32000);\n BEGIN\n  INPAR_QUERY   := PKG_CONC.FNC_CONC_BRANCH_REPORT ();\n  LOC_QUERY     := 'SELECT FLOOR((COUNT(*)/' ||\n  INAPR_PAGE_SIZE ||\n  ')+1)  FROM (' ||\n  INPAR_QUERY ||\n  ')';\n  EXECUTE IMMEDIATE LOC_QUERY INTO\n   LOC_CNT;\n  RETURN LOC_CNT;\n END FNC_PAGE_NUMBER;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_TOP100_CUSTOMER (reg IN NUMBER) RETURN VARCHAR2 AS\n \n  BEGIN\n   IF (reg IS NULL) THEN\n      RETURN ' \n       \n         with c as ( select  \"customerNumber\",\"balance\",MODALITY_TYPE from (\n SELECT /*+   PARALLEL(auto) */\n CUSTOMER_NUMBER \"customerNumber\"\n ,BALANCE \"balance\"\n ,MODALITY_TYPE\nFROM TBL_CONC_RPORT_DETAIL\n     ORDER BY BALANCE DESC\n ) where ROWNUM\u003c101)\n, cn as (select /*+   PARALLEL(auto) */  CUS_ID,NAME||'' ''||FAMILY as name from tbl_customer )\nselect /*+   PARALLEL(auto) */ c.\"customerNumber\" ,c.\"balance\" ,cn.name as \"customerName\",c.MODALITY_TYPE from c left join cn on c.\"customerNumber\" = cn.CUS_ID\n       ORDER BY c.\"balance\" DESC \n      ' ;\n\n   ELSe \n         RETURN ' \n         with c as (select  \"customerNumber\",\"balance\",MODALITY_TYPE from (\n SELECT /*+   PARALLEL(auto) */\n CUSTOMER_NUMBER \"customerNumber\"\n ,BALANCE \"balance\"\n ,MODALITY_TYPE\nFROM TBL_CONC_RPORT_DETAIL\nwhere REGION_ID = '||reg||'\n     ORDER BY BALANCE DESC\n ) where ROWNUM\u003c101)\n, cn as (select /*+   PARALLEL(auto) */  CUS_ID,NAME||'' ''||FAMILY as name from tbl_customer )\nselect /*+   PARALLEL(auto) */ c.\"customerNumber\" ,c.\"balance\" ,cn.name as \"customerName\", c.MODALITY_TYPE from c left join cn on c.\"customerNumber\" = cn.CUS_ID\n            ORDER BY c.\"balance\" DESC \n         ' ;\n    END IF;\n  END FNC_GET_TOP100_CUSTOMER;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_region RETURN VARCHAR2 AS\n \n  BEGIN\n  return ' select \"name\",\"id\" from \n (select ''کل'' \"name\" , null \"id\" from dual\nunion \n  select distinct region_name \"name\", region_id \"id\" from tbl_branch)\n order by \n case\n when \"id\" is null then 000\n when \"id\"= 20 then 001\n else  \"id\"\n end';\n  END FNC_GET_region;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_TOP100_CUSTOMER_detail (reg IN NUMBER) RETURN VARCHAR2 AS\n \n  BEGIN\n  \n  \n  return   'select  \"customerNumber\", \"customerName\",nvl(\"1\",0) as \"1\",nvl(\"3\",0) as \"3\",nvl(\"2\",0) as \"2\",nvl(\"4\",0) as \"4\" ,nvl(\"5\",0) as \"5\" from (\n  '||PKG_CONC.FNC_GET_TOP100_CUSTOMER(reg)||'\n  \n  )\n            PIVOT\n            (max(\"balance\") FOR MODALITY_TYPE IN (1 as \"1\",2 as \"2\",3 as \"3\",4 as \"4\",5 as \"5\"))\n            ORDER BY nvl(\"1\",0)+nvl(\"2\",0)+nvl(\"3\",0)+nvl(\"4\",0)+nvl(\"5\",0) DESC';\n  \n  \n  END FNC_GET_TOP100_CUSTOMER_detail;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_TOP100_CUSTOMER_all( REG IN NUMBER )  RETURN VARCHAR2 AS\n \n  BEGIN\n  \n  if (reg = 1) then\n  return   'WITH S AS (\n SELECT /*+   PARALLEL(auto) */\n  CUSTOMER_NUMBER\n ,REGION_ID\n ,REGION_NAME\n ,BALANCE\n ,ROW_NUMBER() OVER(PARTITION BY\n   REGION_ID\n   ORDER BY\n    BALANCE\n   DESC\n  ) AS ROWNUMS\n FROM TBL_CONC_RPORT_DETAIL\n),C AS (\n SELECT /*+   PARALLEL(auto) */\n  CUS_ID\n ,NAME ||\n  '' '' ||\n  FAMILY AS NAME\n FROM TBL_CUSTOMER\n) SELECT\n REGION_NAME AS \"regionName\"\n ,C.NAME AS \"customerName\"\n ,S.CUSTOMER_NUMBER as \"customerNumber\",\n s.BALANCE as \"balance\"\nFROM S\n ,    C\nWHERE S.CUSTOMER_NUMBER   = C.CUS_ID\n AND\n  S.ROWNUMS \u003c= 100 ORDER BY REGION_NAME,balance DESC';\n  else \n  return 'select  \"customerNumber\", \"customerName\",\"regionName\",nvl(\"1\",0) as \"1\",nvl(\"3\",0) as \"3\",nvl(\"2\",0) as \"2\",nvl(\"4\",0) as \"4\" ,nvl(\"5\",0) as \"5\" from (\nWITH S AS (\n SELECT /*+   PARALLEL(auto) */\n  CUSTOMER_NUMBER\n ,REGION_ID\n ,REGION_NAME\n ,BALANCE\n ,modality_type\n ,ROW_NUMBER() OVER(PARTITION BY\n   REGION_ID\n   ORDER BY\n    BALANCE\n   DESC\n  ) AS ROWNUMS\n FROM TBL_CONC_RPORT_DETAIL\n),C AS (\n SELECT /*+   PARALLEL(auto) */\n  CUS_ID\n ,NAME ||\n  '' '' ||\n  FAMILY AS NAME\n FROM TBL_CUSTOMER\n) SELECT\n REGION_NAME AS \"regionName\"\n ,C.NAME AS  \"customerName\"\n ,S.CUSTOMER_NUMBER as \"customerNumber\",\n s.BALANCE as \"balance\"\n ,modality_type\nFROM S\n ,    C\nWHERE S.CUSTOMER_NUMBER   = C.CUS_ID\n AND\n  S.ROWNUMS \u003c= 100 ORDER BY REGION_NAME,balance DESC\n  \n  )\n            PIVOT\n            (max(\"balance\") FOR MODALITY_TYPE IN (1 as \"1\",2 as \"2\",3 as \"3\",4 as \"4\",5 as \"5\"))\n            ORDER BY  \"regionName\",nvl(\"1\",0)+nvl(\"2\",0)+nvl(\"3\",0)+nvl(\"4\",0)+nvl(\"5\",0) DESC';\n  end if ;\n  \n  \n  \n  \n  END FNC_GET_TOP100_CUSTOMER_all;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CONC;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*------------تمرکز سپرده*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_CONC_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_MAIN_REPORT RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_STATE_DETAIL_REPORT ( INPAR_STATE IN NUMBER ) RETURN clob;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_CONC_BRANCH_REPORT RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGING_QUERY (\n  INPAR_PAGE_SIZE     IN NUMBER\n ,INPAR_PAGE_NUMBER   IN NUMBER\n ) RETURN CLOB;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_PAGE_NUMBER ( INAPR_PAGE_SIZE IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_region RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_detail ( REG IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n FUNCTION FNC_GET_TOP100_CUSTOMER_all ( REG IN NUMBER )   RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CONC;"},{"Name":"PKG_DU_GAP","ObjectID":282027,"Digest":"d00a6b056e598c5e4f1821ef790d88aba996572f2e75d789cbb03011b5eeed9e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DU_GAP_DELTA_NWA (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ,INPAR_I1            IN FLOAT\n ,INPAR_I2            IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTAP (\n  INPAR_DUR_ASSET   IN FLOAT\n ,INPAR_DUR_LIA     IN FLOAT\n ,INPAR_I1          IN FLOAT\n ,INPAR_I2          IN FLOAT\n ,INPAR_TYPE        IN VARCHAR2\n ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DURGAP (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DU_GAP_REPORT_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_GET_REPORT_INFO RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_du_gap_total_result \n\n(\ninpar_I1 in float,\ninpar_I2 in float\n\n)\nreturn varchar2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_DU_GAP;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DU_GAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTA_NWA (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ,INPAR_I1            IN FLOAT\n ,INPAR_I2            IN FLOAT\n ) RETURN FLOAT AS\n  OUTPAR_DELTA_NWA   FLOAT;\n BEGIN\n  OUTPAR_DELTA_NWA   := ROUND(\n   ( (-1) * FNC_DU_GAP_DURGAP(\n    INPAR_DUR_ASSET\n   ,INPAR_DUR_LIA\n   ,INPAR_ASSET_VALUE\n   ,INPAR_LIA_VALUE\n   ) ) * ( (INPAR_I2 - INPAR_I1) / (1 + INPAR_I1) )\n  ,3\n  );\n\n  RETURN OUTPAR_DELTA_NWA;\n END FNC_DU_GAP_DELTA_NWA;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTAP (\n  INPAR_DUR_ASSET   IN FLOAT\n ,INPAR_DUR_LIA     IN FLOAT\n ,INPAR_I1          IN FLOAT\n ,INPAR_I2          IN FLOAT\n ,INPAR_TYPE        IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  OUTPAR_DELTAP_ASSET   FLOAT;\n  OUTPAR_DELTAP_LIA     FLOAT;\n  VAR_DUR_ASSET         FLOAT;\n  VAR_DUR_LIA           FLOAT;\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n   VAR_DUR_ASSET         := (-1 ) * INPAR_DUR_ASSET;\n   OUTPAR_DELTAP_ASSET   := ROUND(\n    (VAR_DUR_ASSET) * ( (INPAR_I2 - INPAR_I1) / (1 + INPAR_I1) )\n   ,3\n   );\n\n   RETURN OUTPAR_DELTAP_ASSET;\n  ELSE\n   VAR_DUR_LIA         := (-1 ) * INPAR_DUR_LIA;\n   OUTPAR_DELTAP_LIA   := ROUND(\n    (VAR_DUR_LIA) * ( (INPAR_I2 - INPAR_I1) / (1 + INPAR_I1) )\n   ,3\n   );\n\n   RETURN OUTPAR_DELTAP_LIA;\n  END IF;\n  /*RETURN OUTPAR_DELTAP_ASSET || ',' || OUTPAR_DELTAP_LIA;*/\n END FNC_DU_GAP_DELTAP;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DURGAP (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ) RETURN FLOAT AS\n  OUTPAR_DURGAP   FLOAT;\n BEGIN\n  OUTPAR_DURGAP   := ROUND(\n   ( (INPAR_DUR_ASSET) - ( (INPAR_LIA_VALUE / INPAR_ASSET_VALUE) * INPAR_DUR_LIA) )\n  ,3\n  );\n\n  RETURN OUTPAR_DURGAP;\n  --RETURN NULL;\n END FNC_DU_GAP_DURGAP;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DU_GAP_REPORT_DETAIL\n  AS\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_DU_GAP_REPORT_DETAIL';\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(BALANCE) AS AMOUNT\n  ,'0.4'\n  ,1\n  ,1\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'سپرده کمتر از يک سال'\n  FROM AKIN.TBL_DEPOSIT\n  WHERE DUE_DATE \u003c= SYSDATE + 365\n   OR\n    DUE_DATE IS NULL;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(BALANCE) AS AMOUNT\n  ,'0.4'\n  ,1\n  ,2\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'سپرده بين يک تا دو سال'\n  FROM AKIN.TBL_DEPOSIT\n  WHERE DUE_DATE \u003e= SYSDATE + 365\n   AND\n    DUE_DATE \u003c= SYSDATE + 730;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(BALANCE) AS AMOUNT\n  ,'0.4'\n  ,1\n  ,3\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'سپرده بيشتر از دو سال'\n  FROM AKIN.TBL_DEPOSIT\n  WHERE DUE_DATE \u003e SYSDATE + 730;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(AMOUNT) AS AMOUNT\n  ,'0.4'\n  ,2\n  ,1\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'تسهيلات کمتر از يک سال'\n  FROM AKIN.TBL_LOAN_PAYMENT\n  WHERE DUE_DATE \u003e= SYSDATE\n   AND\n    DUE_DATE \u003c= SYSDATE + 365;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(AMOUNT) AS AMOUNT\n  ,'0.4'\n  ,2\n  ,2\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'تسهيلات بين يک تا دو سال'\n  FROM AKIN.TBL_LOAN_PAYMENT\n  WHERE DUE_DATE \u003e SYSDATE + 365\n   AND\n    DUE_DATE \u003c= SYSDATE + 730;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(AMOUNT) AS AMOUNT\n  ,'0.4'\n  ,2\n  ,3\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'تسهيلات بيشتر از دو سال'\n  FROM AKIN.TBL_LOAN_PAYMENT\n  WHERE DUE_DATE \u003e SYSDATE + 730;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_LIA_AMOUNT = (\n     SELECT\n      SUM(AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 2\n    )\n  WHERE TYPE   = 2;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_ASSETS_AMOUNT = (\n     SELECT\n      SUM(AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 1\n    )\n  WHERE TYPE   = 1;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_ASSETS_WEIGHT = (\n     SELECT\n      SUM(WEIGHT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 1\n    ) / (\n     SELECT DISTINCT\n      MAX(TOTAL_ASSETS_AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n    )\n  WHERE TYPE   = 1;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_LIA_WEIGHT = (\n     SELECT\n      SUM(WEIGHT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 2\n    ) / (\n     SELECT DISTINCT\n      MAX(TOTAL_LIA_AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n    )\n  WHERE TYPE   = 2;\n\n  COMMIT;\n END PRC_DU_GAP_REPORT_DETAIL;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_TOTAL_RESULT (\n  INPAR_I1   IN FLOAT\n ,INPAR_I2   IN FLOAT\n ) RETURN VARCHAR2 AS\n\n  VAR_DUR_ASSET        FLOAT;\n  VAR_DUR_LIA          FLOAT;\n  VAR_ASSET_VALUE      FLOAT;\n  VAR_LIA_VALUE        FLOAT;\n  OUTPAR_DLTAP_ASSET   varchar2(8000);\n  OUTPAR_DLTAP_LIA     varchar2(8000);\n  OUTPAR_DURGAP        varchar2(8000);\n  OUTPAR_DELTA_NWA     varchar2(8000);\n BEGIN\n  SELECT DISTINCT\n   ( TOTAL_ASSETS_WEIGHT )\n  INTO\n   VAR_DUR_ASSET\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 1;\n\n  SELECT DISTINCT\n   ( TOTAL_LIA_WEIGHT )\n  INTO\n   VAR_DUR_LIA\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 2;\n\n  SELECT DISTINCT\n   ( TOTAL_ASSETS_AMOUNT )\n  INTO\n   VAR_ASSET_VALUE\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 1;\n\n  SELECT DISTINCT\n   ( TOTAL_LIA_AMOUNT )\n  INTO\n   VAR_LIA_VALUE\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 2;\n\n  OUTPAR_DLTAP_ASSET   := PKG_DU_GAP.FNC_DU_GAP_DELTAP(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,INPAR_I1\n  ,INPAR_I2\n  ,1\n  );\n   select REPLACE(to_char(OUTPAR_DLTAP_ASSET), '.', '0.') into OUTPAR_DLTAP_ASSET from dual;\n   \n  OUTPAR_DLTAP_LIA     := PKG_DU_GAP.FNC_DU_GAP_DELTAP(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,INPAR_I1\n  ,INPAR_I2\n  ,0\n  );\n  \n  select REPLACE(to_char(OUTPAR_DLTAP_LIA), '.', '0.') into OUTPAR_DLTAP_LIA from dual;\n  OUTPAR_DURGAP        := PKG_DU_GAP.FNC_DU_GAP_DURGAP(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,VAR_ASSET_VALUE\n  ,VAR_LIA_VALUE\n  );\n  \n    select REPLACE(to_char(OUTPAR_DURGAP), '.', '0.') into OUTPAR_DURGAP from dual;\n\n  OUTPAR_DELTA_NWA     := PKG_DU_GAP.FNC_DU_GAP_DELTA_NWA(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,VAR_ASSET_VALUE\n  ,VAR_LIA_VALUE\n  ,INPAR_I1\n  ,INPAR_I2\n  );\n   select REPLACE(to_char(OUTPAR_DELTA_NWA), '.0', '0.0') into OUTPAR_DELTA_NWA from dual;\n\n  RETURN 'select ''' ||\n  OUTPAR_DLTAP_ASSET ||\n  ''' as \"deltapAsset\",''' ||\n  OUTPAR_DLTAP_LIA ||\n  ''' as \"deltapLia\",''' ||\n  OUTPAR_DURGAP ||\n  ''' as \"durGap\" ,''' ||\n  OUTPAR_DELTA_NWA ||\n  ''' as \"deltaNwa\" from dual';\n\n END FNC_DU_GAP_TOTAL_RESULT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_GET_REPORT_INFO RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'SELECT\n NAME\"name\"\n ,to_char(AMOUNT)\"value\"\n ,TYPE\"type\"\n ,TITLE\"title\"\nFROM TBL_DU_GAP_REPORT_DETAIL union\nSELECT distinct\n''TOTAL_ASSETS_WEIGHT'' as \"name\"\n,case when  to_char(TOTAL_ASSETS_WEIGHT)\u003c 1 then to_char(0||TOTAL_ASSETS_WEIGHT) else to_char(TOTAL_ASSETS_WEIGHT) end as \"value\"\n ,''3'' \"type\",''3''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where total_assets_weight is not null union\nSELECT distinct\n''TOTAL_LIA_WEIGHT'' as \"name\"\n,case when  to_char(TOTAL_LIA_WEIGHT)\u003c 1 then to_char(0||TOTAL_LIA_WEIGHT) else to_char(TOTAL_LIA_WEIGHT) end as \"value\"\n ,''4'' \"type\",''4''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where TOTAL_LIA_WEIGHT is not null union\nSELECT distinct\n''TOTAL_ASSETS_AMOUNT'' as \"name\"\n,to_char(TOTAL_ASSETS_AMOUNT) as \"value\"\n ,''5'' \"type\",''5''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where TOTAL_ASSETS_AMOUNT is not null union\nSELECT distinct\n''TOTAL_LIA_AMOUNT'' as \"name\"\n,to_char(TOTAL_LIA_AMOUNT) as \"value\"\n ,''6'' \"type\",''6''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where TOTAL_LIA_AMOUNT is not null'\n;\n END FNC_DU_GAP_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DU_GAP;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DU_GAP_DELTA_NWA (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ,INPAR_I1            IN FLOAT\n ,INPAR_I2            IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTAP (\n  INPAR_DUR_ASSET   IN FLOAT\n ,INPAR_DUR_LIA     IN FLOAT\n ,INPAR_I1          IN FLOAT\n ,INPAR_I2          IN FLOAT\n ,INPAR_TYPE        IN VARCHAR2\n ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DURGAP (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DU_GAP_REPORT_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_GET_REPORT_INFO RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_du_gap_total_result \n\n(\ninpar_I1 in float,\ninpar_I2 in float\n\n)\nreturn varchar2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_DU_GAP;"},{"Name":"PKG_DU_GAP","ObjectID":282028,"Digest":"d00a6b056e598c5e4f1821ef790d88aba996572f2e75d789cbb03011b5eeed9e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DU_GAP_DELTA_NWA (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ,INPAR_I1            IN FLOAT\n ,INPAR_I2            IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTAP (\n  INPAR_DUR_ASSET   IN FLOAT\n ,INPAR_DUR_LIA     IN FLOAT\n ,INPAR_I1          IN FLOAT\n ,INPAR_I2          IN FLOAT\n ,INPAR_TYPE        IN VARCHAR2\n ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DURGAP (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DU_GAP_REPORT_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_GET_REPORT_INFO RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_du_gap_total_result \n\n(\ninpar_I1 in float,\ninpar_I2 in float\n\n)\nreturn varchar2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_DU_GAP;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DU_GAP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTA_NWA (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ,INPAR_I1            IN FLOAT\n ,INPAR_I2            IN FLOAT\n ) RETURN FLOAT AS\n  OUTPAR_DELTA_NWA   FLOAT;\n BEGIN\n  OUTPAR_DELTA_NWA   := ROUND(\n   ( (-1) * FNC_DU_GAP_DURGAP(\n    INPAR_DUR_ASSET\n   ,INPAR_DUR_LIA\n   ,INPAR_ASSET_VALUE\n   ,INPAR_LIA_VALUE\n   ) ) * ( (INPAR_I2 - INPAR_I1) / (1 + INPAR_I1) )\n  ,3\n  );\n\n  RETURN OUTPAR_DELTA_NWA;\n END FNC_DU_GAP_DELTA_NWA;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTAP (\n  INPAR_DUR_ASSET   IN FLOAT\n ,INPAR_DUR_LIA     IN FLOAT\n ,INPAR_I1          IN FLOAT\n ,INPAR_I2          IN FLOAT\n ,INPAR_TYPE        IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  OUTPAR_DELTAP_ASSET   FLOAT;\n  OUTPAR_DELTAP_LIA     FLOAT;\n  VAR_DUR_ASSET         FLOAT;\n  VAR_DUR_LIA           FLOAT;\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n   VAR_DUR_ASSET         := (-1 ) * INPAR_DUR_ASSET;\n   OUTPAR_DELTAP_ASSET   := ROUND(\n    (VAR_DUR_ASSET) * ( (INPAR_I2 - INPAR_I1) / (1 + INPAR_I1) )\n   ,3\n   );\n\n   RETURN OUTPAR_DELTAP_ASSET;\n  ELSE\n   VAR_DUR_LIA         := (-1 ) * INPAR_DUR_LIA;\n   OUTPAR_DELTAP_LIA   := ROUND(\n    (VAR_DUR_LIA) * ( (INPAR_I2 - INPAR_I1) / (1 + INPAR_I1) )\n   ,3\n   );\n\n   RETURN OUTPAR_DELTAP_LIA;\n  END IF;\n  /*RETURN OUTPAR_DELTAP_ASSET || ',' || OUTPAR_DELTAP_LIA;*/\n END FNC_DU_GAP_DELTAP;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DURGAP (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ) RETURN FLOAT AS\n  OUTPAR_DURGAP   FLOAT;\n BEGIN\n  OUTPAR_DURGAP   := ROUND(\n   ( (INPAR_DUR_ASSET) - ( (INPAR_LIA_VALUE / INPAR_ASSET_VALUE) * INPAR_DUR_LIA) )\n  ,3\n  );\n\n  RETURN OUTPAR_DURGAP;\n  --RETURN NULL;\n END FNC_DU_GAP_DURGAP;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DU_GAP_REPORT_DETAIL\n  AS\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_DU_GAP_REPORT_DETAIL';\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(BALANCE) AS AMOUNT\n  ,'0.4'\n  ,1\n  ,1\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'سپرده کمتر از يک سال'\n  FROM AKIN.TBL_DEPOSIT\n  WHERE DUE_DATE \u003c= SYSDATE + 365\n   OR\n    DUE_DATE IS NULL;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(BALANCE) AS AMOUNT\n  ,'0.4'\n  ,1\n  ,2\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'سپرده بين يک تا دو سال'\n  FROM AKIN.TBL_DEPOSIT\n  WHERE DUE_DATE \u003e= SYSDATE + 365\n   AND\n    DUE_DATE \u003c= SYSDATE + 730;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(BALANCE) AS AMOUNT\n  ,'0.4'\n  ,1\n  ,3\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'سپرده بيشتر از دو سال'\n  FROM AKIN.TBL_DEPOSIT\n  WHERE DUE_DATE \u003e SYSDATE + 730;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(AMOUNT) AS AMOUNT\n  ,'0.4'\n  ,2\n  ,1\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'تسهيلات کمتر از يک سال'\n  FROM AKIN.TBL_LOAN_PAYMENT\n  WHERE DUE_DATE \u003e= SYSDATE\n   AND\n    DUE_DATE \u003c= SYSDATE + 365;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(AMOUNT) AS AMOUNT\n  ,'0.4'\n  ,2\n  ,2\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'تسهيلات بين يک تا دو سال'\n  FROM AKIN.TBL_LOAN_PAYMENT\n  WHERE DUE_DATE \u003e SYSDATE + 365\n   AND\n    DUE_DATE \u003c= SYSDATE + 730;\n\n  COMMIT;\n  INSERT INTO TBL_DU_GAP_REPORT_DETAIL (\n   AMOUNT\n  ,DURATION\n  ,TYPE\n  ,TITLE\n  ,TOTAL_ASSETS_WEIGHT\n  ,TOTAL_LIA_WEIGHT\n  ,TOTAL_ASSETS_AMOUNT\n  ,TOTAL_LIA_AMOUNT\n  ,NAME\n  ) SELECT\n   SUM(AMOUNT) AS AMOUNT\n  ,'0.4'\n  ,2\n  ,3\n  ,''\n  ,''\n  ,''\n  ,''\n  ,'تسهيلات بيشتر از دو سال'\n  FROM AKIN.TBL_LOAN_PAYMENT\n  WHERE DUE_DATE \u003e SYSDATE + 730;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_LIA_AMOUNT = (\n     SELECT\n      SUM(AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 2\n    )\n  WHERE TYPE   = 2;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_ASSETS_AMOUNT = (\n     SELECT\n      SUM(AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 1\n    )\n  WHERE TYPE   = 1;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_ASSETS_WEIGHT = (\n     SELECT\n      SUM(WEIGHT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 1\n    ) / (\n     SELECT DISTINCT\n      MAX(TOTAL_ASSETS_AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n    )\n  WHERE TYPE   = 1;\n\n  COMMIT;\n  UPDATE TBL_DU_GAP_REPORT_DETAIL\n   SET\n    TOTAL_LIA_WEIGHT = (\n     SELECT\n      SUM(WEIGHT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n     WHERE TYPE   = 2\n    ) / (\n     SELECT DISTINCT\n      MAX(TOTAL_LIA_AMOUNT)\n     FROM TBL_DU_GAP_REPORT_DETAIL\n    )\n  WHERE TYPE   = 2;\n\n  COMMIT;\n END PRC_DU_GAP_REPORT_DETAIL;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_TOTAL_RESULT (\n  INPAR_I1   IN FLOAT\n ,INPAR_I2   IN FLOAT\n ) RETURN VARCHAR2 AS\n\n  VAR_DUR_ASSET        FLOAT;\n  VAR_DUR_LIA          FLOAT;\n  VAR_ASSET_VALUE      FLOAT;\n  VAR_LIA_VALUE        FLOAT;\n  OUTPAR_DLTAP_ASSET   varchar2(8000);\n  OUTPAR_DLTAP_LIA     varchar2(8000);\n  OUTPAR_DURGAP        varchar2(8000);\n  OUTPAR_DELTA_NWA     varchar2(8000);\n BEGIN\n  SELECT DISTINCT\n   ( TOTAL_ASSETS_WEIGHT )\n  INTO\n   VAR_DUR_ASSET\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 1;\n\n  SELECT DISTINCT\n   ( TOTAL_LIA_WEIGHT )\n  INTO\n   VAR_DUR_LIA\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 2;\n\n  SELECT DISTINCT\n   ( TOTAL_ASSETS_AMOUNT )\n  INTO\n   VAR_ASSET_VALUE\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 1;\n\n  SELECT DISTINCT\n   ( TOTAL_LIA_AMOUNT )\n  INTO\n   VAR_LIA_VALUE\n  FROM TBL_DU_GAP_REPORT_DETAIL\n  WHERE TYPE   = 2;\n\n  OUTPAR_DLTAP_ASSET   := PKG_DU_GAP.FNC_DU_GAP_DELTAP(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,INPAR_I1\n  ,INPAR_I2\n  ,1\n  );\n   select REPLACE(to_char(OUTPAR_DLTAP_ASSET), '.', '0.') into OUTPAR_DLTAP_ASSET from dual;\n   \n  OUTPAR_DLTAP_LIA     := PKG_DU_GAP.FNC_DU_GAP_DELTAP(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,INPAR_I1\n  ,INPAR_I2\n  ,0\n  );\n  \n  select REPLACE(to_char(OUTPAR_DLTAP_LIA), '.', '0.') into OUTPAR_DLTAP_LIA from dual;\n  OUTPAR_DURGAP        := PKG_DU_GAP.FNC_DU_GAP_DURGAP(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,VAR_ASSET_VALUE\n  ,VAR_LIA_VALUE\n  );\n  \n    select REPLACE(to_char(OUTPAR_DURGAP), '.', '0.') into OUTPAR_DURGAP from dual;\n\n  OUTPAR_DELTA_NWA     := PKG_DU_GAP.FNC_DU_GAP_DELTA_NWA(\n   VAR_DUR_ASSET\n  ,VAR_DUR_LIA\n  ,VAR_ASSET_VALUE\n  ,VAR_LIA_VALUE\n  ,INPAR_I1\n  ,INPAR_I2\n  );\n   select REPLACE(to_char(OUTPAR_DELTA_NWA), '.0', '0.0') into OUTPAR_DELTA_NWA from dual;\n\n  RETURN 'select ''' ||\n  OUTPAR_DLTAP_ASSET ||\n  ''' as \"deltapAsset\",''' ||\n  OUTPAR_DLTAP_LIA ||\n  ''' as \"deltapLia\",''' ||\n  OUTPAR_DURGAP ||\n  ''' as \"durGap\" ,''' ||\n  OUTPAR_DELTA_NWA ||\n  ''' as \"deltaNwa\" from dual';\n\n END FNC_DU_GAP_TOTAL_RESULT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_GET_REPORT_INFO RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'SELECT\n NAME\"name\"\n ,to_char(AMOUNT)\"value\"\n ,TYPE\"type\"\n ,TITLE\"title\"\nFROM TBL_DU_GAP_REPORT_DETAIL union\nSELECT distinct\n''TOTAL_ASSETS_WEIGHT'' as \"name\"\n,case when  to_char(TOTAL_ASSETS_WEIGHT)\u003c 1 then to_char(0||TOTAL_ASSETS_WEIGHT) else to_char(TOTAL_ASSETS_WEIGHT) end as \"value\"\n ,''3'' \"type\",''3''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where total_assets_weight is not null union\nSELECT distinct\n''TOTAL_LIA_WEIGHT'' as \"name\"\n,case when  to_char(TOTAL_LIA_WEIGHT)\u003c 1 then to_char(0||TOTAL_LIA_WEIGHT) else to_char(TOTAL_LIA_WEIGHT) end as \"value\"\n ,''4'' \"type\",''4''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where TOTAL_LIA_WEIGHT is not null union\nSELECT distinct\n''TOTAL_ASSETS_AMOUNT'' as \"name\"\n,to_char(TOTAL_ASSETS_AMOUNT) as \"value\"\n ,''5'' \"type\",''5''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where TOTAL_ASSETS_AMOUNT is not null union\nSELECT distinct\n''TOTAL_LIA_AMOUNT'' as \"name\"\n,to_char(TOTAL_LIA_AMOUNT) as \"value\"\n ,''6'' \"type\",''6''  \"title\" \nFROM TBL_DU_GAP_REPORT_DETAIL where TOTAL_LIA_AMOUNT is not null'\n;\n END FNC_DU_GAP_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DU_GAP;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DU_GAP_DELTA_NWA (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ,INPAR_I1            IN FLOAT\n ,INPAR_I2            IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DELTAP (\n  INPAR_DUR_ASSET   IN FLOAT\n ,INPAR_DUR_LIA     IN FLOAT\n ,INPAR_I1          IN FLOAT\n ,INPAR_I2          IN FLOAT\n ,INPAR_TYPE        IN VARCHAR2\n ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_DURGAP (\n  INPAR_DUR_ASSET     IN FLOAT\n ,INPAR_DUR_LIA       IN FLOAT\n ,INPAR_ASSET_VALUE   IN FLOAT\n ,INPAR_LIA_VALUE     IN FLOAT\n ) RETURN FLOAT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DU_GAP_REPORT_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DU_GAP_GET_REPORT_INFO RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_du_gap_total_result \n\n(\ninpar_I1 in float,\ninpar_I2 in float\n\n)\nreturn varchar2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_DU_GAP;"},{"Name":"PKG_STATE_REPORT","ObjectID":282382,"Digest":"250aa7158c5edaf2d1f5f86c2e0c8a1a14ee4bf6e8ca4a542a5966e14000a083","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_STATE_REPORT\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REP_PROFILE_DETAIL(\n      INPAR_REPORT IN NUMBER \n      ,INPAR_NOTIF_ID in NUMBER,\n    OUTPAR_RES out varchar2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REPORT_PROFILE(\n      INPAR_NAME                IN VARCHAR2 ,\n      INPAR_DES                 IN VARCHAR2 ,\n      INPAR_REF_USER            IN VARCHAR2 ,\n      INPAR_STATUS              IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE    IN VARCHAR2 ,\n      inpar_ledger_profile      IN VARCHAR2,\n      inpar_timing_profile      IN VARCHAR2,\n      inpar_dep_profile         IN VARCHAR2,\n      inpar_loan_profile        IN VARCHAR2,\n      inpar_brn_profile         IN VARCHAR2,\n      inpar_cus_profile         IN VARCHAR2,\n      inpar_cur_profile         IN VARCHAR2,\n      inpar_timing_profile_type IN VARCHAR2,\n      INPAR_ID                  IN VARCHAR2 ,\n      INPAR_TYPE                IN VARCHAR2 , -- manzoor riali,....\n      OUTPAR_ID OUT VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_report_get_map(\n      inpar_report IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_rep_get_map_detail(\n      inpar_report IN VARCHAR2,\n      inpar_state  IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/        \n    PROCEDURE PRC_state_rep_DELETE_archive (\n  INPAR_ID   IN VARCHAR2,\n  inpar_version IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION FNC_state_rep_GET_INPUT_edit(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_INPUT_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION fnc_state_rep_get_map_archive(\n      inpar_report IN VARCHAR2,\n      inpar_version in varchar2)\n    RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_detail_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nEND PKG_STATE_REPORT;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_STATE_REPORT\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_STATE_REP_PROFILE_DETAIL(\n    INPAR_REPORT IN NUMBER ,\n    INPAR_NOTIF_ID in NUMBER,\n    OUTPAR_RES out varchar2)\nAS\nvar_notif_id number;\nvar_version number;\nvar_version_notif number;\nvar_count number;\n\nBEGIN\n \n\n  PRC_REPORT_VALUE(INPAR_REPORT);\n--  DELETE FROM TBL_STATE_REP_PROFILE_DETAIL WHERE ref_report= INPAR_REPORT;\n--  COMMIT;\n\n  --========== Fill REPREQ FOR ARCHIVE REPORT\n  \n  INSERT\nINTO TBL_REPREQ\n  (\n\n    REF_REPORT_ID,\n    REQ_DATE,\n    STATUS,\n    TYPE,\n    CATEGORY\n  )\n  values\n (\n INPAR_REPORT\n ,sysdate\n ,1\n ,'composite'\n  ,'province'\n  );\n  commit;\n  \n  select max(id) into var_version from TBL_REPREQ;\n  --===========\n  \n\n\n--select COALESCE(sum(version),0) into var_version from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = INPAR_REPORT;\n\n\n  INSERT INTO TBL_STATE_REP_PROFILE_DETAIL\n    (\n      VERSION,\n      REF_REPORT,\n      OUTPUT_BALANCE,\n      INPUT_BALANCE,\n      REF_STATE,\n      TIMING\n      \n    )\n  \n  SELECT var_version,inpar_report,\n    NVL(\n    CASE\n      WHEN SUM(BALANCE)\u003c=0\n      THEN ABS(SUM(BALANCE))\n    END,0) AS output,\n    NVL(\n    CASE\n      WHEN SUM(BALANCE)\u003e0\n      THEN ABS(SUM(BALANCE))\n    END,0) AS input,\n    REF_STA_ID,\n    REF_TIMING_ID\n  FROM TBL_VALUE_TEMP\n  GROUP BY REF_STA_ID,\n  REF_TIMING_ID,ref_modality_type;\n  commit;\n--else\n--   INSERT INTO TBL_STATE_REP_PROFILE_DETAIL\n--    (\n--      VERSION,\n--      REF_REPORT,\n--      OUTPUT_BALANCE,\n--      INPUT_BALANCE,\n--      REF_STATE,\n--      TIMING\n--      )\n--   \n--  SELECT  (select max(version)+1 from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = INPAR_REPORT),inpar_report,\n--    NVL(\n--    CASE\n--      WHEN SUM(BALANCE)\u003c=0\n--      THEN ABS(SUM(BALANCE))\n--    END,0) AS output,\n--    NVL(\n--    CASE\n--      WHEN SUM(BALANCE)\u003e0\n--      THEN ABS(SUM(BALANCE))\n--    END,0) AS input,\n--    REF_STA_ID,\n--    REF_TIMING_ID\n--  FROM TBL_VALUE_TEMP\n--  GROUP BY REF_STA_ID,\n--  REF_TIMING_ID;\n--  commit;\n--  END IF;\n    \n    select count(*) into var_count from TBL_STATE_REP_PROFILE_DETAIL where ref_report = inpar_report;\n    \n    if (var_count =0) then \n          INSERT INTO TBL_STATE_REP_PROFILE_DETAIL (\n VERSION\n ,REF_REPORT\n ,OUTPUT_BALANCE\n ,INPUT_BALANCE\n ,REF_STATE\n ,TIMING\n)\n select * from  (select  \nvar_version as version,\ninpar_report,\n0 as out,0 as \"in\",1 from dual) a ,(select id as a from tbl_timing_profile_detail where ref_timing_profile =\n(SELECT REF_PROFILE_TIME\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = inpar_report))b;\n  commit;\n  end if;\n    \n    \n    INSERT INTO TBL_STATE_REP_PROFILE_DETAIL (\n VERSION\n ,REF_REPORT\n ,OUTPUT_BALANCE\n ,INPUT_BALANCE\n ,REF_STATE\n ,TIMING\n) SELECT\n (\n  SELECT\n   MAX(VERSION)\n  FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = INPAR_REPORT\n )\n ,INPAR_REPORT\n ,0\n ,0\n ,S.STA_ID\n ,A.TIMING\nFROM TBL_STATE S\n ,    (\n  SELECT DISTINCT\n   TIMING\n  FROM TBL_STATE_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = INPAR_REPORT\n   AND\n    VERSION      = (\n     SELECT\n      MAX(VERSION)\n     FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT =INPAR_REPORT\n    )\n ) A\nWHERE S.STA_ID || A.TIMING NOT IN (\n  SELECT\n   REF_STATE || TIMING\n  FROM TBL_STATE_REP_PROFILE_DETAIL\n  ,    TBL_STATE\n  WHERE REF_REPORT   = INPAR_REPORT\n   AND\n    VERSION      = (\n     SELECT\n      MAX(VERSION)\n     FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT =INPAR_REPORT\n    )\n );\n commit;\n SELECT\n      MAX(VERSION) into var_version_notif\n     FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT =INPAR_REPORT;\n \n    --berozresani elanat\n\n PRC_NOTIFICATION(\n  'update'\n ,INPAR_NOTIF_ID\n ,''\n ,''\n ,''\n ,'finished'\n ,0\n ,''\n ,0\n ,var_version_notif\n ,''\n ,'0'\n ,VAR_NOTIF_ID\n );   --khoroji alaki\n  OUTPAR_RES := var_notif_id;\n  \n  \n\nEND PRC_STATE_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_STATE_REPORT_PROFILE(\n    INPAR_NAME                IN VARCHAR2 ,\n    INPAR_DES                 IN VARCHAR2 ,\n    INPAR_REF_USER            IN VARCHAR2 ,\n    INPAR_STATUS              IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE    IN VARCHAR2 ,\n    inpar_ledger_profile      IN VARCHAR2,\n    inpar_timing_profile      IN VARCHAR2,\n    inpar_dep_profile         IN VARCHAR2,\n    inpar_loan_profile        IN VARCHAR2,\n    inpar_brn_profile         IN VARCHAR2,\n    inpar_cus_profile         IN VARCHAR2,\n    inpar_cur_profile         IN VARCHAR2,\n    inpar_timing_profile_type IN VARCHAR2,\n    INPAR_ID                  IN VARCHAR2 ,\n    INPAR_TYPE                IN VARCHAR2 , -- manzoor riali,....\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n    var_ledger_profile      number;\n    var_timing_profile      number;\n    var_dep_profile         number;\n    var_loan_profile        number;\n    var_brn_profile         number;\n    var_cus_profile         number;\n    var_cur_profile         number;\nBEGIN\n\nselect max(id) into  var_dep_profile from tbl_profile where upper(type)='TBL_DEPOSIT' and  h_id = inpar_dep_profile;\nselect max(id) into  var_loan_profile from tbl_profile where upper(type)='TBL_LOAN' and  h_id = inpar_loan_profile;\nselect max(id) into  var_brn_profile from tbl_profile where upper(type)='TBL_BRANCH' and  h_id = inpar_brn_profile;\nselect max(id) into  var_cur_profile from tbl_profile where upper(type)='TBL_CURRENCY' and  h_id = inpar_cur_profile;\nselect max(id) into  var_cus_profile from tbl_profile where upper(type)='TBL_CUSTOMER' and  h_id = inpar_cus_profile;\nselect max(id) into  var_timing_profile from TBL_TIMING_PROFILE where type in (1,2) and h_id = inpar_timing_profile;\nselect max(id) into  var_ledger_profile from TBL_LEDGER_PROFILE where upper(type)='TBL_LEDGER' and  h_id = inpar_ledger_profile;\n\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        TYPE,\n        REF_LEDGER_PROFIEL,\n        ref_timing_profile,\n        REF_DEP_PROFILE,\n        REF_LON_PROFILE,\n        REF_BRN_PROFILE,\n        REF_CUS_PROFILE,\n        REF_CUR_PROFILE,\n        TIMING_PROFILE_TYPE\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'province' ,\n        INPAR_TYPE,\n        var_ledger_profile ,\n        var_timing_profile,\n        var_dep_profile ,\n        var_loan_profile ,\n        var_brn_profile ,\n        var_cus_profile ,\n        var_cur_profile ,\n        inpar_timing_profile_type\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME              = INPAR_NAME ,\n      DES                 = INPAR_DES ,\n      REF_USER            = INPAR_REF_USER ,\n      STATUS              = INPAR_STATUS ,\n      TYPE                = INPAR_TYPE,\n      REF_LEDGER_PROFIEL  = var_ledger_profile ,\n      REF_TIMING_PROFILE  = var_timing_profile,\n      REF_DEP_PROFILE     = var_dep_profile ,\n      REF_LON_PROFILE     = var_loan_profile ,\n      REF_BRN_PROFILE     = var_brn_profile ,\n      REF_CUS_PROFILE     = var_cus_profile ,\n      REF_CUR_PROFILE     = var_cur_profile ,\n      timing_profile_type = inpar_timing_profile_type\n    WHERE ID              = INPAR_ID;\n    COMMIT;\n  END IF;\n  --=============\n  --==============\nEND PRC_STATE_REPORT_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_state_report_get_map(\n    inpar_report IN VARCHAR2)\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'select max(version) as version,ref_state,sum(GAP) as GAP,sum(INPUT_BALANCE) as INPUT_BALANCE,sum(OUTPUT_BALANCE) as OUTPUT_BALANCE,TIMING from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||' and version in (select max(version) from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||')  group by ref_report,ref_state,TIMING  ';\nEND fnc_state_report_get_map;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_state_rep_get_map_archive(\n    inpar_report IN VARCHAR2,\n    inpar_version in varchar2)\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'select '||inpar_version||' \"version\" ,ref_state \"hc-key\",sum(GAP) \"gap\",sum(INPUT_BALANCE) \"input\",sum(OUTPUT_BALANCE) \"output\",TIMING \"time\" from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||' and version ='||inpar_version||' group by ref_report,ref_state,TIMING ';\nEND fnc_state_rep_get_map_archive;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nFUNCTION fnc_state_rep_get_map_detail(\n    inpar_report IN VARCHAR2,\n    inpar_state  IN VARCHAR2)\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'select version \"version\" ,ref_state \"hc-key\",GAP \"gap\",INPUT_BALANCE \"input\",OUTPUT_BALANCE \"output\",TIMING \"time\"  from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||' and REF_state = '||inpar_state||' version in (select max(version) from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||') ';\nEND fnc_state_rep_get_map_detail;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_state_rep_DELETE_archive (\n  INPAR_ID   IN VARCHAR2,\n  inpar_version IN VARCHAR2,\n OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_STATE_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID and VERSION = inpar_version;\n\n  COMMIT;\n END PRC_state_rep_DELETE_archive;\n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n FUNCTION FNC_state_rep_GET_INPUT_edit(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n  OUTPUT := '\nSELECT\n  NAME,\n  DES,\n  CREATE_DATE,\n  REF_USER,\n  STATUS,\n  REF_LEDGER_PROFIEL,\n  REF_TIMING_PROFILE,\n  REF_DEP_PROFILE,\n  REF_LON_PROFILE,\n  REF_BRN_PROFILE,\n  REF_CUS_PROFILE,\n  REF_CUR_PROFILE,\n  TYPE,\n  CATEGORY,\n  TIMING_PROFILE_TYPE\nFROM TBL_REPORT where id = '||inpar_report||'' ;\n  RETURN OUTPUT;\nEND FNC_state_rep_GET_INPUT_edit;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_state_rep_GET_INPUT_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n  OUTPUT := '\n    select id,TIMING from TBL_STATE_REP_PROFILE_DETAIL where ref_report = '||inpar_report||'' ;\n  RETURN OUTPUT;\nEND FNC_state_rep_GET_INPUT_time;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_state_rep_GET_detail_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n\n  select REF_PROFILE_TIME into VAR from tbl_report_profile where REF_REPORT = inpar_report;\n\n  OUTPUT := '\n    select id \"id\",period_name \"name\" from tbl_timing_profile_detail where ref_timing_profile = '||VAR||' order by ID' ;\n  RETURN OUTPUT;\nEND FNC_state_rep_GET_detail_time;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_STATE_REPORT;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_STATE_REPORT\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REP_PROFILE_DETAIL(\n      INPAR_REPORT IN NUMBER \n      ,INPAR_NOTIF_ID in NUMBER,\n    OUTPAR_RES out varchar2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REPORT_PROFILE(\n      INPAR_NAME                IN VARCHAR2 ,\n      INPAR_DES                 IN VARCHAR2 ,\n      INPAR_REF_USER            IN VARCHAR2 ,\n      INPAR_STATUS              IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE    IN VARCHAR2 ,\n      inpar_ledger_profile      IN VARCHAR2,\n      inpar_timing_profile      IN VARCHAR2,\n      inpar_dep_profile         IN VARCHAR2,\n      inpar_loan_profile        IN VARCHAR2,\n      inpar_brn_profile         IN VARCHAR2,\n      inpar_cus_profile         IN VARCHAR2,\n      inpar_cur_profile         IN VARCHAR2,\n      inpar_timing_profile_type IN VARCHAR2,\n      INPAR_ID                  IN VARCHAR2 ,\n      INPAR_TYPE                IN VARCHAR2 , -- manzoor riali,....\n      OUTPAR_ID OUT VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_report_get_map(\n      inpar_report IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_rep_get_map_detail(\n      inpar_report IN VARCHAR2,\n      inpar_state  IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/        \n    PROCEDURE PRC_state_rep_DELETE_archive (\n  INPAR_ID   IN VARCHAR2,\n  inpar_version IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION FNC_state_rep_GET_INPUT_edit(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_INPUT_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION fnc_state_rep_get_map_archive(\n      inpar_report IN VARCHAR2,\n      inpar_version in varchar2)\n    RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_detail_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nEND PKG_STATE_REPORT;"},{"Name":"PKG_STATE_REPORT","ObjectID":282390,"Digest":"250aa7158c5edaf2d1f5f86c2e0c8a1a14ee4bf6e8ca4a542a5966e14000a083","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_STATE_REPORT\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REP_PROFILE_DETAIL(\n      INPAR_REPORT IN NUMBER \n      ,INPAR_NOTIF_ID in NUMBER,\n    OUTPAR_RES out varchar2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REPORT_PROFILE(\n      INPAR_NAME                IN VARCHAR2 ,\n      INPAR_DES                 IN VARCHAR2 ,\n      INPAR_REF_USER            IN VARCHAR2 ,\n      INPAR_STATUS              IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE    IN VARCHAR2 ,\n      inpar_ledger_profile      IN VARCHAR2,\n      inpar_timing_profile      IN VARCHAR2,\n      inpar_dep_profile         IN VARCHAR2,\n      inpar_loan_profile        IN VARCHAR2,\n      inpar_brn_profile         IN VARCHAR2,\n      inpar_cus_profile         IN VARCHAR2,\n      inpar_cur_profile         IN VARCHAR2,\n      inpar_timing_profile_type IN VARCHAR2,\n      INPAR_ID                  IN VARCHAR2 ,\n      INPAR_TYPE                IN VARCHAR2 , -- manzoor riali,....\n      OUTPAR_ID OUT VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_report_get_map(\n      inpar_report IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_rep_get_map_detail(\n      inpar_report IN VARCHAR2,\n      inpar_state  IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/        \n    PROCEDURE PRC_state_rep_DELETE_archive (\n  INPAR_ID   IN VARCHAR2,\n  inpar_version IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION FNC_state_rep_GET_INPUT_edit(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_INPUT_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION fnc_state_rep_get_map_archive(\n      inpar_report IN VARCHAR2,\n      inpar_version in varchar2)\n    RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_detail_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nEND PKG_STATE_REPORT;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_STATE_REPORT\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_STATE_REP_PROFILE_DETAIL(\n    INPAR_REPORT IN NUMBER ,\n    INPAR_NOTIF_ID in NUMBER,\n    OUTPAR_RES out varchar2)\nAS\nvar_notif_id number;\nvar_version number;\nvar_version_notif number;\nvar_count number;\n\nBEGIN\n \n\n  PRC_REPORT_VALUE(INPAR_REPORT);\n--  DELETE FROM TBL_STATE_REP_PROFILE_DETAIL WHERE ref_report= INPAR_REPORT;\n--  COMMIT;\n\n  --========== Fill REPREQ FOR ARCHIVE REPORT\n  \n  INSERT\nINTO TBL_REPREQ\n  (\n\n    REF_REPORT_ID,\n    REQ_DATE,\n    STATUS,\n    TYPE,\n    CATEGORY\n  )\n  values\n (\n INPAR_REPORT\n ,sysdate\n ,1\n ,'composite'\n  ,'province'\n  );\n  commit;\n  \n  select max(id) into var_version from TBL_REPREQ;\n  --===========\n  \n\n\n--select COALESCE(sum(version),0) into var_version from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = INPAR_REPORT;\n\n\n  INSERT INTO TBL_STATE_REP_PROFILE_DETAIL\n    (\n      VERSION,\n      REF_REPORT,\n      OUTPUT_BALANCE,\n      INPUT_BALANCE,\n      REF_STATE,\n      TIMING\n      \n    )\n  \n  SELECT var_version,inpar_report,\n    NVL(\n    CASE\n      WHEN SUM(BALANCE)\u003c=0\n      THEN ABS(SUM(BALANCE))\n    END,0) AS output,\n    NVL(\n    CASE\n      WHEN SUM(BALANCE)\u003e0\n      THEN ABS(SUM(BALANCE))\n    END,0) AS input,\n    REF_STA_ID,\n    REF_TIMING_ID\n  FROM TBL_VALUE_TEMP\n  GROUP BY REF_STA_ID,\n  REF_TIMING_ID,ref_modality_type;\n  commit;\n--else\n--   INSERT INTO TBL_STATE_REP_PROFILE_DETAIL\n--    (\n--      VERSION,\n--      REF_REPORT,\n--      OUTPUT_BALANCE,\n--      INPUT_BALANCE,\n--      REF_STATE,\n--      TIMING\n--      )\n--   \n--  SELECT  (select max(version)+1 from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = INPAR_REPORT),inpar_report,\n--    NVL(\n--    CASE\n--      WHEN SUM(BALANCE)\u003c=0\n--      THEN ABS(SUM(BALANCE))\n--    END,0) AS output,\n--    NVL(\n--    CASE\n--      WHEN SUM(BALANCE)\u003e0\n--      THEN ABS(SUM(BALANCE))\n--    END,0) AS input,\n--    REF_STA_ID,\n--    REF_TIMING_ID\n--  FROM TBL_VALUE_TEMP\n--  GROUP BY REF_STA_ID,\n--  REF_TIMING_ID;\n--  commit;\n--  END IF;\n    \n    select count(*) into var_count from TBL_STATE_REP_PROFILE_DETAIL where ref_report = inpar_report;\n    \n    if (var_count =0) then \n          INSERT INTO TBL_STATE_REP_PROFILE_DETAIL (\n VERSION\n ,REF_REPORT\n ,OUTPUT_BALANCE\n ,INPUT_BALANCE\n ,REF_STATE\n ,TIMING\n)\n select * from  (select  \nvar_version as version,\ninpar_report,\n0 as out,0 as \"in\",1 from dual) a ,(select id as a from tbl_timing_profile_detail where ref_timing_profile =\n(SELECT REF_PROFILE_TIME\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = inpar_report))b;\n  commit;\n  end if;\n    \n    \n    INSERT INTO TBL_STATE_REP_PROFILE_DETAIL (\n VERSION\n ,REF_REPORT\n ,OUTPUT_BALANCE\n ,INPUT_BALANCE\n ,REF_STATE\n ,TIMING\n) SELECT\n (\n  SELECT\n   MAX(VERSION)\n  FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = INPAR_REPORT\n )\n ,INPAR_REPORT\n ,0\n ,0\n ,S.STA_ID\n ,A.TIMING\nFROM TBL_STATE S\n ,    (\n  SELECT DISTINCT\n   TIMING\n  FROM TBL_STATE_REP_PROFILE_DETAIL\n  WHERE REF_REPORT   = INPAR_REPORT\n   AND\n    VERSION      = (\n     SELECT\n      MAX(VERSION)\n     FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT =INPAR_REPORT\n    )\n ) A\nWHERE S.STA_ID || A.TIMING NOT IN (\n  SELECT\n   REF_STATE || TIMING\n  FROM TBL_STATE_REP_PROFILE_DETAIL\n  ,    TBL_STATE\n  WHERE REF_REPORT   = INPAR_REPORT\n   AND\n    VERSION      = (\n     SELECT\n      MAX(VERSION)\n     FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT =INPAR_REPORT\n    )\n );\n commit;\n SELECT\n      MAX(VERSION) into var_version_notif\n     FROM TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT =INPAR_REPORT;\n \n    --berozresani elanat\n\n PRC_NOTIFICATION(\n  'update'\n ,INPAR_NOTIF_ID\n ,''\n ,''\n ,''\n ,'finished'\n ,0\n ,''\n ,0\n ,var_version_notif\n ,''\n ,'0'\n ,VAR_NOTIF_ID\n );   --khoroji alaki\n  OUTPAR_RES := var_notif_id;\n  \n  \n\nEND PRC_STATE_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_STATE_REPORT_PROFILE(\n    INPAR_NAME                IN VARCHAR2 ,\n    INPAR_DES                 IN VARCHAR2 ,\n    INPAR_REF_USER            IN VARCHAR2 ,\n    INPAR_STATUS              IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE    IN VARCHAR2 ,\n    inpar_ledger_profile      IN VARCHAR2,\n    inpar_timing_profile      IN VARCHAR2,\n    inpar_dep_profile         IN VARCHAR2,\n    inpar_loan_profile        IN VARCHAR2,\n    inpar_brn_profile         IN VARCHAR2,\n    inpar_cus_profile         IN VARCHAR2,\n    inpar_cur_profile         IN VARCHAR2,\n    inpar_timing_profile_type IN VARCHAR2,\n    INPAR_ID                  IN VARCHAR2 ,\n    INPAR_TYPE                IN VARCHAR2 , -- manzoor riali,....\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n    var_ledger_profile      number;\n    var_timing_profile      number;\n    var_dep_profile         number;\n    var_loan_profile        number;\n    var_brn_profile         number;\n    var_cus_profile         number;\n    var_cur_profile         number;\nBEGIN\n\nselect max(id) into  var_dep_profile from tbl_profile where upper(type)='TBL_DEPOSIT' and  h_id = inpar_dep_profile;\nselect max(id) into  var_loan_profile from tbl_profile where upper(type)='TBL_LOAN' and  h_id = inpar_loan_profile;\nselect max(id) into  var_brn_profile from tbl_profile where upper(type)='TBL_BRANCH' and  h_id = inpar_brn_profile;\nselect max(id) into  var_cur_profile from tbl_profile where upper(type)='TBL_CURRENCY' and  h_id = inpar_cur_profile;\nselect max(id) into  var_cus_profile from tbl_profile where upper(type)='TBL_CUSTOMER' and  h_id = inpar_cus_profile;\nselect max(id) into  var_timing_profile from TBL_TIMING_PROFILE where type in (1,2) and h_id = inpar_timing_profile;\nselect max(id) into  var_ledger_profile from TBL_LEDGER_PROFILE where upper(type)='TBL_LEDGER' and  h_id = inpar_ledger_profile;\n\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        TYPE,\n        REF_LEDGER_PROFIEL,\n        ref_timing_profile,\n        REF_DEP_PROFILE,\n        REF_LON_PROFILE,\n        REF_BRN_PROFILE,\n        REF_CUS_PROFILE,\n        REF_CUR_PROFILE,\n        TIMING_PROFILE_TYPE\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'province' ,\n        INPAR_TYPE,\n        var_ledger_profile ,\n        var_timing_profile,\n        var_dep_profile ,\n        var_loan_profile ,\n        var_brn_profile ,\n        var_cus_profile ,\n        var_cur_profile ,\n        inpar_timing_profile_type\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME              = INPAR_NAME ,\n      DES                 = INPAR_DES ,\n      REF_USER            = INPAR_REF_USER ,\n      STATUS              = INPAR_STATUS ,\n      TYPE                = INPAR_TYPE,\n      REF_LEDGER_PROFIEL  = var_ledger_profile ,\n      REF_TIMING_PROFILE  = var_timing_profile,\n      REF_DEP_PROFILE     = var_dep_profile ,\n      REF_LON_PROFILE     = var_loan_profile ,\n      REF_BRN_PROFILE     = var_brn_profile ,\n      REF_CUS_PROFILE     = var_cus_profile ,\n      REF_CUR_PROFILE     = var_cur_profile ,\n      timing_profile_type = inpar_timing_profile_type\n    WHERE ID              = INPAR_ID;\n    COMMIT;\n  END IF;\n  --=============\n  --==============\nEND PRC_STATE_REPORT_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_state_report_get_map(\n    inpar_report IN VARCHAR2)\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'select max(version) as version,ref_state,sum(GAP) as GAP,sum(INPUT_BALANCE) as INPUT_BALANCE,sum(OUTPUT_BALANCE) as OUTPUT_BALANCE,TIMING from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||' and version in (select max(version) from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||')  group by ref_report,ref_state,TIMING  ';\nEND fnc_state_report_get_map;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_state_rep_get_map_archive(\n    inpar_report IN VARCHAR2,\n    inpar_version in varchar2)\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'select '||inpar_version||' \"version\" ,ref_state \"hc-key\",sum(GAP) \"gap\",sum(INPUT_BALANCE) \"input\",sum(OUTPUT_BALANCE) \"output\",TIMING \"time\" from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||' and version ='||inpar_version||' group by ref_report,ref_state,TIMING ';\nEND fnc_state_rep_get_map_archive;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nFUNCTION fnc_state_rep_get_map_detail(\n    inpar_report IN VARCHAR2,\n    inpar_state  IN VARCHAR2)\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'select version \"version\" ,ref_state \"hc-key\",GAP \"gap\",INPUT_BALANCE \"input\",OUTPUT_BALANCE \"output\",TIMING \"time\"  from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||' and REF_state = '||inpar_state||' version in (select max(version) from TBL_STATE_REP_PROFILE_DETAIL where REF_REPORT = '||inpar_report||') ';\nEND fnc_state_rep_get_map_detail;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_state_rep_DELETE_archive (\n  INPAR_ID   IN VARCHAR2,\n  inpar_version IN VARCHAR2,\n OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_STATE_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID and VERSION = inpar_version;\n\n  COMMIT;\n END PRC_state_rep_DELETE_archive;\n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n FUNCTION FNC_state_rep_GET_INPUT_edit(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n  OUTPUT := '\nSELECT\n  NAME,\n  DES,\n  CREATE_DATE,\n  REF_USER,\n  STATUS,\n  REF_LEDGER_PROFIEL,\n  REF_TIMING_PROFILE,\n  REF_DEP_PROFILE,\n  REF_LON_PROFILE,\n  REF_BRN_PROFILE,\n  REF_CUS_PROFILE,\n  REF_CUR_PROFILE,\n  TYPE,\n  CATEGORY,\n  TIMING_PROFILE_TYPE\nFROM TBL_REPORT where id = '||inpar_report||'' ;\n  RETURN OUTPUT;\nEND FNC_state_rep_GET_INPUT_edit;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_state_rep_GET_INPUT_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n  OUTPUT := '\n    select id,TIMING from TBL_STATE_REP_PROFILE_DETAIL where ref_report = '||inpar_report||'' ;\n  RETURN OUTPUT;\nEND FNC_state_rep_GET_INPUT_time;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_state_rep_GET_detail_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  OUTPUT VARCHAR2(2000);\n  VAR    VARCHAR2(2000);\nBEGIN\n\n  select REF_PROFILE_TIME into VAR from tbl_report_profile where REF_REPORT = inpar_report;\n\n  OUTPUT := '\n    select id \"id\",period_name \"name\" from tbl_timing_profile_detail where ref_timing_profile = '||VAR||' order by ID' ;\n  RETURN OUTPUT;\nEND FNC_state_rep_GET_detail_time;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_STATE_REPORT;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_STATE_REPORT\" \nAS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REP_PROFILE_DETAIL(\n      INPAR_REPORT IN NUMBER \n      ,INPAR_NOTIF_ID in NUMBER,\n    OUTPAR_RES out varchar2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_STATE_REPORT_PROFILE(\n      INPAR_NAME                IN VARCHAR2 ,\n      INPAR_DES                 IN VARCHAR2 ,\n      INPAR_REF_USER            IN VARCHAR2 ,\n      INPAR_STATUS              IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE    IN VARCHAR2 ,\n      inpar_ledger_profile      IN VARCHAR2,\n      inpar_timing_profile      IN VARCHAR2,\n      inpar_dep_profile         IN VARCHAR2,\n      inpar_loan_profile        IN VARCHAR2,\n      inpar_brn_profile         IN VARCHAR2,\n      inpar_cus_profile         IN VARCHAR2,\n      inpar_cur_profile         IN VARCHAR2,\n      inpar_timing_profile_type IN VARCHAR2,\n      INPAR_ID                  IN VARCHAR2 ,\n      INPAR_TYPE                IN VARCHAR2 , -- manzoor riali,....\n      OUTPAR_ID OUT VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_report_get_map(\n      inpar_report IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_state_rep_get_map_detail(\n      inpar_report IN VARCHAR2,\n      inpar_state  IN VARCHAR2)\n    RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/        \n    PROCEDURE PRC_state_rep_DELETE_archive (\n  INPAR_ID   IN VARCHAR2,\n  inpar_version IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION FNC_state_rep_GET_INPUT_edit(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_INPUT_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n  FUNCTION fnc_state_rep_get_map_archive(\n      inpar_report IN VARCHAR2,\n      inpar_version in varchar2)\n    RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_state_rep_GET_detail_time(\n    inpar_report IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nEND PKG_STATE_REPORT;"},{"Name":"PKG_JOB","ObjectID":282537,"Digest":"246cebb8bb63a460d93b4b887d462ce45c1431a535852cbc99157ee3db73d637","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_JOB\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_JOB_PROFILE (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_CREATED_BY         IN VARCHAR2\n ,INPAR_RUN_TIME           IN VARCHAR2\n ,INPAR_IS_ENABLED         IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_IS_YEARLY          IN VARCHAR2\n ,INPAR_JOB_YEARS          IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_PROFILE_DETAIL (\n  INPAR_JOB_REPORTS   IN VARCHAR2\n ,INPAR_JOB_DATE      IN VARCHAR2\n ,INPAR_ID            IN VARCHAR2\n ,OUTPAR_ID           OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_PROFILE_LIST RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_ACTIVE_PROGRAM ( I_DATE IN DATE ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STORE_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_REPORTS ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STATUS ( INPAR_REPORT IN VARCHAR2,INPAR_STATUS  IN VARCHAR2) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_create_body ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_JOB;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_JOB\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Description:\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_JOB_DELETE_PROFILE(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  /*disable job*/\n  /*delete job */\n  DELETE\n  FROM TBL_JOB_PROFILE\n  WHERE ID = INPAR_ID;\n  COMMIT;\n  OUTPAR_ID := 1;\nEND PRC_JOB_DELETE_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_JOB_PROFILE(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_CREATED_BY       IN VARCHAR2 ,\n    INPAR_RUN_TIME         IN VARCHAR2 ,\n    INPAR_IS_ENABLED       IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_IS_YEARLY        IN VARCHAR2 ,\n    INPAR_JOB_YEARS        IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_JOB_PROFILE\n      (\n        NAME ,\n        DESCRIPTION ,\n        CREATE_DATE ,\n        RUN_TIME ,\n        CREATED_BY ,\n        IS_ENABLE ,\n        IS_YEARLY ,\n        JOB_YEARS\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_RUN_TIME ,\n        INPAR_CREATED_BY ,\n        INPAR_IS_ENABLED ,\n        INPAR_IS_YEARLY ,\n        INPAR_JOB_YEARS\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_JOB_PROFILE\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_JOB_PROFILE\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_JOB_PROFILE\n      );\n  ELSE\n    /* DBMS_SCHEDULER.DISABLE(INPAR_ID);*/\n    /* remove_job bayad ezafe shvad;*/\n    UPDATE TBL_JOB_PROFILE\n    SET NAME      = INPAR_NAME ,\n      DESCRIPTION = INPAR_DES ,\n      CREATE_DATE = SYSDATE ,\n      RUN_TIME    = INPAR_RUN_TIME ,\n      CREATED_BY  = INPAR_CREATED_BY ,\n      IS_ENABLE   = INPAR_IS_ENABLED ,\n      IS_YEARLY   = INPAR_IS_YEARLY ,\n      JOB_YEARS   = INPAR_JOB_YEARS\n    WHERE ID      = INPAR_ID;\n    COMMIT;\n    /*   DELETE FROM TBL_JOB_PROFILE WHERE ID   = INPAR_ID;*/\n    /**/\n    /*   COMMIT;*/\n    /*   INSERT INTO TBL_JOB_PROFILE (*/\n    /*    NAME*/\n    /*   ,DESCRIPTION*/\n    /*   ,CREATE_DATE*/\n    /*   ,RUN_TIME*/\n    /*   ,CREATED_BY*/\n    /*   ,IS_ENABLE*/\n    /*   ,IS_YEARLY*/\n    /*   ,JOB_YEARS*/\n    /*   ) VALUES (*/\n    /*    INPAR_NAME*/\n    /*   ,INPAR_DES*/\n    /*   ,SYSDATE*/\n    /*   ,INPAR_RUN_TIME*/\n    /*   ,INPAR_CREATED_BY*/\n    /*   ,INPAR_IS_ENABLED*/\n    /*   ,INPAR_IS_YEARLY  */\n    /*   ,INPAR_JOB_YEARS */\n    /*   );*/\n    /**/\n    /*   COMMIT;*/\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_JOB_PROFILE*/\n    /*   WHERE CREATE_DATE   = (*/\n    /*      SELECT*/\n    /*       MAX(CREATE_DATE)*/\n    /*      FROM TBL_JOB_PROFILE*/\n    /*     )*/\n    /*    AND*/\n    /*     ID            = (*/\n    /*      SELECT*/\n    /*       MAX(ID)*/\n    /*      FROM TBL_JOB_PROFILE*/\n    /*     );*/\n  END IF;\n  /* sakhte jobe jadid*/\nEND PRC_JOB_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_JOB_PROFILE_DETAIL(\n    INPAR_JOB_REPORTS IN VARCHAR2 ,\n    INPAR_JOB_DATE    IN VARCHAR2 ,\n    INPAR_ID          IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n  var_name     VARCHAR2(2000);\n  var_name_job VARCHAR2(2000);\n  var_dec      VARCHAR2(20000);\n  var_job_date VARCHAR2(20000);\n  var_schedule VARCHAR2(32000);\n  var_job      VARCHAR2(32000);\n  var_count    NUMBER :=0;\n    var_count_job    NUMBER :=0;\n\nBEGIN\n  UPDATE TBL_JOB_PROFILE\n  SET JOB_REPORTS = INPAR_JOB_REPORTS ,\n    JOB_DATE      = REPLACE(INPAR_JOB_DATE,'NaN',1)\n  WHERE ID        = INPAR_ID;\n  COMMIT;\n  SELECT 'sch_'||id INTO var_name FROM TBL_JOB_PROFILE WHERE id = inpar_id;\n  SELECT 'job_'||id INTO var_name_job FROM TBL_JOB_PROFILE WHERE id = inpar_id;\n  SELECT DESCRIPTION INTO var_dec FROM TBL_JOB_PROFILE WHERE id = inpar_id;\n  var_job_date :=REPLACE(INPAR_JOB_DATE,'NaN',1);\n  SELECT COUNT(OBJECT_NAME)\n  INTO var_count\n  FROM all_objects\n  WHERE owner     ='PRAGG'\n  AND OBJECT_TYPE ='SCHEDULE'\n  AND OBJECT_NAME =upper(var_name);\n  \n  var_schedule := 'begin DBMS_SCHEDULER.CREATE_SCHEDULE ( repeat_interval =\u003e '''||var_job_date||''', comments =\u003e'''|| var_dec||''', schedule_name =\u003e '''||var_name||'''); end;';\n  SELECT COUNT(OBJECT_NAME)\n  INTO var_count_job\n  FROM all_objects\n  WHERE owner     ='PRAGG'\n  AND OBJECT_TYPE ='JOB'\n  AND OBJECT_NAME =upper(var_name_job);\n  IF var_count_job    \u003e0 THEN\n    dbms_scheduler.drop_job(job_name =\u003e upper(var_name_job),\n                                defer =\u003e false,\n                                force =\u003e true);\n  END IF;\nIF var_count    \u003e0 THEN\n    BEGIN\n      DBMS_SCHEDULER.DROP_SCHEDULE(schedule_name =\u003e 'PRAGG.'||var_name, force =\u003e false);\n    END;\n  END IF;\n  EXECUTE IMMEDIATE var_schedule;\n\n  var_job:='  \nBEGIN\nDBMS_SCHEDULER.CREATE_JOB (\njob_name =\u003e ''PRAGG.'||var_name_job||''',            \nschedule_name =\u003e ''PRAGG.'||var_name||''',            \njob_type =\u003e ''PLSQL_BLOCK'',            \njob_action =\u003e '''||FNC_JOB_create_body(INPAR_ID)||''',            \nnumber_of_arguments =\u003e 0,            \nenabled =\u003e FALSE,            \nauto_drop =\u003e FALSE,                           \ncomments =\u003e '''||var_dec||''');                   \n\nDBMS_SCHEDULER.SET_ATTRIBUTE(\nname =\u003e ''PRAGG.'||var_name_job||''',              \nattribute =\u003e ''logging_level'', value =\u003e DBMS_SCHEDULER.LOGGING_OFF);                \n\nDBMS_SCHEDULER.enable(\nname =\u003e ''PRAGG.'||var_name_job||''');\nEND;';\n EXECUTE IMMEDIATE var_job;\n  OUTPAR_ID := inpar_id;\nEND PRC_JOB_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE_LIST\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN ' \nSELECT ID as \"id\",  \nNAME as \"name\",  \nDESCRIPTION as \"description\",  \nCREATE_DATE as \"createDate\",  \nCREATED_BY as \"createBy\"\nFROM TBL_JOB_PROFILE ' ;\nEND FNC_JOB_GET_PROFILE_LIST;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_ACTIVE_PROGRAM ( I_DATE IN DATE ) \n  RETURN VARCHAR2\nAS\n/*\n  @author MYM\n  @date 1397-10-10\n  @what create a blcok code, for executing today based on tbl_job data\n*/\n  V_BLOCK VARCHAR2(4000);\n  V_CURRENT_DATE DATE;\n  V_LENGTH NUMBER;\n  CURSOR V_CUR IS \n    SELECT *\n    FROM TBL_JOB\n    WHERE ENABLE = 1;\nBEGIN\n  V_BLOCK := 'BEGIN ';\n  -- THIS LOOP, ITERAVE ON ALL JOBS TO FIND ACTIVE ONES\n  FOR REC IN V_CUR LOOP\n    V_CURRENT_DATE := TRUNC(REC.START_DATE);\n    V_LENGTH := 1;\n    -- THIS LOOP, CHECK THAT IS EXECUTION DATE RECIEVED OR NOT?\n    WHILE V_LENGTH \u003c= REC.DURATION_LENGTH AND V_CURRENT_DATE \u003c= I_DATE LOOP\n      IF V_CURRENT_DATE = TRUNC(I_DATE) THEN\n        V_BLOCK := V_BLOCK || REC.PROGRAM || ';';\n        V_LENGTH := 1;\n        EXIT;\n      ELSE \n        -- DATA ASSINGMENT FOR NEXT LOOP\n        V_LENGTH := V_LENGTH+1;\n        V_CURRENT_DATE := CASE WHEN REC.DURATION_TYPE LIKE 'WEEKLY' THEN V_CURRENT_DATE + 7\n                               WHEN REC.DURATION_TYPE LIKE 'DAILY' THEN V_CURRENT_DATE+1\n                               WHEN REC.DURATION_TYPE LIKE 'MONTHLY' THEN ADD_MONTHS(V_CURRENT_DATE, 1)\n                               WHEN REC.DURATION_TYPE LIKE 'SEASONAL' THEN ADD_MONTHS(V_CURRENT_DATE, 3)\n                               WHEN REC.DURATION_TYPE LIKE 'ANNUAL' THEN ADD_MONTHS(V_CURRENT_DATE, 12)\n                        \n                          END;\n      END IF;\n    END LOOP;\n  END LOOP;\n  \n  V_BLOCK := V_BLOCK || ' END;';\n  \n  RETURN V_BLOCK;\nEND FNC_ACTIVE_PROGRAM;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'SELECT ID as \"id\",  \nNAME as \"name\",  \nDESCRIPTION as \"description\",  \nCREATE_DATE as \"createDate\",  \nCREATED_BY as \"createBy\",  \nis_yearly as \"isYearly\",  \njob_years as \"years\",  \nrun_time as \"runTime\"\nFROM TBL_JOB_PROFILE where id = ''' || INPAR_ID || '''';\nEND FNC_JOB_GET_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_STORE_DATE(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR_QUERY  VARCHAR2(30000);\n  VAR_QUERY2 VARCHAR2(30000);\n  NUMBER_ONE NUMBER;\n  NUMBER_TWO NUMBER;\n  VAR_RETURN VARCHAR2(30000);\n  PRAGMA AUTONOMOUS_TRANSACTION;\nBEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''RRRRMMDD''';\n  DELETE FROM TBL_JOB_STORE_DATE WHERE REF_REPORT = INPAR_REPORT;\n  SELECT JOB_DATE INTO VAR_QUERY FROM TBL_JOB_PROFILE WHERE ID = INPAR_REPORT;\n  IF (VAR_QUERY IS NOT NULL)THEN\n    SELECT REGEXP_INSTR(VAR_QUERY,'BYDATE') + 7 INTO NUMBER_ONE FROM DUAL;\n    SELECT REGEXP_INSTR(VAR_QUERY,'BYHOUR') - 1 INTO NUMBER_TWO FROM DUAL;\n    SELECT SUBSTR( VAR_QUERY ,NUMBER_ONE ,NUMBER_TWO - NUMBER_ONE )\n    INTO VAR_RETURN\n    FROM DUAL;\n    SELECT 'insert all '\n      || LISTAGG('into tbl_job_store_date (REF_REPORT,JOB_DATE) values( '\n      || INPAR_REPORT\n      || ',to_char(to_date(''2017'\n      || REGEXP_SUBSTR( VAR_RETURN ,'[^,]+' ,1 ,LEVEL )\n      || ''',''yyyymmdd''),''yyyy-mm-dd'',''nls_calendar=persian'')) ',' ') WITHIN GROUP(\n    ORDER BY 'into tbl_job_store_date (REF_REPORT,JOB_DATE) values( '\n      || INPAR_REPORT\n      || ',to_char(to_date(''2017'\n      || REGEXP_SUBSTR( VAR_RETURN ,'[^,]+' ,1 ,LEVEL )\n      || ''',''yyyymmdd''),''yyyy-mm-dd'',''nls_calendar=persian'')) ')\n      || ' select * from dual'\n    INTO VAR_QUERY2\n    FROM DUAL\n      CONNECT BY REGEXP_SUBSTR( VAR_RETURN ,'[^,]+' ,1 ,LEVEL ) IS NOT NULL;\n    EXECUTE IMMEDIATE 'begin ' || VAR_QUERY2 || '; end;';\n    COMMIT;\n    UPDATE tbl_job_store_date\n    SET job_date     = REPLACE(job_date, '1395','1396')\n    WHERE ref_report =INPAR_REPORT;\n    COMMIT;\n  ELSE\n    NULL;\n    COMMIT;\n  END IF;\n  RETURN 1;\nEND FNC_JOB_STORE_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_JOB_REPORTS(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR  VARCHAR2(30000);\n  VAR1 VARCHAR2(30000);\nBEGIN\n  SELECT JOB_REPORTS INTO VAR1 FROM tbl_job_profile WHERE ID = INPAR_REPORT ;\n  VAR := 'select id \"reportId\",TYPE \"reportType\",CATEGORY \"category\",name \"reportName\" from tbl_report where id in ( select regexp_substr('''||VAR1||''',''[^,]+'', 1, level) from dual     \nconnect by regexp_substr('''||VAR1||''', ''[^,]+'', 1, level) is not null)';\n  RETURN VAR;\nEND FNC_JOB_GET_JOB_REPORTS;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_JOB_DATE(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR VARCHAR2(30000);\nBEGIN\n  VAR := FNC_JOB_STORE_DATE(INPAR_REPORT);\n  VAR := 'SELECT \nJOB_DATE \"date\"\nFROM TBL_JOB_STORE_DATE WHERE REF_REPORT  =' || INPAR_REPORT || ' ';\n  RETURN VAR;\nEND FNC_JOB_GET_JOB_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_STATUS(\n    INPAR_REPORT IN VARCHAR2,\n    INPAR_STATUS IN VARCHAR2)\n  RETURN VARCHAR2\nAS\n  VAR VARCHAR2(30000);\n  PRAGMA AUTONOMOUS_TRANSACTION;\nBEGIN\n  UPDATE tbl_job_profile SET IS_ENABLE = INPAR_STATUS WHERE ID =INPAR_REPORT;\n  COMMIT;\n  RETURN 1;\nEND FNC_JOB_STATUS;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_create_body(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  var_notif      NUMBER;\n  var_reports    VARCHAR2(20000);\n  var_type       VARCHAR2(50);\n  var_cat        VARCHAR2(50);\n  var_name       VARCHAR2(100);\n  var_out        VARCHAR2(2000);\n  var_job_action VARCHAR2(32000);\nBEGIN\n  SELECT JOB_REPORTS\n  INTO var_reports\n  FROM TBL_JOB_PROFILE\n  WHERE id       = INPAR_REPORT;\n  var_job_action:= 'declare   var_notif   NUMBER; var_out VARCHAR2(2000); begin ';\n  FOR i IN\n  (SELECT regexp_substr(var_reports,'[^,]+', 1, level) AS a\n  FROM dual\n    CONNECT BY regexp_substr(var_reports, '[^,]+', 1, level) IS NOT NULL\n  )\n  LOOP\n    SELECT type,\n      category,\n      name\n    INTO var_type,\n      var_cat,\n      var_name\n    FROM tbl_report\n    WHERE id         = i.a;\n    IF ( var_cat     ='gap'  ) THEN\n      var_job_action:=var_job_action ||' PRC_NOTIFICATION(''''insert'''','''''''',''''normal'''',''''lug'''','''''||var_name||''''',''''progress'''',''''job'''',''''gap/rial'''','||i.a||','''''''','''''''',var_notif);      \nPRC_CREATE_REPORT_REQUEST('||i.a||',''''job'''',var_notif,var_out);';\n    END IF;\n    IF ( var_cat ='liquidity') THEN\n      var_job_action:=var_job_action ||' PRC_NOTIFICATION(''''insert'''','''''''',''''normal'''',''''lug'''','''''||var_name||''''',''''progress'''',''''job'''',''''liquidity/rial'''','||i.a||','''''''','''''''',var_notif);      \nPRC_CREATE_REPORT_REQUEST('||i.a||',''''job'''',var_notif,var_out);';\n    END IF;\n    IF ( var_cat     ='province') THEN\n      var_job_action:=var_job_action ||' PRC_NOTIFICATION(''''insert'''','''''''',''''normal'''',''''province'''','''''||var_name||''''',''''progress'''',''''job'''',''''province/composite'''','||i.a||','''''''','''''''',var_notif);      \nPKG_STATE_REPORT.PRC_STATE_REP_PROFILE_DETAIL('''''||i.a||''''',var_notif,var_out);';\n    END IF;\n  END LOOP;\n  var_job_action:=var_job_action ||'end;';\n  RETURN var_job_action;\nEND FNC_JOB_create_body;\nEND PKG_JOB;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_JOB\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_JOB_PROFILE (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_CREATED_BY         IN VARCHAR2\n ,INPAR_RUN_TIME           IN VARCHAR2\n ,INPAR_IS_ENABLED         IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_IS_YEARLY          IN VARCHAR2\n ,INPAR_JOB_YEARS          IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_PROFILE_DETAIL (\n  INPAR_JOB_REPORTS   IN VARCHAR2\n ,INPAR_JOB_DATE      IN VARCHAR2\n ,INPAR_ID            IN VARCHAR2\n ,OUTPAR_ID           OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_PROFILE_LIST RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_ACTIVE_PROGRAM ( I_DATE IN DATE ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STORE_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_REPORTS ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STATUS ( INPAR_REPORT IN VARCHAR2,INPAR_STATUS  IN VARCHAR2) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_create_body ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_JOB;"},{"Name":"PKG_JOB","ObjectID":282538,"Digest":"246cebb8bb63a460d93b4b887d462ce45c1431a535852cbc99157ee3db73d637","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_JOB\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_JOB_PROFILE (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_CREATED_BY         IN VARCHAR2\n ,INPAR_RUN_TIME           IN VARCHAR2\n ,INPAR_IS_ENABLED         IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_IS_YEARLY          IN VARCHAR2\n ,INPAR_JOB_YEARS          IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_PROFILE_DETAIL (\n  INPAR_JOB_REPORTS   IN VARCHAR2\n ,INPAR_JOB_DATE      IN VARCHAR2\n ,INPAR_ID            IN VARCHAR2\n ,OUTPAR_ID           OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_PROFILE_LIST RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_ACTIVE_PROGRAM ( I_DATE IN DATE ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STORE_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_REPORTS ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STATUS ( INPAR_REPORT IN VARCHAR2,INPAR_STATUS  IN VARCHAR2) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_create_body ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_JOB;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_JOB\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Description:\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_JOB_DELETE_PROFILE(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  /*disable job*/\n  /*delete job */\n  DELETE\n  FROM TBL_JOB_PROFILE\n  WHERE ID = INPAR_ID;\n  COMMIT;\n  OUTPAR_ID := 1;\nEND PRC_JOB_DELETE_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_JOB_PROFILE(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_CREATED_BY       IN VARCHAR2 ,\n    INPAR_RUN_TIME         IN VARCHAR2 ,\n    INPAR_IS_ENABLED       IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_IS_YEARLY        IN VARCHAR2 ,\n    INPAR_JOB_YEARS        IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nBEGIN\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_JOB_PROFILE\n      (\n        NAME ,\n        DESCRIPTION ,\n        CREATE_DATE ,\n        RUN_TIME ,\n        CREATED_BY ,\n        IS_ENABLE ,\n        IS_YEARLY ,\n        JOB_YEARS\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_RUN_TIME ,\n        INPAR_CREATED_BY ,\n        INPAR_IS_ENABLED ,\n        INPAR_IS_YEARLY ,\n        INPAR_JOB_YEARS\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_JOB_PROFILE\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_JOB_PROFILE\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_JOB_PROFILE\n      );\n  ELSE\n    /* DBMS_SCHEDULER.DISABLE(INPAR_ID);*/\n    /* remove_job bayad ezafe shvad;*/\n    UPDATE TBL_JOB_PROFILE\n    SET NAME      = INPAR_NAME ,\n      DESCRIPTION = INPAR_DES ,\n      CREATE_DATE = SYSDATE ,\n      RUN_TIME    = INPAR_RUN_TIME ,\n      CREATED_BY  = INPAR_CREATED_BY ,\n      IS_ENABLE   = INPAR_IS_ENABLED ,\n      IS_YEARLY   = INPAR_IS_YEARLY ,\n      JOB_YEARS   = INPAR_JOB_YEARS\n    WHERE ID      = INPAR_ID;\n    COMMIT;\n    /*   DELETE FROM TBL_JOB_PROFILE WHERE ID   = INPAR_ID;*/\n    /**/\n    /*   COMMIT;*/\n    /*   INSERT INTO TBL_JOB_PROFILE (*/\n    /*    NAME*/\n    /*   ,DESCRIPTION*/\n    /*   ,CREATE_DATE*/\n    /*   ,RUN_TIME*/\n    /*   ,CREATED_BY*/\n    /*   ,IS_ENABLE*/\n    /*   ,IS_YEARLY*/\n    /*   ,JOB_YEARS*/\n    /*   ) VALUES (*/\n    /*    INPAR_NAME*/\n    /*   ,INPAR_DES*/\n    /*   ,SYSDATE*/\n    /*   ,INPAR_RUN_TIME*/\n    /*   ,INPAR_CREATED_BY*/\n    /*   ,INPAR_IS_ENABLED*/\n    /*   ,INPAR_IS_YEARLY  */\n    /*   ,INPAR_JOB_YEARS */\n    /*   );*/\n    /**/\n    /*   COMMIT;*/\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_JOB_PROFILE*/\n    /*   WHERE CREATE_DATE   = (*/\n    /*      SELECT*/\n    /*       MAX(CREATE_DATE)*/\n    /*      FROM TBL_JOB_PROFILE*/\n    /*     )*/\n    /*    AND*/\n    /*     ID            = (*/\n    /*      SELECT*/\n    /*       MAX(ID)*/\n    /*      FROM TBL_JOB_PROFILE*/\n    /*     );*/\n  END IF;\n  /* sakhte jobe jadid*/\nEND PRC_JOB_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_JOB_PROFILE_DETAIL(\n    INPAR_JOB_REPORTS IN VARCHAR2 ,\n    INPAR_JOB_DATE    IN VARCHAR2 ,\n    INPAR_ID          IN VARCHAR2 ,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\n  var_name     VARCHAR2(2000);\n  var_name_job VARCHAR2(2000);\n  var_dec      VARCHAR2(20000);\n  var_job_date VARCHAR2(20000);\n  var_schedule VARCHAR2(32000);\n  var_job      VARCHAR2(32000);\n  var_count    NUMBER :=0;\n    var_count_job    NUMBER :=0;\n\nBEGIN\n  UPDATE TBL_JOB_PROFILE\n  SET JOB_REPORTS = INPAR_JOB_REPORTS ,\n    JOB_DATE      = REPLACE(INPAR_JOB_DATE,'NaN',1)\n  WHERE ID        = INPAR_ID;\n  COMMIT;\n  SELECT 'sch_'||id INTO var_name FROM TBL_JOB_PROFILE WHERE id = inpar_id;\n  SELECT 'job_'||id INTO var_name_job FROM TBL_JOB_PROFILE WHERE id = inpar_id;\n  SELECT DESCRIPTION INTO var_dec FROM TBL_JOB_PROFILE WHERE id = inpar_id;\n  var_job_date :=REPLACE(INPAR_JOB_DATE,'NaN',1);\n  SELECT COUNT(OBJECT_NAME)\n  INTO var_count\n  FROM all_objects\n  WHERE owner     ='PRAGG'\n  AND OBJECT_TYPE ='SCHEDULE'\n  AND OBJECT_NAME =upper(var_name);\n  \n  var_schedule := 'begin DBMS_SCHEDULER.CREATE_SCHEDULE ( repeat_interval =\u003e '''||var_job_date||''', comments =\u003e'''|| var_dec||''', schedule_name =\u003e '''||var_name||'''); end;';\n  SELECT COUNT(OBJECT_NAME)\n  INTO var_count_job\n  FROM all_objects\n  WHERE owner     ='PRAGG'\n  AND OBJECT_TYPE ='JOB'\n  AND OBJECT_NAME =upper(var_name_job);\n  IF var_count_job    \u003e0 THEN\n    dbms_scheduler.drop_job(job_name =\u003e upper(var_name_job),\n                                defer =\u003e false,\n                                force =\u003e true);\n  END IF;\nIF var_count    \u003e0 THEN\n    BEGIN\n      DBMS_SCHEDULER.DROP_SCHEDULE(schedule_name =\u003e 'PRAGG.'||var_name, force =\u003e false);\n    END;\n  END IF;\n  EXECUTE IMMEDIATE var_schedule;\n\n  var_job:='  \nBEGIN\nDBMS_SCHEDULER.CREATE_JOB (\njob_name =\u003e ''PRAGG.'||var_name_job||''',            \nschedule_name =\u003e ''PRAGG.'||var_name||''',            \njob_type =\u003e ''PLSQL_BLOCK'',            \njob_action =\u003e '''||FNC_JOB_create_body(INPAR_ID)||''',            \nnumber_of_arguments =\u003e 0,            \nenabled =\u003e FALSE,            \nauto_drop =\u003e FALSE,                           \ncomments =\u003e '''||var_dec||''');                   \n\nDBMS_SCHEDULER.SET_ATTRIBUTE(\nname =\u003e ''PRAGG.'||var_name_job||''',              \nattribute =\u003e ''logging_level'', value =\u003e DBMS_SCHEDULER.LOGGING_OFF);                \n\nDBMS_SCHEDULER.enable(\nname =\u003e ''PRAGG.'||var_name_job||''');\nEND;';\n EXECUTE IMMEDIATE var_job;\n  OUTPAR_ID := inpar_id;\nEND PRC_JOB_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE_LIST\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN ' \nSELECT ID as \"id\",  \nNAME as \"name\",  \nDESCRIPTION as \"description\",  \nCREATE_DATE as \"createDate\",  \nCREATED_BY as \"createBy\"\nFROM TBL_JOB_PROFILE ' ;\nEND FNC_JOB_GET_PROFILE_LIST;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_ACTIVE_PROGRAM ( I_DATE IN DATE ) \n  RETURN VARCHAR2\nAS\n/*\n  @author MYM\n  @date 1397-10-10\n  @what create a blcok code, for executing today based on tbl_job data\n*/\n  V_BLOCK VARCHAR2(4000);\n  V_CURRENT_DATE DATE;\n  V_LENGTH NUMBER;\n  CURSOR V_CUR IS \n    SELECT *\n    FROM TBL_JOB\n    WHERE ENABLE = 1;\nBEGIN\n  V_BLOCK := 'BEGIN ';\n  -- THIS LOOP, ITERAVE ON ALL JOBS TO FIND ACTIVE ONES\n  FOR REC IN V_CUR LOOP\n    V_CURRENT_DATE := TRUNC(REC.START_DATE);\n    V_LENGTH := 1;\n    -- THIS LOOP, CHECK THAT IS EXECUTION DATE RECIEVED OR NOT?\n    WHILE V_LENGTH \u003c= REC.DURATION_LENGTH AND V_CURRENT_DATE \u003c= I_DATE LOOP\n      IF V_CURRENT_DATE = TRUNC(I_DATE) THEN\n        V_BLOCK := V_BLOCK || REC.PROGRAM || ';';\n        V_LENGTH := 1;\n        EXIT;\n      ELSE \n        -- DATA ASSINGMENT FOR NEXT LOOP\n        V_LENGTH := V_LENGTH+1;\n        V_CURRENT_DATE := CASE WHEN REC.DURATION_TYPE LIKE 'WEEKLY' THEN V_CURRENT_DATE + 7\n                               WHEN REC.DURATION_TYPE LIKE 'DAILY' THEN V_CURRENT_DATE+1\n                               WHEN REC.DURATION_TYPE LIKE 'MONTHLY' THEN ADD_MONTHS(V_CURRENT_DATE, 1)\n                               WHEN REC.DURATION_TYPE LIKE 'SEASONAL' THEN ADD_MONTHS(V_CURRENT_DATE, 3)\n                               WHEN REC.DURATION_TYPE LIKE 'ANNUAL' THEN ADD_MONTHS(V_CURRENT_DATE, 12)\n                        \n                          END;\n      END IF;\n    END LOOP;\n  END LOOP;\n  \n  V_BLOCK := V_BLOCK || ' END;';\n  \n  RETURN V_BLOCK;\nEND FNC_ACTIVE_PROGRAM;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\nBEGIN\n  RETURN 'SELECT ID as \"id\",  \nNAME as \"name\",  \nDESCRIPTION as \"description\",  \nCREATE_DATE as \"createDate\",  \nCREATED_BY as \"createBy\",  \nis_yearly as \"isYearly\",  \njob_years as \"years\",  \nrun_time as \"runTime\"\nFROM TBL_JOB_PROFILE where id = ''' || INPAR_ID || '''';\nEND FNC_JOB_GET_PROFILE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_STORE_DATE(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR_QUERY  VARCHAR2(30000);\n  VAR_QUERY2 VARCHAR2(30000);\n  NUMBER_ONE NUMBER;\n  NUMBER_TWO NUMBER;\n  VAR_RETURN VARCHAR2(30000);\n  PRAGMA AUTONOMOUS_TRANSACTION;\nBEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''RRRRMMDD''';\n  DELETE FROM TBL_JOB_STORE_DATE WHERE REF_REPORT = INPAR_REPORT;\n  SELECT JOB_DATE INTO VAR_QUERY FROM TBL_JOB_PROFILE WHERE ID = INPAR_REPORT;\n  IF (VAR_QUERY IS NOT NULL)THEN\n    SELECT REGEXP_INSTR(VAR_QUERY,'BYDATE') + 7 INTO NUMBER_ONE FROM DUAL;\n    SELECT REGEXP_INSTR(VAR_QUERY,'BYHOUR') - 1 INTO NUMBER_TWO FROM DUAL;\n    SELECT SUBSTR( VAR_QUERY ,NUMBER_ONE ,NUMBER_TWO - NUMBER_ONE )\n    INTO VAR_RETURN\n    FROM DUAL;\n    SELECT 'insert all '\n      || LISTAGG('into tbl_job_store_date (REF_REPORT,JOB_DATE) values( '\n      || INPAR_REPORT\n      || ',to_char(to_date(''2017'\n      || REGEXP_SUBSTR( VAR_RETURN ,'[^,]+' ,1 ,LEVEL )\n      || ''',''yyyymmdd''),''yyyy-mm-dd'',''nls_calendar=persian'')) ',' ') WITHIN GROUP(\n    ORDER BY 'into tbl_job_store_date (REF_REPORT,JOB_DATE) values( '\n      || INPAR_REPORT\n      || ',to_char(to_date(''2017'\n      || REGEXP_SUBSTR( VAR_RETURN ,'[^,]+' ,1 ,LEVEL )\n      || ''',''yyyymmdd''),''yyyy-mm-dd'',''nls_calendar=persian'')) ')\n      || ' select * from dual'\n    INTO VAR_QUERY2\n    FROM DUAL\n      CONNECT BY REGEXP_SUBSTR( VAR_RETURN ,'[^,]+' ,1 ,LEVEL ) IS NOT NULL;\n    EXECUTE IMMEDIATE 'begin ' || VAR_QUERY2 || '; end;';\n    COMMIT;\n    UPDATE tbl_job_store_date\n    SET job_date     = REPLACE(job_date, '1395','1396')\n    WHERE ref_report =INPAR_REPORT;\n    COMMIT;\n  ELSE\n    NULL;\n    COMMIT;\n  END IF;\n  RETURN 1;\nEND FNC_JOB_STORE_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_JOB_REPORTS(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR  VARCHAR2(30000);\n  VAR1 VARCHAR2(30000);\nBEGIN\n  SELECT JOB_REPORTS INTO VAR1 FROM tbl_job_profile WHERE ID = INPAR_REPORT ;\n  VAR := 'select id \"reportId\",TYPE \"reportType\",CATEGORY \"category\",name \"reportName\" from tbl_report where id in ( select regexp_substr('''||VAR1||''',''[^,]+'', 1, level) from dual     \nconnect by regexp_substr('''||VAR1||''', ''[^,]+'', 1, level) is not null)';\n  RETURN VAR;\nEND FNC_JOB_GET_JOB_REPORTS;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_JOB_DATE(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR VARCHAR2(30000);\nBEGIN\n  VAR := FNC_JOB_STORE_DATE(INPAR_REPORT);\n  VAR := 'SELECT \nJOB_DATE \"date\"\nFROM TBL_JOB_STORE_DATE WHERE REF_REPORT  =' || INPAR_REPORT || ' ';\n  RETURN VAR;\nEND FNC_JOB_GET_JOB_DATE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_STATUS(\n    INPAR_REPORT IN VARCHAR2,\n    INPAR_STATUS IN VARCHAR2)\n  RETURN VARCHAR2\nAS\n  VAR VARCHAR2(30000);\n  PRAGMA AUTONOMOUS_TRANSACTION;\nBEGIN\n  UPDATE tbl_job_profile SET IS_ENABLE = INPAR_STATUS WHERE ID =INPAR_REPORT;\n  COMMIT;\n  RETURN 1;\nEND FNC_JOB_STATUS;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_create_body(\n    INPAR_REPORT IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  var_notif      NUMBER;\n  var_reports    VARCHAR2(20000);\n  var_type       VARCHAR2(50);\n  var_cat        VARCHAR2(50);\n  var_name       VARCHAR2(100);\n  var_out        VARCHAR2(2000);\n  var_job_action VARCHAR2(32000);\nBEGIN\n  SELECT JOB_REPORTS\n  INTO var_reports\n  FROM TBL_JOB_PROFILE\n  WHERE id       = INPAR_REPORT;\n  var_job_action:= 'declare   var_notif   NUMBER; var_out VARCHAR2(2000); begin ';\n  FOR i IN\n  (SELECT regexp_substr(var_reports,'[^,]+', 1, level) AS a\n  FROM dual\n    CONNECT BY regexp_substr(var_reports, '[^,]+', 1, level) IS NOT NULL\n  )\n  LOOP\n    SELECT type,\n      category,\n      name\n    INTO var_type,\n      var_cat,\n      var_name\n    FROM tbl_report\n    WHERE id         = i.a;\n    IF ( var_cat     ='gap'  ) THEN\n      var_job_action:=var_job_action ||' PRC_NOTIFICATION(''''insert'''','''''''',''''normal'''',''''lug'''','''''||var_name||''''',''''progress'''',''''job'''',''''gap/rial'''','||i.a||','''''''','''''''',var_notif);      \nPRC_CREATE_REPORT_REQUEST('||i.a||',''''job'''',var_notif,var_out);';\n    END IF;\n    IF ( var_cat ='liquidity') THEN\n      var_job_action:=var_job_action ||' PRC_NOTIFICATION(''''insert'''','''''''',''''normal'''',''''lug'''','''''||var_name||''''',''''progress'''',''''job'''',''''liquidity/rial'''','||i.a||','''''''','''''''',var_notif);      \nPRC_CREATE_REPORT_REQUEST('||i.a||',''''job'''',var_notif,var_out);';\n    END IF;\n    IF ( var_cat     ='province') THEN\n      var_job_action:=var_job_action ||' PRC_NOTIFICATION(''''insert'''','''''''',''''normal'''',''''province'''','''''||var_name||''''',''''progress'''',''''job'''',''''province/composite'''','||i.a||','''''''','''''''',var_notif);      \nPKG_STATE_REPORT.PRC_STATE_REP_PROFILE_DETAIL('''''||i.a||''''',var_notif,var_out);';\n    END IF;\n  END LOOP;\n  var_job_action:=var_job_action ||'end;';\n  RETURN var_job_action;\nEND FNC_JOB_create_body;\nEND PKG_JOB;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_JOB\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_JOB_PROFILE (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_CREATED_BY         IN VARCHAR2\n ,INPAR_RUN_TIME           IN VARCHAR2\n ,INPAR_IS_ENABLED         IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_IS_YEARLY          IN VARCHAR2\n ,INPAR_JOB_YEARS          IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_PROFILE_DETAIL (\n  INPAR_JOB_REPORTS   IN VARCHAR2\n ,INPAR_JOB_DATE      IN VARCHAR2\n ,INPAR_ID            IN VARCHAR2\n ,OUTPAR_ID           OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_PROFILE_LIST RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_ACTIVE_PROGRAM ( I_DATE IN DATE ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_JOB_GET_PROFILE(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STORE_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_JOB_DELETE_PROFILE (\n  INPAR_ID    IN VARCHAR2\n ,OUTPAR_ID   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_REPORTS ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_GET_JOB_DATE ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_STATUS ( INPAR_REPORT IN VARCHAR2,INPAR_STATUS  IN VARCHAR2) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_JOB_create_body ( INPAR_REPORT IN VARCHAR2 ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_JOB;"},{"Name":"PKG_DUE_DATE","ObjectID":285327,"Digest":"2cd731bae22f7ac2cd03a2ae399c8db35b27e1167ad4201d8d2bb9b769e3a93b","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2  /*meghdare 1 bazei va meghdare 2 tarikhi*/\n\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_DUE_DATE;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE\" AS\n\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2  /*meghdare 1 bazei va meghdare 2 tarikhi*/\n\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_TIMING_PROFILE\n   ,TYPE\n   ,CATEGORY\n    ,TIMING_PROFILE_TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_TIMING_PROFILE\n   ,INPAR_TYPE\n   ,'duedate'\n   ,INPAR_TIMING_PRFILE_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,REF_TIMING_PROFILE = INPAR_TIMING_PROFILE\n    ,TYPE = INPAR_TYPE\n    ,TIMING_PROFILE_TYPE =INPAR_TIMING_PRFILE_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;   \n  END IF;\n  \n     update tbl_report set  H_ID = id where CATEGORY ='duedate' AND H_ID IS NULL;\n  commit;\n  \n END PRC_DUE_DATE_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n\n  VAR_QUERY     VARCHAR2(4000);\n  ID_LOAN       NUMBER;\n  ID_DEP        NUMBER;\n  ID_CUR        NUMBER;\n  ID_CUS        NUMBER;\n  ID_BRANCH     NUMBER;\n  ID_TIMING     NUMBER;\n  DATE_TYPE1    DATE := SYSDATE;\n  VAR_REP_REQ   NUMBER;\n  LOC_S         TIMESTAMP;\n  LOC_F         TIMESTAMP;\n  LOC_MEGHDAR   NUMBER;\n BEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''DD-MM-RRRR''';\n/*  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';*/\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n  SELECT\n   MAX(ID)\n  INTO\n   ID_TIMING\n  FROM TBL_TIMING_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_TIMING_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n  \n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n  COMMIT;\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REP_REQ\n  FROM TBL_REPREQ;\n    /*--------------TBL_REPPER-----------------*/\n  /******enteghal profile zamani be jadval repper*****--*/\n  /*-----------------------------------------*/\n\n  INSERT INTO TBL_REPPER (\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,REF_REPORT_ID\n  ,OLD_ID\n  ,REF_REQ_ID\n  ) SELECT\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,INPAR_ID_REPORT\n  ,ID\n  ,VAR_REP_REQ\n  FROM TBL_TIMING_PROFILE_DETAIL\n  WHERE REF_TIMING_PROFILE   = ID_TIMING;\n\n  COMMIT;\n  FOR I IN (\n   SELECT\n    TTPD.ID\n   ,TTP.TYPE\n   ,TTPD.PERIOD_NAME\n   ,TTPD.PERIOD_DATE\n   ,TTPD.PERIOD_START\n   ,TTPD.PERIOD_END\n   ,TTPD.PERIOD_COLOR\n   FROM TBL_TIMING_PROFILE TTP\n   ,    TBL_TIMING_PROFILE_DETAIL TTPD\n   WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n    AND\n     TTP.ID   = ID_TIMING\n  ) LOOP\n   IF\n    ( I.TYPE = 1 )\n   THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n)  \nSELECT\n' ||\n     VAR_REP_REQ ||\n     '\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE AS REF_DEPOSIT_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TD.BALANCE)\n ,4\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_DEPOSIT_TYPE,\n TD.RATE  ,\n  ''نرخ سود ''||TD.RATE ,\n   case when count(TD.RATE) is null then 0 else count(TD.RATE) end\nFROM AKIN.TBL_DEPOSIT TD\n ,  TBL_BRANCH TB\nWHERE DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''')+' ||\n     I.PERIOD_DATE ||\n     ' and TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_DEPOSIT_TYPE\n ,TD.RATE;\n\n'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n\n    \n    DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n) \nSELECT\n' ||\n     VAR_REP_REQ ||\n     '\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE AS REF_DEPOSIT_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TD.BALANCE)\n ,4\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_DEPOSIT_TYPE,\n TD.RATE  ,\n ''نرخ سود ''||TD.RATE ,\n   case when count(TD.RATE) is null then 0 else count(TD.RATE) end\n\nFROM AKIN.TBL_DEPOSIT TD\n ,  TBL_BRANCH TB\nWHERE TD.DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and TD.DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') and TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_DEPOSIT_TYPE\n ,TD.RATE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n        COMMIT;\n\n\n    \n   END IF;\n  END LOOP;\n\n  COMMIT;\n  UPDATE TBL_DUE_DATE_DETAIL DDD\n   SET\n    DDD.REF_EFF_DATE = (\n     SELECT\n      ID\n     FROM TBL_REPPER\n     WHERE REF_REQ_ID          = VAR_REP_REQ\n      AND\n       TBL_REPPER.OLD_ID   = DDD.REF_EFF_DATE\n    )\n  WHERE DDD.REP_REQ   = VAR_REP_REQ;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   VAR_REP_REQ\n  ,DDD.PARENT\n  ,DDD.CHILD\n  ,0\n  ,DDD.DEPTH\n  ,TP.ID\n  ,DDD.REGION_ID\n  ,DDD.TYPE\n  ,DDD.RATE\n  ,DDD.NAME\n  FROM TBL_DUE_DATE_DETAIL DDD\n  ,    TBL_REPPER TP\n  WHERE DDD.REP_REQ     = 0\n   AND\n    DDD.DEPTH       = 4\n   AND\n    TP.REF_REQ_ID   = VAR_REP_REQ\n   AND\n    DDD.CHILD || TP.ID NOT IN (\n     SELECT\n      CHILD || REF_EFF_DATE\n     FROM TBL_DUE_DATE_DETAIL\n     WHERE REP_REQ   = VAR_REP_REQ\n    );\n\n  COMMIT;\n  \n  update TBL_DUE_DATE_DETAIL set count = 0 where rep_req = VAR_REP_REQ and count is null ;\n  commit;\n  \n  /*-------------------------------------------------------------------------------------------*/\n  LOC_F         := SYSTIMESTAMP;\n  LOC_MEGHDAR   := SQL%ROWCOUNT;\n EXCEPTION\n  WHEN OTHERS THEN\n   RAISE;\n   END PRC_DUE_DATE_REPORT_VALUE;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DUE_DATE''';\n  RETURN VAR2;\n END FNC_DUE_DATE_ALL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select\n parent as \"parent\",child as \"id\",depth as \"level\",name as \"text\",RATE \"rate\",type \"type\",REGION_ID \"regionId\"\nfrom\n  tbl_due_date_detail\n  where rep_req = 0\nstart with\n  parent is null\nconnect by\n  prior child=parent'\n;\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_TREE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := ' SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,''x''||REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\n ,count as \"xcount\"\nFROM TBL_DUE_DATE_DETAIL\nwhere REP_REQ ='\n|| INPAR_ID || ' and PARENT is not null ';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_LEAF;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n  FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  IF\n   ( UPPER(INPAR_TYPE) = 'TYPE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.TYPE AS \"id\",DT.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL DDD,TBL_DEPOSIT_TYPE DT  WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND DDD.TYPE = DT.REF_DEPOSIT_TYPE\nORDER BY DT.NAME';\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'RATE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.RATE as \"id\",DDD.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL DDD WHERE DDD.REP_REQ = ' || INPAR_ID || ' \nORDER BY DDD.RATE'\n;\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'REGION' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.REGION_ID as \"id\",TB.REGION_NAME as \"name\"  FROM TBL_DUE_DATE_DETAIL DDD,TBL_BRANCH TB WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND TB.REGION_ID = DDD.REGION_ID \nORDER BY DDD.REGION_ID';\n  END IF;\n\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_DETAIL;\n \n /*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\nFROM TBL_DUE_DATE_DETAIL\nwhere REP_REQ ='\n|| INPAR_ID || ' and DEPTH is null';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_count;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME\n  AS\n BEGIN\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_DEPOSIT_TYPE AS REF_DEPOSIT_TYPE\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_DEPOSIT_TYPE ||\n   100 ||\n   TD.RATE AS RATE\n  ,SUM(TD.BALANCE)\n  ,4\n  ,0000\n  ,TB.REGION_ID\n  ,TD.REF_DEPOSIT_TYPE\n  ,TD.RATE\n  ,'نرخ سود ' || TD.RATE\n  FROM AKIN.TBL_DEPOSIT TD\n  ,    TBL_BRANCH TB\n  WHERE TD.REF_BRANCH   = TB.BRN_ID\n  GROUP BY\n   TB.REGION_ID\n  ,TD.REF_DEPOSIT_TYPE\n  ,TD.RATE;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0 AS REP_REQ\n  ,100 || REGION_ID\n  ,PARENT\n  ,SUM(VALUE)\n  ,3\n  ,0 AS EFFDATE\n  ,REGION_ID\n  ,MAX(TYPE)\n  ,-1 AS RATE\n  ,MAX( (\n    SELECT DISTINCT\n     TDT.NAME\n    FROM TBL_DEPOSIT_TYPE TDT\n    WHERE TDT.REF_DEPOSIT_TYPE   = TYPE\n   ) ) AS NAME\n  FROM TBL_DUE_DATE_DETAIL\n  GROUP BY\n   PARENT\n  ,REGION_ID;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  )  SELECT\n   0\n  ,0\n  ,b.PARENT\n  ,SUM(b.VALUE)\n  ,2\n  ,0\n  ,b.REGION_ID\n  ,0\n  ,-1\n  ,max((select  distinct TBL_BRANCH.REGION_NAME from TBL_BRANCH where TBL_BRANCH.REGION_ID =b.REGION_ID)) as name\n  FROM TBL_DUE_DATE_DETAIL  b\n  WHERE b.DEPTH   = 3\n  GROUP BY\n   b.PARENT\n  ,b.REGION_ID;\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,''\n  ,0\n  ,SUM(VALUE)\n  ,1\n  ,0\n  ,0\n  ,0\n  ,-1\n  ,'کل'\n  FROM TBL_DUE_DATE_DETAIL\n  WHERE DEPTH   = 2\n  GROUP BY\n   PARENT;\n\n  COMMIT;\n END;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2  /*meghdare 1 bazei va meghdare 2 tarikhi*/\n\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_DUE_DATE;"},{"Name":"PKG_DUE_DATE","ObjectID":285328,"Digest":"2cd731bae22f7ac2cd03a2ae399c8db35b27e1167ad4201d8d2bb9b769e3a93b","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2  /*meghdare 1 bazei va meghdare 2 tarikhi*/\n\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_DUE_DATE;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE\" AS\n\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2  /*meghdare 1 bazei va meghdare 2 tarikhi*/\n\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_TIMING_PROFILE\n   ,TYPE\n   ,CATEGORY\n    ,TIMING_PROFILE_TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_TIMING_PROFILE\n   ,INPAR_TYPE\n   ,'duedate'\n   ,INPAR_TIMING_PRFILE_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,REF_TIMING_PROFILE = INPAR_TIMING_PROFILE\n    ,TYPE = INPAR_TYPE\n    ,TIMING_PROFILE_TYPE =INPAR_TIMING_PRFILE_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;   \n  END IF;\n  \n     update tbl_report set  H_ID = id where CATEGORY ='duedate' AND H_ID IS NULL;\n  commit;\n  \n END PRC_DUE_DATE_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n\n  VAR_QUERY     VARCHAR2(4000);\n  ID_LOAN       NUMBER;\n  ID_DEP        NUMBER;\n  ID_CUR        NUMBER;\n  ID_CUS        NUMBER;\n  ID_BRANCH     NUMBER;\n  ID_TIMING     NUMBER;\n  DATE_TYPE1    DATE := SYSDATE;\n  VAR_REP_REQ   NUMBER;\n  LOC_S         TIMESTAMP;\n  LOC_F         TIMESTAMP;\n  LOC_MEGHDAR   NUMBER;\n BEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''DD-MM-RRRR''';\n/*  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';*/\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n  SELECT\n   MAX(ID)\n  INTO\n   ID_TIMING\n  FROM TBL_TIMING_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_TIMING_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n  \n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n  COMMIT;\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REP_REQ\n  FROM TBL_REPREQ;\n    /*--------------TBL_REPPER-----------------*/\n  /******enteghal profile zamani be jadval repper*****--*/\n  /*-----------------------------------------*/\n\n  INSERT INTO TBL_REPPER (\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,REF_REPORT_ID\n  ,OLD_ID\n  ,REF_REQ_ID\n  ) SELECT\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,INPAR_ID_REPORT\n  ,ID\n  ,VAR_REP_REQ\n  FROM TBL_TIMING_PROFILE_DETAIL\n  WHERE REF_TIMING_PROFILE   = ID_TIMING;\n\n  COMMIT;\n  FOR I IN (\n   SELECT\n    TTPD.ID\n   ,TTP.TYPE\n   ,TTPD.PERIOD_NAME\n   ,TTPD.PERIOD_DATE\n   ,TTPD.PERIOD_START\n   ,TTPD.PERIOD_END\n   ,TTPD.PERIOD_COLOR\n   FROM TBL_TIMING_PROFILE TTP\n   ,    TBL_TIMING_PROFILE_DETAIL TTPD\n   WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n    AND\n     TTP.ID   = ID_TIMING\n  ) LOOP\n   IF\n    ( I.TYPE = 1 )\n   THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n)  \nSELECT\n' ||\n     VAR_REP_REQ ||\n     '\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE AS REF_DEPOSIT_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TD.BALANCE)\n ,4\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_DEPOSIT_TYPE,\n TD.RATE  ,\n  ''نرخ سود ''||TD.RATE ,\n   case when count(TD.RATE) is null then 0 else count(TD.RATE) end\nFROM AKIN.TBL_DEPOSIT TD\n ,  TBL_BRANCH TB\nWHERE DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''')+' ||\n     I.PERIOD_DATE ||\n     ' and TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_DEPOSIT_TYPE\n ,TD.RATE;\n\n'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n\n    \n    DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n) \nSELECT\n' ||\n     VAR_REP_REQ ||\n     '\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE AS REF_DEPOSIT_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_DEPOSIT_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TD.BALANCE)\n ,4\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_DEPOSIT_TYPE,\n TD.RATE  ,\n ''نرخ سود ''||TD.RATE ,\n   case when count(TD.RATE) is null then 0 else count(TD.RATE) end\n\nFROM AKIN.TBL_DEPOSIT TD\n ,  TBL_BRANCH TB\nWHERE TD.DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and TD.DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') and TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_DEPOSIT_TYPE\n ,TD.RATE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n        COMMIT;\n\n\n    \n   END IF;\n  END LOOP;\n\n  COMMIT;\n  UPDATE TBL_DUE_DATE_DETAIL DDD\n   SET\n    DDD.REF_EFF_DATE = (\n     SELECT\n      ID\n     FROM TBL_REPPER\n     WHERE REF_REQ_ID          = VAR_REP_REQ\n      AND\n       TBL_REPPER.OLD_ID   = DDD.REF_EFF_DATE\n    )\n  WHERE DDD.REP_REQ   = VAR_REP_REQ;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   VAR_REP_REQ\n  ,DDD.PARENT\n  ,DDD.CHILD\n  ,0\n  ,DDD.DEPTH\n  ,TP.ID\n  ,DDD.REGION_ID\n  ,DDD.TYPE\n  ,DDD.RATE\n  ,DDD.NAME\n  FROM TBL_DUE_DATE_DETAIL DDD\n  ,    TBL_REPPER TP\n  WHERE DDD.REP_REQ     = 0\n   AND\n    DDD.DEPTH       = 4\n   AND\n    TP.REF_REQ_ID   = VAR_REP_REQ\n   AND\n    DDD.CHILD || TP.ID NOT IN (\n     SELECT\n      CHILD || REF_EFF_DATE\n     FROM TBL_DUE_DATE_DETAIL\n     WHERE REP_REQ   = VAR_REP_REQ\n    );\n\n  COMMIT;\n  \n  update TBL_DUE_DATE_DETAIL set count = 0 where rep_req = VAR_REP_REQ and count is null ;\n  commit;\n  \n  /*-------------------------------------------------------------------------------------------*/\n  LOC_F         := SYSTIMESTAMP;\n  LOC_MEGHDAR   := SQL%ROWCOUNT;\n EXCEPTION\n  WHEN OTHERS THEN\n   RAISE;\n   END PRC_DUE_DATE_REPORT_VALUE;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DUE_DATE''';\n  RETURN VAR2;\n END FNC_DUE_DATE_ALL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select\n parent as \"parent\",child as \"id\",depth as \"level\",name as \"text\",RATE \"rate\",type \"type\",REGION_ID \"regionId\"\nfrom\n  tbl_due_date_detail\n  where rep_req = 0\nstart with\n  parent is null\nconnect by\n  prior child=parent'\n;\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_TREE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := ' SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,''x''||REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\n ,count as \"xcount\"\nFROM TBL_DUE_DATE_DETAIL\nwhere REP_REQ ='\n|| INPAR_ID || ' and PARENT is not null ';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_LEAF;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n  FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  IF\n   ( UPPER(INPAR_TYPE) = 'TYPE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.TYPE AS \"id\",DT.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL DDD,TBL_DEPOSIT_TYPE DT  WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND DDD.TYPE = DT.REF_DEPOSIT_TYPE\nORDER BY DT.NAME';\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'RATE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.RATE as \"id\",DDD.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL DDD WHERE DDD.REP_REQ = ' || INPAR_ID || ' \nORDER BY DDD.RATE'\n;\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'REGION' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.REGION_ID as \"id\",TB.REGION_NAME as \"name\"  FROM TBL_DUE_DATE_DETAIL DDD,TBL_BRANCH TB WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND TB.REGION_ID = DDD.REGION_ID \nORDER BY DDD.REGION_ID';\n  END IF;\n\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_DETAIL;\n \n /*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\nFROM TBL_DUE_DATE_DETAIL\nwhere REP_REQ ='\n|| INPAR_ID || ' and DEPTH is null';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_count;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME\n  AS\n BEGIN\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_DEPOSIT_TYPE AS REF_DEPOSIT_TYPE\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_DEPOSIT_TYPE ||\n   100 ||\n   TD.RATE AS RATE\n  ,SUM(TD.BALANCE)\n  ,4\n  ,0000\n  ,TB.REGION_ID\n  ,TD.REF_DEPOSIT_TYPE\n  ,TD.RATE\n  ,'نرخ سود ' || TD.RATE\n  FROM AKIN.TBL_DEPOSIT TD\n  ,    TBL_BRANCH TB\n  WHERE TD.REF_BRANCH   = TB.BRN_ID\n  GROUP BY\n   TB.REGION_ID\n  ,TD.REF_DEPOSIT_TYPE\n  ,TD.RATE;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0 AS REP_REQ\n  ,100 || REGION_ID\n  ,PARENT\n  ,SUM(VALUE)\n  ,3\n  ,0 AS EFFDATE\n  ,REGION_ID\n  ,MAX(TYPE)\n  ,-1 AS RATE\n  ,MAX( (\n    SELECT DISTINCT\n     TDT.NAME\n    FROM TBL_DEPOSIT_TYPE TDT\n    WHERE TDT.REF_DEPOSIT_TYPE   = TYPE\n   ) ) AS NAME\n  FROM TBL_DUE_DATE_DETAIL\n  GROUP BY\n   PARENT\n  ,REGION_ID;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  )  SELECT\n   0\n  ,0\n  ,b.PARENT\n  ,SUM(b.VALUE)\n  ,2\n  ,0\n  ,b.REGION_ID\n  ,0\n  ,-1\n  ,max((select  distinct TBL_BRANCH.REGION_NAME from TBL_BRANCH where TBL_BRANCH.REGION_ID =b.REGION_ID)) as name\n  FROM TBL_DUE_DATE_DETAIL  b\n  WHERE b.DEPTH   = 3\n  GROUP BY\n   b.PARENT\n  ,b.REGION_ID;\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,''\n  ,0\n  ,SUM(VALUE)\n  ,1\n  ,0\n  ,0\n  ,0\n  ,-1\n  ,'کل'\n  FROM TBL_DUE_DATE_DETAIL\n  WHERE DEPTH   = 2\n  GROUP BY\n   PARENT;\n\n  COMMIT;\n END;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2  /*meghdare 1 bazei va meghdare 2 tarikhi*/\n\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nEND PKG_DUE_DATE;"},{"Name":"PKG_TJR","ObjectID":290210,"Digest":"e1c00484246efe1c02881279a15bf91f7bbc6aa53359f07b7e2b22029164c886","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_TJR\" AS \nPROCEDURE PRC_TRANSFER_BRANCH;\nPROCEDURE PRC_TRANSFER_CITY;\nPROCEDURE PRC_TRANSFER_CURRENCY_REL;--**\nPROCEDURE PRC_TRANSFER_CUSTOMER;\nPROCEDURE PRC_TRANSFER_DEPOSIT_TYPE;\nPROCEDURE PRC_TRANSFER_LEDGER; \nPROCEDURE PRC_TRANSFER_LOAN_TYPE;\nPROCEDURE PRC_LEDGER_ARCHIVE(in_date in date);\nPROCEDURE PRC_LEDGER_BRANCH(in_date in date);\nPROCEDURE prc_other_code;\nPROCEDURE PRC_LOAN(RUN_DATE IN DATE );\nPROCEDURE PRC_deposit(RUN_DATE IN DATE );\nEND PKG_TJR;\n\n\n\n\n\n\n\n--\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_TJR\" AS\n\n  PROCEDURE PRC_TRANSFER_BRANCH AS\n  BEGIN\n    insert into PRAGG.TBL_BRANCH(BRN_ID,name,CITY_NAME,REF_CTY_ID,ref_sta_id,region_id,REGION_NAME)\n(select shobe.brnch_cd,shobe.brnch_dsc,shahr.nam,shobe.ar_cd,shahr.ostan_id,shobe.ar_cd,shahr.nam from TEJARAT_DB.tbbranch  shobe ,satrap_tejarat.bi_table_shahr@SATRAP shahr\nwhere shobe.ar_cd = shahr.id\nand shobe.brnch_dsc  is not null\n\n);\ncommit;\n\n  END PRC_TRANSFER_BRANCH;\n\n  PROCEDURE PRC_TRANSFER_CITY AS\n  BEGIN\ninsert into TBL_CITY(cty_id,CTY_name,des,ref_sta_id)\n(select id,nam,tozih,ostan_id from satrap_tejarat.bi_table_shahr@SATRAP shahr);\ncommit;\n\n  END PRC_TRANSFER_CITY;\n\n  PROCEDURE PRC_TRANSFER_CURRENCY_REL AS\n  BEGIN\n    NULL;\n  END PRC_TRANSFER_CURRENCY_REL;\n\n  PROCEDURE PRC_TRANSFER_CUSTOMER AS\n  BEGIN\n   insert into tbl_customer(cus_id,nat_reg_code,name,family)\n  (select /*+ PARALLEL(AUTO)*/ id, melli, name, unistr(replace(asciistr(family),'\\200F',' ')) from(  --tabdile nim fasele be fasele\n  select /*+ PARALLEL(AUTO)*/ nvl(id,1) as id, nvl(melli,1) as melli, name, family, row_number() over (partition by melli order by melli) as row_num,count(*) over (partition by melli) as cnt from(\n      SELECT  /*+ PARALLEL(AUTO)*/ DISTINCT to_number(trim(MELLI_ID)) AS id, trim(MELLI_ID) as melli, max(name2) as name, '' as family\n        FROM TEJARAT_DB.CUSTOMER_NCOMPANY\n        where MELLI_ID is not null and replace(TRANSLATE(trim(MELLI_ID), '0123456789','0000000000'),'0','') IS NULL group by MELLI_ID\n    UNION\n      SELECT /*+ PARALLEL(AUTO) */ DISTINCT to_number(trim(COD_MELI)) AS id, trim(COD_MELI) as melli,max(name1) as name,max(famili1) as family\n        FROM TEJARAT_DB.CUSTOMER_NPERSON\n        where cod_meli is not null and replace(TRANSLATE(trim(cod_meli), '0123456789','0000000000'),'0','') IS NULL group by COD_MELI)\n        )where row_num = 1 and cnt = 1);\n        commit;\n        \n        insert into tbl_customer(cus_id,nat_reg_code,name,family)\n        select  /*+ PARALLEL(AUTO)*/ REF_CUSTOMER,REF_CUSTOMER, 'ناشناخته','ناشناخته'  from AKIN.TBL_DEPOSIT where REF_CUSTOMER not in (select  /*+ PARALLEL(AUTO)*/ TBL_CUSTOMER.CUS_ID from TBL_CUSTOMER);\n        \n        commit;\n        \n        \n  END PRC_TRANSFER_CUSTOMER;\n\n  PROCEDURE PRC_TRANSFER_DEPOSIT_TYPE AS\n  BEGIN\ninsert into PRAGG.TBL_DEPOSIT_TYPE(ref_deposit_type,name)\n  (select grp,grp_kind from tejarat_db.sep_kind); \ncommit;\nEND PRC_TRANSFER_DEPOSIT_TYPE;\n\n  PROCEDURE PRC_TRANSFER_LEDGER AS\n  BEGIN\nINSERT INTO TBL_LEDGER (\n LEDGER_CODE\n ,NAME\n ,DEPTH\n ,PARENT_CODE\n) SELECT\n ID\n ,NAME\n ,DEPTH\n ,FATHER_ID\nFROM TEJARAT_DB.GL_CODE;\n  END PRC_TRANSFER_LEDGER;\n\n  PROCEDURE PRC_TRANSFER_LOAN_TYPE AS\n  BEGIN\ninsert into TBL_LOAN_TYPE(ref_loan_type,name)\n  (SELECT REF_NOE_TASHILAT ,NAME \n  from (SELECT DISTINCT CODE as REF_NOE_TASHILAT,NAME  FROM TEJARAT_DB.noe_tashilat ))\n;\ncommit;\n\nINSERT INTO TBL_LEDGER (LEDGER_CODE, NAME, DEPTH) VALUES ('0', 'ريشه', '1');\n\ncommit;\nEND PRC_TRANSFER_LOAN_TYPE;\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n  PROCEDURE PRC_LEDGER_ARCHIVE(in_date in date) AS\n  BEGIN\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n    select b.id,b.name,b.father_id,a.mande,b.depth, trunc(in_date),4 from\n    (\n      select cbi_db, sum(blnc_db + blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db not in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1330','K1320','A0080','A0140','A0160','B0230','C0796') group by cbi_db\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n    select b.id,b.name,b.father_id,a.mande,b.depth,trunc(in_date),4 from\n    (\n      select cbi_db, sum(blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n    select b.id,b.name,b.father_id,a.mande,b.depth, trunc(in_date),4 from\n    (\n      select cbi_db, sum(blnc_db) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db\n    ) a, akin.tbl_treenode_tejarat_5 b, tejarat_db.cbi_map c where a.cbi_db = c.CBI and c.cbi2 = b.code;\n  commit;\n\n  for i in reverse 3..5\n  loop\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n      select b.id,b.name,b.father_id,a.mande,b.depth,a.tarikh,4 from\n        (select sum(balance) as mande, PARENT_CODE, max(eff_date) as tarikh from TBL_LEDGER_ARCHIVE where depth = i and PARENT_CODE not in ('5310210','5320200') group by PARENT_CODE) a,\n        akin.tbl_treenode_tejarat_5 b where a.PARENT_CODE = b.id;\n        commit;\n        if (i = 5) then\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n            select 5310210,'حسابهاي انتظامي',28,a.mande,4, trunc(in_date),4 from\n            (\n              select sum(blnc_cr) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998')\n            ) a;\n          commit;\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n            select 5320200,'طرف حسابهاي انتظامي',47,a.mande,4, trunc(in_date),4 from\n            (\n              select sum(blnc_db) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998')\n            ) a;\n            commit;\n        end if;\n        commit;\n  end loop;\n  commit;  END PRC_LEDGER_ARCHIVE;\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\n  PROCEDURE PRC_LEDGER_BRANCH(in_date in date) AS\n  BEGIN\n execute immediate 'truncate table tjr_varsa.tejarat_gl_br';\n  commit;\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n    select b.id,b.name,b.father_id,a.mande,b.depth,a.brnch_cd, in_date,4 from\n    (\n      select cbi_db, brnch_cd, sum(blnc_db + blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db not in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db,brnch_cd\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n    select b.id,b.name,b.father_id,a.mande,b.depth,a.brnch_cd, in_date,4 from\n    (\n      select cbi_db, brnch_cd, sum(blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db,brnch_cd\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n    select b.id,b.name,b.father_id,a.mande,b.depth,a.brnch_cd, in_date,4 from\n    (\n      select cbi_db, brnch_cd, sum(blnc_db) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db,brnch_cd\n    ) a, akin.tbl_treenode_tejarat_5 b, tejarat_db.cbi_map c where a.cbi_db = c.CBI and c.cbi2 = b.code;\n  commit;\n\n  for i in reverse 3..5\n  loop\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n      select b.id,b.name,b.father_id,a.mande,b.depth,a.ref_branch,a.tarikh,4 from\n        (select sum(balance) as mande, parent_code, ref_branch, max(eff_date) as tarikh from TBL_LEDGER_BRANCH where depth = i group by parent_code,ref_branch) a,\n        akin.tbl_treenode_tejarat_5 b where a.PARENT_CODE = b.id;\n        commit;\n        if (i = 5) then\n    insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID)\n            select 5310210,'حساب هاي انتظامي',28,a.mande,4, a.brnch_cd, in_date,4 from\n            (\n              select brnch_cd, sum(blnc_cr) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998') GROUP BY brnch_cd\n            ) a;\n          commit;\n    insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID)\n            select 5320200,'طرف حساب هاي انتظامي',47,a.mande,4, a.brnch_cd, in_date,4 from\n            (\n              select brnch_cd, sum(blnc_db) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998') GROUP BY brnch_cd\n            ) a;\n            commit;\n        end if;\n        commit;\n  end loop;\n  commit;  END PRC_LEDGER_BRANCH;\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\nprocedure prc_other_code\nas\n  code VARCHAR2(32000);\n  var_date date;\n\nbegin\n\nselect /*+  PARALLEL(auto)   */ trunc(max(eff_date)) into var_date from PRAGG.TBL_LEDGER_ARCHIVE;\n\n  SELECT WMSYS.WM_CONCAT(dk.ID)\nINTO code\n  FROM akin.TEJARAT_GL dk\n  WHERE dk.DEPTH = 5\n  AND dk.mande  \u003c\u003e 0\n  AND dk.ID     \u003c\u003e 3100700070\n  AND dk.id NOT IN\n    (SELECT DISTINCT ref_leger_code FROM TBL_VALUE where ref_leger_code is not null\n    );\n  -- DBMS_OUTPUT.PUT_LINE(code);\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n      \n    )\n   SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4\n  ,\n  A.REF_BRANCH\nFROM\n  (SELECT 4,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n round( CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1 as tarikh,\n    TSN.YEK_MAH\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.YEK_MAH \u003c\u003e '0'\n  ) a,TBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 4,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+80 as tarikh,\n    TSN.YEK_TA_SEMAH\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.YEK_TA_SEMAH \u003c\u003e '0'\n  ) a,\nTBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 41,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 41,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+350 as tarikh,\n    TSN.SEMAH_TA_YEKSAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.SEMAH_TA_YEKSAL \u003c\u003e '0'\n  ) a,\n TBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n   ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 4,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1840 as tarikh,\n    TSN.YEK_TA_5SAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.YEK_TA_5SAL \u003c\u003e '0'\n  ) a,\n TBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 41,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+2500 as tarikh,\n    TSN.BISHTAR_AZ_5SAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.BISHTAR_AZ_5SAL \u003c\u003e '0'\n  ) a,\nTBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) =var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n   ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 41,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n      StART WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    null  as tarikh,\n    TSN.BEDONE_JARIAN\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.BEDONE_JARIAN \u003c\u003e '0'\n  ) a,\nTBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date;\n\ncommit;\n----------------------------- tafavothaye riali ra insert mikonad    1 baraye bed \u0026 0 baraye bes\n--   INSERT /*+ APPEND PARALLEL(auto)   */\n--  INTO tbl_value\n--    (\n--      REF_MODALITY_TYPE,\n--      REF_LEGER_CODE,\n--      DUE_DATE,\n--      BALANCE,\n--      REF_CUR_ID\n--    )\n--select 4.1,id,TARIKH_MOASSER,noe,4 from \n--(SELECT -(a.bed-b.mande) as tafazol,\n--  b.id,\n--  noe,TARIKH_MOASSER\n--FROM\n--  (SELECT tbl_value.REF_LEGER_CODE,\n--    SUM(nvl(BALANCE,0)) AS bed,\n--    MAX(due_date) as TARIKH_MOASSER,\n--   max( tbl_value.BALANCE) as noe\n--  FROM tbl_value\n--  WHERE tbl_value.REF_MODALITY_TYPE = 41\n--  GROUP BY REF_LEGER_CODE\n--  )a,\n--  (SELECT id,ABS(NVL(mande,0)) AS mande FROM akin.TEJARAT_GL\n--  )b\n--WHERE a.REF_LEGER_CODE = b.id\n--AND a.bed          \u003c\u003eb.mande);\ncommit;\nend prc_other_code;\n\n\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\n PROCEDURE PRC_LOAN(\n    RUN_DATE IN DATE )\nAS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:in prasiger shamel tamam amaliyat hay marbot be tashilat mibashad.\n  ke iz an dar mpdel ejray farayand estefade mishavad. */\n  --------------------------------------------------------------------------------\nBEGIN\n  DELETE FROM TBL_RATE WHERE TYPE = 'TBL_LOAN';\n  COMMIT;\n  AKIN.pkg_tjr.PRC_TRANSFER_ACCOUNTING();\n  AKIN.pkg_tjr.PRC_TRANSFER_PAYMENT( );\n  AKIN.pkg_tjr.PRC_TRANSFER_LOAN( );\n  ----------------------------------------TBL_RATE  TBL_LOAN\n  INSERT\n  INTO PRAGG.TBL_RATE\n    (\n      RATE,\n      TYPE\n    )\n  SELECT DISTINCT RATE AS NERKH_SUD,\n    'TBL_LOAN'\n  FROM AKIN.TBL_LOAN\n  WHERE RATE IS NOT NULL;\n  COMMIT;\n  ----------------------------------------UPDATE TBL_LOAN RATE\n  UPDATE AKIN.TBL_LOAN a\n  SET a.REF_RATE =\n    (SELECT r.ref_rate\n    FROM tbl_rate r\n    WHERE r.rate = a.rate\n    AND r.type   ='TBL_LOAN'\n    );\n  COMMIT;\nEND PRC_LOAN;\n\n\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\n PROCEDURE PRC_DEPOSIT ( RUN_DATE IN DATE )\n AS\n\n /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:in prasiger shamel tamam amaliyat hay marbot be seporde mibashad.\n  ke iz an dar mpdel ejray farayand estefade mishavad.\n  */\n  /*------------------------------------------------------------------------------*/\n  BEGIN\n   DELETE FROM TBL_RATE WHERE TYPE   = 'TBL_DEPOSIT';\n\n COMMIT;\n    /*--------------------------------------TBL_RATE   TBL_DEPOSIT*/\n INSERT INTO PRAGG.TBL_RATE ( RATE,TYPE ) select NERKH_SUD,'TBL_DEPOSIT' from(\n select distinct (Rate/1000)+(nvl(Ratem,0)/100) AS NERKH_SUD\n   from TEJARAT_DB.SEPORDE union\n select 10   from dual)\n WHERE NERKH_SUD IS NOT NULL;\n -----------------------------------------------------------\n\n\n  AKIN.PRC_TRANSFER_MODALITY_TYPE ();\n COMMIT;\n AKIN.pkg_tjr.PRC_TRANSFER_ACCOUNTING ();\n AKIN.pkg_tjr.PRC_TRANSFER_DEPOSIT( );\n AKIN.pkg_tjr.PRC_TRANSFER_DEPOSIT_PROFIT(TO_DATE(RUN_DATE) );\n\n\n COMMIT;\n  /*--------------------------------------UPDATE TBL_DEPOSIT RATE*/\n-- UPDATE AKIN.TBL_DEPOSIT A\n--  SET\n--   A.REF_RATE = (\n--    SELECT\n--     R.REF_RATE\n--    FROM TBL_RATE R\n--    WHERE R.RATE   = A.RATE\n--     AND\n--      R.TYPE   = 'TBL_DEPOSIT'\n--   );\n--\n-- COMMIT;\n\nEND PRC_DEPOSIT;\n\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\nEND PKG_TJR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_TJR\" AS \nPROCEDURE PRC_TRANSFER_BRANCH;\nPROCEDURE PRC_TRANSFER_CITY;\nPROCEDURE PRC_TRANSFER_CURRENCY_REL;--**\nPROCEDURE PRC_TRANSFER_CUSTOMER;\nPROCEDURE PRC_TRANSFER_DEPOSIT_TYPE;\nPROCEDURE PRC_TRANSFER_LEDGER; \nPROCEDURE PRC_TRANSFER_LOAN_TYPE;\nPROCEDURE PRC_LEDGER_ARCHIVE(in_date in date);\nPROCEDURE PRC_LEDGER_BRANCH(in_date in date);\nPROCEDURE prc_other_code;\nPROCEDURE PRC_LOAN(RUN_DATE IN DATE );\nPROCEDURE PRC_deposit(RUN_DATE IN DATE );\nEND PKG_TJR;\n\n\n\n\n\n\n\n--"},{"Name":"PKG_TJR","ObjectID":290211,"Digest":"e1c00484246efe1c02881279a15bf91f7bbc6aa53359f07b7e2b22029164c886","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_TJR\" AS \nPROCEDURE PRC_TRANSFER_BRANCH;\nPROCEDURE PRC_TRANSFER_CITY;\nPROCEDURE PRC_TRANSFER_CURRENCY_REL;--**\nPROCEDURE PRC_TRANSFER_CUSTOMER;\nPROCEDURE PRC_TRANSFER_DEPOSIT_TYPE;\nPROCEDURE PRC_TRANSFER_LEDGER; \nPROCEDURE PRC_TRANSFER_LOAN_TYPE;\nPROCEDURE PRC_LEDGER_ARCHIVE(in_date in date);\nPROCEDURE PRC_LEDGER_BRANCH(in_date in date);\nPROCEDURE prc_other_code;\nPROCEDURE PRC_LOAN(RUN_DATE IN DATE );\nPROCEDURE PRC_deposit(RUN_DATE IN DATE );\nEND PKG_TJR;\n\n\n\n\n\n\n\n--\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_TJR\" AS\n\n  PROCEDURE PRC_TRANSFER_BRANCH AS\n  BEGIN\n    insert into PRAGG.TBL_BRANCH(BRN_ID,name,CITY_NAME,REF_CTY_ID,ref_sta_id,region_id,REGION_NAME)\n(select shobe.brnch_cd,shobe.brnch_dsc,shahr.nam,shobe.ar_cd,shahr.ostan_id,shobe.ar_cd,shahr.nam from TEJARAT_DB.tbbranch  shobe ,satrap_tejarat.bi_table_shahr@SATRAP shahr\nwhere shobe.ar_cd = shahr.id\nand shobe.brnch_dsc  is not null\n\n);\ncommit;\n\n  END PRC_TRANSFER_BRANCH;\n\n  PROCEDURE PRC_TRANSFER_CITY AS\n  BEGIN\ninsert into TBL_CITY(cty_id,CTY_name,des,ref_sta_id)\n(select id,nam,tozih,ostan_id from satrap_tejarat.bi_table_shahr@SATRAP shahr);\ncommit;\n\n  END PRC_TRANSFER_CITY;\n\n  PROCEDURE PRC_TRANSFER_CURRENCY_REL AS\n  BEGIN\n    NULL;\n  END PRC_TRANSFER_CURRENCY_REL;\n\n  PROCEDURE PRC_TRANSFER_CUSTOMER AS\n  BEGIN\n   insert into tbl_customer(cus_id,nat_reg_code,name,family)\n  (select /*+ PARALLEL(AUTO)*/ id, melli, name, unistr(replace(asciistr(family),'\\200F',' ')) from(  --tabdile nim fasele be fasele\n  select /*+ PARALLEL(AUTO)*/ nvl(id,1) as id, nvl(melli,1) as melli, name, family, row_number() over (partition by melli order by melli) as row_num,count(*) over (partition by melli) as cnt from(\n      SELECT  /*+ PARALLEL(AUTO)*/ DISTINCT to_number(trim(MELLI_ID)) AS id, trim(MELLI_ID) as melli, max(name2) as name, '' as family\n        FROM TEJARAT_DB.CUSTOMER_NCOMPANY\n        where MELLI_ID is not null and replace(TRANSLATE(trim(MELLI_ID), '0123456789','0000000000'),'0','') IS NULL group by MELLI_ID\n    UNION\n      SELECT /*+ PARALLEL(AUTO) */ DISTINCT to_number(trim(COD_MELI)) AS id, trim(COD_MELI) as melli,max(name1) as name,max(famili1) as family\n        FROM TEJARAT_DB.CUSTOMER_NPERSON\n        where cod_meli is not null and replace(TRANSLATE(trim(cod_meli), '0123456789','0000000000'),'0','') IS NULL group by COD_MELI)\n        )where row_num = 1 and cnt = 1);\n        commit;\n        \n        insert into tbl_customer(cus_id,nat_reg_code,name,family)\n        select  /*+ PARALLEL(AUTO)*/ REF_CUSTOMER,REF_CUSTOMER, 'ناشناخته','ناشناخته'  from AKIN.TBL_DEPOSIT where REF_CUSTOMER not in (select  /*+ PARALLEL(AUTO)*/ TBL_CUSTOMER.CUS_ID from TBL_CUSTOMER);\n        \n        commit;\n        \n        \n  END PRC_TRANSFER_CUSTOMER;\n\n  PROCEDURE PRC_TRANSFER_DEPOSIT_TYPE AS\n  BEGIN\ninsert into PRAGG.TBL_DEPOSIT_TYPE(ref_deposit_type,name)\n  (select grp,grp_kind from tejarat_db.sep_kind); \ncommit;\nEND PRC_TRANSFER_DEPOSIT_TYPE;\n\n  PROCEDURE PRC_TRANSFER_LEDGER AS\n  BEGIN\nINSERT INTO TBL_LEDGER (\n LEDGER_CODE\n ,NAME\n ,DEPTH\n ,PARENT_CODE\n) SELECT\n ID\n ,NAME\n ,DEPTH\n ,FATHER_ID\nFROM TEJARAT_DB.GL_CODE;\n  END PRC_TRANSFER_LEDGER;\n\n  PROCEDURE PRC_TRANSFER_LOAN_TYPE AS\n  BEGIN\ninsert into TBL_LOAN_TYPE(ref_loan_type,name)\n  (SELECT REF_NOE_TASHILAT ,NAME \n  from (SELECT DISTINCT CODE as REF_NOE_TASHILAT,NAME  FROM TEJARAT_DB.noe_tashilat ))\n;\ncommit;\n\nINSERT INTO TBL_LEDGER (LEDGER_CODE, NAME, DEPTH) VALUES ('0', 'ريشه', '1');\n\ncommit;\nEND PRC_TRANSFER_LOAN_TYPE;\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n  PROCEDURE PRC_LEDGER_ARCHIVE(in_date in date) AS\n  BEGIN\ninsert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n    select b.id,b.name,b.father_id,a.mande,b.depth, trunc(in_date),4 from\n    (\n      select cbi_db, sum(blnc_db + blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db not in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1330','K1320','A0080','A0140','A0160','B0230','C0796') group by cbi_db\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n    select b.id,b.name,b.father_id,a.mande,b.depth,trunc(in_date),4 from\n    (\n      select cbi_db, sum(blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n    select b.id,b.name,b.father_id,a.mande,b.depth, trunc(in_date),4 from\n    (\n      select cbi_db, sum(blnc_db) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db\n    ) a, akin.tbl_treenode_tejarat_5 b, tejarat_db.cbi_map c where a.cbi_db = c.CBI and c.cbi2 = b.code;\n  commit;\n\n  for i in reverse 3..5\n  loop\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n      select b.id,b.name,b.father_id,a.mande,b.depth,a.tarikh,4 from\n        (select sum(balance) as mande, PARENT_CODE, max(eff_date) as tarikh from TBL_LEDGER_ARCHIVE where depth = i and PARENT_CODE not in ('5310210','5320200') group by PARENT_CODE) a,\n        akin.tbl_treenode_tejarat_5 b where a.PARENT_CODE = b.id;\n        commit;\n        if (i = 5) then\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n            select 5310210,'حسابهاي انتظامي',28,a.mande,4, trunc(in_date),4 from\n            (\n              select sum(blnc_cr) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998')\n            ) a;\n          commit;\n  insert into TBL_LEDGER_ARCHIVE(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,EFF_DATE,REF_CUR_ID)\n            select 5320200,'طرف حسابهاي انتظامي',47,a.mande,4, trunc(in_date),4 from\n            (\n              select sum(blnc_db) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998')\n            ) a;\n            commit;\n        end if;\n        commit;\n  end loop;\n  commit;  END PRC_LEDGER_ARCHIVE;\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n--/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\n  PROCEDURE PRC_LEDGER_BRANCH(in_date in date) AS\n  BEGIN\n execute immediate 'truncate table tjr_varsa.tejarat_gl_br';\n  commit;\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n    select b.id,b.name,b.father_id,a.mande,b.depth,a.brnch_cd, in_date,4 from\n    (\n      select cbi_db, brnch_cd, sum(blnc_db + blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db not in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db,brnch_cd\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n    select b.id,b.name,b.father_id,a.mande,b.depth,a.brnch_cd, in_date,4 from\n    (\n      select cbi_db, brnch_cd, sum(blnc_cr) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db,brnch_cd\n    ) a, akin.tbl_treenode_tejarat_5 b where a.cbi_db = b.code;\n  commit;\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n    select b.id,b.name,b.father_id,a.mande,b.depth,a.brnch_cd, in_date,4 from\n    (\n      select cbi_db, brnch_cd, sum(blnc_db) as mande from tejarat_db.taledger \n        where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n        ('H1190','H1200','H1210','H1220','H1230','H1240','K1320','K1330','A0080','A0140','A0160','B0230','C0796') group by cbi_db,brnch_cd\n    ) a, akin.tbl_treenode_tejarat_5 b, tejarat_db.cbi_map c where a.cbi_db = c.CBI and c.cbi2 = b.code;\n  commit;\n\n  for i in reverse 3..5\n  loop\n      insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID) \n      select b.id,b.name,b.father_id,a.mande,b.depth,a.ref_branch,a.tarikh,4 from\n        (select sum(balance) as mande, parent_code, ref_branch, max(eff_date) as tarikh from TBL_LEDGER_BRANCH where depth = i group by parent_code,ref_branch) a,\n        akin.tbl_treenode_tejarat_5 b where a.PARENT_CODE = b.id;\n        commit;\n        if (i = 5) then\n    insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID)\n            select 5310210,'حساب هاي انتظامي',28,a.mande,4, a.brnch_cd, in_date,4 from\n            (\n              select brnch_cd, sum(blnc_cr) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998') GROUP BY brnch_cd\n            ) a;\n          commit;\n    insert into TBL_LEDGER_BRANCH(LEDGER_CODE,NAME,PARENT_CODE,BALANCE,DEPTH,REF_BRANCH,EFF_DATE,REF_CUR_ID)\n            select 5320200,'طرف حساب هاي انتظامي',47,a.mande,4, a.brnch_cd, in_date,4 from\n            (\n              select brnch_cd, sum(blnc_db) as mande from tejarat_db.taledger \n              where tr_dt = to_char(in_date,'yyyymmdd','nls_calendar = persian') and RCRD_TYP = 1 and cbi_db in\n              ('X9950','X9951','X9955','X9995','X9997','X9998','L0210','X9954','X9990','X9991','X9994','X9996','x9998') GROUP BY brnch_cd\n            ) a;\n            commit;\n        end if;\n        commit;\n  end loop;\n  commit;  END PRC_LEDGER_BRANCH;\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\nprocedure prc_other_code\nas\n  code VARCHAR2(32000);\n  var_date date;\n\nbegin\n\nselect /*+  PARALLEL(auto)   */ trunc(max(eff_date)) into var_date from PRAGG.TBL_LEDGER_ARCHIVE;\n\n  SELECT WMSYS.WM_CONCAT(dk.ID)\nINTO code\n  FROM akin.TEJARAT_GL dk\n  WHERE dk.DEPTH = 5\n  AND dk.mande  \u003c\u003e 0\n  AND dk.ID     \u003c\u003e 3100700070\n  AND dk.id NOT IN\n    (SELECT DISTINCT ref_leger_code FROM TBL_VALUE where ref_leger_code is not null\n    );\n  -- DBMS_OUTPUT.PUT_LINE(code);\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n      \n    )\n   SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4\n  ,\n  A.REF_BRANCH\nFROM\n  (SELECT 4,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n round( CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_MAH)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1 as tarikh,\n    TSN.YEK_MAH\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.YEK_MAH \u003c\u003e '0'\n  ) a,TBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 4,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_SEMAH)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+80 as tarikh,\n    TSN.YEK_TA_SEMAH\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.YEK_TA_SEMAH \u003c\u003e '0'\n  ) a,\nTBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 41,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 41,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.SEMAH_TA_YEKSAL)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+350 as tarikh,\n    TSN.SEMAH_TA_YEKSAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.SEMAH_TA_YEKSAL \u003c\u003e '0'\n  ) a,\n TBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n   ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 4,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.YEK_TA_5SAL)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+1840 as tarikh,\n    TSN.YEK_TA_5SAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.YEK_TA_5SAL \u003c\u003e '0'\n  ) a,\n TBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n  ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 41,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BISHTAR_AZ_5SAL)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    sysdate+2500 as tarikh,\n    TSN.BISHTAR_AZ_5SAL\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.BISHTAR_AZ_5SAL \u003c\u003e '0'\n  ) a,\nTBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) =var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date\nand tg.REF_BRANCH = a.ref_branch;\n\ncommit;\n  INSERT /*+ APPEND PARALLEL(auto)   */\n  INTO tbl_value\n    (\n      REF_MODALITY_TYPE,\n      REF_LEGER_CODE,\n      DUE_DATE,\n      BALANCE,\n      REF_CUR_ID,\n      REF_BRANCH\n    )SELECT 4,\n  a.REF_SARFASL,\n  a.tarikh,\n  (nvl(-a.bes,0)+nvl(a.bed,0))\n   ,4,\n  A.REF_BRANCH\nFROM\n  (\n  SELECT 41,a.REF_SARFASL,a.tarikh,TG.REF_BRANCH,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 1\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n      StART WITH ID       = 2\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    ELSE NULL\n  END,0) BES,\n  round(CASE\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 3\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    WHEN TG.LEDGER_CODE IN\n      (SELECT t.ID\n      FROM akin.TEJARAT_GL T\n      WHERE DEPTH           = 5\n        START WITH ID       = 4\n        CONNECT BY PRIOR ID = T.FATHER_ID\n      )\n    THEN ABS(tg.BALANCE)*(a.BEDONE_JARIAN)/100\n    ELSE NULL\n  END,0) BED,\n  4\nFROM\n  (SELECT \n    tsn.REF_SARFASL,\n    null  as tarikh,\n    TSN.BEDONE_JARIAN\n  FROM akin.TBL_SHIVE_NEGASHT_IFRS tsn\n  WHERE tsn.REF_SARFASL IN (\n    (SELECT trim(regexp_substr(code, '[^,]+', 1, LEVEL)) AS VALUE\n    FROM dual\n      CONNECT BY instr(code, ',', 1, LEVEL - 1) \u003e 0\n    )) and TSN.BEDONE_JARIAN \u003c\u003e '0'\n  ) a,\nTBL_LEDGER_BRANCH tg\nWHERE a.REF_SARFASL = TG.LEDGER_CODE and trunc(tg.EFF_DATE) = var_date\n)a\n,\n TBL_LEDGER_BRANCH tg\nWHERE TG.LEDGER_CODE   = a.ref_sarfasl \nand trunc(tg.EFF_DATE) = var_date;\n\ncommit;\n----------------------------- tafavothaye riali ra insert mikonad    1 baraye bed \u0026 0 baraye bes\n--   INSERT /*+ APPEND PARALLEL(auto)   */\n--  INTO tbl_value\n--    (\n--      REF_MODALITY_TYPE,\n--      REF_LEGER_CODE,\n--      DUE_DATE,\n--      BALANCE,\n--      REF_CUR_ID\n--    )\n--select 4.1,id,TARIKH_MOASSER,noe,4 from \n--(SELECT -(a.bed-b.mande) as tafazol,\n--  b.id,\n--  noe,TARIKH_MOASSER\n--FROM\n--  (SELECT tbl_value.REF_LEGER_CODE,\n--    SUM(nvl(BALANCE,0)) AS bed,\n--    MAX(due_date) as TARIKH_MOASSER,\n--   max( tbl_value.BALANCE) as noe\n--  FROM tbl_value\n--  WHERE tbl_value.REF_MODALITY_TYPE = 41\n--  GROUP BY REF_LEGER_CODE\n--  )a,\n--  (SELECT id,ABS(NVL(mande,0)) AS mande FROM akin.TEJARAT_GL\n--  )b\n--WHERE a.REF_LEGER_CODE = b.id\n--AND a.bed          \u003c\u003eb.mande);\ncommit;\nend prc_other_code;\n\n\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\n PROCEDURE PRC_LOAN(\n    RUN_DATE IN DATE )\nAS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:in prasiger shamel tamam amaliyat hay marbot be tashilat mibashad.\n  ke iz an dar mpdel ejray farayand estefade mishavad. */\n  --------------------------------------------------------------------------------\nBEGIN\n  DELETE FROM TBL_RATE WHERE TYPE = 'TBL_LOAN';\n  COMMIT;\n  AKIN.pkg_tjr.PRC_TRANSFER_ACCOUNTING();\n  AKIN.pkg_tjr.PRC_TRANSFER_PAYMENT( );\n  AKIN.pkg_tjr.PRC_TRANSFER_LOAN( );\n  ----------------------------------------TBL_RATE  TBL_LOAN\n  INSERT\n  INTO PRAGG.TBL_RATE\n    (\n      RATE,\n      TYPE\n    )\n  SELECT DISTINCT RATE AS NERKH_SUD,\n    'TBL_LOAN'\n  FROM AKIN.TBL_LOAN\n  WHERE RATE IS NOT NULL;\n  COMMIT;\n  ----------------------------------------UPDATE TBL_LOAN RATE\n  UPDATE AKIN.TBL_LOAN a\n  SET a.REF_RATE =\n    (SELECT r.ref_rate\n    FROM tbl_rate r\n    WHERE r.rate = a.rate\n    AND r.type   ='TBL_LOAN'\n    );\n  COMMIT;\nEND PRC_LOAN;\n\n\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\n PROCEDURE PRC_DEPOSIT ( RUN_DATE IN DATE )\n AS\n\n /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:in prasiger shamel tamam amaliyat hay marbot be seporde mibashad.\n  ke iz an dar mpdel ejray farayand estefade mishavad.\n  */\n  /*------------------------------------------------------------------------------*/\n  BEGIN\n   DELETE FROM TBL_RATE WHERE TYPE   = 'TBL_DEPOSIT';\n\n COMMIT;\n    /*--------------------------------------TBL_RATE   TBL_DEPOSIT*/\n INSERT INTO PRAGG.TBL_RATE ( RATE,TYPE ) select NERKH_SUD,'TBL_DEPOSIT' from(\n select distinct (Rate/1000)+(nvl(Ratem,0)/100) AS NERKH_SUD\n   from TEJARAT_DB.SEPORDE union\n select 10   from dual)\n WHERE NERKH_SUD IS NOT NULL;\n -----------------------------------------------------------\n\n\n  AKIN.PRC_TRANSFER_MODALITY_TYPE ();\n COMMIT;\n AKIN.pkg_tjr.PRC_TRANSFER_ACCOUNTING ();\n AKIN.pkg_tjr.PRC_TRANSFER_DEPOSIT( );\n AKIN.pkg_tjr.PRC_TRANSFER_DEPOSIT_PROFIT(TO_DATE(RUN_DATE) );\n\n\n COMMIT;\n  /*--------------------------------------UPDATE TBL_DEPOSIT RATE*/\n-- UPDATE AKIN.TBL_DEPOSIT A\n--  SET\n--   A.REF_RATE = (\n--    SELECT\n--     R.REF_RATE\n--    FROM TBL_RATE R\n--    WHERE R.RATE   = A.RATE\n--     AND\n--      R.TYPE   = 'TBL_DEPOSIT'\n--   );\n--\n-- COMMIT;\n\nEND PRC_DEPOSIT;\n\n  \n--****************************************************\n--///////////////////////////////////////////////////\n--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n--****************************************************\n\n\nEND PKG_TJR;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_TJR\" AS \nPROCEDURE PRC_TRANSFER_BRANCH;\nPROCEDURE PRC_TRANSFER_CITY;\nPROCEDURE PRC_TRANSFER_CURRENCY_REL;--**\nPROCEDURE PRC_TRANSFER_CUSTOMER;\nPROCEDURE PRC_TRANSFER_DEPOSIT_TYPE;\nPROCEDURE PRC_TRANSFER_LEDGER; \nPROCEDURE PRC_TRANSFER_LOAN_TYPE;\nPROCEDURE PRC_LEDGER_ARCHIVE(in_date in date);\nPROCEDURE PRC_LEDGER_BRANCH(in_date in date);\nPROCEDURE prc_other_code;\nPROCEDURE PRC_LOAN(RUN_DATE IN DATE );\nPROCEDURE PRC_deposit(RUN_DATE IN DATE );\nEND PKG_TJR;\n\n\n\n\n\n\n\n--"},{"Name":"PKG_BALANCE_SHEET","ObjectID":291146,"Digest":"c9104b9c579210348085311fd6728df664bf04333d3b5eb258f11a837478bfba","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BALANCE_SHEET\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BALANCE_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_cur IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, inpar_cur2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend PKG_BALANCE_SHEET;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_BALANCE_SHEET\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_compare_balance_sheet \n(\n  inpar_date in varchar2 \n, inpar_cur in number \n, inpar_date2 in varchar2 \n, inpar_cur2 in number \n)return varchar2  as\nVAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\nVAR_PARTITION2 VARCHAR2(200):= 'P'||TO_CHAR(to_date(INPAR_DATE2,'yyyy-mm-dd'),'J');\n  begin\n   RETURN \n'SELECT  /*+ PARALLEL(AUTO) */  LEDGER_CODE as \"id\"\n ,NAME as \"text\"\n ,DEPTH as \"level\"\n ,PARENT_CODE as \"parent\"\n  ,nvl(\"1\",0) \"x1\",nvl(\"2\",0) \"x2\"\n  FROM\n(\nselect  /*+ PARALLEL(AUTO) */  LEDGER_CODE\n ,NAME\n ,DEPTH\n ,PARENT_CODE\n , BALANCE\n ,REF_CUR_ID\n  from TBL_LEDGER_ARCHIVE  PARTITION ('||VAR_PARTITION1||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||INPAR_DATE||''',''yyyy-mm-dd''),''yyyy-mm-dd'') and REF_CUR_ID = '||INPAR_cur||'\nunion\nselect  /*+ PARALLEL(AUTO) */  LEDGER_CODE\n ,NAME\n ,DEPTH\n ,PARENT_CODE\n ,  BALANCE\n ,REF_CUR_ID+200\n from TBL_LEDGER_ARCHIVE  PARTITION ('||VAR_PARTITION2||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||inpar_date2||''',''yyyy-mm-dd''),''yyyy-mm-dd'') and REF_CUR_ID = '||INPAR_cur2||')\nPIVOT\n(\n  max(balance)\n  FOR REF_CUR_ID IN ('||INPAR_cur||' as \"1\", '||INPAR_cur2||'+200 as \"2\")\n) order by ledger_code';\n  end fnc_compare_balance_sheet;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_balance_sheet;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BALANCE_SHEET\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BALANCE_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_cur IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, inpar_cur2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend PKG_BALANCE_SHEET;"},{"Name":"PKG_BALANCE_SHEET","ObjectID":291150,"Digest":"c9104b9c579210348085311fd6728df664bf04333d3b5eb258f11a837478bfba","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BALANCE_SHEET\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BALANCE_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_cur IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, inpar_cur2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend PKG_BALANCE_SHEET;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_BALANCE_SHEET\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_compare_balance_sheet \n(\n  inpar_date in varchar2 \n, inpar_cur in number \n, inpar_date2 in varchar2 \n, inpar_cur2 in number \n)return varchar2  as\nVAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\nVAR_PARTITION2 VARCHAR2(200):= 'P'||TO_CHAR(to_date(INPAR_DATE2,'yyyy-mm-dd'),'J');\n  begin\n   RETURN \n'SELECT  /*+ PARALLEL(AUTO) */  LEDGER_CODE as \"id\"\n ,NAME as \"text\"\n ,DEPTH as \"level\"\n ,PARENT_CODE as \"parent\"\n  ,nvl(\"1\",0) \"x1\",nvl(\"2\",0) \"x2\"\n  FROM\n(\nselect  /*+ PARALLEL(AUTO) */  LEDGER_CODE\n ,NAME\n ,DEPTH\n ,PARENT_CODE\n , BALANCE\n ,REF_CUR_ID\n  from TBL_LEDGER_ARCHIVE  PARTITION ('||VAR_PARTITION1||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||INPAR_DATE||''',''yyyy-mm-dd''),''yyyy-mm-dd'') and REF_CUR_ID = '||INPAR_cur||'\nunion\nselect  /*+ PARALLEL(AUTO) */  LEDGER_CODE\n ,NAME\n ,DEPTH\n ,PARENT_CODE\n ,  BALANCE\n ,REF_CUR_ID+200\n from TBL_LEDGER_ARCHIVE  PARTITION ('||VAR_PARTITION2||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||inpar_date2||''',''yyyy-mm-dd''),''yyyy-mm-dd'') and REF_CUR_ID = '||INPAR_cur2||')\nPIVOT\n(\n  max(balance)\n  FOR REF_CUR_ID IN ('||INPAR_cur||' as \"1\", '||INPAR_cur2||'+200 as \"2\")\n) order by ledger_code';\n  end fnc_compare_balance_sheet;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_balance_sheet;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BALANCE_SHEET\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BALANCE_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_cur IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, inpar_cur2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend PKG_BALANCE_SHEET;"},{"Name":"PKG_DUE_DATE_LOAN","ObjectID":292294,"Digest":"f47b2181a90ccbcb523fa115c03d55b55aa33b4e5eb128664f62925ef146bd1e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- create\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (  --OK\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2 \n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- repreq\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- \n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  -- show\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_loan;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE_LOAN\" AS\n\n \n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2 \n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_TIMING_PROFILE\n   ,TYPE\n   ,CATEGORY\n   ,TIMING_PROFILE_TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_TIMING_PROFILE\n   ,INPAR_TYPE\n   ,'duedate'\n   ,INPAR_TIMING_PRFILE_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,REF_TIMING_PROFILE = INPAR_TIMING_PROFILE\n    ,TYPE = INPAR_TYPE\n     ,TIMING_PROFILE_TYPE =INPAR_TIMING_PRFILE_TYPE\n   WHERE ID   = INPAR_ID;\n   COMMIT;\n    \n  END IF;\n  \n     update tbl_report set  H_ID = id where CATEGORY ='duedate' AND H_ID IS NULL;\n  commit;\n END PRC_DUE_DATE_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n\n  VAR_QUERY     VARCHAR2(4000);\n  ID_LOAN       NUMBER;\n  ID_DEP        NUMBER;\n  ID_CUR        NUMBER;\n  ID_CUS        NUMBER;\n  ID_BRANCH     NUMBER;\n  ID_TIMING     NUMBER;\n  DATE_TYPE1    DATE := SYSDATE;\n  VAR_REP_REQ   NUMBER;\n  LOC_S         TIMESTAMP;\n  LOC_F         TIMESTAMP;\n  LOC_MEGHDAR   NUMBER;\n BEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''DD-MM-RRRR''';\n/*  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';*/\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n  SELECT\n   MAX(ID)\n  INTO\n   ID_TIMING\n  FROM TBL_TIMING_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_TIMING_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n  \n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n  COMMIT;\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REP_REQ\n  FROM TBL_REPREQ;\n    /*--------------TBL_REPPER-----------------*/\n  /******enteghal profile zamani be jadval repper*****--*/\n  /*-----------------------------------------*/\n\n  INSERT INTO TBL_REPPER (\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,REF_REPORT_ID\n  ,OLD_ID\n  ,REF_REQ_ID\n  ) SELECT\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,INPAR_ID_REPORT\n  ,ID\n  ,VAR_REP_REQ\n  FROM TBL_TIMING_PROFILE_DETAIL\n  WHERE REF_TIMING_PROFILE   = ID_TIMING;\n\n  COMMIT;\n  FOR I IN (\n   SELECT\n    TTPD.ID\n   ,TTP.TYPE\n   ,TTPD.PERIOD_NAME\n   ,TTPD.PERIOD_DATE\n   ,TTPD.PERIOD_START\n   ,TTPD.PERIOD_END\n   ,TTPD.PERIOD_COLOR\n   FROM TBL_TIMING_PROFILE TTP\n   ,    TBL_TIMING_PROFILE_DETAIL TTPD\n   WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n    AND\n     TTP.ID   = ID_TIMING\n  ) LOOP\n   IF\n    ( I.TYPE = 1 )\n   THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n)  \nSELECT ' ||\n     VAR_REP_REQ ||\n     ' AS REP_REQ\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE  AS REF_LOAN_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TLP.AMOUNT)\n ,4 AS DEPTH\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_LOAN_TYPE,\n TD.RATE  ,\n ''نرخ سود ''||TD.RATE,\n count(TD.RATE)\n FROM AKIN.TBL_LOAN TD,\nAKIN.TBL_LOAN_PAYMENT TLP\n ,  TBL_BRANCH TB\nWHERE DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''')+' ||\n     I.PERIOD_DATE ||\n     ' and TLP.REF_LON_ID = TD.LON_ID AND  TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_LOAN_TYPE\n ,TD.RATE;\n'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n\n    \n    \n    DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n)  \nSELECT ' ||\n     VAR_REP_REQ ||\n     ' AS REP_REQ\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE  AS REF_LOAN_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TLP.AMOUNT)\n ,4 AS DEPTH\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_LOAN_TYPE,\n TD.RATE  ,\n ''نرخ سود ''||TD.RATE,\n count(TD.RATE)\n FROM AKIN.TBL_LOAN TD,\nAKIN.TBL_LOAN_PAYMENT TLP\n ,  TBL_BRANCH TB\nWHERE DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and TD.DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') AND TLP.REF_LON_ID = TD.LON_ID AND  TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_LOAN_TYPE\n ,TD.RATE;\n '\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n  \n   END IF;\n  END LOOP;\n\n  COMMIT;\n  UPDATE TBL_DUE_DATE_DETAIL_LOAN DDD\n   SET\n    DDD.REF_EFF_DATE = (\n     SELECT\n      ID\n     FROM TBL_REPPER\n     WHERE REF_REQ_ID          = VAR_REP_REQ\n      AND\n       TBL_REPPER.OLD_ID   = DDD.REF_EFF_DATE\n    )\n  WHERE DDD.REP_REQ   = VAR_REP_REQ;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   VAR_REP_REQ\n  ,DDD.PARENT\n  ,DDD.CHILD\n  ,0\n  ,DDD.DEPTH\n  ,TP.ID\n  ,DDD.REGION_ID\n  ,DDD.TYPE\n  ,DDD.RATE\n  ,DDD.NAME\n  FROM TBL_DUE_DATE_DETAIL_LOAN DDD\n  ,    TBL_REPPER TP\n  WHERE DDD.REP_REQ     = 0\n   AND\n    DDD.DEPTH       = 4\n   AND\n    TP.REF_REQ_ID   = VAR_REP_REQ\n   AND\n    DDD.CHILD || TP.ID NOT IN (\n     SELECT\n      CHILD || REF_EFF_DATE\n     FROM TBL_DUE_DATE_DETAIL_LOAN\n     WHERE REP_REQ   = VAR_REP_REQ\n    );\n\n  COMMIT;\n  /*-------------------------------------------------------------------------------------------*/\n  LOC_F         := SYSTIMESTAMP;\n  LOC_MEGHDAR   := SQL%ROWCOUNT;\n EXCEPTION\n  WHEN OTHERS THEN\n   RAISE;\n END PRC_DUE_DATE_REPORT_VALUE;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DUEDATE_LOAN''';\n  RETURN VAR2;\n END FNC_DUE_DATE_ALL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select\n parent as \"parent\",child as \"id\",depth as \"level\",name as \"text\",RATE \"rate\",type \"type\",REGION_ID \"regionId\"\nfrom\n  tbl_due_date_detail_loan\n  where rep_req = 0\nstart with\n  parent is null\nconnect by\n  prior child=parent'\n;\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_TREE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := ' SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,''x''||REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\n , count as \"xcount\"\nFROM TBL_DUE_DATE_DETAIL_loan\nwhere REP_REQ ='\n|| INPAR_ID || '';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_LEAF;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  IF\n   ( UPPER(INPAR_TYPE) = 'TYPE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.TYPE AS \"id\",DT.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL_loan DDD,TBL_loan_TYPE DT  WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND DDD.TYPE = DT.REF_loan_TYPE\nORDER BY DT.NAME';\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'RATE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.RATE as \"id\",DDD.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL_loan DDD WHERE DDD.REP_REQ = ' || INPAR_ID || ' and ddd.RATE is not null  \nORDER BY DDD.RATE'\n;\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'REGION' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.REGION_ID as \"id\",TB.REGION_NAME as \"name\"  FROM TBL_DUE_DATE_DETAIL_loan DDD,TBL_BRANCH TB WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND TB.REGION_ID = DDD.REGION_ID \nORDER BY DDD.REGION_ID';\n  END IF;\n\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME\n  AS\n BEGIN\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_LOAN_TYPE AS REF_LOAN_TYPE\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_LOAN_TYPE ||\n   100 ||\n   TD.RATE AS RATE\n  ,SUM(TD.CURRENT_AMOUNT)\n  ,4\n  ,0000\n  ,TB.REGION_ID\n  ,TD.REF_LOAN_TYPE\n  ,TD.RATE\n  ,'نرخ سود ' || TD.RATE\n  FROM AKIN.TBL_LOAN TD\n  ,    TBL_BRANCH TB\n  WHERE TD.REF_BRANCH   = TB.BRN_ID\n  GROUP BY\n   TB.REGION_ID\n  ,TD.REF_LOAN_TYPE\n  ,TD.RATE;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0 AS REP_REQ\n  ,100 || REGION_ID\n  ,PARENT\n  ,SUM(VALUE)\n  ,3\n  ,0 AS EFFDATE\n  ,REGION_ID\n  ,MAX(TYPE)\n  ,-1 AS RATE\n  ,MAX( (\n    SELECT DISTINCT\n     TDT.NAME\n    FROM TBL_LOAN_TYPE TDT\n    WHERE TDT.REF_LOAN_TYPE   = TYPE\n   ) ) AS NAME\n  FROM TBL_DUE_DATE_DETAIL_LOAN\n  GROUP BY\n   PARENT\n  ,REGION_ID;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  )  SELECT\n   0\n  ,0\n  ,b.PARENT\n  ,SUM(b.VALUE)\n  ,2\n  ,0\n  ,b.REGION_ID\n  ,0\n  ,-1\n  ,max((select  distinct TBL_BRANCH.REGION_NAME from TBL_BRANCH where TBL_BRANCH.REGION_ID =b.REGION_ID)) as name\n  FROM TBL_DUE_DATE_DETAIL_LOAN b\n  WHERE b.DEPTH   = 3\n  GROUP BY\n   b.PARENT\n  ,b.REGION_ID;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,''\n  ,0\n  ,SUM(VALUE)\n  ,1\n  ,0\n  ,0\n  ,0\n  ,-1\n  ,'??'\n  FROM TBL_DUE_DATE_DETAIL_LOAN\n  WHERE DEPTH   = 2\n  GROUP BY\n   PARENT;\n\n  COMMIT;\n END;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\nFROM TBL_DUE_DATE_DETAIL_LOAN\nwhere REP_REQ ='\n|| INPAR_ID || ' and DEPTH is null';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_count;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_LOAN;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- create\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (  --OK\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2 \n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- repreq\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- \n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  -- show\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_loan;"},{"Name":"PKG_DUE_DATE_LOAN","ObjectID":292295,"Digest":"f47b2181a90ccbcb523fa115c03d55b55aa33b4e5eb128664f62925ef146bd1e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- create\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (  --OK\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2 \n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- repreq\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- \n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  -- show\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_loan;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE_LOAN\" AS\n\n \n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2 \n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,REF_TIMING_PROFILE\n   ,TYPE\n   ,CATEGORY\n   ,TIMING_PROFILE_TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,INPAR_TIMING_PROFILE\n   ,INPAR_TYPE\n   ,'duedate'\n   ,INPAR_TIMING_PRFILE_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,REF_TIMING_PROFILE = INPAR_TIMING_PROFILE\n    ,TYPE = INPAR_TYPE\n     ,TIMING_PROFILE_TYPE =INPAR_TIMING_PRFILE_TYPE\n   WHERE ID   = INPAR_ID;\n   COMMIT;\n    \n  END IF;\n  \n     update tbl_report set  H_ID = id where CATEGORY ='duedate' AND H_ID IS NULL;\n  commit;\n END PRC_DUE_DATE_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n\n  VAR_QUERY     VARCHAR2(4000);\n  ID_LOAN       NUMBER;\n  ID_DEP        NUMBER;\n  ID_CUR        NUMBER;\n  ID_CUS        NUMBER;\n  ID_BRANCH     NUMBER;\n  ID_TIMING     NUMBER;\n  DATE_TYPE1    DATE := SYSDATE;\n  VAR_REP_REQ   NUMBER;\n  LOC_S         TIMESTAMP;\n  LOC_F         TIMESTAMP;\n  LOC_MEGHDAR   NUMBER;\n BEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''DD-MM-RRRR''';\n/*  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';*/\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n  SELECT\n   MAX(ID)\n  INTO\n   ID_TIMING\n  FROM TBL_TIMING_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_TIMING_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n  \n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n  COMMIT;\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REP_REQ\n  FROM TBL_REPREQ;\n    /*--------------TBL_REPPER-----------------*/\n  /******enteghal profile zamani be jadval repper*****--*/\n  /*-----------------------------------------*/\n\n  INSERT INTO TBL_REPPER (\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,REF_REPORT_ID\n  ,OLD_ID\n  ,REF_REQ_ID\n  ) SELECT\n   REF_TIMING_PROFILE\n  ,PERIOD_NAME\n  ,PERIOD_DATE\n  ,PERIOD_START\n  ,PERIOD_END\n  ,PERIOD_COLOR\n  ,INPAR_ID_REPORT\n  ,ID\n  ,VAR_REP_REQ\n  FROM TBL_TIMING_PROFILE_DETAIL\n  WHERE REF_TIMING_PROFILE   = ID_TIMING;\n\n  COMMIT;\n  FOR I IN (\n   SELECT\n    TTPD.ID\n   ,TTP.TYPE\n   ,TTPD.PERIOD_NAME\n   ,TTPD.PERIOD_DATE\n   ,TTPD.PERIOD_START\n   ,TTPD.PERIOD_END\n   ,TTPD.PERIOD_COLOR\n   FROM TBL_TIMING_PROFILE TTP\n   ,    TBL_TIMING_PROFILE_DETAIL TTPD\n   WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n    AND\n     TTP.ID   = ID_TIMING\n  ) LOOP\n   IF\n    ( I.TYPE = 1 )\n   THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n)  \nSELECT ' ||\n     VAR_REP_REQ ||\n     ' AS REP_REQ\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE  AS REF_LOAN_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TLP.AMOUNT)\n ,4 AS DEPTH\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_LOAN_TYPE,\n TD.RATE  ,\n ''نرخ سود ''||TD.RATE,\n count(TD.RATE)\n FROM AKIN.TBL_LOAN TD,\nAKIN.TBL_LOAN_PAYMENT TLP\n ,  TBL_BRANCH TB\nWHERE DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''')+' ||\n     I.PERIOD_DATE ||\n     ' and TLP.REF_LON_ID = TD.LON_ID AND  TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_LOAN_TYPE\n ,TD.RATE;\n'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n\n    \n    \n    DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n    SELECT\n     '  \nINSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n REP_REQ\n ,PARENT\n ,CHILD\n ,VALUE\n ,DEPTH\n ,REF_EFF_DATE\n ,REGION_ID\n ,TYPE\n ,RATE,\n name,\n count\n)  \nSELECT ' ||\n     VAR_REP_REQ ||\n     ' AS REP_REQ\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE  AS REF_LOAN_TYPE\n ,100 ||\n TB.REGION_ID ||\n 100 ||\n TD.REF_LOAN_TYPE ||\n 100 ||\n TD.RATE AS RATE\n ,SUM(TLP.AMOUNT)\n ,4 AS DEPTH\n ,' ||\n     I.ID ||\n     '\n ,TB.REGION_ID ,\n TD.REF_LOAN_TYPE,\n TD.RATE  ,\n ''نرخ سود ''||TD.RATE,\n count(TD.RATE)\n FROM AKIN.TBL_LOAN TD,\nAKIN.TBL_LOAN_PAYMENT TLP\n ,  TBL_BRANCH TB\nWHERE DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and TD.DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') AND TLP.REF_LON_ID = TD.LON_ID AND  TD.REF_BRANCH   = TB.BRN_ID\nGROUP BY\n TB.REGION_ID\n ,TD.REF_LOAN_TYPE\n ,TD.RATE;\n '\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n  \n   END IF;\n  END LOOP;\n\n  COMMIT;\n  UPDATE TBL_DUE_DATE_DETAIL_LOAN DDD\n   SET\n    DDD.REF_EFF_DATE = (\n     SELECT\n      ID\n     FROM TBL_REPPER\n     WHERE REF_REQ_ID          = VAR_REP_REQ\n      AND\n       TBL_REPPER.OLD_ID   = DDD.REF_EFF_DATE\n    )\n  WHERE DDD.REP_REQ   = VAR_REP_REQ;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   VAR_REP_REQ\n  ,DDD.PARENT\n  ,DDD.CHILD\n  ,0\n  ,DDD.DEPTH\n  ,TP.ID\n  ,DDD.REGION_ID\n  ,DDD.TYPE\n  ,DDD.RATE\n  ,DDD.NAME\n  FROM TBL_DUE_DATE_DETAIL_LOAN DDD\n  ,    TBL_REPPER TP\n  WHERE DDD.REP_REQ     = 0\n   AND\n    DDD.DEPTH       = 4\n   AND\n    TP.REF_REQ_ID   = VAR_REP_REQ\n   AND\n    DDD.CHILD || TP.ID NOT IN (\n     SELECT\n      CHILD || REF_EFF_DATE\n     FROM TBL_DUE_DATE_DETAIL_LOAN\n     WHERE REP_REQ   = VAR_REP_REQ\n    );\n\n  COMMIT;\n  /*-------------------------------------------------------------------------------------------*/\n  LOC_F         := SYSTIMESTAMP;\n  LOC_MEGHDAR   := SQL%ROWCOUNT;\n EXCEPTION\n  WHEN OTHERS THEN\n   RAISE;\n END PRC_DUE_DATE_REPORT_VALUE;\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DUEDATE_LOAN''';\n  RETURN VAR2;\n END FNC_DUE_DATE_ALL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select\n parent as \"parent\",child as \"id\",depth as \"level\",name as \"text\",RATE \"rate\",type \"type\",REGION_ID \"regionId\"\nfrom\n  tbl_due_date_detail_loan\n  where rep_req = 0\nstart with\n  parent is null\nconnect by\n  prior child=parent'\n;\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_TREE;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := ' SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,''x''||REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\n , count as \"xcount\"\nFROM TBL_DUE_DATE_DETAIL_loan\nwhere REP_REQ ='\n|| INPAR_ID || '';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_LEAF;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  IF\n   ( UPPER(INPAR_TYPE) = 'TYPE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.TYPE AS \"id\",DT.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL_loan DDD,TBL_loan_TYPE DT  WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND DDD.TYPE = DT.REF_loan_TYPE\nORDER BY DT.NAME';\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'RATE' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.RATE as \"id\",DDD.NAME as \"name\" FROM TBL_DUE_DATE_DETAIL_loan DDD WHERE DDD.REP_REQ = ' || INPAR_ID || ' and ddd.RATE is not null  \nORDER BY DDD.RATE'\n;\n  END IF;\n\n  IF\n   ( UPPER(INPAR_TYPE) = 'REGION' )\n  THEN\n   VAR2   := 'SELECT DISTINCT DDD.REGION_ID as \"id\",TB.REGION_NAME as \"name\"  FROM TBL_DUE_DATE_DETAIL_loan DDD,TBL_BRANCH TB WHERE DDD.REP_REQ = '\n|| INPAR_ID || ' AND TB.REGION_ID = DDD.REGION_ID \nORDER BY DDD.REGION_ID';\n  END IF;\n\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DUE_DATE_FIRS_TIME\n  AS\n BEGIN\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_LOAN_TYPE AS REF_LOAN_TYPE\n  ,100 ||\n   TB.REGION_ID ||\n   100 ||\n   TD.REF_LOAN_TYPE ||\n   100 ||\n   TD.RATE AS RATE\n  ,SUM(TD.CURRENT_AMOUNT)\n  ,4\n  ,0000\n  ,TB.REGION_ID\n  ,TD.REF_LOAN_TYPE\n  ,TD.RATE\n  ,'نرخ سود ' || TD.RATE\n  FROM AKIN.TBL_LOAN TD\n  ,    TBL_BRANCH TB\n  WHERE TD.REF_BRANCH   = TB.BRN_ID\n  GROUP BY\n   TB.REGION_ID\n  ,TD.REF_LOAN_TYPE\n  ,TD.RATE;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0 AS REP_REQ\n  ,100 || REGION_ID\n  ,PARENT\n  ,SUM(VALUE)\n  ,3\n  ,0 AS EFFDATE\n  ,REGION_ID\n  ,MAX(TYPE)\n  ,-1 AS RATE\n  ,MAX( (\n    SELECT DISTINCT\n     TDT.NAME\n    FROM TBL_LOAN_TYPE TDT\n    WHERE TDT.REF_LOAN_TYPE   = TYPE\n   ) ) AS NAME\n  FROM TBL_DUE_DATE_DETAIL_LOAN\n  GROUP BY\n   PARENT\n  ,REGION_ID;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  )  SELECT\n   0\n  ,0\n  ,b.PARENT\n  ,SUM(b.VALUE)\n  ,2\n  ,0\n  ,b.REGION_ID\n  ,0\n  ,-1\n  ,max((select  distinct TBL_BRANCH.REGION_NAME from TBL_BRANCH where TBL_BRANCH.REGION_ID =b.REGION_ID)) as name\n  FROM TBL_DUE_DATE_DETAIL_LOAN b\n  WHERE b.DEPTH   = 3\n  GROUP BY\n   b.PARENT\n  ,b.REGION_ID;\n\n  COMMIT;\n  INSERT INTO TBL_DUE_DATE_DETAIL_LOAN (\n   REP_REQ\n  ,PARENT\n  ,CHILD\n  ,VALUE\n  ,DEPTH\n  ,REF_EFF_DATE\n  ,REGION_ID\n  ,TYPE\n  ,RATE\n  ,NAME\n  ) SELECT\n   0\n  ,''\n  ,0\n  ,SUM(VALUE)\n  ,1\n  ,0\n  ,0\n  ,0\n  ,-1\n  ,'??'\n  FROM TBL_DUE_DATE_DETAIL_LOAN\n  WHERE DEPTH   = 2\n  GROUP BY\n   PARENT;\n\n  COMMIT;\n END;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT\n  PARENT as \"parent\"\n ,CHILD as \"id\"\n ,VALUE as \"value\"\n ,DEPTH as \"depth\"\n ,REF_EFF_DATE as \"effDate\"\n ,REGION_ID as \"regionId\"\n ,TYPE as \"type\"\n ,RATE as \"rate\"\nFROM TBL_DUE_DATE_DETAIL_LOAN\nwhere REP_REQ ='\n|| INPAR_ID || ' and DEPTH is null';\n  RETURN VAR2;\n END FNC_DUE_DATE_GET_count;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_LOAN;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- create\n PROCEDURE PRC_DUE_DATE_PROFILE_REPORT (  --OK\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n  ,INPAR_TIMING_PRFILE_TYPE   IN VARCHAR2 \n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- repreq\n PROCEDURE PRC_DUE_DATE_REPORT_VALUE ( INPAR_ID_REPORT IN NUMBER );--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n-- \n FUNCTION FNC_DUE_DATE_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;--OK\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  -- show\n FUNCTION FNC_DUE_DATE_GET_TREE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_LEAF ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_DETAIL (\n  INPAR_ID     IN NUMBER\n ,INPAR_TYPE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n -- show\n FUNCTION FNC_DUE_DATE_GET_count ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DUE_DATE_FIRS_TIME;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_loan;"},{"Name":"PKG_NOP","ObjectID":292810,"Digest":"066d1626a3091504df8e027daeddbaaacb5169e66e4b0b03bbaa2f1593832ab7","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP\" as \n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NOP_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_nop_GI_CALC (\n   INPAR_ID     IN NUMBER,\n   inpar_REPREQ in number ,\n    inpar_REF_REPORT in number,\n    inpar_TITLE in number,\n    inapr_REF_TIMING in number\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_NOP_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_NOP_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_REPORT_VALUE_nop( INPAR_ID_REPORT IN NUMBER );\n\n\nend pkg_nop;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NOP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_NOP_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_NOP_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_NOP_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n  \n   COMMIT;\n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_NOP_REP_PROFILE_DETAIL\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n    ,TITLE = INPAR_TITLE\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_NOP_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'NOP'\n   ,INPAR_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  \n  --=============\n  INSERT INTO TBL_NOP_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) (select(select max(id) from tbl_report where upper(type) = 'NOP') ,NAME\n   ,0\n   ,0\n   ,TYPE\n   ,TITLE\n   from tbl_NOP_rep_profile_detail where is_standard=1\n   );\n   COMMIT;\n  --==============\n  \n  \n  \n END PRC_NOP_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_NOP_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n|| INPAR_ID || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = (select trunc(max(eff_date)) from  TBL_LEDGER_archive))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN abs(TO_number(VAR2));\n END FNC_NOP_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  var:= inpar_type;\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\"\nFROM TBL_NOP_REP_PROFILE_DETAIL where  is_standard =1 '\n;\n  RETURN OUTPUT;\n END FNC_NOP_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"description\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''NOP'' order by id';\n  RETURN VAR2;\n END FNC_NOP_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_NOP_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n   pragma autonomous_transaction;\n BEGIN\n --pkg_NOP.prc_NOP_update_gi_calc(INPAR_REPORT);\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\",\n  to_char(VALUE) as \"manualValue\",\n  PROFILE_ID as \"profileId\"\nFROM TBL_NOP_REP_PROFILE_DETAIL where REF_REPORT = '\n|| INPAR_REPORT || ' AND TYPE = 2 order by type ';\n  RETURN OUTPUT;\n END FNC_NOP_GET_INPUT_EDIT;\n-----------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE PRC_REPORT_VALUE_nop(\n    INPAR_ID_REPORT IN NUMBER )\nAS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n  VAR_QUERY  VARCHAR2(4000);\n  ID_LOAN    NUMBER;\n  ID_DEP     NUMBER;\n  ID_CUR     NUMBER;\n  ID_CUS     NUMBER;\n  ID_BRANCH  NUMBER;\n  ID_TIMING  NUMBER;\n  DATE_TYPE1 DATE := SYSDATE;\n  LOC_S  TIMESTAMP;\n  LOC_F  TIMESTAMP;\n  LOC_MEGHDAR NUMBER;\n  VAR_REPREQ NUMBER;\n  min_time varchar2(300);\nBEGIN\n  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n   \n  SELECT REF_PROFILE_CURRENCY\n  INTO ID_CUR\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_CUSTOMER\n  INTO ID_CUS\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_BRANCH\n  INTO ID_BRANCH\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_DEPOSIT\n  INTO ID_DEP\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_TIME\n  INTO ID_TIMING\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_LOAN\n  INTO ID_LOAN\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n   SELECT\n  MAX(ID)\n INTO\n  VAR_REPREQ\n FROM TBL_REPREQ;\n \n   /************/\n\n  INSERT INTO TBL_REPPER (\n  REF_TIMING_PROFILE\n ,PERIOD_NAME\n ,PERIOD_DATE\n ,PERIOD_START\n ,PERIOD_END\n ,PERIOD_COLOR\n ,REF_REPORT_ID\n ,OLD_ID\n ,REF_REQ_ID\n ) SELECT\n  ID_TIMING\n ,PERIOD_NAME\n ,PERIOD_DATE\n ,PERIOD_START\n ,PERIOD_END\n ,PERIOD_COLOR\n ,INPAR_ID_REPORT\n ,ID\n ,VAR_REPREQ\n FROM TBL_TIMING_PROFILE_DETAIL\n WHERE REF_TIMING_PROFILE   = ID_TIMING;\n\n COMMIT;\n \n \n \n \n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n  FOR I IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  )\n  LOOP\n    IF ( I.TYPE = 1 ) THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n      SELECT '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,   \nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \nBALANCE, \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || '''\nFROM TBL_VALUE WHERE  REF_CUR_ID IN (select CUR_ID from tbl_currency where cur_id \u003c\u003e 4)'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ')  AND DUE_DATE \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;     \n      \n      DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \nBALANCE,   \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || '''\nFROM TBL_VALUE WHERE  REF_CUR_ID IN (select CUR_ID from tbl_currency where cur_id \u003c\u003e 4)'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ') AND DUE_DATE \u003e to_date('''\n        || I.PERIOD_START\n        || ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date('''\n        || I.PERIOD_END\n        || ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n     \n    END IF;\n  END LOOP;\n  COMMIT;\n  \n-- insert to final result baraye tashilat\n\nINSERT INTO tbl_nop_final_result (\n    repreq,\n    ref_report,\n    title,\n    ref_timing,\n    ref_currency,\n    balance,\n    moadel_arzi\n)\n    SELECT\n        var_repreq,\n        INPAR_ID_REPORT,\n        1,\n        tvm.ref_timing_id,\n        tvm.ref_cur_id,\n        SUM(tvm.balance),\n        SUM(tvm.balance) / (\n            SELECT\n                change_rate\n            FROM\n                tbl_currency_rel\n            WHERE\n                rel_date = (\n                    SELECT\n                        MAX(rel_date)\n                    FROM\n                        tbl_currency_rel\n                )\n                AND src_cur_id = tvm.ref_cur_id\n        ) AS moadel_riali\n    FROM\n        tbl_value_temp tvm\n    WHERE\n        tvm.ref_modality_type IN (\n            2,\n            21\n        )\n    GROUP BY\n        tvm.ref_timing_id,\n        tvm.ref_cur_id;\n  \n  -- insert to final result baraye seprde ha\n\nINSERT INTO tbl_nop_final_result (\n    repreq,\n    ref_report,\n    title,\n    ref_timing,\n    ref_currency,\n    balance,\n    moadel_arzi\n)\n    SELECT\n        var_repreq,\n        INPAR_ID_REPORT,\n        2,\n        tvm.ref_timing_id,\n        tvm.ref_cur_id,\n        SUM(tvm.balance),\n        SUM(tvm.balance) /(\n            SELECT\n                change_rate\n            FROM\n                tbl_currency_rel\n            WHERE\n                rel_date = (\n                    SELECT\n                        MAX(rel_date)\n                    FROM\n                        tbl_currency_rel\n                )\n                AND src_cur_id = tvm.ref_cur_id\n        ) AS moadel_riali\n    FROM\n        tbl_value_temp tvm\n    WHERE\n        tvm.ref_modality_type IN (\n            1,\n            11\n        )\n    GROUP BY\n        tvm.ref_timing_id,\n        tvm.ref_cur_id;\n  \n  commit;\n  update TBL_NOP_REP_PROFILE_DETAIL set REF_REPREQ =var_repreq\n  where REF_REPREQ is null and IS_STANDARD\u003c\u003e1;\n  \n      commit;\n--======\nselect min(ref_timing) into min_time from tbl_nop_final_result where repreq = var_repreq ;\n  --======\n  for i in (select * from tbl_nop_rep_profile_detail where is_standard \u003c\u003e1 and ref_repreq = var_repreq)\n  loop\n   prc_nop_GI_CALC (\n   i.profile_id       \n , var_repreq  ,\n    INPAR_ID_REPORT ,\n    i.title ,\n  min_time\n ) ;\n end loop;\n  --======\n  ---------------------------\n/*  LOC_F := SYSTIMESTAMP;\n       LOC_MEGHDAR := SQL%ROWCOUNT;\n  EXCEPTION \nWHEN OTHERS THEN\nRAISE;*/\nEND PRC_REPORT_VALUE_nop;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_nop_GI_CALC (\n   INPAR_ID     IN NUMBER\n , inpar_REPREQ in number ,\n    inpar_REF_REPORT in number,\n    inpar_TITLE in number,\n    inapr_REF_TIMING in number\n ) as\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n  var_date date;\n BEGIN\n select max(eff_date) into var_date from TBL_LEDGER_archive;\n \n for i in (select * from tbl_currency_rel where rel_date = (select max(rel_date) from tbl_currency_rel))\n loop\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = ' ||\n   INPAR_ID ||\n   '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n     ref_cur_id = '||i.src_cur_id||'\n     and\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   var_date ||\n   ''')))'\n  INTO\n   VAR\n  FROM DUAL;\nDBMS_OUTPUT.PUT_LINE(var);\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  --RETURN abs(to_number(VAR2));\n  --RETURN VAR;\n  \n  INSERT\nINTO TBL_NOP_FINAL_RESULT\n  (\n   \n    REPREQ,\n    REF_REPORT,\n    TITLE,\n    REF_TIMING,\n    REF_CURRENCY,\n    BALANCE,\n    MOADEL_arzi\n  )\n  VALUES\n  (\n \n   inpar_REPREQ,\n    inpar_REF_REPORT,\n    inpar_TITLE,\n    inapr_REF_TIMING,\n    i.src_cur_id,\n    abs(to_number(VAR2)),\n    abs(to_number(VAR2))/ i.change_rate\n  );\n  commit;\n  end loop;\n END prc_nop_GI_CALC;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NOP;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP\" as \n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NOP_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_nop_GI_CALC (\n   INPAR_ID     IN NUMBER,\n   inpar_REPREQ in number ,\n    inpar_REF_REPORT in number,\n    inpar_TITLE in number,\n    inapr_REF_TIMING in number\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_NOP_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_NOP_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_REPORT_VALUE_nop( INPAR_ID_REPORT IN NUMBER );\n\n\nend pkg_nop;"},{"Name":"PKG_NOP","ObjectID":292815,"Digest":"066d1626a3091504df8e027daeddbaaacb5169e66e4b0b03bbaa2f1593832ab7","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP\" as \n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NOP_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_nop_GI_CALC (\n   INPAR_ID     IN NUMBER,\n   inpar_REPREQ in number ,\n    inpar_REF_REPORT in number,\n    inpar_TITLE in number,\n    inapr_REF_TIMING in number\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_NOP_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_NOP_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_REPORT_VALUE_nop( INPAR_ID_REPORT IN NUMBER );\n\n\nend pkg_nop;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NOP\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_NOP_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_NOP_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_NOP_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n  \n   COMMIT;\n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_NOP_REP_PROFILE_DETAIL\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n    ,TITLE = INPAR_TITLE\n   WHERE ID   = INPAR_ID;\n\n  END IF;\n\n  COMMIT;\n END PRC_NOP_REP_PROFILE_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'NOP'\n   ,INPAR_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n  \n  --=============\n  INSERT INTO TBL_NOP_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) (select(select max(id) from tbl_report where upper(type) = 'NOP') ,NAME\n   ,0\n   ,0\n   ,TYPE\n   ,TITLE\n   from tbl_NOP_rep_profile_detail where is_standard=1\n   );\n   COMMIT;\n  --==============\n  \n  \n  \n END PRC_NOP_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_NOP_GI_CALC ( INPAR_ID IN varchar2 ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n|| INPAR_ID || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = (select trunc(max(eff_date)) from  TBL_LEDGER_archive))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN abs(TO_number(VAR2));\n END FNC_NOP_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  var:= inpar_type;\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\"\nFROM TBL_NOP_REP_PROFILE_DETAIL where  is_standard =1 '\n;\n  RETURN OUTPUT;\n END FNC_NOP_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"description\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''NOP'' order by id';\n  RETURN VAR2;\n END FNC_NOP_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n \n FUNCTION FNC_NOP_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n   pragma autonomous_transaction;\n BEGIN\n --pkg_NOP.prc_NOP_update_gi_calc(INPAR_REPORT);\n  OUTPUT   := 'select\n   id as \"id\",\n  NAME as \"infoGroup\",\n  TYPE as \"type\",\n  TITLE as \"title\",\n  to_char(VALUE) as \"manualValue\",\n  PROFILE_ID as \"profileId\"\nFROM TBL_NOP_REP_PROFILE_DETAIL where REF_REPORT = '\n|| INPAR_REPORT || ' AND TYPE = 2 order by type ';\n  RETURN OUTPUT;\n END FNC_NOP_GET_INPUT_EDIT;\n-----------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE PRC_REPORT_VALUE_nop(\n    INPAR_ID_REPORT IN NUMBER )\nAS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n  VAR_QUERY  VARCHAR2(4000);\n  ID_LOAN    NUMBER;\n  ID_DEP     NUMBER;\n  ID_CUR     NUMBER;\n  ID_CUS     NUMBER;\n  ID_BRANCH  NUMBER;\n  ID_TIMING  NUMBER;\n  DATE_TYPE1 DATE := SYSDATE;\n  LOC_S  TIMESTAMP;\n  LOC_F  TIMESTAMP;\n  LOC_MEGHDAR NUMBER;\n  VAR_REPREQ NUMBER;\n  min_time varchar2(300);\nBEGIN\n  execute immediate 'alter session set nls_date_format=''DD-MM-RRRR''';\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n   \n  SELECT REF_PROFILE_CURRENCY\n  INTO ID_CUR\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_CUSTOMER\n  INTO ID_CUS\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_BRANCH\n  INTO ID_BRANCH\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_DEPOSIT\n  INTO ID_DEP\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_TIME\n  INTO ID_TIMING\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n  SELECT REF_PROFILE_LOAN\n  INTO ID_LOAN\n  FROM TBL_REPORT_PROFILE\n  WHERE REF_REPORT = INPAR_ID_REPORT;\n   SELECT\n  MAX(ID)\n INTO\n  VAR_REPREQ\n FROM TBL_REPREQ;\n \n   /************/\n\n  INSERT INTO TBL_REPPER (\n  REF_TIMING_PROFILE\n ,PERIOD_NAME\n ,PERIOD_DATE\n ,PERIOD_START\n ,PERIOD_END\n ,PERIOD_COLOR\n ,REF_REPORT_ID\n ,OLD_ID\n ,REF_REQ_ID\n ) SELECT\n  ID_TIMING\n ,PERIOD_NAME\n ,PERIOD_DATE\n ,PERIOD_START\n ,PERIOD_END\n ,PERIOD_COLOR\n ,INPAR_ID_REPORT\n ,ID\n ,VAR_REPREQ\n FROM TBL_TIMING_PROFILE_DETAIL\n WHERE REF_TIMING_PROFILE   = ID_TIMING;\n\n COMMIT;\n \n \n \n \n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n  FOR I IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  )\n  LOOP\n    IF ( I.TYPE = 1 ) THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n      SELECT '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,   \nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \nBALANCE, \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || '''\nFROM TBL_VALUE WHERE  REF_CUR_ID IN (select CUR_ID from tbl_currency where cur_id \u003c\u003e 4)'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ')  AND DUE_DATE \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;     \n      \n      DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \nINSERT\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,   \nREF_ID,   \nBALANCE,\nREF_BRANCH,   \nDUE_DATE,   \nREF_TYPE,   \nREF_LEGER_CODE,   \nREF_CUR_ID,   \nREF_STA_ID,   \nREF_CTY_ID,   \nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT REF_MODALITY_TYPE, \nREF_ID, \nBALANCE,   \nREF_BRANCH, \nDUE_DATE, \nREF_TYPE, \nREF_LEGER_CODE, \nREF_CUR_ID, \nREF_STA_ID, \nREF_CTY_ID, \nREF_CUS_ID,\n'''\n        || I.ID\n        || ''',\n'''\n        || I.PERIOD_NAME\n        || ''',\n'''\n        || I.PERIOD_COLOR\n        || '''\nFROM TBL_VALUE WHERE  REF_CUR_ID IN (select CUR_ID from tbl_currency where cur_id \u003c\u003e 4)'\n        || ' AND REF_CUS_ID IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS)\n        || ')'\n        || ' AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH)\n        || ') AND DUE_DATE \u003e to_date('''\n        || I.PERIOD_START\n        || ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date('''\n        || I.PERIOD_END\n        || ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n     \n    END IF;\n  END LOOP;\n  COMMIT;\n  \n-- insert to final result baraye tashilat\n\nINSERT INTO tbl_nop_final_result (\n    repreq,\n    ref_report,\n    title,\n    ref_timing,\n    ref_currency,\n    balance,\n    moadel_arzi\n)\n    SELECT\n        var_repreq,\n        INPAR_ID_REPORT,\n        1,\n        tvm.ref_timing_id,\n        tvm.ref_cur_id,\n        SUM(tvm.balance),\n        SUM(tvm.balance) / (\n            SELECT\n                change_rate\n            FROM\n                tbl_currency_rel\n            WHERE\n                rel_date = (\n                    SELECT\n                        MAX(rel_date)\n                    FROM\n                        tbl_currency_rel\n                )\n                AND src_cur_id = tvm.ref_cur_id\n        ) AS moadel_riali\n    FROM\n        tbl_value_temp tvm\n    WHERE\n        tvm.ref_modality_type IN (\n            2,\n            21\n        )\n    GROUP BY\n        tvm.ref_timing_id,\n        tvm.ref_cur_id;\n  \n  -- insert to final result baraye seprde ha\n\nINSERT INTO tbl_nop_final_result (\n    repreq,\n    ref_report,\n    title,\n    ref_timing,\n    ref_currency,\n    balance,\n    moadel_arzi\n)\n    SELECT\n        var_repreq,\n        INPAR_ID_REPORT,\n        2,\n        tvm.ref_timing_id,\n        tvm.ref_cur_id,\n        SUM(tvm.balance),\n        SUM(tvm.balance) /(\n            SELECT\n                change_rate\n            FROM\n                tbl_currency_rel\n            WHERE\n                rel_date = (\n                    SELECT\n                        MAX(rel_date)\n                    FROM\n                        tbl_currency_rel\n                )\n                AND src_cur_id = tvm.ref_cur_id\n        ) AS moadel_riali\n    FROM\n        tbl_value_temp tvm\n    WHERE\n        tvm.ref_modality_type IN (\n            1,\n            11\n        )\n    GROUP BY\n        tvm.ref_timing_id,\n        tvm.ref_cur_id;\n  \n  commit;\n  update TBL_NOP_REP_PROFILE_DETAIL set REF_REPREQ =var_repreq\n  where REF_REPREQ is null and IS_STANDARD\u003c\u003e1;\n  \n      commit;\n--======\nselect min(ref_timing) into min_time from tbl_nop_final_result where repreq = var_repreq ;\n  --======\n  for i in (select * from tbl_nop_rep_profile_detail where is_standard \u003c\u003e1 and ref_repreq = var_repreq)\n  loop\n   prc_nop_GI_CALC (\n   i.profile_id       \n , var_repreq  ,\n    INPAR_ID_REPORT ,\n    i.title ,\n  min_time\n ) ;\n end loop;\n  --======\n  ---------------------------\n/*  LOC_F := SYSTIMESTAMP;\n       LOC_MEGHDAR := SQL%ROWCOUNT;\n  EXCEPTION \nWHEN OTHERS THEN\nRAISE;*/\nEND PRC_REPORT_VALUE_nop;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_nop_GI_CALC (\n   INPAR_ID     IN NUMBER\n , inpar_REPREQ in number ,\n    inpar_REF_REPORT in number,\n    inpar_TITLE in number,\n    inapr_REF_TIMING in number\n ) as\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n  var_date date;\n BEGIN\n select max(eff_date) into var_date from TBL_LEDGER_archive;\n \n for i in (select * from tbl_currency_rel where rel_date = (select max(rel_date) from tbl_currency_rel))\n loop\n  SELECT\n   '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = ' ||\n   INPAR_ID ||\n   '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n     ref_cur_id = '||i.src_cur_id||'\n     and\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   var_date ||\n   ''')))'\n  INTO\n   VAR\n  FROM DUAL;\nDBMS_OUTPUT.PUT_LINE(var);\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  --RETURN abs(to_number(VAR2));\n  --RETURN VAR;\n  \n  INSERT\nINTO TBL_NOP_FINAL_RESULT\n  (\n   \n    REPREQ,\n    REF_REPORT,\n    TITLE,\n    REF_TIMING,\n    REF_CURRENCY,\n    BALANCE,\n    MOADEL_arzi\n  )\n  VALUES\n  (\n \n   inpar_REPREQ,\n    inpar_REF_REPORT,\n    inpar_TITLE,\n    inapr_REF_TIMING,\n    i.src_cur_id,\n    abs(to_number(VAR2)),\n    abs(to_number(VAR2))/ i.change_rate\n  );\n  commit;\n  end loop;\n END prc_nop_GI_CALC;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/***********************************************************************************************/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_NOP;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP\" as \n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_NOP_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_nop_GI_CALC (\n   INPAR_ID     IN NUMBER,\n   inpar_REPREQ in number ,\n    inpar_REF_REPORT in number,\n    inpar_TITLE in number,\n    inapr_REF_TIMING in number\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_NOP_REP_PROFILE_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_NOP_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_NOP_GET_INPUT ( INPAR_type IN VARCHAR2 ) RETURN VARCHAR2 ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_GET_INPUT_EDIT ( INPAR_REPORT IN VARCHAR2,INPAR_TYPE IN VARCHAR2 ) RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_REPORT_VALUE_nop( INPAR_ID_REPORT IN NUMBER );\n\n\nend pkg_nop;"},{"Name":"PKG_NOP_SIMPLE","ObjectID":295242,"Digest":"84005c9e4f04a39ada558f61c9ab5d790b26e5d39a8bab9dc1fa6aea3ad2cdf5","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP_SIMPLE\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:        \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_NOP_RESULT (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_simple_tree  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_GET_DETAIL_NAME(inpar_date varchar2)  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_NOP_RESULT_gold (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_nop_fill_currency_rell\n  (\n  inpar_cur_id IN VARCHAR2\n  ,inpar_DEST_CUR_ID IN VARCHAR2\n  ,inpar_REL_DATE IN VARCHAR2\n  ,inpar_CHANGE_RATE IN VARCHAR2\n  ,inpar_insert_or_update in varchar2 --if inpar = 0 then insert and if inpar = 1 then update\n  ,inpar_id in varchar2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_currency_rell (inpar_date varchar2)  RETURN VARCHAR2 ; \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency_rell_date RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_nop_delete(inpar_id in varchar2,outpar out varchar2);\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_nop_simple;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NOP_SIMPLE\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_nop_result (inpar_date varchar2)  return clob  as\n\n\n\nvar_pivot VARCHAR2(30000);\nvar_select VARCHAR2(30000);\nvar_selectnvl VARCHAR2(30000);\nvar_pivoty VARCHAR2(30000);\nvar_selecty VARCHAR2(30000);\nvar_selectynvl VARCHAR2(30000);\nvar_pivotz VARCHAR2(30000);\nvar_selectz VARCHAR2(30000);\nvar_selectznvl VARCHAR2(30000);\nvar_change_rate number;\nVAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\nVAR_DATE VARCHAR2(30000);\n\n\n\n\n\n\n\n  begin\n  \n\n IF\n  ( ( TRUNC(TO_DATE(INPAR_DATE,'yyyy-mm-dd') ) ) = ( TRUNC(SYSDATE) ) )\n THEN\n  SELECT\n   MAX(TO_CHAR(EFF_DATE,'yyyy-mm-dd') )\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\n ELSE\n  VAR_DATE   := INPAR_DATE;\n END IF;\n \nSELECT\n CHANGE_RATE\nINTO\n VAR_CHANGE_RATE\nFROM TBL_CURRENCY_REL\nWHERE TRUNC(REL_DATE) = (\n   SELECT\n    MAX(trunc(REL_DATE))\n   FROM TBL_CURRENCY_REL\n   WHERE trunc(REL_DATE) \u003c= to_date(VAR_DATE ,'yyyy-mm-dd') \n  )\n AND\n  SRC_CUR_ID    = 1\n AND\n  DEST_CUR_ID   = 4;\n\n \n SELECT /*+ PARALLEL(AUTO) */\n WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n   REF_CUR_ID ||\n   ' AS \"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||',200 as \"x200\"' ,  WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   '\"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||' ,\"x200\"' , WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   'nvl(\"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\",0) as \"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\" '\n  FROM DUAL\n ) ) ||' , '''' as \"x200\" 'into var_pivot, var_select ,var_selectnvl  --nvl(\"x200\",0)\nFROM (\n  SELECT /*+ PARALLEL(AUTO) */ DISTINCT\n   REF_CUR_ID\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE trunc(EFF_DATE)   = to_date(VAR_DATE ,'yyyy-mm-dd')\n   AND\n    REF_CUR_ID \u003c\u003e 4\n    ORDER BY REF_CUR_ID\n );\n \n   \n \n SELECT /*+ PARALLEL(AUTO) */\n WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n   REF_CUR_ID ||\n   ' AS \"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||',200 as \"y200\"' ,WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   '\"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||' ,\"y200\"'  ,  WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   'nvl(\"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\",0) as \"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\" '\n  FROM DUAL\n ) ) ||' ,nvl(\"y200\",0) as \"y200\"'  into var_pivoty , var_selecty ,var_selectynvl\nFROM (\n  SELECT /*+ PARALLEL(AUTO) */ DISTINCT\n   REF_CUR_ID\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE trunc(EFF_DATE)   = to_date(VAR_DATE ,'yyyy-mm-dd')\n   AND\n    REF_CUR_ID \u003c\u003e 4\n    ORDER BY REF_CUR_ID\n );\n \n   \n  \n \n \n \n \n SELECT /*+ PARALLEL(AUTO) */\n WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n   REF_CUR_ID ||\n   ' AS \"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||',200 as \"z200\"' ,  WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   '\"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||' ,\"z200\"'  , WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   'nvl(\"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\",0) as \"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\" '\n  FROM DUAL\n ) ) ||' ,nvl(\"z200\",0) as \"z200\" '  into var_pivotz , var_selectz , var_selectznvl\nFROM (\n  SELECT /*+ PARALLEL(AUTO) */ DISTINCT\n   REF_CUR_ID\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE trunc(EFF_DATE)   = to_date(VAR_DATE ,'yyyy-mm-dd')\n   AND\n    REF_CUR_ID \u003c\u003e 4\n    ORDER BY REF_CUR_ID\n );\n \n   \n \n \n \n \n if (replace(var_select,' ,\"x200\"',null) is null) then \n RETurn ' select null from dual';\n else\n \n return \n 'select /*+ PARALLEL(AUTO) */ a.\"id\",a.\"name\",a.\"parent\" ,'||var_selectnvl||','||var_selectynvl||','||var_selectznvl||' from (select /*+ PARALLEL(AUTO) */ LEDGER_CODE as \"id\" ,name as \"name\",parent as \"parent\",'||var_select||' from (\n\nselect /*+ PARALLEL(AUTO) */ * from (SELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\nparent_code as parent\n, abs(cur_balance) as cur_balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي'' \nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n  union\n \n  select 99999999999999 ledger_code ,N''سرمايه پايه - ريالي'' name,0 parent ,0 cur_balance,''0'' parent_name,0 ref_cur_id from dual\n \n  union \n  \n  SELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\n0 as parent\n, abs(cur_balance) as cur_balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n union\n  \n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\nparent_code,\n\nsUM(abs(cur_balance)) OVER(PARTITION BY ledger_code) as cur_balance\n\n,\ncase when parent_code =100000000 then ''دارايي هاي ارزي'' \nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n union\n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\n0,\n\nsUM(abs(cur_balance)) OVER(PARTITION BY ledger_code) as cur_balance\n\n,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n  \n )\n   pivot\n   (\n  max(cur_balance)\n  FOR REF_CUR_ID IN ('||var_pivot||')\n) ORDER BY parent\n)\n)a, (\nselect /*+ PARALLEL(AUTO) */ LEDGER_CODE as \"id\" ,name as \"name\",parent as \"parent\",'||var_selecty||' from (\n\nselect /*+ PARALLEL(AUTO) */  * from (\n\n\nSELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\nparent_code as parent\n, abs(balance) as balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي''\nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n \n union\n   select 99999999999999 ledger_code ,N''سرمايه پايه - ريالي'' name,0 parent ,0 cur_balance,''0'' parent_name,0 ref_cur_id from dual\n\n \n  union \n  \n  \n\nSELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\n0 as parent\n, abs(balance) as balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي''\nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n  \n  union \n  \n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\nparent_code,\nsUM(abs(balance)) OVER(PARTITION BY ledger_code) as balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي''\nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n \nunion \n  \n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\n0,\nsUM(abs(balance)) OVER(PARTITION BY ledger_code) as balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي''\nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  \n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n \n)\n   pivot\n   (\n  max(balance)\n  FOR REF_CUR_ID IN ('||var_pivoty||')\n) ORDER BY parent\n))b , (select /*+ PARALLEL(AUTO) */ LEDGER_CODE as \"id\" ,name as \"name\",parent as \"parent\",\"z1\",\"z2\",\"z3\",\"z8\",\"z9\",\"z12\",\"z14\",\"z17\",\"z30\",\"z33\",\"z34\" ,\"z200\" from (\n\nselect /*+ PARALLEL(AUTO) */ * from (\nSELECT    /*+ PARALLEL(AUTO) */ DISTINCT\nledger_code,\nNAME,\nparent_code as parent\n, round(abs(balance)/'||var_change_rate||') AS balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي''\nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n \n union\n   select 99999999999999 ledger_code ,N''سرمايه پايه - ريالي'' name,0 parent ,0 cur_balance,''0'' parent_name,0 ref_cur_id from dual\n\n  union\n  \n  SELECT    /*+ PARALLEL(AUTO) */ DISTINCT\nledger_code,\nNAME,\n0 as parent\n, round(abs(balance)/'||var_change_rate||') AS balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 AND  ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n  union\n  \n   SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\nparent_code,\n\nsUM(round(abs(balance)/'||var_change_rate||')) OVER(PARTITION BY ledger_code) as balance\n\n,\ncase when parent_code =100000000 then ''دارايي هاي ارزي'' \nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n  \n\n connect by PRIOR ledger_code = PARENT_CODE\n \n union\n  \n   SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\n0,\n\nsUM(round(abs(balance)/'||var_change_rate||')) OVER(PARTITION BY ledger_code) as balance\n\n,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 AND  ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )   )\n   pivot\n   (\n  max(balance)\n  FOR REF_CUR_ID IN (1 AS \"z1\",2 AS \"z2\",3 AS \"z3\",8 AS \"z8\",9 AS \"z9\",12 AS \"z12\",14 AS \"z14\",17 AS \"z17\",30 AS \"z30\",33 AS \"z33\",34 AS \"z34\",200 as \"z200\")\n) ORDER BY parent\n)\n)c  where a.\"id\" = b.\"id\" and a.\"id\" = c.\"id\" \norder by \"id\"';\n end if ;\n  \n  end fnc_nop_result;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_simple_tree  return varchar2  as\nbegin\n--RETURN 'SELECT /*+ PARALLEL(AUTO) */\n-- ID as \"id\"\n-- ,NAME \"name\"\n-- ,PARENT \"parent\"\n-- ,DEPTH \"level\"\n--FROM TBL_NOP_SIMPLE_TREE\n--order by ID';\n\nRETURN 'SELECT /*+ PARALLEL(AUTO) */\n ID as \"id\"\n ,NAME \"name\"\n ,PARENT \"parent\"\n ,DEPTH \"level\"\nFROM TBL_NOP_SIMPLE_TREE\nCONNECT BY\n   PRIOR  id =PARENT \nSTART WITH PARENT = 0';\n\n\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_GET_DETAIL_NAME (inpar_date varchar2)  RETURN VARCHAR2\n  AS\n var_date varchar2(2000);\n \n\n \n BEGIN\n IF\n  ( ( TRUNC(TO_DATE(INPAR_DATE,'yyyy-mm-dd') ) ) = ( TRUNC(SYSDATE) ) )\n THEN\n  SELECT\n   MAX(TO_CHAR(EFF_DATE,'yyyy-mm-dd') )\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\n ELSE\n  VAR_DATE   := INPAR_DATE;\n END IF;\n \n \n  RETURN 'select /*+ PARALLEL(AUTO) */ \"value\",\"header\" from(select /*+ PARALLEL(AUTO) */ distinct ''x''||CUR_ID as \"value\",cur_name as \"header\",cur_id as \"cur\" from TBL_currency,tbl_ledger_archive a where ref_cur_id=cur_id  \n  and a.ref_cur_id \u003c\u003e4 and trunc(a.eff_date) = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'') order by CUR_ID)  \n  union all select /*+ PARALLEL(AUTO) */ ''x300'' as \"value\" , ''طلا'' as \"header\" from dual union all select /*+ PARALLEL(AUTO) */ ''x200'' as \"value\" , ''جمع'' as \"header\" from dual\n  union all \n  select /*+ PARALLEL(AUTO) */ \"value\",\"header\" from(\n  select /*+ PARALLEL(AUTO) */ distinct ''y''||CUR_ID as \"value\",cur_name as \"header\",cur_id as \"cur\" from TBL_currency,tbl_ledger_archive a where ref_cur_id=cur_id  \n  and a.ref_cur_id \u003c\u003e4 and trunc(a.eff_date) = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  order by CUR_ID\n  )\n   union all select /*+ PARALLEL(AUTO) */ ''y300'' as \"value\" , ''طلا'' as \"header\" from dual\n  union all select /*+ PARALLEL(AUTO) */ ''y200'' as \"value\" , ''جمع '' as \"header\" from dual \n  \n  union all \n  select /*+ PARALLEL(AUTO) */ \"value\",\"header\" from(\n  select /*+ PARALLEL(AUTO) */  distinct ''z''||CUR_ID as \"value\",cur_name as \"header\",cur_id as \"cur\" from TBL_currency,tbl_ledger_archive a where ref_cur_id=cur_id  \n  and a.ref_cur_id \u003c\u003e4 and trunc(a.eff_date) = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  order by CUR_ID\n  )\n  union all select /*+ PARALLEL(AUTO) */ ''z300'' as \"value\" , ''طلا'' as \"header\" from dual\n  union all select ''z200'' as \"value\" , ''جمع '' as \"header\" from dual \n  \n  union all\n  select /*+ PARALLEL(AUTO) */ ''t200'' as \"value\",to_char(sum(balance)) as \"header\" from tbl_ledger_archive where ledger_code in (100000000,200000000) and trunc(eff_date)=to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n';\n END FNC_NOP_GET_DETAIL_NAME;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_RESULT_gold (inpar_date varchar2)  RETURN clob\n  AS\n var_date date;\n var_change_rate number;\n BEGIN\n IF\n  ( ( TRUNC(TO_DATE(INPAR_DATE,'yyyy-mm-dd') ) ) = ( TRUNC(SYSDATE) ) )\n THEN\n  SELECT\n   MAX(EFF_DATE )\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\n ELSE\n  VAR_DATE   := TO_DATE(INPAR_DATE,'yyyy-mm-dd') ;\n END IF;\n \n \nSELECT\n CHANGE_RATE\nINTO\n VAR_CHANGE_RATE\nFROM TBL_CURRENCY_REL\nWHERE TRUNC(REL_DATE) = (\n   SELECT\n    MAX(trunc(REL_DATE))\n   FROM TBL_CURRENCY_REL\n   WHERE trunc(REL_DATE) \u003c= var_date\n  )\n AND\n  SRC_CUR_ID    = 1\n AND\n  DEST_CUR_ID   = 4;\n \n \n\nRETURN 'select /*+ PARALLEL(AUTO) */  balance as \"y300\" , ledger_code as \"id\",'''' as \"x300\" , round(abs(balance)/'||var_change_rate||',2) as \"z300\"   from tbl_ledger_archive where ledger_code in (401110419,\n401052901,\n118072707,\n401052905,\n501072204,\n118110103,\n401110706) and eff_date ='''||VAR_DATE||'''' ;\n\n\n END FNC_NOP_RESULT_gold;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_nop_fill_currency_rell\n  \n  (\n  inpar_cur_id IN VARCHAR2\n  ,inpar_DEST_CUR_ID IN VARCHAR2\n  ,inpar_REL_DATE IN VARCHAR2\n  ,inpar_CHANGE_RATE IN VARCHAR2\n  ,inpar_insert_or_update in varchar2\n  ,inpar_id in varchar2\n ,OUTPAR     OUT VARCHAR2\n ) as \n  \n  begin\n  if(inpar_insert_or_update = 0) then\n  INSERT\nINTO TBL_CURRENCY_REL\n  (\n    SRC_CUR_ID,\n    DEST_CUR_ID,\n    REL_DATE,\n    CHANGE_RATE\n  )\n  VALUES\n  (\n    inpar_cur_id,\n    inpar_DEST_CUR_ID,\n    trunc(TO_DATE(inpar_REL_DATE,'yyyy/mm/dd','nls_calendar=persian')),\n    inpar_CHANGE_RATE\n  );\n  commit;\n    select max(id) into outpar from TBL_CURRENCY_REL;\n    \n    else\n    \n    update tbl_currency_rel\n    set src_cur_id = inpar_cur_id,\n    dest_cur_id = inpar_dest_cur_id,\n    rel_date = trunc(TO_DATE(inpar_REL_DATE,'yyyy/mm/dd','nls_calendar=persian')),\n    change_rate = inpar_change_rate\n    where id = inpar_id;\n    \n    commit;\n    \n    end if;\n  end prc_nop_fill_currency_rell;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_currency_rell (inpar_date varchar2)  return varchar2  as\nbegin\n\n\nRETURN 'SELECT id as \"id\", SRC_CUR_ID as \"srcCur\" , DEST_CUR_ID as \"destCur\", to_char(to_date(rel_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"relDate\", CHANGE_RATE as \"changeRate\" FROM TBL_CURRENCY_REL \nwhere \nto_char(to_date(rel_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') = '''||inpar_date||'''';\n\n\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_currency_rell_date  return varchar2  as\nbegin\n\nRETURN 'SELECT distinct to_char(to_date(rel_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"relDate\" from tbl_currency_rel';\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_currency return varchar2  as\nbegin\n\nRETURN 'SELECT CUR_ID as \"curId\", CUR_NAME as \"curName\" FROM TBL_CURRENCY';\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_nop_delete(inpar_id in varchar2,outpar out varchar2) \nas\nbegin\ndelete from tbl_currency_rel\nwhere id = inpar_id;\ncommit;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_nop_simple;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP_SIMPLE\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:        \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_NOP_RESULT (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_simple_tree  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_GET_DETAIL_NAME(inpar_date varchar2)  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_NOP_RESULT_gold (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_nop_fill_currency_rell\n  (\n  inpar_cur_id IN VARCHAR2\n  ,inpar_DEST_CUR_ID IN VARCHAR2\n  ,inpar_REL_DATE IN VARCHAR2\n  ,inpar_CHANGE_RATE IN VARCHAR2\n  ,inpar_insert_or_update in varchar2 --if inpar = 0 then insert and if inpar = 1 then update\n  ,inpar_id in varchar2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_currency_rell (inpar_date varchar2)  RETURN VARCHAR2 ; \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency_rell_date RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_nop_delete(inpar_id in varchar2,outpar out varchar2);\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_nop_simple;"},{"Name":"PKG_NOP_SIMPLE","ObjectID":295243,"Digest":"84005c9e4f04a39ada558f61c9ab5d790b26e5d39a8bab9dc1fa6aea3ad2cdf5","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP_SIMPLE\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:        \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_NOP_RESULT (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_simple_tree  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_GET_DETAIL_NAME(inpar_date varchar2)  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_NOP_RESULT_gold (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_nop_fill_currency_rell\n  (\n  inpar_cur_id IN VARCHAR2\n  ,inpar_DEST_CUR_ID IN VARCHAR2\n  ,inpar_REL_DATE IN VARCHAR2\n  ,inpar_CHANGE_RATE IN VARCHAR2\n  ,inpar_insert_or_update in varchar2 --if inpar = 0 then insert and if inpar = 1 then update\n  ,inpar_id in varchar2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_currency_rell (inpar_date varchar2)  RETURN VARCHAR2 ; \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency_rell_date RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_nop_delete(inpar_id in varchar2,outpar out varchar2);\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_nop_simple;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_NOP_SIMPLE\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_nop_result (inpar_date varchar2)  return clob  as\n\n\n\nvar_pivot VARCHAR2(30000);\nvar_select VARCHAR2(30000);\nvar_selectnvl VARCHAR2(30000);\nvar_pivoty VARCHAR2(30000);\nvar_selecty VARCHAR2(30000);\nvar_selectynvl VARCHAR2(30000);\nvar_pivotz VARCHAR2(30000);\nvar_selectz VARCHAR2(30000);\nvar_selectznvl VARCHAR2(30000);\nvar_change_rate number;\nVAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\nVAR_DATE VARCHAR2(30000);\n\n\n\n\n\n\n\n  begin\n  \n\n IF\n  ( ( TRUNC(TO_DATE(INPAR_DATE,'yyyy-mm-dd') ) ) = ( TRUNC(SYSDATE) ) )\n THEN\n  SELECT\n   MAX(TO_CHAR(EFF_DATE,'yyyy-mm-dd') )\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\n ELSE\n  VAR_DATE   := INPAR_DATE;\n END IF;\n \nSELECT\n CHANGE_RATE\nINTO\n VAR_CHANGE_RATE\nFROM TBL_CURRENCY_REL\nWHERE TRUNC(REL_DATE) = (\n   SELECT\n    MAX(trunc(REL_DATE))\n   FROM TBL_CURRENCY_REL\n   WHERE trunc(REL_DATE) \u003c= to_date(VAR_DATE ,'yyyy-mm-dd') \n  )\n AND\n  SRC_CUR_ID    = 1\n AND\n  DEST_CUR_ID   = 4;\n\n \n SELECT /*+ PARALLEL(AUTO) */\n WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n   REF_CUR_ID ||\n   ' AS \"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||',200 as \"x200\"' ,  WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   '\"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||' ,\"x200\"' , WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   'nvl(\"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\",0) as \"x' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\" '\n  FROM DUAL\n ) ) ||' , '''' as \"x200\" 'into var_pivot, var_select ,var_selectnvl  --nvl(\"x200\",0)\nFROM (\n  SELECT /*+ PARALLEL(AUTO) */ DISTINCT\n   REF_CUR_ID\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE trunc(EFF_DATE)   = to_date(VAR_DATE ,'yyyy-mm-dd')\n   AND\n    REF_CUR_ID \u003c\u003e 4\n    ORDER BY REF_CUR_ID\n );\n \n   \n \n SELECT /*+ PARALLEL(AUTO) */\n WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n   REF_CUR_ID ||\n   ' AS \"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||',200 as \"y200\"' ,WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   '\"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||' ,\"y200\"'  ,  WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   'nvl(\"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\",0) as \"y' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\" '\n  FROM DUAL\n ) ) ||' ,nvl(\"y200\",0) as \"y200\"'  into var_pivoty , var_selecty ,var_selectynvl\nFROM (\n  SELECT /*+ PARALLEL(AUTO) */ DISTINCT\n   REF_CUR_ID\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE trunc(EFF_DATE)   = to_date(VAR_DATE ,'yyyy-mm-dd')\n   AND\n    REF_CUR_ID \u003c\u003e 4\n    ORDER BY REF_CUR_ID\n );\n \n   \n  \n \n \n \n \n SELECT /*+ PARALLEL(AUTO) */\n WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n   REF_CUR_ID ||\n   ' AS \"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||',200 as \"z200\"' ,  WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   '\"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\"'\n  FROM DUAL\n ) ) ||' ,\"z200\"'  , WMSYS.WM_CONCAT( (\n  SELECT /*+ PARALLEL(AUTO) */\n      \n   'nvl(\"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\",0) as \"z' ||\n   REPLACE(REF_CUR_ID,' ','_') ||\n   '\" '\n  FROM DUAL\n ) ) ||' ,nvl(\"z200\",0) as \"z200\" '  into var_pivotz , var_selectz , var_selectznvl\nFROM (\n  SELECT /*+ PARALLEL(AUTO) */ DISTINCT\n   REF_CUR_ID\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE trunc(EFF_DATE)   = to_date(VAR_DATE ,'yyyy-mm-dd')\n   AND\n    REF_CUR_ID \u003c\u003e 4\n    ORDER BY REF_CUR_ID\n );\n \n   \n \n \n \n \n if (replace(var_select,' ,\"x200\"',null) is null) then \n RETurn ' select null from dual';\n else\n \n return \n 'select /*+ PARALLEL(AUTO) */ a.\"id\",a.\"name\",a.\"parent\" ,'||var_selectnvl||','||var_selectynvl||','||var_selectznvl||' from (select /*+ PARALLEL(AUTO) */ LEDGER_CODE as \"id\" ,name as \"name\",parent as \"parent\",'||var_select||' from (\n\nselect /*+ PARALLEL(AUTO) */ * from (SELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\nparent_code as parent\n, abs(cur_balance) as cur_balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي'' \nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n  union\n \n  select 99999999999999 ledger_code ,N''سرمايه پايه - ريالي'' name,0 parent ,0 cur_balance,''0'' parent_name,0 ref_cur_id from dual\n \n  union \n  \n  SELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\n0 as parent\n, abs(cur_balance) as cur_balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n union\n  \n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\nparent_code,\n\nsUM(abs(cur_balance)) OVER(PARTITION BY ledger_code) as cur_balance\n\n,\ncase when parent_code =100000000 then ''دارايي هاي ارزي'' \nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n union\n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\n0,\n\nsUM(abs(cur_balance)) OVER(PARTITION BY ledger_code) as cur_balance\n\n,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n  \n )\n   pivot\n   (\n  max(cur_balance)\n  FOR REF_CUR_ID IN ('||var_pivot||')\n) ORDER BY parent\n)\n)a, (\nselect /*+ PARALLEL(AUTO) */ LEDGER_CODE as \"id\" ,name as \"name\",parent as \"parent\",'||var_selecty||' from (\n\nselect /*+ PARALLEL(AUTO) */  * from (\n\n\nSELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\nparent_code as parent\n, abs(balance) as balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي''\nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n \n union\n   select 99999999999999 ledger_code ,N''سرمايه پايه - ريالي'' name,0 parent ,0 cur_balance,''0'' parent_name,0 ref_cur_id from dual\n\n \n  union \n  \n  \n\nSELECT    /*+ PARALLEL(AUTO) */\nledger_code,\nNAME,\n0 as parent\n, abs(balance) as balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي''\nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n  \n  union \n  \n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\nparent_code,\nsUM(abs(balance)) OVER(PARTITION BY ledger_code) as balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي''\nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n \nunion \n  \n  SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\n0,\nsUM(abs(balance)) OVER(PARTITION BY ledger_code) as balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي''\nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  \n AND\n  REF_CUR_ID \u003c\u003e 4 and ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n \n)\n   pivot\n   (\n  max(balance)\n  FOR REF_CUR_ID IN ('||var_pivoty||')\n) ORDER BY parent\n))b , (select /*+ PARALLEL(AUTO) */ LEDGER_CODE as \"id\" ,name as \"name\",parent as \"parent\",\"z1\",\"z2\",\"z3\",\"z8\",\"z9\",\"z12\",\"z14\",\"z17\",\"z30\",\"z33\",\"z34\" ,\"z200\" from (\n\nselect /*+ PARALLEL(AUTO) */ * from (\nSELECT    /*+ PARALLEL(AUTO) */ DISTINCT\nledger_code,\nNAME,\nparent_code as parent\n, round(abs(balance)/'||var_change_rate||') AS balance,\ncase when parent_code =100000000 then ''دارايي هاي ارزي''\nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n\n connect by PRIOR ledger_code = PARENT_CODE\n \n union\n   select 99999999999999 ledger_code ,N''سرمايه پايه - ريالي'' name,0 parent ,0 cur_balance,''0'' parent_name,0 ref_cur_id from dual\n\n  union\n  \n  SELECT    /*+ PARALLEL(AUTO) */ DISTINCT\nledger_code,\nNAME,\n0 as parent\n, round(abs(balance)/'||var_change_rate||') AS balance,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\nref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||') WHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n \n AND\n  REF_CUR_ID \u003c\u003e 4 AND  ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )\n\n  union\n  \n   SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\nparent_code,\n\nsUM(round(abs(balance)/'||var_change_rate||')) OVER(PARTITION BY ledger_code) as balance\n\n,\ncase when parent_code =100000000 then ''دارايي هاي ارزي'' \nwhen parent_code =200000000 then ''بدهي هاي ارزي''\nwhen parent_code =702000000 then ''دارايي هاي زير خط''\nwhen parent_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 start with  PARENT_CODE IN (\n   100000000,200000000,704000000,702000000\n  )\n  \n\n connect by PRIOR ledger_code = PARENT_CODE\n \n union\n  \n   SELECT  /*+ PARALLEL(AUTO) */ distinct \nledger_code,\nNAME,\n0,\n\nsUM(round(abs(balance)/'||var_change_rate||')) OVER(PARTITION BY ledger_code) as balance\n\n,\ncase when ledger_code =100000000 then ''دارايي هاي ارزي'' \nwhen ledger_code =200000000 then ''بدهي هاي ارزي''\nwhen ledger_code =702000000 then ''دارايي هاي زير خط''\nwhen ledger_code =704000000 then ''بدهي هاي زير خط'' end as \"parentName\" ,\n200 as ref_cur_id FROM TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION1||')\nWHERE EFF_DATE   = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n\n AND\n  REF_CUR_ID \u003c\u003e 4 AND  ledger_code IN (\n   100000000,200000000,704000000,702000000\n  )   )\n   pivot\n   (\n  max(balance)\n  FOR REF_CUR_ID IN (1 AS \"z1\",2 AS \"z2\",3 AS \"z3\",8 AS \"z8\",9 AS \"z9\",12 AS \"z12\",14 AS \"z14\",17 AS \"z17\",30 AS \"z30\",33 AS \"z33\",34 AS \"z34\",200 as \"z200\")\n) ORDER BY parent\n)\n)c  where a.\"id\" = b.\"id\" and a.\"id\" = c.\"id\" \norder by \"id\"';\n end if ;\n  \n  end fnc_nop_result;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_simple_tree  return varchar2  as\nbegin\n--RETURN 'SELECT /*+ PARALLEL(AUTO) */\n-- ID as \"id\"\n-- ,NAME \"name\"\n-- ,PARENT \"parent\"\n-- ,DEPTH \"level\"\n--FROM TBL_NOP_SIMPLE_TREE\n--order by ID';\n\nRETURN 'SELECT /*+ PARALLEL(AUTO) */\n ID as \"id\"\n ,NAME \"name\"\n ,PARENT \"parent\"\n ,DEPTH \"level\"\nFROM TBL_NOP_SIMPLE_TREE\nCONNECT BY\n   PRIOR  id =PARENT \nSTART WITH PARENT = 0';\n\n\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_GET_DETAIL_NAME (inpar_date varchar2)  RETURN VARCHAR2\n  AS\n var_date varchar2(2000);\n \n\n \n BEGIN\n IF\n  ( ( TRUNC(TO_DATE(INPAR_DATE,'yyyy-mm-dd') ) ) = ( TRUNC(SYSDATE) ) )\n THEN\n  SELECT\n   MAX(TO_CHAR(EFF_DATE,'yyyy-mm-dd') )\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\n ELSE\n  VAR_DATE   := INPAR_DATE;\n END IF;\n \n \n  RETURN 'select /*+ PARALLEL(AUTO) */ \"value\",\"header\" from(select /*+ PARALLEL(AUTO) */ distinct ''x''||CUR_ID as \"value\",cur_name as \"header\",cur_id as \"cur\" from TBL_currency,tbl_ledger_archive a where ref_cur_id=cur_id  \n  and a.ref_cur_id \u003c\u003e4 and trunc(a.eff_date) = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'') order by CUR_ID)  \n  union all select /*+ PARALLEL(AUTO) */ ''x300'' as \"value\" , ''طلا'' as \"header\" from dual union all select /*+ PARALLEL(AUTO) */ ''x200'' as \"value\" , ''جمع'' as \"header\" from dual\n  union all \n  select /*+ PARALLEL(AUTO) */ \"value\",\"header\" from(\n  select /*+ PARALLEL(AUTO) */ distinct ''y''||CUR_ID as \"value\",cur_name as \"header\",cur_id as \"cur\" from TBL_currency,tbl_ledger_archive a where ref_cur_id=cur_id  \n  and a.ref_cur_id \u003c\u003e4 and trunc(a.eff_date) = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  order by CUR_ID\n  )\n   union all select /*+ PARALLEL(AUTO) */ ''y300'' as \"value\" , ''طلا'' as \"header\" from dual\n  union all select /*+ PARALLEL(AUTO) */ ''y200'' as \"value\" , ''جمع '' as \"header\" from dual \n  \n  union all \n  select /*+ PARALLEL(AUTO) */ \"value\",\"header\" from(\n  select /*+ PARALLEL(AUTO) */  distinct ''z''||CUR_ID as \"value\",cur_name as \"header\",cur_id as \"cur\" from TBL_currency,tbl_ledger_archive a where ref_cur_id=cur_id  \n  and a.ref_cur_id \u003c\u003e4 and trunc(a.eff_date) = to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n  order by CUR_ID\n  )\n  union all select /*+ PARALLEL(AUTO) */ ''z300'' as \"value\" , ''طلا'' as \"header\" from dual\n  union all select ''z200'' as \"value\" , ''جمع '' as \"header\" from dual \n  \n  union all\n  select /*+ PARALLEL(AUTO) */ ''t200'' as \"value\",to_char(sum(balance)) as \"header\" from tbl_ledger_archive where ledger_code in (100000000,200000000) and trunc(eff_date)=to_date('''||VAR_DATE||''' ,''yyyy-mm-dd'')\n';\n END FNC_NOP_GET_DETAIL_NAME;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_RESULT_gold (inpar_date varchar2)  RETURN clob\n  AS\n var_date date;\n var_change_rate number;\n BEGIN\n IF\n  ( ( TRUNC(TO_DATE(INPAR_DATE,'yyyy-mm-dd') ) ) = ( TRUNC(SYSDATE) ) )\n THEN\n  SELECT\n   MAX(EFF_DATE )\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\n ELSE\n  VAR_DATE   := TO_DATE(INPAR_DATE,'yyyy-mm-dd') ;\n END IF;\n \n \nSELECT\n CHANGE_RATE\nINTO\n VAR_CHANGE_RATE\nFROM TBL_CURRENCY_REL\nWHERE TRUNC(REL_DATE) = (\n   SELECT\n    MAX(trunc(REL_DATE))\n   FROM TBL_CURRENCY_REL\n   WHERE trunc(REL_DATE) \u003c= var_date\n  )\n AND\n  SRC_CUR_ID    = 1\n AND\n  DEST_CUR_ID   = 4;\n \n \n\nRETURN 'select /*+ PARALLEL(AUTO) */  balance as \"y300\" , ledger_code as \"id\",'''' as \"x300\" , round(abs(balance)/'||var_change_rate||',2) as \"z300\"   from tbl_ledger_archive where ledger_code in (401110419,\n401052901,\n118072707,\n401052905,\n501072204,\n118110103,\n401110706) and eff_date ='''||VAR_DATE||'''' ;\n\n\n END FNC_NOP_RESULT_gold;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_nop_fill_currency_rell\n  \n  (\n  inpar_cur_id IN VARCHAR2\n  ,inpar_DEST_CUR_ID IN VARCHAR2\n  ,inpar_REL_DATE IN VARCHAR2\n  ,inpar_CHANGE_RATE IN VARCHAR2\n  ,inpar_insert_or_update in varchar2\n  ,inpar_id in varchar2\n ,OUTPAR     OUT VARCHAR2\n ) as \n  \n  begin\n  if(inpar_insert_or_update = 0) then\n  INSERT\nINTO TBL_CURRENCY_REL\n  (\n    SRC_CUR_ID,\n    DEST_CUR_ID,\n    REL_DATE,\n    CHANGE_RATE\n  )\n  VALUES\n  (\n    inpar_cur_id,\n    inpar_DEST_CUR_ID,\n    trunc(TO_DATE(inpar_REL_DATE,'yyyy/mm/dd','nls_calendar=persian')),\n    inpar_CHANGE_RATE\n  );\n  commit;\n    select max(id) into outpar from TBL_CURRENCY_REL;\n    \n    else\n    \n    update tbl_currency_rel\n    set src_cur_id = inpar_cur_id,\n    dest_cur_id = inpar_dest_cur_id,\n    rel_date = trunc(TO_DATE(inpar_REL_DATE,'yyyy/mm/dd','nls_calendar=persian')),\n    change_rate = inpar_change_rate\n    where id = inpar_id;\n    \n    commit;\n    \n    end if;\n  end prc_nop_fill_currency_rell;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_currency_rell (inpar_date varchar2)  return varchar2  as\nbegin\n\n\nRETURN 'SELECT id as \"id\", SRC_CUR_ID as \"srcCur\" , DEST_CUR_ID as \"destCur\", to_char(to_date(rel_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"relDate\", CHANGE_RATE as \"changeRate\" FROM TBL_CURRENCY_REL \nwhere \nto_char(to_date(rel_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') = '''||inpar_date||'''';\n\n\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_currency_rell_date  return varchar2  as\nbegin\n\nRETURN 'SELECT distinct to_char(to_date(rel_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"relDate\" from tbl_currency_rel';\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction FNC_NOP_currency return varchar2  as\nbegin\n\nRETURN 'SELECT CUR_ID as \"curId\", CUR_NAME as \"curName\" FROM TBL_CURRENCY';\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_nop_delete(inpar_id in varchar2,outpar out varchar2) \nas\nbegin\ndelete from tbl_currency_rel\nwhere id = inpar_id;\ncommit;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_nop_simple;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_NOP_SIMPLE\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:        \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_NOP_RESULT (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_simple_tree  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/   \n   FUNCTION FNC_NOP_GET_DETAIL_NAME(inpar_date varchar2)  RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_NOP_RESULT_gold (inpar_date varchar2)  RETURN clob ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  PROCEDURE prc_nop_fill_currency_rell\n  (\n  inpar_cur_id IN VARCHAR2\n  ,inpar_DEST_CUR_ID IN VARCHAR2\n  ,inpar_REL_DATE IN VARCHAR2\n  ,inpar_CHANGE_RATE IN VARCHAR2\n  ,inpar_insert_or_update in varchar2 --if inpar = 0 then insert and if inpar = 1 then update\n  ,inpar_id in varchar2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_NOP_currency_rell (inpar_date varchar2)  RETURN VARCHAR2 ; \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency_rell_date RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_NOP_currency RETURN VARCHAR2 ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_nop_delete(inpar_id in varchar2,outpar out varchar2);\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_nop_simple;"},{"Name":"PKG_DUE_DATE_DEPOSIT_RATE","ObjectID":295437,"Digest":"efd2c7774aa7721eb5dff46699c0b89faf898309a6674f0b1e6abc07440060d4","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_DEPOSIT_RATE\" AS\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDDR_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_DEPOSIT_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_DEPOSIT_RATE;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE_DEPOSIT_RATE\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_DDDR_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_DDDR_DELETE_REPORT;\n/*------------------------------------------------------------------------------*/\n/*------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n ) AS\n  VAR_TREE     VARCHAR2(100);\n  MAX_REPREQ   NUMBER;\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,FIRST_DATE\n   ,LAST_DATE\n   ,TYPE\n   ,REF_LEDGER_PROFIEL\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'DDDR'\n   ,INPAR_FIRST_DATE\n   ,INPAR_LAST_DATE\n   ,INPAR_TYPE\n   ,INPAR_TREE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,FIRST_DATE = INPAR_FIRST_DATE\n    ,LAST_DATE = INPAR_LAST_DATE\n    ,REF_LEDGER_PROFIEL = INPAR_TREE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n\n  UPDATE TBL_REPORT\n   SET\n    H_ID = ID\n  WHERE UPPER(TYPE) = 'DDDR'\n   AND\n    H_ID IS NULL;\n\n  COMMIT;\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   SELECT\n    MAX(REF_REPREQ)\n   INTO\n    MAX_REPREQ\n   FROM TBL_DDLT_TREE\n   WHERE REF_REPORT   = OUTPAR_ID;\n\n   IF\n    ( MAX_REPREQ IS NULL\n    )\n   THEN\n    MAX_REPREQ   :=-1;\n   END IF;\n   SELECT\n    PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_TREE_BUILDER(OUTPAR_ID,MAX_REPREQ)\n   INTO\n    VAR_TREE\n   FROM DUAL;\n\n  ELSE\n   SELECT\n    MAX(REF_REPREQ)\n   INTO\n    MAX_REPREQ\n   FROM TBL_DDLT_TREE\n   WHERE REF_REPORT   = INPAR_ID;\n\n   IF\n    ( MAX_REPREQ IS NULL\n    )\n   THEN\n    MAX_REPREQ   :=-1;\n   END IF;\n   SELECT\n    PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_TREE_BUILDER(INPAR_ID,MAX_REPREQ)\n   INTO\n    VAR_TREE\n   FROM DUAL;\n\n  END IF;\n\n  COMMIT;\n END PRC_DDDR_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2 AS\n  VAR_PARENT_ID   NUMBER := 1;\n  INPAR_TREE      VARCHAR2(30000);\n  PRAGMA AUTONOMOUS_TRANSACTION;\n BEGIN\n  SELECT\n   REF_LEDGER_PROFIEL\n  INTO\n   INPAR_TREE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  DELETE FROM TBL_DDDR_TREE WHERE REF_REPORT   = INPAR_REPORT\n   AND\n    REF_REPREQ   = INPAR_REPREQ;\n\n  COMMIT;\n  FOR I IN (\n   SELECT\n    REGEXP_SUBSTR(\n     INPAR_TREE\n    ,'[^;]+'\n    ,1\n    ,LEVEL\n    ) AS S\n   FROM DUAL\n   CONNECT BY\n    REGEXP_SUBSTR(\n     INPAR_TREE\n    ,'[^;]+'\n    ,1\n    ,LEVEL\n    ) IS NOT NULL\n  ) LOOP\n   INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    0\n   ,NULL\n   ,VAR_PARENT_ID\n   ,SUBSTR(\n     I.S\n    ,-LENGTH(I.S)\n    ,INSTR(I.S,'#') - 1\n    ) AS NAME\n   ,1\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n\n   COMMIT;\n   INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,REGEXP_SUBSTR(\n     SUBSTR(\n      I.S\n     ,INSTR(I.S,'#') + 1\n     )\n    ,'[^,]+'\n    ,1\n    ,LEVEL\n    ) AS S\n   ,NULL\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL\n   CONNECT BY\n    REGEXP_SUBSTR(\n     SUBSTR(\n      I.S\n     ,INSTR(I.S,'#') + 1\n     )\n    ,'[^,]+'\n    ,1\n    ,LEVEL\n    ) IS NOT NULL;\n\n   COMMIT;\n    INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123454||VAR_PARENT_ID\n   ,'حجم'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n       INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123455||VAR_PARENT_ID\n   ,'سهم حجم از کل'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n   INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123456||VAR_PARENT_ID\n   ,'تعداد'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n    INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123457||VAR_PARENT_ID\n   ,'سهم تعداد از کل'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n\n   VAR_PARENT_ID   := VAR_PARENT_ID + 1;\n  END LOOP;\n\n  COMMIT;\n  UPDATE TBL_DDDR_TREE\n   SET\n    CHILD_NAME = (\n     SELECT\n      NAME\n     FROM TBL_DEPOSIT_TYPE\n     WHERE TBL_DDDR_TREE.CHILD_ID   = REF_DEPOSIT_TYPE\n    )\n  WHERE CHILD_NAME IS NULL\n   AND\n    DEPTH   = 2;\n\n  COMMIT;\n  \n  delete from TBL_DDDR_TREE\n  where child_name is null and child_id like '123456%'\n  and REF_REPREQ = INPAR_REPREQ;\n  commit;\n  RETURN NULL;\n END FNC_DDDR_TREE_BUILDER;\n  /*\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--*/\n  /*\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--*/\n  /*\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--*/\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_DEPOSIT_TYPE RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'select  ref_deposit_type as \"id\" ,name as \"name\" from tbl_deposit_type';\n END FNC_DDDR_DEPOSIT_TYPE;\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN ' SELECT  \"id\",\"name\",\"parent\",\"level\"\nFROM (SELECT\n CHILD_ID AS \"id\"\n ,CHILD_NAME AS \"name\"\n ,PARENT_ID AS \"parent\"\n ,PARENT_NAME AS \"parentName\"\n ,DEPTH AS \"level\"\nFROM TBL_DDDR_TREE\nWHERE REF_REPORT   = ' ||\n  INPAR_REPREQ ||\n  '\n AND\n  REF_REPREQ   = (\n   SELECT\n    MAX(REF_REPREQ)\n   FROM TBL_DDDR_TREE\n   WHERE REF_REPORT   = ' ||\n  INPAR_REPREQ ||\n  '\n  ))\nSTART WITH \"parent\" =0\nCONNECT BY prior \"id\" =\"parent\"';\n END FNC_DDDR_GET_TREE_DETAIL;\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\n  ,to_char(to_date(first_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"startDate\"\n  ,to_char(to_date(last_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"endDate\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DDDR'' order by id';\n  RETURN VAR2;\n END FNC_DDDR_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X0 AS \"x0\" ,X1 as \"x1\"\n ,X2 as \"x2\"\n ,X3 as \"x3\"\n ,X4 as \"x4\"\n ,X5 as \"x5\"\n ,X6 as \"x6\"\n ,X7 as \"x7\"\n ,REF_DEPOSIT_TYPE as \"id\" from TBL_DDDR_REP_PROFILE_DETAIL where REF_REPREQ =  '\n|| INPAR_ID || '  order by REF_DEPOSIT_TYPE';\n  RETURN VAR2;\n END FNC_DDDR_GET_DETAIL_CHILD;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X0 AS \"x0\" , X1 as \"x1\"\n ,X2 as \"x2\"\n ,X3 as \"x3\"\n ,X4 as \"x4\"\n ,X5 as \"x5\"\n ,X6 as \"x6\"\n ,X7 as \"x7\"\n ,REF_DEPOSIT_TYPE as \"id\" from TBL_DDDR_REP_PROFILE_DETAIL where REF_REPREQ = '\n|| INPAR_ID || '  and REF_DEPOSIT_TYPE =-1  order by REF_DEPOSIT_TYPE';\n  RETURN VAR2;\n END FNC_DDDR_GET_COUNT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 ) AS\n\n  INPAR_DATE_FIRST   VARCHAR2(200);\n  INPAR_DATE_LAST    VARCHAR2(200);\n  VAR_MAX_REPREQ     NUMBER;\n  VAR_TREE           VARCHAR2(100);\n  VAR                VARCHAR2(30000);\n \n BEGIN\n\n  SELECT\n   FIRST_DATE\n  INTO\n   INPAR_DATE_FIRST\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   LAST_DATE\n  INTO\n   INPAR_DATE_LAST\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_MAX_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_REPORT;\n\n  SELECT\n   PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_TREE_BUILDER(INPAR_REPORT,VAR_MAX_REPREQ)\n  INTO\n   VAR_TREE\n  FROM DUAL;\n\n  IF\n   ( ( TRUNC(TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') ) ) \u003c= ( TRUNC(SYSDATE) ) )\n  THEN\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    INPAR_REPORT\n   ,/*+ PARALLEL(auto) */\n    REF_DEPOSIT_TYPE \"id\" ,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   \n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\n   GROUP BY\n    REF_DEPOSIT_TYPE\n   UNION\n   SELECT\n    INPAR_REPORT\n   ,/*+ PARALLEL(auto) */\n    REF_DEPOSIT_TYPE \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE ( DUE_DATE ) IS NULL\n   GROUP BY\n    REF_DEPOSIT_TYPE;\n\n   COMMIT;\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    INPAR_REPORT\n   ,MAX(\"id\")\n   ,SUM(\"0\") AS \"0\"\n   ,SUM(\"1\") AS \"1\"\n   ,SUM(\"2\") AS \"2\"\n   ,SUM(\"3\") AS \"3\"\n   ,SUM(\"4\") AS \"4\"\n   ,SUM(\"5\") AS \"5\"\n   ,SUM(\"6\") AS \"6\"\n   ,SUM(\"7\") AS \"7\"\n   ,VAR_MAX_REPREQ\n   FROM (\n     SELECT\n      /*+ PARALLEL(auto) */\n      -1 \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) AS \"1\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"2\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"3\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"4\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"5\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"6\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE \u003e= 20 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"7\"\n     FROM AKIN.TBL_DEPOSIT\n     WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\n     UNION\n     SELECT\n     /*+ PARALLEL(auto) */\n      -1 \"ID\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) AS \"1\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"2\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"3\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"4\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"5\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"6\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE \u003e= 20 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"7\"\n     FROM AKIN.TBL_DEPOSIT\n     WHERE ( DUE_DATE ) IS NULL\n    )\n   GROUP BY\n    INPAR_REPORT;\n\n   COMMIT;\n   \n      \n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    max(report)\n   ,MAX(id)\n   ,SUM(\"0\") AS \"0\"\n   ,SUM(\"1\") AS \"1\"\n   ,SUM(\"2\") AS \"2\"\n   ,SUM(\"3\") AS \"3\"\n   ,SUM(\"4\") AS \"4\"\n   ,SUM(\"5\") AS \"5\"\n   ,SUM(\"6\") AS \"6\"\n   ,SUM(\"7\") AS \"7\"\n   ,  max(repreq)\n   FROM ((SELECT\n    inpar_report as report,\n    id,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"0\"\n      ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(count)\n      END\n     )\n    ,0\n    ) \"7\",\n  VAR_MAX_REPREQ as repreq\n \n   FROM (\n   \n   select /*+   PARALLEL(auto) */  count(*) as count,TD.REF_DEPOSIT_TYPE,D.ID,TD.RATE from AKIN.TBL_DEPOSIT td,( SELECT regexp_substr(types, '[^,]+', 1, LEVEL) as type\n    ,id\nFROM (\n    SELECT replace(regexp_substr(data, '.+#', 1), '#', '') AS name\n        ,replace(regexp_substr(data, '#.+', 1), '#', '') AS types\n        ,'123456' || id AS id\n    FROM (\n        SELECT LEVEL AS id\n            ,regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) AS data\n        FROM (\n            SELECT  ref_ledger_profiel\n            FROM TBL_REPORT where TBL_REPORT.ID = inpar_report\n            ) CONNECT BY regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) IS NOT NULL\n        )\n    ) CONNECT BY PRIOR name = name -- add This and \n    AND PRIOR SYS_GUID() IS NOT NULL --This\n    AND regexp_substr(types, '[^,]+', 1, LEVEL) IS NOT NULL\n)  d\nwhere TD.REF_DEPOSIT_TYPE = d.type and    TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\ngroup by REF_DEPOSIT_TYPE,D.ID,TD.RATE\n   )\n    GROUP BY\nID   )\n \n    union\n   ( SELECT\n    inpar_report as report, \n    id,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"0\",\n      NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(count)\n      END\n     )\n    ,0\n    ) \"7\",\n  VAR_MAX_REPREQ as repreq\n \n   FROM (\n   \n   select /*+   PARALLEL(auto) */  count(*) as count,TD.REF_DEPOSIT_TYPE,D.ID,TD.RATE from AKIN.TBL_DEPOSIT td,( SELECT regexp_substr(types, '[^,]+', 1, LEVEL) as type\n    ,id\nFROM (\n    SELECT replace(regexp_substr(data, '.+#', 1), '#', '') AS name\n        ,replace(regexp_substr(data, '#.+', 1), '#', '') AS types\n        ,'123456' || id AS id\n    FROM (\n        SELECT LEVEL AS id\n            ,regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) AS data\n        FROM (\n            SELECT  ref_ledger_profiel\n            FROM TBL_REPORT where TBL_REPORT.ID = inpar_report\n            ) CONNECT BY regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) IS NOT NULL\n        )\n    ) CONNECT BY PRIOR name = name -- add This and \n    AND PRIOR SYS_GUID() IS NOT NULL --This\n    AND regexp_substr(types, '[^,]+', 1, LEVEL) IS NOT NULL\n)  d\nwhere TD.REF_DEPOSIT_TYPE = d.type and    trunc( DUE_DATE ) IS NULL\ngroup by REF_DEPOSIT_TYPE,D.ID,TD.RATE\n   )\n -- \n   GROUP BY\n    ID  ))\n   GROUP BY\n    id   \n;\n   \n   \n   \n   \n   \n   \n   commit;\n  ELSE-----------------------------------------------------------------*********************\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    inpar_report\n   ,/*+ PARALLEL(auto) */\n    REF_DEPOSIT_TYPE \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\n   GROUP BY\n    REF_DEPOSIT_TYPE;\n\n   COMMIT;\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    inpar_report\n   ,/*+ PARALLEL(auto) */\n    -1 \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd');\n\n   COMMIT;\n   \n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    inpar_report,\n    id,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"0\",\n      NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(count)\n      END\n     )\n    ,0\n    ) \"7\",\n  VAR_MAX_REPREQ\n \n   FROM (\n   \n   select /*+   PARALLEL(auto) */  count(*) as count,TD.REF_DEPOSIT_TYPE,D.ID,TD.RATE from AKIN.TBL_DEPOSIT td,( SELECT regexp_substr(types, '[^,]+', 1, LEVEL) as type\n    ,id\nFROM (\n    SELECT replace(regexp_substr(data, '.+#', 1), '#', '') AS name\n        ,replace(regexp_substr(data, '#.+', 1), '#', '') AS types\n        ,'123456' || id AS id\n    FROM (\n        SELECT LEVEL AS id\n            ,regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) AS data\n        FROM (\n            SELECT  ref_ledger_profiel\n            FROM TBL_REPORT where TBL_REPORT.ID = inpar_report\n            ) CONNECT BY regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) IS NOT NULL\n        )\n    ) CONNECT BY PRIOR name = name -- add This and \n    AND PRIOR SYS_GUID() IS NOT NULL --This\n    AND regexp_substr(types, '[^,]+', 1, LEVEL) IS NOT NULL\n)  d\nwhere TD.REF_DEPOSIT_TYPE = d.type and    TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\ngroup by REF_DEPOSIT_TYPE,D.ID,TD.RATE\n   )\n -- \n   GROUP BY\n    ID;\n   \n   commit;\n   \n  END IF;\n\n END PRC_DDDR_GET_DETAIL;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_DEPOSIT_RATE;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_DEPOSIT_RATE\" AS\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDDR_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_DEPOSIT_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_DEPOSIT_RATE;"},{"Name":"PKG_DUE_DATE_DEPOSIT_RATE","ObjectID":295439,"Digest":"efd2c7774aa7721eb5dff46699c0b89faf898309a6674f0b1e6abc07440060d4","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_DEPOSIT_RATE\" AS\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDDR_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_DEPOSIT_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_DEPOSIT_RATE;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE_DEPOSIT_RATE\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_DDDR_REP_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_DDDR_DELETE_REPORT;\n/*------------------------------------------------------------------------------*/\n/*------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n ) AS\n  VAR_TREE     VARCHAR2(100);\n  MAX_REPREQ   NUMBER;\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,FIRST_DATE\n   ,LAST_DATE\n   ,TYPE\n   ,REF_LEDGER_PROFIEL\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'DDDR'\n   ,INPAR_FIRST_DATE\n   ,INPAR_LAST_DATE\n   ,INPAR_TYPE\n   ,INPAR_TREE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,FIRST_DATE = INPAR_FIRST_DATE\n    ,LAST_DATE = INPAR_LAST_DATE\n    ,REF_LEDGER_PROFIEL = INPAR_TREE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n\n  UPDATE TBL_REPORT\n   SET\n    H_ID = ID\n  WHERE UPPER(TYPE) = 'DDDR'\n   AND\n    H_ID IS NULL;\n\n  COMMIT;\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   SELECT\n    MAX(REF_REPREQ)\n   INTO\n    MAX_REPREQ\n   FROM TBL_DDLT_TREE\n   WHERE REF_REPORT   = OUTPAR_ID;\n\n   IF\n    ( MAX_REPREQ IS NULL\n    )\n   THEN\n    MAX_REPREQ   :=-1;\n   END IF;\n   SELECT\n    PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_TREE_BUILDER(OUTPAR_ID,MAX_REPREQ)\n   INTO\n    VAR_TREE\n   FROM DUAL;\n\n  ELSE\n   SELECT\n    MAX(REF_REPREQ)\n   INTO\n    MAX_REPREQ\n   FROM TBL_DDLT_TREE\n   WHERE REF_REPORT   = INPAR_ID;\n\n   IF\n    ( MAX_REPREQ IS NULL\n    )\n   THEN\n    MAX_REPREQ   :=-1;\n   END IF;\n   SELECT\n    PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_TREE_BUILDER(INPAR_ID,MAX_REPREQ)\n   INTO\n    VAR_TREE\n   FROM DUAL;\n\n  END IF;\n\n  COMMIT;\n END PRC_DDDR_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2 AS\n  VAR_PARENT_ID   NUMBER := 1;\n  INPAR_TREE      VARCHAR2(30000);\n  PRAGMA AUTONOMOUS_TRANSACTION;\n BEGIN\n  SELECT\n   REF_LEDGER_PROFIEL\n  INTO\n   INPAR_TREE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  DELETE FROM TBL_DDDR_TREE WHERE REF_REPORT   = INPAR_REPORT\n   AND\n    REF_REPREQ   = INPAR_REPREQ;\n\n  COMMIT;\n  FOR I IN (\n   SELECT\n    REGEXP_SUBSTR(\n     INPAR_TREE\n    ,'[^;]+'\n    ,1\n    ,LEVEL\n    ) AS S\n   FROM DUAL\n   CONNECT BY\n    REGEXP_SUBSTR(\n     INPAR_TREE\n    ,'[^;]+'\n    ,1\n    ,LEVEL\n    ) IS NOT NULL\n  ) LOOP\n   INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    0\n   ,NULL\n   ,VAR_PARENT_ID\n   ,SUBSTR(\n     I.S\n    ,-LENGTH(I.S)\n    ,INSTR(I.S,'#') - 1\n    ) AS NAME\n   ,1\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n\n   COMMIT;\n   INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,REGEXP_SUBSTR(\n     SUBSTR(\n      I.S\n     ,INSTR(I.S,'#') + 1\n     )\n    ,'[^,]+'\n    ,1\n    ,LEVEL\n    ) AS S\n   ,NULL\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL\n   CONNECT BY\n    REGEXP_SUBSTR(\n     SUBSTR(\n      I.S\n     ,INSTR(I.S,'#') + 1\n     )\n    ,'[^,]+'\n    ,1\n    ,LEVEL\n    ) IS NOT NULL;\n\n   COMMIT;\n    INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123454||VAR_PARENT_ID\n   ,'حجم'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n       INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123455||VAR_PARENT_ID\n   ,'سهم حجم از کل'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n   INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123456||VAR_PARENT_ID\n   ,'تعداد'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n    INSERT INTO TBL_DDDR_TREE (\n    PARENT_ID\n   ,PARENT_NAME\n   ,CHILD_ID\n   ,CHILD_NAME\n   ,DEPTH\n   ,REF_REPREQ\n   ,REF_REPORT\n   ) SELECT\n    VAR_PARENT_ID\n   ,NULL\n   ,123457||VAR_PARENT_ID\n   ,'سهم تعداد از کل'\n   ,2\n   ,INPAR_REPREQ\n   ,INPAR_REPORT\n   FROM DUAL;\n   commit;\n\n   VAR_PARENT_ID   := VAR_PARENT_ID + 1;\n  END LOOP;\n\n  COMMIT;\n  UPDATE TBL_DDDR_TREE\n   SET\n    CHILD_NAME = (\n     SELECT\n      NAME\n     FROM TBL_DEPOSIT_TYPE\n     WHERE TBL_DDDR_TREE.CHILD_ID   = REF_DEPOSIT_TYPE\n    )\n  WHERE CHILD_NAME IS NULL\n   AND\n    DEPTH   = 2;\n\n  COMMIT;\n  \n  delete from TBL_DDDR_TREE\n  where child_name is null and child_id like '123456%'\n  and REF_REPREQ = INPAR_REPREQ;\n  commit;\n  RETURN NULL;\n END FNC_DDDR_TREE_BUILDER;\n  /*\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--*/\n  /*\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--*/\n  /*\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--*/\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_DEPOSIT_TYPE RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'select  ref_deposit_type as \"id\" ,name as \"name\" from tbl_deposit_type';\n END FNC_DDDR_DEPOSIT_TYPE;\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN ' SELECT  \"id\",\"name\",\"parent\",\"level\"\nFROM (SELECT\n CHILD_ID AS \"id\"\n ,CHILD_NAME AS \"name\"\n ,PARENT_ID AS \"parent\"\n ,PARENT_NAME AS \"parentName\"\n ,DEPTH AS \"level\"\nFROM TBL_DDDR_TREE\nWHERE REF_REPORT   = ' ||\n  INPAR_REPREQ ||\n  '\n AND\n  REF_REPREQ   = (\n   SELECT\n    MAX(REF_REPREQ)\n   FROM TBL_DDDR_TREE\n   WHERE REF_REPORT   = ' ||\n  INPAR_REPREQ ||\n  '\n  ))\nSTART WITH \"parent\" =0\nCONNECT BY prior \"id\" =\"parent\"';\n END FNC_DDDR_GET_TREE_DETAIL;\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\n  ,to_char(to_date(first_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"startDate\"\n  ,to_char(to_date(last_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"endDate\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DDDR'' order by id';\n  RETURN VAR2;\n END FNC_DDDR_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X0 AS \"x0\" ,X1 as \"x1\"\n ,X2 as \"x2\"\n ,X3 as \"x3\"\n ,X4 as \"x4\"\n ,X5 as \"x5\"\n ,X6 as \"x6\"\n ,X7 as \"x7\"\n ,REF_DEPOSIT_TYPE as \"id\" from TBL_DDDR_REP_PROFILE_DETAIL where REF_REPREQ =  '\n|| INPAR_ID || '  order by REF_DEPOSIT_TYPE';\n  RETURN VAR2;\n END FNC_DDDR_GET_DETAIL_CHILD;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X0 AS \"x0\" , X1 as \"x1\"\n ,X2 as \"x2\"\n ,X3 as \"x3\"\n ,X4 as \"x4\"\n ,X5 as \"x5\"\n ,X6 as \"x6\"\n ,X7 as \"x7\"\n ,REF_DEPOSIT_TYPE as \"id\" from TBL_DDDR_REP_PROFILE_DETAIL where REF_REPREQ = '\n|| INPAR_ID || '  and REF_DEPOSIT_TYPE =-1  order by REF_DEPOSIT_TYPE';\n  RETURN VAR2;\n END FNC_DDDR_GET_COUNT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 ) AS\n\n  INPAR_DATE_FIRST   VARCHAR2(200);\n  INPAR_DATE_LAST    VARCHAR2(200);\n  VAR_MAX_REPREQ     NUMBER;\n  VAR_TREE           VARCHAR2(100);\n  VAR                VARCHAR2(30000);\n \n BEGIN\n\n  SELECT\n   FIRST_DATE\n  INTO\n   INPAR_DATE_FIRST\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   LAST_DATE\n  INTO\n   INPAR_DATE_LAST\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_MAX_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_REPORT;\n\n  SELECT\n   PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_TREE_BUILDER(INPAR_REPORT,VAR_MAX_REPREQ)\n  INTO\n   VAR_TREE\n  FROM DUAL;\n\n  IF\n   ( ( TRUNC(TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') ) ) \u003c= ( TRUNC(SYSDATE) ) )\n  THEN\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    INPAR_REPORT\n   ,/*+ PARALLEL(auto) */\n    REF_DEPOSIT_TYPE \"id\" ,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   \n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\n   GROUP BY\n    REF_DEPOSIT_TYPE\n   UNION\n   SELECT\n    INPAR_REPORT\n   ,/*+ PARALLEL(auto) */\n    REF_DEPOSIT_TYPE \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE ( DUE_DATE ) IS NULL\n   GROUP BY\n    REF_DEPOSIT_TYPE;\n\n   COMMIT;\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    INPAR_REPORT\n   ,MAX(\"id\")\n   ,SUM(\"0\") AS \"0\"\n   ,SUM(\"1\") AS \"1\"\n   ,SUM(\"2\") AS \"2\"\n   ,SUM(\"3\") AS \"3\"\n   ,SUM(\"4\") AS \"4\"\n   ,SUM(\"5\") AS \"5\"\n   ,SUM(\"6\") AS \"6\"\n   ,SUM(\"7\") AS \"7\"\n   ,VAR_MAX_REPREQ\n   FROM (\n     SELECT\n      /*+ PARALLEL(auto) */\n      -1 \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) AS \"1\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"2\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"3\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"4\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"5\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"6\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE \u003e= 20 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"7\"\n     FROM AKIN.TBL_DEPOSIT\n     WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\n     UNION\n     SELECT\n     /*+ PARALLEL(auto) */\n      -1 \"ID\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) AS \"1\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"2\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"3\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"4\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"5\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"6\"\n     ,NVL(\n       COUNT(\n        CASE\n         WHEN RATE \u003e= 20 THEN(BALANCE)\n        END\n       )\n      ,0\n      ) \"7\"\n     FROM AKIN.TBL_DEPOSIT\n     WHERE ( DUE_DATE ) IS NULL\n    )\n   GROUP BY\n    INPAR_REPORT;\n\n   COMMIT;\n   \n      \n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    max(report)\n   ,MAX(id)\n   ,SUM(\"0\") AS \"0\"\n   ,SUM(\"1\") AS \"1\"\n   ,SUM(\"2\") AS \"2\"\n   ,SUM(\"3\") AS \"3\"\n   ,SUM(\"4\") AS \"4\"\n   ,SUM(\"5\") AS \"5\"\n   ,SUM(\"6\") AS \"6\"\n   ,SUM(\"7\") AS \"7\"\n   ,  max(repreq)\n   FROM ((SELECT\n    inpar_report as report,\n    id,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"0\"\n      ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(count)\n      END\n     )\n    ,0\n    ) \"7\",\n  VAR_MAX_REPREQ as repreq\n \n   FROM (\n   \n   select /*+   PARALLEL(auto) */  count(*) as count,TD.REF_DEPOSIT_TYPE,D.ID,TD.RATE from AKIN.TBL_DEPOSIT td,( SELECT regexp_substr(types, '[^,]+', 1, LEVEL) as type\n    ,id\nFROM (\n    SELECT replace(regexp_substr(data, '.+#', 1), '#', '') AS name\n        ,replace(regexp_substr(data, '#.+', 1), '#', '') AS types\n        ,'123456' || id AS id\n    FROM (\n        SELECT LEVEL AS id\n            ,regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) AS data\n        FROM (\n            SELECT  ref_ledger_profiel\n            FROM TBL_REPORT where TBL_REPORT.ID = inpar_report\n            ) CONNECT BY regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) IS NOT NULL\n        )\n    ) CONNECT BY PRIOR name = name -- add This and \n    AND PRIOR SYS_GUID() IS NOT NULL --This\n    AND regexp_substr(types, '[^,]+', 1, LEVEL) IS NOT NULL\n)  d\nwhere TD.REF_DEPOSIT_TYPE = d.type and    TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\ngroup by REF_DEPOSIT_TYPE,D.ID,TD.RATE\n   )\n    GROUP BY\nID   )\n \n    union\n   ( SELECT\n    inpar_report as report, \n    id,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"0\",\n      NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(count)\n      END\n     )\n    ,0\n    ) \"7\",\n  VAR_MAX_REPREQ as repreq\n \n   FROM (\n   \n   select /*+   PARALLEL(auto) */  count(*) as count,TD.REF_DEPOSIT_TYPE,D.ID,TD.RATE from AKIN.TBL_DEPOSIT td,( SELECT regexp_substr(types, '[^,]+', 1, LEVEL) as type\n    ,id\nFROM (\n    SELECT replace(regexp_substr(data, '.+#', 1), '#', '') AS name\n        ,replace(regexp_substr(data, '#.+', 1), '#', '') AS types\n        ,'123456' || id AS id\n    FROM (\n        SELECT LEVEL AS id\n            ,regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) AS data\n        FROM (\n            SELECT  ref_ledger_profiel\n            FROM TBL_REPORT where TBL_REPORT.ID = inpar_report\n            ) CONNECT BY regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) IS NOT NULL\n        )\n    ) CONNECT BY PRIOR name = name -- add This and \n    AND PRIOR SYS_GUID() IS NOT NULL --This\n    AND regexp_substr(types, '[^,]+', 1, LEVEL) IS NOT NULL\n)  d\nwhere TD.REF_DEPOSIT_TYPE = d.type and    trunc( DUE_DATE ) IS NULL\ngroup by REF_DEPOSIT_TYPE,D.ID,TD.RATE\n   )\n -- \n   GROUP BY\n    ID  ))\n   GROUP BY\n    id   \n;\n   \n   \n   \n   \n   \n   \n   commit;\n  ELSE-----------------------------------------------------------------*********************\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    inpar_report\n   ,/*+ PARALLEL(auto) */\n    REF_DEPOSIT_TYPE \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\n   GROUP BY\n    REF_DEPOSIT_TYPE;\n\n   COMMIT;\n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    inpar_report\n   ,/*+ PARALLEL(auto) */\n    -1 \"id\",NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"0\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     COUNT(\n      CASE\n       WHEN RATE \u003e= 20 THEN(BALANCE)\n      END\n     )\n    ,0\n    ) \"7\"\n   ,VAR_MAX_REPREQ\n   FROM AKIN.TBL_DEPOSIT\n   WHERE TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd');\n\n   COMMIT;\n   \n   INSERT INTO TBL_DDDR_REP_PROFILE_DETAIL (\n    REF_REPORT\n   ,REF_DEPOSIT_TYPE\n   ,X0\n   ,X1\n   ,X2\n   ,X3\n   ,X4\n   ,X5\n   ,X6\n   ,X7\n   ,REF_REPREQ\n   ) SELECT\n    inpar_report,\n    id,NVL(\n     SUM(\n      CASE\n       WHEN RATE = 0 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"0\",\n      NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 0.1 AND 14.99 THEN(count)\n      END\n     )\n    ,0\n    ) AS \"1\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 15 AND 15.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"2\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 16 AND 16.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"3\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 17 AND 17.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"4\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 18 AND 18.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"5\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE BETWEEN 19 AND 19.99 THEN(count)\n      END\n     )\n    ,0\n    ) \"6\"\n   ,NVL(\n     SUM(\n      CASE\n       WHEN RATE \u003e= 20 THEN(count)\n      END\n     )\n    ,0\n    ) \"7\",\n  VAR_MAX_REPREQ\n \n   FROM (\n   \n   select /*+   PARALLEL(auto) */  count(*) as count,TD.REF_DEPOSIT_TYPE,D.ID,TD.RATE from AKIN.TBL_DEPOSIT td,( SELECT regexp_substr(types, '[^,]+', 1, LEVEL) as type\n    ,id\nFROM (\n    SELECT replace(regexp_substr(data, '.+#', 1), '#', '') AS name\n        ,replace(regexp_substr(data, '#.+', 1), '#', '') AS types\n        ,'123456' || id AS id\n    FROM (\n        SELECT LEVEL AS id\n            ,regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) AS data\n        FROM (\n            SELECT  ref_ledger_profiel\n            FROM TBL_REPORT where TBL_REPORT.ID = inpar_report\n            ) CONNECT BY regexp_substr(ref_ledger_profiel, '[^;]+', 1, LEVEL) IS NOT NULL\n        )\n    ) CONNECT BY PRIOR name = name -- add This and \n    AND PRIOR SYS_GUID() IS NOT NULL --This\n    AND regexp_substr(types, '[^,]+', 1, LEVEL) IS NOT NULL\n)  d\nwhere TD.REF_DEPOSIT_TYPE = d.type and    TRUNC(DUE_DATE) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\ngroup by REF_DEPOSIT_TYPE,D.ID,TD.RATE\n   )\n -- \n   GROUP BY\n    ID;\n   \n   commit;\n   \n  END IF;\n\n END PRC_DDDR_GET_DETAIL;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_DEPOSIT_RATE;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_DEPOSIT_RATE\" AS\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDDR_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDDR_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_DEPOSIT_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDDR_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_DEPOSIT_RATE;"},{"Name":"PKG_DUE_DATE_LOAN_TYPE","ObjectID":295506,"Digest":"fe24b617a76aab482008d6289f26991b2857587c55d5f684b5d032370c36e10a","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN_TYPE\" AS\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDLT_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_LOAN_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL_COL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_LOAN_TYPE;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE_LOAN_TYPE\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_DDLT_DELETE_REPORT(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR OUT VARCHAR2)\nAS\nBEGIN\n  DELETE FROM TBL_REPORT WHERE ID = INPAR_ID;\n  COMMIT;\n  DELETE FROM TBL_DDLT_REP_PROFILE_DETAIL WHERE REF_REPORT = INPAR_ID;\n  COMMIT;\nEND PRC_DDLT_DELETE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_DDLT_REP_PROFILE_REPORT(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_REF_USER         IN VARCHAR2 ,\n    INPAR_STATUS           IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    inpar_first_date  in varchar2,\n    inpar_last_date in varchar2,\n    inpar_tree in varchar2,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nvar_tree varchar2(100);\nmax_repreq number;\nBEGIN\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        FIRST_DATE,\n        LAST_DATE,\n        TYPE,\n        REF_LEDGER_PROFIEL\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'DDLT' ,\n        inpar_first_date,\n        inpar_last_date,\n        INPAR_TYPE,\n        inpar_tree\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME   = INPAR_NAME ,\n      DES      = INPAR_DES ,\n      REF_USER = INPAR_REF_USER ,\n      STATUS   = INPAR_STATUS ,\n      TYPE     = INPAR_TYPE,\n      first_date = inpar_first_date,\n      last_date = inpar_last_date,\n      REF_LEDGER_PROFIEL=inpar_tree\n    WHERE ID   = INPAR_ID;\n    COMMIT;\n  END IF;\n  \n  update TBL_REPORT\n  set H_ID = id\n  where upper(type) = 'DDLT' and H_ID is null;\n  commit;\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    select max(REF_REPREQ) into max_repreq from TBL_DDLT_TREE where REF_REPORT = OUTPAR_ID;\n    if (max_repreq is null) then max_repreq := -1; end if;\n  select pkg_due_date_LOAN_type.FNC_DDLT_TREE_BUILDER(OUTPAR_ID,max_repreq) into var_tree from dual;\n  ELSE\n      select max(REF_REPREQ) into max_repreq from TBL_DDLT_TREE where REF_REPORT = INPAR_ID;\n    if (max_repreq is null) then max_repreq := -1;end if;\n    select pkg_due_date_LOAN_type.FNC_DDLT_TREE_BUILDER(INPAR_ID,max_repreq) into var_tree from dual;\n  END IF;\n\ncommit;\n  end PRC_DDLT_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_DDLT_TREE_BUILDER ( inpar_report in number, inpar_repreq in number) RETURN VARCHAR2 AS\n  var_parent_id number:=1;\n  INPAR_TREE varchar2(30000);\n  pragma autonomous_transaction;\n  BEGIN\n  \n  select REF_LEDGER_PROFIEL  into INPAR_TREE from TBL_REPORT where ID = inpar_report;\n  \n  delete from TBL_DDLT_TREE where REF_REPORT = inpar_report and REF_REPREQ = inpar_repreq;\n  commit;\n     for i in(select regexp_substr( INPAR_TREE,'[^;]+', 1, level) as s from dual\n     connect by regexp_substr(INPAR_TREE, '[^;]+', 1, level) is not null) loop\n     INSERT INTO TBL_DDLT_TREE (\n PARENT_ID\n ,PARENT_NAME\n ,CHILD_ID\n ,CHILD_NAME\n ,DEPTH\n ,REF_REPREQ\n ,REF_REPORT\n) \n       select null,null,var_parent_id,substr(i.s, -length(i.s), INSTR(i.s ,'#' )-1)as name,1,inpar_repreq,inpar_report  from dual;\n       commit;\n          INSERT INTO TBL_DDLT_TREE (\n PARENT_ID\n ,PARENT_NAME\n ,CHILD_ID\n ,CHILD_NAME\n ,DEPTH\n ,REF_REPREQ\n ,REF_REPORT\n) \n   select var_parent_id,null,regexp_substr(substr(i.s,   INSTR(i.s ,'#' )+1 ) ,'[^,]+', 1, level) as s,null,2,inpar_repreq,inpar_report from dual\n     connect by regexp_substr(substr(i.s,   INSTR(i.s ,'#' )+1 ) , '[^,]+', 1, level) is not null;\n     var_parent_id:=var_parent_id+1;\n     \n     end loop;\n     commit;\n     UPDATE TBL_DDLT_TREE\n SET\n CHILD_NAME = (select name from TBL_LOAN_TYPE where TBL_DDLT_TREE.CHILD_ID = REF_LOAN_TYPE)\nWHERE  \nCHILD_NAME is null\n  and DEPTH = 2;\n   commit;\n    RETURN NULL;\n  END FNC_DDLT_TREE_BUILDER;\n  --\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--\n  --\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--\n  --\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_LOAN_type  RETURN VARCHAR2 AS\n  \n\n  BEGIN\n   \n    RETURN 'select  ref_LOAN_type as \"id\" , name as \"name\" from tbl_LOAN_type';\n  END FNC_DDLT_LOAN_type;\n\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n\nfunction fnc_DDLT_get_tree_detail(inpar_repreq in number) return varchar2\nas \n\nbegin\nreturn ' SELECT  \"id\",\"name\",\"parent\",\"level\"\nFROM (SELECT\n CHILD_ID AS \"id\"\n ,CHILD_NAME AS \"name\"\n ,PARENT_ID AS \"parent\"\n ,PARENT_NAME AS \"parentName\"\n ,DEPTH AS \"level\"\nFROM TBL_DDLT_TREE\nWHERE REF_REPORT   = '||inpar_repreq||'\n AND\n  REF_REPREQ   = (\n   SELECT\n    MAX(REF_REPREQ)\n   FROM TBL_DDLT_TREE\n   WHERE REF_REPORT   = '||inpar_repreq||'\n  ))\nSTART WITH \"parent\" is null\nCONNECT BY prior \"id\" =\"parent\"';\n\nend fnc_DDLT_get_tree_detail;\n\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\n  ,to_char(to_date(first_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"startDate\"\n  ,to_char(to_date(last_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"endDate\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DDLT'' order by id';\n  RETURN VAR2;\n END FNC_DDLT_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_detail_child ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X1 as \"x1\"\n  ,REF_LOAN_TYPE as \"id\" from TBL_DDLT_REP_PROFILE_DETAIL where REF_REPREQ =  '|| INPAR_ID || '  order by REF_LOAN_TYPE';\n  RETURN VAR2;\n END FNC_DDLT_GET_detail_child;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_count ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X1 as \"x1\"\n ,REF_LOAN_TYPE as \"id\" from TBL_DDLT_REP_PROFILE_DETAIL where REF_REPREQ = '|| INPAR_ID || '  and REF_LOAN_TYPE =-1  order by REF_LOAN_TYPE';\n  RETURN VAR2;\n END FNC_DDLT_GET_count;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DDlt_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 ) AS\n\n  INPAR_DATE_FIRST   VARCHAR2(200);\n INPAR_DATE_LAST    VARCHAR2(200);\n VAR_MAX_REPREQ     NUMBER;\n var_tree varchar2(100);\nBEGIN\n SELECT\n  FIRST_DATE\n INTO\n  INPAR_DATE_FIRST\n FROM TBL_REPORT\n WHERE ID   = INPAR_REPORT;\n\n SELECT\n  last_DATE\n INTO\n  INPAR_DATE_LAST\n FROM TBL_REPORT\n WHERE ID   = INPAR_REPORT;\n\n SELECT\n  MAX(ID)\n INTO\n  VAR_MAX_REPREQ\n FROM TBL_REPREQ;\nselect pkg_due_date_loan_type.FNC_DDlt_TREE_BUILDER(INPAR_REPORT,VAR_MAX_REPREQ) into var_tree from dual;\n \n  \n  INSERT INTO TBL_DDlt_REP_PROFILE_DETAIL (\n   REF_REPORT\n  ,REF_loan_TYPE\n  ,X1\n  ,REF_REPREQ\n  ) SELECT INPAR_REPORT,\n TL.REF_LOAN_TYPE\n ,SUM(TLP.PROFIT_AMOUNT + TLP.AMOUNT),VAR_MAX_REPREQ\nFROM AKIN.TBL_LOAN TL\n ,    AKIN.TBL_LOAN_PAYMENT TLP\nWHERE TL.LON_ID   = TLP.REF_LON_ID\n AND\n TRUNC( TLP.DUE_DATE ) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\nGROUP BY\n TL.REF_LOAN_TYPE;\n \n commit;\n   INSERT INTO TBL_DDlt_REP_PROFILE_DETAIL (\n   REF_REPORT\n  ,REF_loan_TYPE\n  ,X1\n  ,REF_REPREQ\n  ) SELECT INPAR_REPORT,\n -1\n ,count(distinct TL.LON_ID )\n ,VAR_MAX_REPREQ\nFROM AKIN.TBL_LOAN TL\n ,    AKIN.TBL_LOAN_PAYMENT TLP\nWHERE TL.LON_ID   = TLP.REF_LON_ID\n AND\n TRUNC( TLP.DUE_DATE ) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\nGROUP BY\n TL.REF_LOAN_TYPE;\n  commit;\n\n \n END PRC_ddlt_GET_DETAIL;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_report_detail ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n  start_date VARCHAR2(3000);\n  end_date VARCHAR2(3000);\n BEGIN\n select TO_DATE(FIRST_DATE,'yyyy-mm-dd')  into start_date from TBL_REPORT where ID = (select ref_report_id from TBL_REPREQ where id = INPAR_ID );\nselect  TO_DATE(LAST_DATE,'yyyy-mm-dd') into end_date from TBL_REPORT where ID = (select ref_report_id from TBL_REPREQ where id = INPAR_ID );\n    \n \n  VAR2 := '\n  SELECT\n TL.LON_ID \"x1\",\n(select name from tbl_loan_type where ref_loan_type =  TL.REF_LOAN_TYPE) as \"x2\",\n(TLP.AMOUNT + TLP.PROFIT_AMOUNT) \"x3\",\nTB.BRN_ID \"x4\",\nTB.NAME \"x5\",\nTB.REGION_ID \"x6\",\nTB.REGION_NAME \"x7\",\nREF_LOAN_TYPE \"x8\",\nTLP.DUE_DATE \"x9\",\ncu.name  || '' ''|| cu.family \"x10\",\nTl.Rate \"x11\"\nFROM AKIN.TBL_LOAN TL\n ,    AKIN.TBL_LOAN_PAYMENT TLP\n , TBL_BRANCH tb\n ,Tbl_Customer cu\n WHERE TL.LON_ID   = TLP.REF_LON_ID\n and \n Cu.cus_id = Tl.Ref_Customer\n AND\n TB.BRN_ID = TL.REF_BRANCH\n and  TLP.DUE_DATE  between\n to_date('''||start_date||''' ) and   to_date('''||end_date||''')\n and TL.REF_LOAN_TYPE in (select CHILD_ID from tbl_ddlt_tree where REF_REPREQ = '||INPAR_ID||' and DEPTH = 2)\n  ';\n\n  RETURN VAR2;\n END FNC_DDLT_GET_report_detail;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_report_detail_col ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n   \n BEGIN\n  \n\n  RETURN '  SELECT\n      REGEXP_SUBSTR(\n       ''\\u0631\\u062f\\u06cc\\u0641#\\u0646\\u0648\\u0639#\\u0645\\u0648\\u062c\\u0648\\u062f\\u06cc#\\u0634\\u0639\\u0628\\u0647#\\u0646\\u0627\\u0645 \\u0634\\u0639\\u0628\\u0647#\\u06a9\\u062f \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0627\\u0645 \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0648\\u0639 \\u062a\\u0633\\u0647\\u06cc\\u0644\\u0627\\u062a#\\u062a\\u0627\\u0631\\u06cc\\u062e \\u0633\\u0631\\u0631\\u0633\\u06cc\\u062f#\\u0634\\u0645\\u0627\\u0631\\u0647 \\u0645\\u0634\\u062a\\u0631\\u06cc#\\u0646\\u0631\\u062e \\u0633\\u0648\\u062f'' \n      ,''[^#]+''\n      ,1\n      ,LEVEL\n      ) AS \"header\" ,''x''||rownum as \"value\"\n     FROM DUAL\n     CONNECT BY\n      REGEXP_SUBSTR(\n        ''\\u0631\\u062f\\u06cc\\u0641#\\u0646\\u0648\\u0639#\\u0645\\u0648\\u062c\\u0648\\u062f\\u06cc#\\u0634\\u0639\\u0628\\u0647#\\u0646\\u0627\\u0645 \\u0634\\u0639\\u0628\\u0647#\\u06a9\\u062f \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0627\\u0645 \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0648\\u0639 \\u062a\\u0633\\u0647\\u06cc\\u0644\\u0627\\u062a#\\u062a\\u0627\\u0631\\u06cc\\u062e \\u0633\\u0631\\u0631\\u0633\\u06cc\\u062f#\\u0634\\u0645\\u0627\\u0631\\u0647 \\u0645\\u0634\\u062a\\u0631\\u06cc#\\u0646\\u0631\\u062e \\u0633\\u0648\\u062f \n      '',''[^#]+''\n      ,1\n      ,LEVEL\n      ) IS NOT NULL';\n END FNC_DDLT_GET_report_detail_col;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_DUE_DATE_LOAN_TYPE;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN_TYPE\" AS\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDLT_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_LOAN_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL_COL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_LOAN_TYPE;"},{"Name":"PKG_DUE_DATE_LOAN_TYPE","ObjectID":295516,"Digest":"fe24b617a76aab482008d6289f26991b2857587c55d5f684b5d032370c36e10a","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN_TYPE\" AS\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDLT_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_LOAN_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL_COL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_LOAN_TYPE;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DUE_DATE_LOAN_TYPE\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_DDLT_DELETE_REPORT(\n    INPAR_ID IN VARCHAR2 ,\n    OUTPAR OUT VARCHAR2)\nAS\nBEGIN\n  DELETE FROM TBL_REPORT WHERE ID = INPAR_ID;\n  COMMIT;\n  DELETE FROM TBL_DDLT_REP_PROFILE_DETAIL WHERE REF_REPORT = INPAR_ID;\n  COMMIT;\nEND PRC_DDLT_DELETE_REPORT;\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPROCEDURE PRC_DDLT_REP_PROFILE_REPORT(\n    INPAR_NAME             IN VARCHAR2 ,\n    INPAR_DES              IN VARCHAR2 ,\n    INPAR_REF_USER         IN VARCHAR2 ,\n    INPAR_STATUS           IN VARCHAR2 ,\n    INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n    INPAR_ID               IN VARCHAR2 ,\n    INPAR_TYPE             IN VARCHAR2 ,\n    inpar_first_date  in varchar2,\n    inpar_last_date in varchar2,\n    inpar_tree in varchar2,\n    OUTPAR_ID OUT VARCHAR2 )\nAS\nvar_tree varchar2(100);\nmax_repreq number;\nBEGIN\n\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    INSERT\n    INTO TBL_REPORT\n      (\n        NAME ,\n        DES ,\n        CREATE_DATE ,\n        REF_USER ,\n        STATUS ,\n        CATEGORY ,\n        FIRST_DATE,\n        LAST_DATE,\n        TYPE,\n        REF_LEDGER_PROFIEL\n      )\n      VALUES\n      (\n        INPAR_NAME ,\n        INPAR_DES ,\n        SYSDATE ,\n        INPAR_REF_USER ,\n        INPAR_STATUS ,\n        'DDLT' ,\n        inpar_first_date,\n        inpar_last_date,\n        INPAR_TYPE,\n        inpar_tree\n      );\n    COMMIT;\n    SELECT ID\n    INTO OUTPAR_ID\n    FROM TBL_REPORT\n    WHERE CREATE_DATE =\n      ( SELECT MAX(CREATE_DATE) FROM TBL_REPORT\n      )\n    AND ID =\n      ( SELECT MAX(ID) FROM TBL_REPORT\n      );\n  ELSE\n    UPDATE TBL_REPORT\n    SET NAME   = INPAR_NAME ,\n      DES      = INPAR_DES ,\n      REF_USER = INPAR_REF_USER ,\n      STATUS   = INPAR_STATUS ,\n      TYPE     = INPAR_TYPE,\n      first_date = inpar_first_date,\n      last_date = inpar_last_date,\n      REF_LEDGER_PROFIEL=inpar_tree\n    WHERE ID   = INPAR_ID;\n    COMMIT;\n  END IF;\n  \n  update TBL_REPORT\n  set H_ID = id\n  where upper(type) = 'DDLT' and H_ID is null;\n  commit;\n\n  IF ( INPAR_INSERT_OR_UPDATE = 0 ) THEN\n    select max(REF_REPREQ) into max_repreq from TBL_DDLT_TREE where REF_REPORT = OUTPAR_ID;\n    if (max_repreq is null) then max_repreq := -1; end if;\n  select pkg_due_date_LOAN_type.FNC_DDLT_TREE_BUILDER(OUTPAR_ID,max_repreq) into var_tree from dual;\n  ELSE\n      select max(REF_REPREQ) into max_repreq from TBL_DDLT_TREE where REF_REPORT = INPAR_ID;\n    if (max_repreq is null) then max_repreq := -1;end if;\n    select pkg_due_date_LOAN_type.FNC_DDLT_TREE_BUILDER(INPAR_ID,max_repreq) into var_tree from dual;\n  END IF;\n\ncommit;\n  end PRC_DDLT_REP_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_DDLT_TREE_BUILDER ( inpar_report in number, inpar_repreq in number) RETURN VARCHAR2 AS\n  var_parent_id number:=1;\n  INPAR_TREE varchar2(30000);\n  pragma autonomous_transaction;\n  BEGIN\n  \n  select REF_LEDGER_PROFIEL  into INPAR_TREE from TBL_REPORT where ID = inpar_report;\n  \n  delete from TBL_DDLT_TREE where REF_REPORT = inpar_report and REF_REPREQ = inpar_repreq;\n  commit;\n     for i in(select regexp_substr( INPAR_TREE,'[^;]+', 1, level) as s from dual\n     connect by regexp_substr(INPAR_TREE, '[^;]+', 1, level) is not null) loop\n     INSERT INTO TBL_DDLT_TREE (\n PARENT_ID\n ,PARENT_NAME\n ,CHILD_ID\n ,CHILD_NAME\n ,DEPTH\n ,REF_REPREQ\n ,REF_REPORT\n) \n       select null,null,var_parent_id,substr(i.s, -length(i.s), INSTR(i.s ,'#' )-1)as name,1,inpar_repreq,inpar_report  from dual;\n       commit;\n          INSERT INTO TBL_DDLT_TREE (\n PARENT_ID\n ,PARENT_NAME\n ,CHILD_ID\n ,CHILD_NAME\n ,DEPTH\n ,REF_REPREQ\n ,REF_REPORT\n) \n   select var_parent_id,null,regexp_substr(substr(i.s,   INSTR(i.s ,'#' )+1 ) ,'[^,]+', 1, level) as s,null,2,inpar_repreq,inpar_report from dual\n     connect by regexp_substr(substr(i.s,   INSTR(i.s ,'#' )+1 ) , '[^,]+', 1, level) is not null;\n     var_parent_id:=var_parent_id+1;\n     \n     end loop;\n     commit;\n     UPDATE TBL_DDLT_TREE\n SET\n CHILD_NAME = (select name from TBL_LOAN_TYPE where TBL_DDLT_TREE.CHILD_ID = REF_LOAN_TYPE)\nWHERE  \nCHILD_NAME is null\n  and DEPTH = 2;\n   commit;\n    RETURN NULL;\n  END FNC_DDLT_TREE_BUILDER;\n  --\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--\n  --\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--\n  --\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e\u003c\u003e--\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_LOAN_type  RETURN VARCHAR2 AS\n  \n\n  BEGIN\n   \n    RETURN 'select  ref_LOAN_type as \"id\" , name as \"name\" from tbl_LOAN_type';\n  END FNC_DDLT_LOAN_type;\n\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n\nfunction fnc_DDLT_get_tree_detail(inpar_repreq in number) return varchar2\nas \n\nbegin\nreturn ' SELECT  \"id\",\"name\",\"parent\",\"level\"\nFROM (SELECT\n CHILD_ID AS \"id\"\n ,CHILD_NAME AS \"name\"\n ,PARENT_ID AS \"parent\"\n ,PARENT_NAME AS \"parentName\"\n ,DEPTH AS \"level\"\nFROM TBL_DDLT_TREE\nWHERE REF_REPORT   = '||inpar_repreq||'\n AND\n  REF_REPREQ   = (\n   SELECT\n    MAX(REF_REPREQ)\n   FROM TBL_DDLT_TREE\n   WHERE REF_REPORT   = '||inpar_repreq||'\n  ))\nSTART WITH \"parent\" is null\nCONNECT BY prior \"id\" =\"parent\"';\n\nend fnc_DDLT_get_tree_detail;\n\n\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\n  ,to_char(to_date(first_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"startDate\"\n  ,to_char(to_date(last_date,''yyyy-mm-dd''),''yyyy/mm/dd'',''nls_calendar=persian'') as \"endDate\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''DDLT'' order by id';\n  RETURN VAR2;\n END FNC_DDLT_GET_REPORT_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_detail_child ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X1 as \"x1\"\n  ,REF_LOAN_TYPE as \"id\" from TBL_DDLT_REP_PROFILE_DETAIL where REF_REPREQ =  '|| INPAR_ID || '  order by REF_LOAN_TYPE';\n  RETURN VAR2;\n END FNC_DDLT_GET_detail_child;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_count ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'select   X1 as \"x1\"\n ,REF_LOAN_TYPE as \"id\" from TBL_DDLT_REP_PROFILE_DETAIL where REF_REPREQ = '|| INPAR_ID || '  and REF_LOAN_TYPE =-1  order by REF_LOAN_TYPE';\n  RETURN VAR2;\n END FNC_DDLT_GET_count;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_DDlt_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 ) AS\n\n  INPAR_DATE_FIRST   VARCHAR2(200);\n INPAR_DATE_LAST    VARCHAR2(200);\n VAR_MAX_REPREQ     NUMBER;\n var_tree varchar2(100);\nBEGIN\n SELECT\n  FIRST_DATE\n INTO\n  INPAR_DATE_FIRST\n FROM TBL_REPORT\n WHERE ID   = INPAR_REPORT;\n\n SELECT\n  last_DATE\n INTO\n  INPAR_DATE_LAST\n FROM TBL_REPORT\n WHERE ID   = INPAR_REPORT;\n\n SELECT\n  MAX(ID)\n INTO\n  VAR_MAX_REPREQ\n FROM TBL_REPREQ;\nselect pkg_due_date_loan_type.FNC_DDlt_TREE_BUILDER(INPAR_REPORT,VAR_MAX_REPREQ) into var_tree from dual;\n \n  \n  INSERT INTO TBL_DDlt_REP_PROFILE_DETAIL (\n   REF_REPORT\n  ,REF_loan_TYPE\n  ,X1\n  ,REF_REPREQ\n  ) SELECT INPAR_REPORT,\n TL.REF_LOAN_TYPE\n ,SUM(TLP.PROFIT_AMOUNT + TLP.AMOUNT),VAR_MAX_REPREQ\nFROM AKIN.TBL_LOAN TL\n ,    AKIN.TBL_LOAN_PAYMENT TLP\nWHERE TL.LON_ID   = TLP.REF_LON_ID\n AND\n TRUNC( TLP.DUE_DATE ) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\nGROUP BY\n TL.REF_LOAN_TYPE;\n \n commit;\n   INSERT INTO TBL_DDlt_REP_PROFILE_DETAIL (\n   REF_REPORT\n  ,REF_loan_TYPE\n  ,X1\n  ,REF_REPREQ\n  ) SELECT INPAR_REPORT,\n -1\n ,count(distinct TL.LON_ID )\n ,VAR_MAX_REPREQ\nFROM AKIN.TBL_LOAN TL\n ,    AKIN.TBL_LOAN_PAYMENT TLP\nWHERE TL.LON_ID   = TLP.REF_LON_ID\n AND\n TRUNC( TLP.DUE_DATE ) BETWEEN TO_DATE(INPAR_DATE_FIRST,'yyyy-mm-dd') AND TO_DATE(INPAR_DATE_LAST,'yyyy-mm-dd')\nGROUP BY\n TL.REF_LOAN_TYPE;\n  commit;\n\n \n END PRC_ddlt_GET_DETAIL;\n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_report_detail ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n  start_date VARCHAR2(3000);\n  end_date VARCHAR2(3000);\n BEGIN\n select TO_DATE(FIRST_DATE,'yyyy-mm-dd')  into start_date from TBL_REPORT where ID = (select ref_report_id from TBL_REPREQ where id = INPAR_ID );\nselect  TO_DATE(LAST_DATE,'yyyy-mm-dd') into end_date from TBL_REPORT where ID = (select ref_report_id from TBL_REPREQ where id = INPAR_ID );\n    \n \n  VAR2 := '\n  SELECT\n TL.LON_ID \"x1\",\n(select name from tbl_loan_type where ref_loan_type =  TL.REF_LOAN_TYPE) as \"x2\",\n(TLP.AMOUNT + TLP.PROFIT_AMOUNT) \"x3\",\nTB.BRN_ID \"x4\",\nTB.NAME \"x5\",\nTB.REGION_ID \"x6\",\nTB.REGION_NAME \"x7\",\nREF_LOAN_TYPE \"x8\",\nTLP.DUE_DATE \"x9\",\ncu.name  || '' ''|| cu.family \"x10\",\nTl.Rate \"x11\"\nFROM AKIN.TBL_LOAN TL\n ,    AKIN.TBL_LOAN_PAYMENT TLP\n , TBL_BRANCH tb\n ,Tbl_Customer cu\n WHERE TL.LON_ID   = TLP.REF_LON_ID\n and \n Cu.cus_id = Tl.Ref_Customer\n AND\n TB.BRN_ID = TL.REF_BRANCH\n and  TLP.DUE_DATE  between\n to_date('''||start_date||''' ) and   to_date('''||end_date||''')\n and TL.REF_LOAN_TYPE in (select CHILD_ID from tbl_ddlt_tree where REF_REPREQ = '||INPAR_ID||' and DEPTH = 2)\n  ';\n\n  RETURN VAR2;\n END FNC_DDLT_GET_report_detail;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_DDLT_GET_report_detail_col ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n   \n BEGIN\n  \n\n  RETURN '  SELECT\n      REGEXP_SUBSTR(\n       ''\\u0631\\u062f\\u06cc\\u0641#\\u0646\\u0648\\u0639#\\u0645\\u0648\\u062c\\u0648\\u062f\\u06cc#\\u0634\\u0639\\u0628\\u0647#\\u0646\\u0627\\u0645 \\u0634\\u0639\\u0628\\u0647#\\u06a9\\u062f \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0627\\u0645 \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0648\\u0639 \\u062a\\u0633\\u0647\\u06cc\\u0644\\u0627\\u062a#\\u062a\\u0627\\u0631\\u06cc\\u062e \\u0633\\u0631\\u0631\\u0633\\u06cc\\u062f#\\u0634\\u0645\\u0627\\u0631\\u0647 \\u0645\\u0634\\u062a\\u0631\\u06cc#\\u0646\\u0631\\u062e \\u0633\\u0648\\u062f'' \n      ,''[^#]+''\n      ,1\n      ,LEVEL\n      ) AS \"header\" ,''x''||rownum as \"value\"\n     FROM DUAL\n     CONNECT BY\n      REGEXP_SUBSTR(\n        ''\\u0631\\u062f\\u06cc\\u0641#\\u0646\\u0648\\u0639#\\u0645\\u0648\\u062c\\u0648\\u062f\\u06cc#\\u0634\\u0639\\u0628\\u0647#\\u0646\\u0627\\u0645 \\u0634\\u0639\\u0628\\u0647#\\u06a9\\u062f \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0627\\u0645 \\u0645\\u0646\\u0637\\u0642\\u0647#\\u0646\\u0648\\u0639 \\u062a\\u0633\\u0647\\u06cc\\u0644\\u0627\\u062a#\\u062a\\u0627\\u0631\\u06cc\\u062e \\u0633\\u0631\\u0631\\u0633\\u06cc\\u062f#\\u0634\\u0645\\u0627\\u0631\\u0647 \\u0645\\u0634\\u062a\\u0631\\u06cc#\\u0646\\u0631\\u062e \\u0633\\u0648\\u062f \n      '',''[^#]+''\n      ,1\n      ,LEVEL\n      ) IS NOT NULL';\n END FNC_DDLT_GET_report_detail_col;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_DUE_DATE_LOAN_TYPE;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DUE_DATE_LOAN_TYPE\" AS\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_DDLT_TREE_BUILDER (\n  INPAR_REPORT   IN NUMBER\n ,INPAR_REPREQ   IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_GET_DETAIL ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_DDLT_REP_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_LAST_DATE          IN VARCHAR2\n ,INPAR_TREE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_LOAN_TYPE RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_TREE_DETAIL ( INPAR_REPREQ IN NUMBER ) RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_DETAIL_CHILD ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_COUNT ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_DDLT_GET_REPORT_DETAIL_COL ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_DUE_DATE_LOAN_TYPE;"},{"Name":"PKG_GAP_NIIM","ObjectID":295568,"Digest":"2e65bc4b1ee7ed9d7c1686f86736743cfae29423c536602b558efa33b12e9217","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_GAP_NIIM\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_GAP_NIIM_PROFILE_REPORT (\n  INPAR_NAME                  IN VARCHAR2\n ,INPAR_DES                   IN VARCHAR2\n ,INPAR_REF_USER              IN VARCHAR2\n ,INPAR_STATUS                IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE      IN VARCHAR2\n ,INPAR_ID                    IN VARCHAR2\n ,INPAR_TYPE                  IN VARCHAR2\n ,INPAR_TIMING_PROFILE        IN VARCHAR2\n ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,INPAR_CUS_PROFILE           IN VARCHAR2\n ,INPAR_CUR_PROFILE           IN VARCHAR2\n ,INPAR_BRN_PROFILE           IN VARCHAR2\n ,INPAR_TIMING_PROFILE_TYPE   IN VARCHAR2\n ,inpar_tahlil_hasasiat     in varchar2 ,\n inpar_tasir_hasasiat      in varchar2  \n ,OUTPAR_ID                   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_REPORT_VALUE ( INPAR_ID_REPORT IN VARCHAR2 );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_taAhodi_VALUE ;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_sens ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_QUERY ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_DETAIL_TIMING ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_tasir_hasasiat  (\n  INPAR_ID_REPORT   IN VARCHAR2\n  , VAR_REPREQ   IN VARCHAR2\n  ,ID_TIMING in varchar2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_GAP_NIIM;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_GAP_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_DEP_PROFILE        IN VARCHAR2\n ,INPAR_LON_PROFILE        IN VARCHAR2\n ,INPAR_CUS_PROFILE        IN VARCHAR2\n ,INPAR_CUR_PROFILE        IN VARCHAR2\n ,INPAR_BRN_PROFILE        IN VARCHAR2,\n inpar_timing_profile_type in varchar2,\n inpar_tahlil_hasasiat     in varchar2,   --ke dar sotoone REF_LEDGER_PROFIEL dar jadvale report rikhte mishavad\n inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone FIRST_DATE dar jadvale report rikhte mishavad\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ,REF_TIMING_PROFILE\n   ,REF_LON_PROFILE\n   ,REF_DEP_PROFILE\n   ,REF_CUS_PROFILE\n   ,REF_CUR_PROFILE\n   ,REF_BRN_PROFILE\n   ,TIMING_PROFILE_TYPE\n   ,REF_LEDGER_PROFIEL\n   ,FIRST_DATE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'GAP_NIIM'\n   ,INPAR_TYPE\n   ,INPAR_TIMING_PROFILE\n   ,INPAR_LON_PROFILE\n   ,INPAR_DEP_PROFILE\n   ,INPAR_CUS_PROFILE\n   ,INPAR_CUR_PROFILE\n   ,INPAR_BRN_PROFILE\n   ,inpar_timing_profile_type,\n   inpar_tahlil_hasasiat\n   ,inpar_tasir_hasasiat\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,REF_TIMING_PROFILE = INPAR_TIMING_PROFILE\n    ,REF_DEP_PROFILE = INPAR_DEP_PROFILE\n    ,REF_LON_PROFILE = INPAR_LON_PROFILE\n    ,REF_CUS_PROFILE = INPAR_CUS_PROFILE\n    ,REF_CUR_PROFILE = INPAR_CUR_PROFILE\n    ,REF_BRN_PROFILE = INPAR_BRN_PROFILE\n    ,TIMING_PROFILE_TYPE = inpar_timing_profile_type\n    ,REF_LEDGER_PROFIEL  = inpar_tahlil_hasasiat\n    ,FIRST_DATE = inpar_tasir_hasasiat\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n   \n   \n   \n   --betoone vase tasir gozareshe jadid besaze\n   update tbl_notifications \n   set flag = 1\n   where ref_report = inpar_id;\n   commit;\n   \n   \n   \n  END IF;\n\n  UPDATE TBL_REPORT\n   SET\n    H_ID = ID\n  WHERE TYPE   = 'GAP_NIIM'\n   AND\n    H_ID IS NULL;\n\n  COMMIT;\n END PRC_GAP_NIIM_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_REPORT_VALUE ( INPAR_ID_REPORT IN VARCHAR2 ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n\n  VAR_QUERY     VARCHAR2(4000);\n  ID_LOAN       NUMBER;\n  ID_DEP        NUMBER;\n  ID_CUR        NUMBER;\n  ID_CUS        NUMBER;\n  ID_BRANCH     NUMBER;\n  ID_TIMING     NUMBER;\n  DATE_TYPE1    DATE := SYSDATE;\n  LOC_S         TIMESTAMP;\n  LOC_F         TIMESTAMP;\n  LOC_MEGHDAR   NUMBER;\n  VAR_REPREQ    NUMBER;\n  var_2111_nabashe number;\n BEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''DD-MM-RRRR''';\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_ID_REPORT;\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_CUR\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_CUR_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_CUS\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_CUS_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_BRANCH\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_BRN_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_DEP\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_DEP_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_TIMING\n  FROM TBL_TIMING_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_TIMING_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_LOAN\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_LON_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n  FOR I IN (\n   SELECT\n    TTPD.ID\n   ,TTP.TYPE\n   ,TTPD.PERIOD_NAME\n   ,TTPD.PERIOD_DATE\n   ,TTPD.PERIOD_START\n   ,TTPD.PERIOD_END\n   ,TTPD.PERIOD_COLOR\n   FROM TBL_TIMING_PROFILE TTP\n   ,    TBL_TIMING_PROFILE_DETAIL TTPD\n   WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n    AND\n     TTP.ID   = ID_TIMING\n  ) LOOP\n   IF\n    ( I.TYPE = 1 )\n   THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ')  AND DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''')+' ||\n     I.PERIOD_DATE ||\n     '  ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ')  AND DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''')+' ||\n     I.PERIOD_DATE ||\n     '  ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ') AND DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ') AND DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n   END IF;\n  END LOOP;\n\n  COMMIT;\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS(BALANCE) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,0\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    1,2\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE;\n\n  COMMIT;\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS(BALANCE) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,0\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    11,21\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE\n;\n  COMMIT;\n   --=================   hazfe sarfaslhaee ke dar tamame bazeha sefrand;\n  \n   delete from TBL_GAP_NIIM_PROFILE_DETAIL where \n LEDGER_CODE in (\n select LEDGER_CODE from ( select LEDGER_CODE,SUM(BALANCE)as BALANCE from TBL_GAP_NIIM_PROFILE_DETAIL where REPREQ =VAR_REPREQ\n group by LEDGER_CODE) where BALANCE = 0\n \n ) and REPREQ =VAR_REPREQ ;\n \n  COMMIT;\n\n  --=================\n  \n   INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n  )\n  VALUES\n  (\n    \n    'سپرده ها'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,0\n    ,0\n  );\n  \n  commit;\n  --================\n  \n    INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n  )\n  VALUES\n  (\n    \n    'تسهيلات'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,1\n    ,0\n  );\n  \n  commit;\n  \n  \n  --================\n  \n  \n  \n  \n  \n  \n  UPDATE TBL_GAP_NIIM_PROFILE_DETAIL GNPD SET GNPD.PERIOD_NAME = \n(\nSELECT TBL_TIMING_PROFILE_DETAIL.PERIOD_NAME FROM TBL_TIMING_PROFILE_DETAIL  WHERE TBL_TIMING_PROFILE_DETAIL.ID = GNPD.TIME_PERIOD\n)\nWHERE GNPD.REPREQ = VAR_REPREQ;\n\nCOMMIT;\n  \n  PKG_GAP_NIIM.PRC_GAP_NIIM_taAhodi_VALUE();\n  DATE_TYPE1:=trunc(sysdate);\n  FOR I IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  )\n  LOOP\n  \nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = i.id and modality_type = 21 and SENS_TYPE=0;\nif( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,PERIOD_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,i.id,21,0,i.PERIOD_NAME from dual;\nend if;\nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = i.id and modality_type = 11 and SENS_TYPE=0;\n  if( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,PERIOD_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,i.id,11,0,i.PERIOD_NAME from dual;\n  end if;\n\n    IF ( I.TYPE = 1 ) THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',111,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',211,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n\n      ------/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\//\\/\\/\\/\\/\\/\\/\\/\\/\\/\n      \n\n      \n      DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n      \n      \n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',111,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11 AND eff_date \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',211,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21 AND eff_date \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n            \n\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n  end if;\n  end loop;\n  commit;\n  PKG_GAP_NIIM.PRC_GAP_NIIM_tasir_hasasiat(INPAR_ID_REPORT,VAR_REPREQ,ID_TIMING);\n  commit;\n  /*-------------------------*/\n  LOC_F         := SYSTIMESTAMP;\n  LOC_MEGHDAR   := SQL%ROWCOUNT;\n/* EXCEPTION*/\n/*  WHEN OTHERS THEN*/\n/*   RAISE;*/\n END PRC_GAP_NIIM_REPORT_VALUE;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_gap_niim_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_gap_niim_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GAP_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\",\n  ref_timing_profile as \"timeProfile\",\n  ref_dep_profile as \"depProfile\",\n  ref_lon_profile as \"lonProfile\",\n  ref_cus_profile as \"cusProfile\",\n  ref_cur_profile as \"curProfile\",\n  ref_brn_profile as \"brnProfile\",\n  timing_profile_type as \"timingType\",\n  REF_LEDGER_PROFIEL as \"tahlilHasasiat\",\n  first_date as \"tasir\"\n FROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''GAP_NIIM'' order by id';\n  RETURN VAR2;\n END FNC_GAP_NIIM_GET_REPORT_INFO;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n--FUNCTION FNC_GAP_NIIM_GET_REPORT_sens ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n--  VAR2   VARCHAR2(3000);\n--  var_tahlil VARCHAR2(3000);\n--  var_report VARCHAR2(3000);\n-- BEGIN\n-- select REF_REPORT_ID into var_report from TBL_REPREQ where ID = INPAR_ID; \n-- select REF_LEDGER_PROFIEL into var_tahlil from tbl_report where ID = var_report;\n--\n--\n--if(var_tahlil is null) then\n--\n--var2:='  select id as \"name\",NAME as \"rate\" from tbl_report where id = 0\n--';\n--\n--else\n--  VAR2   := 'select regexp_substr(str, ''[^,]+'', 1, 1) as \"name\", \n--       regexp_substr(str, ''[^,]+'', 1, 2) as \"rate\"\n--       from (select regexp_substr ('''||var_tahlil||''', ''[^#]+'',1, rownum) str\n--from dual\n--connect by level \u003c= regexp_count ('''||var_tahlil||''', ''[^#]+'')) ';\n--\n--end if;\n--\n--  RETURN VAR2;\n--  \n--\n-- END FNC_GAP_NIIM_GET_REPORT_sens;\n\n\n\n\n\n\n\n\n\nFUNCTION FNC_GAP_NIIM_GET_REPORT_sens(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR2       VARCHAR2(3000);\n  var_tahlil VARCHAR2(3000);\n  var_taseer VARCHAR2(3000);\n  var_report VARCHAR2(3000);\n BEGIN\n select REF_REPORT_ID into var_report from TBL_REPREQ where ID = INPAR_ID; \n select REF_LEDGER_PROFIEL into var_tahlil from tbl_report where ID = var_report;\n  select FIRST_DATE into var_taseer from tbl_report where ID = var_report;\n\n\n\nif(var_tahlil is null and var_taseer is null) then\n\nvar2:='  select id as \"name\",NAME as \"rate\" from tbl_report where id = 0\n';\n\nelse\n  VAR2   := '\n  \n  \n  select \"type\",\"name\",\"rate\" from(\n  select 0 as \"type\" ,regexp_substr(str, ''[^,]+'', 1, 1) as \"name\", \n       regexp_substr(str, ''[^,]+'', 1, 2) as \"rate\"\n       from (select regexp_substr ('''||var_tahlil||''', ''[^#]+'',1, rownum) str\nfrom dual\nconnect by level \u003c= regexp_count ('''||var_tahlil||''', ''[^#]+'')) \n\n\n\nunion\n\n\n\nselect 1 as \"type\" ,regexp_substr(str, ''[^,]+'', 1, 1) as \"name\", \n       regexp_substr(str, ''[^,]+'', 1, 2) as \"rate\"\n       from (select regexp_substr ('''||var_taseer||''', ''[^#]+'',1, rownum) str\nfrom dual\nconnect by level \u003c= regexp_count ('''||var_taseer||''', ''[^#]+'')) ) where \"name\" is not null\n\n';\n\nend if;\n\n  RETURN VAR2;\n  \n\n END FNC_GAP_NIIM_GET_REPORT_sens;\n\n\n\n\n\n\n\n\n\n\n\n\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n \n FUNCTION FNC_GAP_NIIM_GET_REPORT_QUERY(INPAR_ID NUMBER)RETURN VARCHAR2 AS\n VAR_SELECT VARCHAR2(30000);\n VAR_PIVOT VARCHAR2(30000);\n \nBEGIN\n\nSELECT WMSYS.WM_CONCAT(TIME_PERIOD)  into VAR_PIVOT   FROM \n(SELECT DISTINCT  TIME_PERIOD  || ' AS \"x' || TIME_PERIOD ||'\"' AS TIME_PERIOD FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = INPAR_ID and SENS_TYPE=0 and time_period is not null ORDER BY TIME_PERIOD);\n\nSELECT WMSYS.WM_CONCAT(TIME_PERIOD)  into VAR_SELECT   FROM \n(SELECT DISTINCT   '  nvl(\"x' || TIME_PERIOD ||'\",0)  AS \"x' || TIME_PERIOD ||'\"' AS TIME_PERIOD  FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = INPAR_ID and SENS_TYPE=0 and  time_period is not null ORDER BY TIME_PERIOD);\n\n-- SELECT DISTINCT   TIME_PERIOD  , PERIOD_NAME FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = INPAR_ID ORDER BY TIME_PERIOD;\n\n\nreturn\n'\nSELECT NAME as \"text\",\nLEDGER_CODE as \"code\",MODALITY_TYPE as \"type\", '||VAR_SELECT||', parent as \"parent\",\nsens_type as \"sensType\",tasir_name as \"tasirName\" FROM (\nSELECT NAME,\nparent,\nLEDGER_CODE,\nBALANCE,\nTIME_PERIOD,\nMODALITY_TYPE,\nsens_type,\ntasir_name\nFROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = '||INPAR_ID||' AND MODALITY_TYPE IN (1,2)  )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ( '||VAR_PIVOT||'))\n\nunion\n\nSELECT NAME as \"text\",\nLEDGER_CODE as \"code\",MODALITY_TYPE as \"type\", '||VAR_SELECT||', parent as \"parent\",sens_type as \"sensType\" ,tasir_name as \"tasirName\"  FROM (\nSELECT NAME,\nparent,\nLEDGER_CODE,\nBALANCE,\nTIME_PERIOD,\nMODALITY_TYPE,\nsens_type,\ntasir_name\nFROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ =  '||INPAR_ID||'  AND MODALITY_TYPE IN (111,211)   )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ('||VAR_PIVOT||'))\n\n\n\nunion\nSELECT NAME as \"text\", \nLEDGER_CODE as \"code\",MODALITY_TYPE as \"type\", '||VAR_SELECT||',\"parent\",sens_type as \"sensType\"  ,tasir_name as \"tasirName\" FROM (\nSELECT NAME,\nparent  as \"parent\",\nLEDGER_CODE,\nBALANCE,\nTIME_PERIOD,\nMODALITY_TYPE,\nparent,\nsens_type,\ntasir_name\nFROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE parent is not null and REPREQ =  '||INPAR_ID||'  )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ('||VAR_PIVOT||'))\n\n\nUNION \n\n\nSELECT   NAME as \"text\",1 as \"code\" , MODALITY_TYPE as \"type\", '||VAR_SELECT||',\"parent\" ,sens_type as \"sensType\" ,tasir_name as \"tasirName\" \nFROM (\nSELECT ''NO_NAME'' as name,\nmax(parent)  as \"parent\",\nSUM(BALANCE) AS BALANCE,\nTIME_PERIOD,\n MODALITY_TYPE,\n sens_type,\n tasir_name\n FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ =   '||INPAR_ID||'  AND MODALITY_TYPE IN (11,21)  GROUP BY MODALITY_TYPE,TIME_PERIOD,sens_type,tasir_name )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ('||VAR_PIVOT||'))\n\n\nORDER BY \"type\",\"sensType\"';\n\n\n\n\n \nEND;\n \n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n \n FUNCTION FNC_GAP_NIIM_GET_DETAIL_TIMING(INPAR_ID NUMBER)RETURN VARCHAR2 AS\n VAR_SELECT VARCHAR2(30000);\n VAR_PIVOT VARCHAR2(30000);\n \nBEGIN\n\n\nreturn 'SELECT DISTINCT    ''x''||TIME_PERIOD \"value\"  , PERIOD_NAME \"header\" FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = '||INPAR_ID||' and sens_type = 0  and TIME_PERIOD is not null and PERIOD_NAME is not null ORDER BY \"value\"';\n\nEND;\n \n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_taAhodi_VALUE AS\n VAR_DATE   DATE;\n VAR_MAX    DATE;\nBEGIN\n\nexecute immediate 'truncate table TBL_GAP_NIIM_VALUE';\n\n SELECT /*+ PARALLEL(auto)   */\n   case when MAX(TRUNC(DUE_DATE) ) is null then trunc(sysdate) else MAX(TRUNC(DUE_DATE) ) end\n INTO\n  VAR_MAX\n FROM TBL_VALUE_temp;\n\n VAR_DATE   := SYSDATE;\n \n LOOP\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_VALUE ( TYPE,GAP_RATE,EFF_DATE ) ( SELECT\n   ID\n  ,RATE\n  ,DT\n  FROM (\n    SELECT /*+  PARALLEL(auto)   */\n     REF_MODALITY_TYPE as id\n    ,ROUND(\n      SUM(BALANCE) / 30\n     ,2\n     ) as rate\n     ,DUE_DATE\n    FROM TBL_VALUE_temp\n    WHERE DUE_DATE BETWEEN TRUNC(VAR_DATE) AND TRUNC(VAR_DATE + 30)\n     AND\n      REF_MODALITY_TYPE IN (\n       11,21\n      ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n    GROUP BY\n     REF_MODALITY_TYPE,DUE_DATE\n   )\n  ,    (\n    SELECT /*+  PARALLEL(auto)   */\n     TRUNC(VAR_DATE - 1 + ROWNUM) DT\n    FROM DUAL\n    CONNECT BY\n     ROWNUM \u003c 31\n   ) where dt\u003c= DUE_DATE \n  );\n\n  COMMIT;\n  VAR_DATE   := VAR_DATE + 30;\n  EXIT WHEN trunc(VAR_DATE) \u003e trunc(VAR_MAX);\n END LOOP;\n\nEND PRC_GAP_NIIM_taAhodi_VALUE;\n\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_GAP_NIIM_tasir_hasasiat  (\n  INPAR_ID_REPORT   IN VARCHAR2\n  , VAR_REPREQ   IN VARCHAR2\n   ,ID_TIMING in varchar2\n  \n ) as \n   var_2111_nabashe number;\n     VAR_QUERY     VARCHAR2(4000);\n     DATE_TYPE1 date;\n\n BEGIN\n\n\n\n for i in (\n\nselect * from ( select 1 as \"type\" ,regexp_substr(str, '[^,]+', 1, 1) as name, \n       regexp_substr(str, '[^,]+', 1, 2) as rate\n       from (select regexp_substr (FIRST_DATE, '[^#]+',1, rownum) str\nfrom tbl_report where ID = INPAR_ID_REPORT\nconnect by level \u003c= regexp_count (FIRST_DATE, '[^#]+')))  where name is not null ) loop\n \n \n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,TASIR_NAME\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS( case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,1\n  ,i.name\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    1,2\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE;\n\n  COMMIT;\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,TASIR_NAME\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS( case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,1\n  ,i.name\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    11,21\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE\n;\n  COMMIT;\n  \n  \n  \n  --=================\n  \n   INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n      ,TASIR_NAME\n  )\n  VALUES\n  (\n    \n    'سپرده ها'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,0\n    ,1\n      ,i.name\n  );\n  \n  commit;\n  --================\n  \n    INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n    ,TASIR_NAME\n  )\n  VALUES\n  (\n    \n    'تسهيلات'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,1\n    ,1\n     ,i.name\n   \n  );\n  \n  commit;\n  \n  \n  --================\n  \n  \n  \n  \n  \n  \n  UPDATE TBL_GAP_NIIM_PROFILE_DETAIL GNPD SET GNPD.PERIOD_NAME = \n(\nSELECT TBL_TIMING_PROFILE_DETAIL.PERIOD_NAME FROM TBL_TIMING_PROFILE_DETAIL  WHERE TBL_TIMING_PROFILE_DETAIL.ID = GNPD.TIME_PERIOD\n)\nWHERE GNPD.REPREQ = VAR_REPREQ;\n\nCOMMIT;\n  \n  PKG_GAP_NIIM.PRC_GAP_NIIM_taAhodi_VALUE();\n  DATE_TYPE1:=trunc(sysdate);\n  FOR j IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  \n  )\n  LOOP\n  \nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = j.id and modality_type = 21 and SENS_TYPE=1 AND TASIR_NAME = I.name ;\nif( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n     ,TASIR_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,j.id,21,1 ,i.name from dual;\nend if;\nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = j.id and modality_type = 11 and SENS_TYPE=1 AND TASIR_NAME = I.name ;\n  if( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,TASIR_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,j.id,11,1 ,i.name from dual;\n  end if;\n\n    IF ( j.TYPE = 1 ) THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',111,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || j.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',211,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || j.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n\n      ------/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\//\\/\\/\\/\\/\\/\\/\\/\\/\\/\n      \n\n      \n      DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(j.PERIOD_DATE);\n      \n      \n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',111,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11 AND eff_date \u003e to_date(''' ||\n     j.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     j.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',211,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21 AND eff_date \u003e to_date(''' ||\n     j.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     j.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n            \n\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n  end if;\n  end loop;\n  end loop;\n\n\n\n end;\n \n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n \nEND PKG_GAP_NIIM;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_GAP_NIIM\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_GAP_NIIM_PROFILE_REPORT (\n  INPAR_NAME                  IN VARCHAR2\n ,INPAR_DES                   IN VARCHAR2\n ,INPAR_REF_USER              IN VARCHAR2\n ,INPAR_STATUS                IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE      IN VARCHAR2\n ,INPAR_ID                    IN VARCHAR2\n ,INPAR_TYPE                  IN VARCHAR2\n ,INPAR_TIMING_PROFILE        IN VARCHAR2\n ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,INPAR_CUS_PROFILE           IN VARCHAR2\n ,INPAR_CUR_PROFILE           IN VARCHAR2\n ,INPAR_BRN_PROFILE           IN VARCHAR2\n ,INPAR_TIMING_PROFILE_TYPE   IN VARCHAR2\n ,inpar_tahlil_hasasiat     in varchar2 ,\n inpar_tasir_hasasiat      in varchar2  \n ,OUTPAR_ID                   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_REPORT_VALUE ( INPAR_ID_REPORT IN VARCHAR2 );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_taAhodi_VALUE ;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_sens ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_QUERY ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_DETAIL_TIMING ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_tasir_hasasiat  (\n  INPAR_ID_REPORT   IN VARCHAR2\n  , VAR_REPREQ   IN VARCHAR2\n  ,ID_TIMING in varchar2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_GAP_NIIM;"},{"Name":"PKG_GAP_NIIM","ObjectID":295600,"Digest":"2e65bc4b1ee7ed9d7c1686f86736743cfae29423c536602b558efa33b12e9217","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_GAP_NIIM\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_GAP_NIIM_PROFILE_REPORT (\n  INPAR_NAME                  IN VARCHAR2\n ,INPAR_DES                   IN VARCHAR2\n ,INPAR_REF_USER              IN VARCHAR2\n ,INPAR_STATUS                IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE      IN VARCHAR2\n ,INPAR_ID                    IN VARCHAR2\n ,INPAR_TYPE                  IN VARCHAR2\n ,INPAR_TIMING_PROFILE        IN VARCHAR2\n ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,INPAR_CUS_PROFILE           IN VARCHAR2\n ,INPAR_CUR_PROFILE           IN VARCHAR2\n ,INPAR_BRN_PROFILE           IN VARCHAR2\n ,INPAR_TIMING_PROFILE_TYPE   IN VARCHAR2\n ,inpar_tahlil_hasasiat     in varchar2 ,\n inpar_tasir_hasasiat      in varchar2  \n ,OUTPAR_ID                   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_REPORT_VALUE ( INPAR_ID_REPORT IN VARCHAR2 );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_taAhodi_VALUE ;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_sens ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_QUERY ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_DETAIL_TIMING ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_tasir_hasasiat  (\n  INPAR_ID_REPORT   IN VARCHAR2\n  , VAR_REPREQ   IN VARCHAR2\n  ,ID_TIMING in varchar2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_GAP_NIIM;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_GAP_NIIM\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_TIMING_PROFILE     IN VARCHAR2\n ,INPAR_DEP_PROFILE        IN VARCHAR2\n ,INPAR_LON_PROFILE        IN VARCHAR2\n ,INPAR_CUS_PROFILE        IN VARCHAR2\n ,INPAR_CUR_PROFILE        IN VARCHAR2\n ,INPAR_BRN_PROFILE        IN VARCHAR2,\n inpar_timing_profile_type in varchar2,\n inpar_tahlil_hasasiat     in varchar2,   --ke dar sotoone REF_LEDGER_PROFIEL dar jadvale report rikhte mishavad\n inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone FIRST_DATE dar jadvale report rikhte mishavad\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ,REF_TIMING_PROFILE\n   ,REF_LON_PROFILE\n   ,REF_DEP_PROFILE\n   ,REF_CUS_PROFILE\n   ,REF_CUR_PROFILE\n   ,REF_BRN_PROFILE\n   ,TIMING_PROFILE_TYPE\n   ,REF_LEDGER_PROFIEL\n   ,FIRST_DATE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'GAP_NIIM'\n   ,INPAR_TYPE\n   ,INPAR_TIMING_PROFILE\n   ,INPAR_LON_PROFILE\n   ,INPAR_DEP_PROFILE\n   ,INPAR_CUS_PROFILE\n   ,INPAR_CUR_PROFILE\n   ,INPAR_BRN_PROFILE\n   ,inpar_timing_profile_type,\n   inpar_tahlil_hasasiat\n   ,inpar_tasir_hasasiat\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,REF_TIMING_PROFILE = INPAR_TIMING_PROFILE\n    ,REF_DEP_PROFILE = INPAR_DEP_PROFILE\n    ,REF_LON_PROFILE = INPAR_LON_PROFILE\n    ,REF_CUS_PROFILE = INPAR_CUS_PROFILE\n    ,REF_CUR_PROFILE = INPAR_CUR_PROFILE\n    ,REF_BRN_PROFILE = INPAR_BRN_PROFILE\n    ,TIMING_PROFILE_TYPE = inpar_timing_profile_type\n    ,REF_LEDGER_PROFIEL  = inpar_tahlil_hasasiat\n    ,FIRST_DATE = inpar_tasir_hasasiat\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n   \n   \n   \n   --betoone vase tasir gozareshe jadid besaze\n   update tbl_notifications \n   set flag = 1\n   where ref_report = inpar_id;\n   commit;\n   \n   \n   \n  END IF;\n\n  UPDATE TBL_REPORT\n   SET\n    H_ID = ID\n  WHERE TYPE   = 'GAP_NIIM'\n   AND\n    H_ID IS NULL;\n\n  COMMIT;\n END PRC_GAP_NIIM_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_REPORT_VALUE ( INPAR_ID_REPORT IN VARCHAR2 ) AS\n  /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/02/24-10:00\n  Edit Name:\n  Version: 1.1\n  Category:2\n  Description:in procedure baraye enteghal dadehaye morde niaz az value be TBL_VALUE_TEMP bar asas profilehaye mokhtalefist ke karbar taeen karde\n  */\n  /*------------------------------------------------------------------------------*/\n\n  VAR_QUERY     VARCHAR2(4000);\n  ID_LOAN       NUMBER;\n  ID_DEP        NUMBER;\n  ID_CUR        NUMBER;\n  ID_CUS        NUMBER;\n  ID_BRANCH     NUMBER;\n  ID_TIMING     NUMBER;\n  DATE_TYPE1    DATE := SYSDATE;\n  LOC_S         TIMESTAMP;\n  LOC_F         TIMESTAMP;\n  LOC_MEGHDAR   NUMBER;\n  VAR_REPREQ    NUMBER;\n  var_2111_nabashe number;\n BEGIN\n  EXECUTE IMMEDIATE 'alter session set nls_date_format=''DD-MM-RRRR''';\n  SYS.DBMS_OUTPUT.ENABLE(3000000);\n  EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n  /******profilhaye mokhtalefi ke karbar baraye in gozaresh entekhab karde ra daron moteghayer ham nam profil mirizim ******/\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_ID_REPORT;\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_CUR\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_CUR_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_CUS\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_CUS_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_BRANCH\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_BRN_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_DEP\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_DEP_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_TIMING\n  FROM TBL_TIMING_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_TIMING_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n\n  SELECT\n   MAX(ID)\n  INTO\n   ID_LOAN\n  FROM TBL_PROFILE\n  WHERE H_ID   = (\n    SELECT\n     REF_LON_PROFILE\n    FROM TBL_REPORT\n    WHERE ID   = INPAR_ID_REPORT\n   );\n  /******be ezaye tedad bazehayee ke dar profile zamani vojod darad halghe ro ejra mikonim*****--*/\n\n  FOR I IN (\n   SELECT\n    TTPD.ID\n   ,TTP.TYPE\n   ,TTPD.PERIOD_NAME\n   ,TTPD.PERIOD_DATE\n   ,TTPD.PERIOD_START\n   ,TTPD.PERIOD_END\n   ,TTPD.PERIOD_COLOR\n   FROM TBL_TIMING_PROFILE TTP\n   ,    TBL_TIMING_PROFILE_DETAIL TTPD\n   WHERE TTP.ID   = TTPD.REF_TIMING_PROFILE\n    AND\n     TTP.ID   = ID_TIMING\n  ) LOOP\n   IF\n    ( I.TYPE = 1 )\n   THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ')  AND DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''')+' ||\n     I.PERIOD_DATE ||\n     '  ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color\n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ')  AND DUE_DATE \u003e to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''') and DUE_DATE \u003c= to_date(''' ||\n     DATE_TYPE1 ||\n     ''',''dd-mm-yyyy'''''')+' ||\n     I.PERIOD_DATE ||\n     '  ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    DATE_TYPE1   := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n   ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',ID_DEP) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ') AND DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    SELECT\n     '  \nINSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_VALUE_TEMP  \n(    \nREF_MODALITY_TYPE,\nREF_ID,\nBALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID  ,\nREF_TIMING_ID,\nTIMING_NAME,\nTIMING_color \n) \nSELECT /*+   PARALLEL(auto)   */ REF_MODALITY_TYPE,\nREF_ID,\ncase when REF_MODALITY_TYPE in (2,21) then  -1*BALANCE else BALANCE end as BALANCE,\nREF_BRANCH,\nDUE_DATE,\nREF_TYPE,\nREF_LEGER_CODE,\nREF_CUR_ID,\nREF_STA_ID,\nREF_CTY_ID,\nREF_CUS_ID,\n''' ||\n     I.ID ||\n     ''',\n''' ||\n     I.PERIOD_NAME ||\n     ''',\n''' ||\n     I.PERIOD_COLOR ||\n     '''\nFROM TBL_VALUE WHERE REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',ID_LOAN) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',ID_CUR) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',ID_CUS) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',ID_BRANCH) ||\n     ') AND DUE_DATE \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and DUE_DATE \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n   END IF;\n  END LOOP;\n\n  COMMIT;\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS(BALANCE) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,0\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    1,2\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE;\n\n  COMMIT;\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS(BALANCE) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,0\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    11,21\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE\n;\n  COMMIT;\n   --=================   hazfe sarfaslhaee ke dar tamame bazeha sefrand;\n  \n   delete from TBL_GAP_NIIM_PROFILE_DETAIL where \n LEDGER_CODE in (\n select LEDGER_CODE from ( select LEDGER_CODE,SUM(BALANCE)as BALANCE from TBL_GAP_NIIM_PROFILE_DETAIL where REPREQ =VAR_REPREQ\n group by LEDGER_CODE) where BALANCE = 0\n \n ) and REPREQ =VAR_REPREQ ;\n \n  COMMIT;\n\n  --=================\n  \n   INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n  )\n  VALUES\n  (\n    \n    'سپرده ها'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,0\n    ,0\n  );\n  \n  commit;\n  --================\n  \n    INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n  )\n  VALUES\n  (\n    \n    'تسهيلات'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,1\n    ,0\n  );\n  \n  commit;\n  \n  \n  --================\n  \n  \n  \n  \n  \n  \n  UPDATE TBL_GAP_NIIM_PROFILE_DETAIL GNPD SET GNPD.PERIOD_NAME = \n(\nSELECT TBL_TIMING_PROFILE_DETAIL.PERIOD_NAME FROM TBL_TIMING_PROFILE_DETAIL  WHERE TBL_TIMING_PROFILE_DETAIL.ID = GNPD.TIME_PERIOD\n)\nWHERE GNPD.REPREQ = VAR_REPREQ;\n\nCOMMIT;\n  \n  PKG_GAP_NIIM.PRC_GAP_NIIM_taAhodi_VALUE();\n  DATE_TYPE1:=trunc(sysdate);\n  FOR I IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  )\n  LOOP\n  \nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = i.id and modality_type = 21 and SENS_TYPE=0;\nif( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,PERIOD_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,i.id,21,0,i.PERIOD_NAME from dual;\nend if;\nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = i.id and modality_type = 11 and SENS_TYPE=0;\n  if( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,PERIOD_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,i.id,11,0,i.PERIOD_NAME from dual;\n  end if;\n\n    IF ( I.TYPE = 1 ) THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',111,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',211,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || I.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n\n      ------/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\//\\/\\/\\/\\/\\/\\/\\/\\/\\/\n      \n\n      \n      DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(I.PERIOD_DATE);\n      \n      \n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',111,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11 AND eff_date \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     I.ID ||\n     ''',211,0\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21 AND eff_date \u003e to_date(''' ||\n     I.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     I.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n            \n\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n  end if;\n  end loop;\n  commit;\n  PKG_GAP_NIIM.PRC_GAP_NIIM_tasir_hasasiat(INPAR_ID_REPORT,VAR_REPREQ,ID_TIMING);\n  commit;\n  /*-------------------------*/\n  LOC_F         := SYSTIMESTAMP;\n  LOC_MEGHDAR   := SQL%ROWCOUNT;\n/* EXCEPTION*/\n/*  WHEN OTHERS THEN*/\n/*   RAISE;*/\n END PRC_GAP_NIIM_REPORT_VALUE;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE PRC_gap_niim_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_gap_niim_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GAP_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\",\n  ref_timing_profile as \"timeProfile\",\n  ref_dep_profile as \"depProfile\",\n  ref_lon_profile as \"lonProfile\",\n  ref_cus_profile as \"cusProfile\",\n  ref_cur_profile as \"curProfile\",\n  ref_brn_profile as \"brnProfile\",\n  timing_profile_type as \"timingType\",\n  REF_LEDGER_PROFIEL as \"tahlilHasasiat\",\n  first_date as \"tasir\"\n FROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''GAP_NIIM'' order by id';\n  RETURN VAR2;\n END FNC_GAP_NIIM_GET_REPORT_INFO;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n--FUNCTION FNC_GAP_NIIM_GET_REPORT_sens ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n--  VAR2   VARCHAR2(3000);\n--  var_tahlil VARCHAR2(3000);\n--  var_report VARCHAR2(3000);\n-- BEGIN\n-- select REF_REPORT_ID into var_report from TBL_REPREQ where ID = INPAR_ID; \n-- select REF_LEDGER_PROFIEL into var_tahlil from tbl_report where ID = var_report;\n--\n--\n--if(var_tahlil is null) then\n--\n--var2:='  select id as \"name\",NAME as \"rate\" from tbl_report where id = 0\n--';\n--\n--else\n--  VAR2   := 'select regexp_substr(str, ''[^,]+'', 1, 1) as \"name\", \n--       regexp_substr(str, ''[^,]+'', 1, 2) as \"rate\"\n--       from (select regexp_substr ('''||var_tahlil||''', ''[^#]+'',1, rownum) str\n--from dual\n--connect by level \u003c= regexp_count ('''||var_tahlil||''', ''[^#]+'')) ';\n--\n--end if;\n--\n--  RETURN VAR2;\n--  \n--\n-- END FNC_GAP_NIIM_GET_REPORT_sens;\n\n\n\n\n\n\n\n\n\nFUNCTION FNC_GAP_NIIM_GET_REPORT_sens(\n    INPAR_ID IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR2       VARCHAR2(3000);\n  var_tahlil VARCHAR2(3000);\n  var_taseer VARCHAR2(3000);\n  var_report VARCHAR2(3000);\n BEGIN\n select REF_REPORT_ID into var_report from TBL_REPREQ where ID = INPAR_ID; \n select REF_LEDGER_PROFIEL into var_tahlil from tbl_report where ID = var_report;\n  select FIRST_DATE into var_taseer from tbl_report where ID = var_report;\n\n\n\nif(var_tahlil is null and var_taseer is null) then\n\nvar2:='  select id as \"name\",NAME as \"rate\" from tbl_report where id = 0\n';\n\nelse\n  VAR2   := '\n  \n  \n  select \"type\",\"name\",\"rate\" from(\n  select 0 as \"type\" ,regexp_substr(str, ''[^,]+'', 1, 1) as \"name\", \n       regexp_substr(str, ''[^,]+'', 1, 2) as \"rate\"\n       from (select regexp_substr ('''||var_tahlil||''', ''[^#]+'',1, rownum) str\nfrom dual\nconnect by level \u003c= regexp_count ('''||var_tahlil||''', ''[^#]+'')) \n\n\n\nunion\n\n\n\nselect 1 as \"type\" ,regexp_substr(str, ''[^,]+'', 1, 1) as \"name\", \n       regexp_substr(str, ''[^,]+'', 1, 2) as \"rate\"\n       from (select regexp_substr ('''||var_taseer||''', ''[^#]+'',1, rownum) str\nfrom dual\nconnect by level \u003c= regexp_count ('''||var_taseer||''', ''[^#]+'')) ) where \"name\" is not null\n\n';\n\nend if;\n\n  RETURN VAR2;\n  \n\n END FNC_GAP_NIIM_GET_REPORT_sens;\n\n\n\n\n\n\n\n\n\n\n\n\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n \n FUNCTION FNC_GAP_NIIM_GET_REPORT_QUERY(INPAR_ID NUMBER)RETURN VARCHAR2 AS\n VAR_SELECT VARCHAR2(30000);\n VAR_PIVOT VARCHAR2(30000);\n \nBEGIN\n\nSELECT WMSYS.WM_CONCAT(TIME_PERIOD)  into VAR_PIVOT   FROM \n(SELECT DISTINCT  TIME_PERIOD  || ' AS \"x' || TIME_PERIOD ||'\"' AS TIME_PERIOD FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = INPAR_ID and SENS_TYPE=0 and time_period is not null ORDER BY TIME_PERIOD);\n\nSELECT WMSYS.WM_CONCAT(TIME_PERIOD)  into VAR_SELECT   FROM \n(SELECT DISTINCT   '  nvl(\"x' || TIME_PERIOD ||'\",0)  AS \"x' || TIME_PERIOD ||'\"' AS TIME_PERIOD  FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = INPAR_ID and SENS_TYPE=0 and  time_period is not null ORDER BY TIME_PERIOD);\n\n-- SELECT DISTINCT   TIME_PERIOD  , PERIOD_NAME FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = INPAR_ID ORDER BY TIME_PERIOD;\n\n\nreturn\n'\nSELECT NAME as \"text\",\nLEDGER_CODE as \"code\",MODALITY_TYPE as \"type\", '||VAR_SELECT||', parent as \"parent\",\nsens_type as \"sensType\",tasir_name as \"tasirName\" FROM (\nSELECT NAME,\nparent,\nLEDGER_CODE,\nBALANCE,\nTIME_PERIOD,\nMODALITY_TYPE,\nsens_type,\ntasir_name\nFROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = '||INPAR_ID||' AND MODALITY_TYPE IN (1,2)  )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ( '||VAR_PIVOT||'))\n\nunion\n\nSELECT NAME as \"text\",\nLEDGER_CODE as \"code\",MODALITY_TYPE as \"type\", '||VAR_SELECT||', parent as \"parent\",sens_type as \"sensType\" ,tasir_name as \"tasirName\"  FROM (\nSELECT NAME,\nparent,\nLEDGER_CODE,\nBALANCE,\nTIME_PERIOD,\nMODALITY_TYPE,\nsens_type,\ntasir_name\nFROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ =  '||INPAR_ID||'  AND MODALITY_TYPE IN (111,211)   )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ('||VAR_PIVOT||'))\n\n\n\nunion\nSELECT NAME as \"text\", \nLEDGER_CODE as \"code\",MODALITY_TYPE as \"type\", '||VAR_SELECT||',\"parent\",sens_type as \"sensType\"  ,tasir_name as \"tasirName\" FROM (\nSELECT NAME,\nparent  as \"parent\",\nLEDGER_CODE,\nBALANCE,\nTIME_PERIOD,\nMODALITY_TYPE,\nparent,\nsens_type,\ntasir_name\nFROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE parent is not null and REPREQ =  '||INPAR_ID||'  )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ('||VAR_PIVOT||'))\n\n\nUNION \n\n\nSELECT   NAME as \"text\",1 as \"code\" , MODALITY_TYPE as \"type\", '||VAR_SELECT||',\"parent\" ,sens_type as \"sensType\" ,tasir_name as \"tasirName\" \nFROM (\nSELECT ''NO_NAME'' as name,\nmax(parent)  as \"parent\",\nSUM(BALANCE) AS BALANCE,\nTIME_PERIOD,\n MODALITY_TYPE,\n sens_type,\n tasir_name\n FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ =   '||INPAR_ID||'  AND MODALITY_TYPE IN (11,21)  GROUP BY MODALITY_TYPE,TIME_PERIOD,sens_type,tasir_name )\nPIVOT (SUM(BALANCE) FOR TIME_PERIOD IN ('||VAR_PIVOT||'))\n\n\nORDER BY \"type\",\"sensType\"';\n\n\n\n\n \nEND;\n \n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n \n FUNCTION FNC_GAP_NIIM_GET_DETAIL_TIMING(INPAR_ID NUMBER)RETURN VARCHAR2 AS\n VAR_SELECT VARCHAR2(30000);\n VAR_PIVOT VARCHAR2(30000);\n \nBEGIN\n\n\nreturn 'SELECT DISTINCT    ''x''||TIME_PERIOD \"value\"  , PERIOD_NAME \"header\" FROM TBL_GAP_NIIM_PROFILE_DETAIL WHERE REPREQ = '||INPAR_ID||' and sens_type = 0  and TIME_PERIOD is not null and PERIOD_NAME is not null ORDER BY \"value\"';\n\nEND;\n \n  /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_taAhodi_VALUE AS\n VAR_DATE   DATE;\n VAR_MAX    DATE;\nBEGIN\n\nexecute immediate 'truncate table TBL_GAP_NIIM_VALUE';\n\n SELECT /*+ PARALLEL(auto)   */\n   case when MAX(TRUNC(DUE_DATE) ) is null then trunc(sysdate) else MAX(TRUNC(DUE_DATE) ) end\n INTO\n  VAR_MAX\n FROM TBL_VALUE_temp;\n\n VAR_DATE   := SYSDATE;\n \n LOOP\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_VALUE ( TYPE,GAP_RATE,EFF_DATE ) ( SELECT\n   ID\n  ,RATE\n  ,DT\n  FROM (\n    SELECT /*+  PARALLEL(auto)   */\n     REF_MODALITY_TYPE as id\n    ,ROUND(\n      SUM(BALANCE) / 30\n     ,2\n     ) as rate\n     ,DUE_DATE\n    FROM TBL_VALUE_temp\n    WHERE DUE_DATE BETWEEN TRUNC(VAR_DATE) AND TRUNC(VAR_DATE + 30)\n     AND\n      REF_MODALITY_TYPE IN (\n       11,21\n      ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n    GROUP BY\n     REF_MODALITY_TYPE,DUE_DATE\n   )\n  ,    (\n    SELECT /*+  PARALLEL(auto)   */\n     TRUNC(VAR_DATE - 1 + ROWNUM) DT\n    FROM DUAL\n    CONNECT BY\n     ROWNUM \u003c 31\n   ) where dt\u003c= DUE_DATE \n  );\n\n  COMMIT;\n  VAR_DATE   := VAR_DATE + 30;\n  EXIT WHEN trunc(VAR_DATE) \u003e trunc(VAR_MAX);\n END LOOP;\n\nEND PRC_GAP_NIIM_taAhodi_VALUE;\n\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_GAP_NIIM_tasir_hasasiat  (\n  INPAR_ID_REPORT   IN VARCHAR2\n  , VAR_REPREQ   IN VARCHAR2\n   ,ID_TIMING in varchar2\n  \n ) as \n   var_2111_nabashe number;\n     VAR_QUERY     VARCHAR2(4000);\n     DATE_TYPE1 date;\n\n BEGIN\n\n\n\n for i in (\n\nselect * from ( select 1 as \"type\" ,regexp_substr(str, '[^,]+', 1, 1) as name, \n       regexp_substr(str, '[^,]+', 1, 2) as rate\n       from (select regexp_substr (FIRST_DATE, '[^#]+',1, rownum) str\nfrom tbl_report where ID = INPAR_ID_REPORT\nconnect by level \u003c= regexp_count (FIRST_DATE, '[^#]+')))  where name is not null ) loop\n \n \n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,TASIR_NAME\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS( case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,1\n  ,i.name\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    1,2\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE;\n\n  COMMIT;\n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,TASIR_NAME\n  ) SELECT /*+  PARALLEL(auto)   */\n   (\n    SELECT\n     NAME\n    FROM TBL_LEDGER\n    WHERE TBL_LEDGER.LEDGER_CODE   = REF_LEGER_CODE\n   )\n  ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n  ,REF_LEGER_CODE\n  ,SUM(ABS( case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) )\n  ,REF_TIMING_ID\n  ,MAX(REF_MODALITY_TYPE)\n  ,1\n  ,i.name\n  FROM TBL_VALUE_TEMP\n  WHERE REF_MODALITY_TYPE IN (\n    11,21\n   ) AND TBL_VALUE_TEMP.REF_TYPE NOT IN (40,3,7,15,41,31,21,55,10,1)\n  GROUP BY\n   REF_TIMING_ID\n  ,REF_LEGER_CODE\n;\n  COMMIT;\n  \n  \n  \n  --=================\n  \n   INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n      ,TASIR_NAME\n  )\n  VALUES\n  (\n    \n    'سپرده ها'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,0\n    ,1\n      ,i.name\n  );\n  \n  commit;\n  --================\n  \n    INSERT /*+ APPEND PARALLEL(auto)   */\nINTO TBL_GAP_NIIM_PROFILE_DETAIL\n  (\n   \n    name,\n    REF_REPORT,\n    REPREQ,\n    PARENT,\n    SENS_TYPE\n    ,TASIR_NAME\n  )\n  VALUES\n  (\n    \n    'تسهيلات'\n    ,INPAR_ID_REPORT\n  ,VAR_REPREQ\n    ,1\n    ,1\n     ,i.name\n   \n  );\n  \n  commit;\n  \n  \n  --================\n  \n  \n  \n  \n  \n  \n  UPDATE TBL_GAP_NIIM_PROFILE_DETAIL GNPD SET GNPD.PERIOD_NAME = \n(\nSELECT TBL_TIMING_PROFILE_DETAIL.PERIOD_NAME FROM TBL_TIMING_PROFILE_DETAIL  WHERE TBL_TIMING_PROFILE_DETAIL.ID = GNPD.TIME_PERIOD\n)\nWHERE GNPD.REPREQ = VAR_REPREQ;\n\nCOMMIT;\n  \n  PKG_GAP_NIIM.PRC_GAP_NIIM_taAhodi_VALUE();\n  DATE_TYPE1:=trunc(sysdate);\n  FOR j IN\n  (SELECT TTPD.ID ,\n    TTP.TYPE ,\n    TTPD.PERIOD_NAME ,\n    TTPD.PERIOD_DATE ,\n    TTPD.PERIOD_START ,\n    TTPD.PERIOD_END ,\n    TTPD.PERIOD_COLOR\n  FROM TBL_TIMING_PROFILE TTP ,\n    TBL_TIMING_PROFILE_DETAIL TTPD\n  WHERE TTP.ID = TTPD.REF_TIMING_PROFILE\n  AND TTP.ID   = ID_TIMING\n  \n  )\n  LOOP\n  \nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = j.id and modality_type = 21 and SENS_TYPE=1 AND TASIR_NAME = I.name ;\nif( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n     ,TASIR_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,j.id,21,1 ,i.name from dual;\nend if;\nselect count (*) into var_2111_nabashe from tbl_gap_niim_profile_detail where repreq = VAR_REPREQ and time_period = j.id and modality_type = 11 and SENS_TYPE=1 AND TASIR_NAME = I.name ;\n  if( var_2111_nabashe = 0) then\nINSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,SENS_TYPE\n  ,TASIR_NAME\n  )\n  select 'no_name',INPAR_ID_REPORT,VAR_REPREQ,0,0,j.id,11,1 ,i.name from dual;\n  end if;\n\n    IF ( j.TYPE = 1 ) THEN\n      /******agar profile zamani entekhab shode bazehee bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',111,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || j.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',211,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21  AND eff_date \u003e to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''') and eff_date \u003c= to_date('''\n        || DATE_TYPE1\n        || ''',''dd-mm-yyyy'''''')+'\n        || j.PERIOD_DATE\n        || '  ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n\n      ------/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\//\\/\\/\\/\\/\\/\\/\\/\\/\\/\n      \n\n      \n      DATE_TYPE1 := DATE_TYPE1 + TO_NUMBER(j.PERIOD_DATE);\n      \n      \n    ELSE\n      /******agar profile zamani entekhab shode tarikhi bashad *****--*/\n      SELECT '  \n INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',111,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 11 AND eff_date \u003e to_date(''' ||\n     j.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     j.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n      COMMIT;\n      SELECT '  \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_GAP_NIIM_PROFILE_DETAIL (\n   NAME\n  ,REF_REPORT\n  ,REPREQ\n  ,LEDGER_CODE\n  ,BALANCE\n  ,TIME_PERIOD\n  ,MODALITY_TYPE\n  ,sens_type\n  ,TASIR_NAME\n  )\n  SELECT /*+   PARALLEL(auto)   */ null,'||INPAR_ID_REPORT||','||VAR_REPREQ||',null,sum(gap_rate),\n''' ||\n     j.ID ||\n     ''',211,1,'''||i.name||'''\nFROM TBL_GAP_NIIM_VALUE WHERE type = 21 AND eff_date \u003e to_date(''' ||\n     j.PERIOD_START ||\n     ''',''dd-mm-yyyy'') and eff_date \u003c= to_date(''' ||\n     j.PERIOD_END ||\n     ''',''dd-mm-yyyy'') ;'\n      INTO VAR_QUERY\n      FROM DUAL;\n            \n\n      EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n  end if;\n  end loop;\n  end loop;\n\n\n\n end;\n \n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n \nEND PKG_GAP_NIIM;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_GAP_NIIM\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_GAP_NIIM_PROFILE_REPORT (\n  INPAR_NAME                  IN VARCHAR2\n ,INPAR_DES                   IN VARCHAR2\n ,INPAR_REF_USER              IN VARCHAR2\n ,INPAR_STATUS                IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE      IN VARCHAR2\n ,INPAR_ID                    IN VARCHAR2\n ,INPAR_TYPE                  IN VARCHAR2\n ,INPAR_TIMING_PROFILE        IN VARCHAR2\n ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,INPAR_CUS_PROFILE           IN VARCHAR2\n ,INPAR_CUR_PROFILE           IN VARCHAR2\n ,INPAR_BRN_PROFILE           IN VARCHAR2\n ,INPAR_TIMING_PROFILE_TYPE   IN VARCHAR2\n ,inpar_tahlil_hasasiat     in varchar2 ,\n inpar_tasir_hasasiat      in varchar2  \n ,OUTPAR_ID                   OUT VARCHAR2\n );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_REPORT_VALUE ( INPAR_ID_REPORT IN VARCHAR2 );\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_taAhodi_VALUE ;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_sens ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_REPORT_QUERY ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_GAP_NIIM_GET_DETAIL_TIMING ( INPAR_ID NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_GAP_NIIM_tasir_hasasiat  (\n  INPAR_ID_REPORT   IN VARCHAR2\n  , VAR_REPREQ   IN VARCHAR2\n  ,ID_TIMING in varchar2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_GAP_NIIM;"},{"Name":"PKG_COM","ObjectID":280477,"Digest":"a1708338ffbc15d259c64fd77b25943215940300097f9d93132a5be8971164a9","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COM\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_COM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_CREATE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_BRANCH             IN VARCHAR2\n ,INPAR_DEPOSIT            IN VARCHAR2\n ,INPAR_CUSTOMER           IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_BAZEH              IN VARCHAR2\n ,INPAR_CURRENCY           IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_FILL_SCALE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE_MAIN;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE (\n  INPAR_LEDGER_CODE   IN NUMBER\n ,INPAR_TYPE          IN NUMBER\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_LEDGER_TYPE RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DIRECT_COST ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_final_result ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_final_result(inpar_repreq IN NUMBER ,inpar_type IN NUMBER ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*SELECT nvl((\"TDC\"- (\"VT\"/100000*0.4))/\"VT\"*(1-0.5-0.6),0),type,DURATION_PRIORITY\n FROM (\n  SELECT\n   TBL_COM_DIRECT_COST.REF_REPORT\n  ,TBL_COM_DIRECT_COST.REF_REPREQ\n  ,TYPE\n  ,TBL_COM_DIRECT_COST.DURATION_PRIORITY\n  ,TBL_COM_DIRECT_COST.DURATION_TYPE\n  ,NAME\n  ,TBL_COM_DIRECT_COST.BALANCE\n  FROM TBL_COM_DIRECT_COST\n  WHERE REF_REPORT   = 1848\n   AND\n    REF_REPREQ   = 1392 and name in ('TDC'  ,'VT'  )\n )\n  PIVOT ( SUM ( BALANCE )\n   FOR NAME\n   IN ( 'TDC' as \"TDC\",'VT' as \"VT\" )\n  )\n  order by type,DURATION_PRIORITY;*/\n  \n  \n  \n  \n  \n /* \n  select balance from TBL_COM_DIRECT_COST  where name = 'V' and REF_REPREQ = 1392; \n\n  INSERT\nINTO TBL_COM_LEGAL_DEPOSIT_RATE\n  (\n    DEPOSIT_TYPE,\n    RATE,\n    REWARD_RATE\n  )\n  (\n  select distinct ref_deposit_type,case when modality_type = 2 then 0.08 else 0.103 end,case when modality_type = 2 then 0.08*0.01 else 0.103*0.01 end  from akin.tbl_deposit);\n*/\nEND PKG_COM;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_COM\" AS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Description:\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n END PRC_COM_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_CREATE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_BRANCH             IN VARCHAR2\n ,INPAR_DEPOSIT            IN VARCHAR2\n ,INPAR_CUSTOMER           IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_BAZEH              IN VARCHAR2\n ,INPAR_CURRENCY           IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ,REF_DEP_PROFILE\n   ,REF_CUS_PROFILE\n   ,REF_BRN_PROFILE\n   ,FIRST_DATE\n   ,BAZEH\n   ,REF_CUR_PROFILE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'com2'\n   ,INPAR_TYPE\n   ,INPAR_DEPOSIT\n   ,INPAR_CUSTOMER\n   ,INPAR_BRANCH\n   ,INPAR_FIRST_DATE\n   ,INPAR_BAZEH\n   ,INPAR_CURRENCY\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n     \n     \n       UPDATE TBL_REPORT\n   SET\n    H_ID = OUTPAR_ID\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  COMMIT;\n     \n     \n     \n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,REF_DEP_PROFILE = INPAR_DEPOSIT\n    ,REF_CUS_PROFILE = INPAR_CUSTOMER\n    ,REF_BRN_PROFILE = INPAR_BRANCH\n    ,FIRST_DATE = INPAR_FIRST_DATE\n    ,BAZEH = INPAR_BAZEH\n    ,REF_CUR_PROFILE = INPAR_CURRENCY\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n\n--  UPDATE TBL_REPORT\n--   SET\n--    H_ID = ID\n--  WHERE TYPE   = 'COM2'\n--   AND\n--    H_ID IS NULL;\n\n  COMMIT;\n END PRC_COM_CREATE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_FILL_SCALE AS\n  VAR_SUM   NUMBER;\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_COM_SCALE';\n  SELECT\n   SUM(BALANCE)\n  INTO\n   VAR_SUM\n  FROM AKIN.TBL_DEPOSIT;\n\n  INSERT\n    /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_SCALE ( DEP_ID,BRANCH_ID,SCALE_TO_TOTAL ) ( SELECT\n        /*+   PARALLEL(auto)   */\n   DEP_ID\n  ,REF_BRANCH\n  ,BALANCE / VAR_SUM\n  FROM AKIN.TBL_DEPOSIT\n  );\n\n  COMMIT;\n END PRC_COM_FILL_SCALE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE_MAIN\n  AS\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_COM_LEDGER_TYPE_MAIN';\n  INSERT  /*+   PARALLEL(auto) */ INTO TBL_COM_LEDGER_TYPE_MAIN ( EFF_DATE,AMOUNT,TYPE ) SELECT  /*+   PARALLEL(auto) */\n   EFF_DATE\n  ,SUM(BALANCE)\n  ,1\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE LEDGER_CODE IN (\n    SELECT\n     TBL_COM_LEDGER_TYPE.LEDGER_CODE\n    FROM TBL_COM_LEDGER_TYPE\n    WHERE TBL_COM_LEDGER_TYPE.TYPE   = 1\n   )\n  GROUP BY\n   EFF_DATE\n  UNION\n  SELECT  /*+   PARALLEL(auto) */\n   EFF_DATE\n  ,SUM(BALANCE)\n  ,2\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE LEDGER_CODE IN (\n    SELECT\n     TBL_COM_LEDGER_TYPE.LEDGER_CODE\n    FROM TBL_COM_LEDGER_TYPE\n    WHERE TBL_COM_LEDGER_TYPE.TYPE   = 2\n   )\n  GROUP BY\n   EFF_DATE;\n\n  COMMIT;\n END PRC_COM_LEDGER_TYPE_MAIN;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE (\n  INPAR_LEDGER_CODE   IN NUMBER\n ,INPAR_TYPE          IN NUMBER\n )\n  AS\n BEGIN\n  UPDATE TBL_COM_LEDGER_TYPE\n   SET\n    TYPE = INPAR_TYPE\n  WHERE LEDGER_CODE   = INPAR_LEDGER_CODE;\n\n  COMMIT;\n END PRC_COM_LEDGER_TYPE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_LEDGER_TYPE RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'SELECT id as \"id\",ledger_code as \"code\" ,type as \"type\",name as \"name\" from tbl_com_ledger_type';\n END;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DIRECT_COST ( INPAR_REPORT IN NUMBER ) AS\n\n  VAR_REPREQ             NUMBER;\n  VAR_FIRST_DATE         VARCHAR2(1000);\n  VAR_PERIOD             NUMBER;\n  VAR_DEPOSIT_PROFILE    NUMBER;\n  VAR_BRANCH_PROFILE     NUMBER;\n  VAR_CURRENCY_PROFILE   NUMBER;\n  VAR_CUSTOMER_PROFILE   NUMBER;\n  VAR_QUERY              VARCHAR2(30000);\n  VAR_DATE               VARCHAR2(1000);\n BEGIN\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_REPORT;\n\n  SELECT\n   FIRST_DATE\n  INTO\n   VAR_FIRST_DATE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   BAZEH\n  INTO\n   VAR_PERIOD\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   REF_CUR_PROFILE\n  INTO\n   VAR_CURRENCY_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n--  SELECT\n--   REF_CUS_PROFILE\n--  INTO\n--   VAR_CUSTOMER_PROFILE\n--  FROM TBL_REPORT\n--  WHERE ID   = INPAR_REPORT;\n\nselect null into VAR_CUSTOMER_PROFILE from dual;\n\n\n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   VAR_BRANCH_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   REF_DEP_PROFILE\n  INTO\n   VAR_DEPOSIT_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  IF\n   ( VAR_PERIOD = 1 )\n  THEN\n  /*========== daily*/\n     /*=================================================================================================================================*/\n   FOR I IN 0..30 LOOP\n        /*=================================================================================================================================*/\n\n   /***********************************************************************/\n   /***************************   TDC   ***********************************/\n   /**********************************************************************   */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''TDC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n   /***********************************************************************/\n   /***************************   VT   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''VT''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n   /***********************************************************************/\n   /***************************   ODC   ***********************************/\n   /**********************************************************************   */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''ODC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n     /***********************************************************************/\n   /***************************   VO   ***********************************/\n   /**********************************************************************   */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''VO''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n --  DBMS_OUTPUT.PUT_LINE(var_query);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n   END LOOP;\n  ELSIF ( VAR_PERIOD = 2 ) THEN\n   VAR_DATE   := VAR_FIRST_DATE;\n   /*============= weekly*/\n   /*=================================================================================================================================*/\n   FOR I IN 1..12 LOOP\n   /*=================================================================================================================================*/\n\n   /***********************************************************************/\n   /***************************   TDC   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''TDC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    VAR_DATE   := TO_CHAR(\n     TO_DATE(VAR_DATE,'yyyy-mm-dd') + 7\n    ,'yyyy-mm-dd'\n    );\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n   /***********************************************************************/\n   /***************************   VT   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''VT''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n   /* DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n     /***********************************************************************/\n   /***************************   ODC   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''ODC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n    /***********************************************************************/\n   /***************************   VO   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''VO''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    VAR_DATE   := TO_CHAR(\n     TO_DATE(VAR_DATE,'yyyy-mm-dd') + 7\n    ,'yyyy-mm-dd'\n    );\n   END LOOP;\n\n  ELSIF ( VAR_PERIOD = 3 ) THEN\n   VAR_DATE   := VAR_FIRST_DATE;\n   \n   \n   /*============= monthly*/\n   /*=================================================================================================================================*/\n   FOR I IN 1..12 LOOP\n   /*=================================================================================================================================*/\n\n   /***********************************************************************/\n   /***************************   TDC   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''TDC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n   \n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n   /***********************************************************************/\n   /***************************   VT   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''VT''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n   /* DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    /***********************************************************************/\n   /***************************   ODC   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''ODC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n    /***********************************************************************/\n   /***************************   VO   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''VO''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n   -- DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    VAR_DATE   := TO_CHAR(\n     TO_DATE(VAR_DATE,'yyyy-mm-dd') + 30\n    ,'yyyy-mm-dd'\n    );\n   END LOOP;\n\n  ELSIF ( VAR_PERIOD = 4 ) THEN\n   NULL;\n  END IF;\n\n    \n   /***********************************************************************/\n   /***************************   V   ***********************************/\n   /***********************************************************************/\n\n  INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n   REF_REPORT\n  ,REF_REPREQ\n  ,TYPE\n  ,BALANCE\n  ,DURATION_TYPE\n  ,DURATION_PRIORITY\n  ,NAME\n  ) SELECT\n   INPAR_REPORT\n  ,VAR_REPREQ\n  ,NULL\n  ,SUM(BALANCE)\n  ,NULL\n  ,NULL\n  ,'V'\n  FROM AKIN.TBL_DEPOSIT;\n\n  COMMIT;\n  \n    /***********************************************************************/\n   /***************************   V   ***********************************/\n   /***********************************************************************/\n  INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n   REF_REPORT\n  ,REF_REPREQ\n  ,TYPE\n  ,BALANCE\n  ,DURATION_TYPE\n  ,DURATION_PRIORITY\n  ,NAME\n  ) SELECT\n   INPAR_REPORT\n  ,VAR_REPREQ\n  ,NULL\n  ,SUM(BALANCE)\n  ,NULL\n  ,NULL\n  ,'SDC'\n  FROM PRAGG.TBL_LEDGER_ARCHIVE\n  WHERE LEDGER_CODE IN (\n     52915040101,52915040201\n    )\n   AND\n    EFF_DATE   = (\n     SELECT\n      MAX(EFF_DATE)\n     FROM PRAGG.TBL_LEDGER_ARCHIVE\n    );\n\n  COMMIT;\n\n    /***********************************************************************/\n   /***************************   VTGH   ***********************************/\n   /***********************************************************************/\n  VAR_QUERY   := 'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n)\n      SELECT\n      ' ||\n  INPAR_REPORT ||\n  '\n ,' ||\n  VAR_REPREQ ||\n  '\n ,REF_DEPOSIT_TYPE\n ,SUM(BALANCE)\n  ,NULL\n ,NULL\n ,''VTGH''\n REF_DEPOSIT_TYPE\nFROM  akin.tbl_deposit\nwhere MODALITY_TYPE = 2\nand \n  DEP_ID IN (  \n' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n  ') AND REF_CURRENCY IN ( ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n  ')' ||\n  ' AND REF_CUSTOMER IN ( ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n  ')' ||\n  ' AND REF_BRANCH IN ( ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n  ') \ngroup by REF_DEPOSIT_TYPE;';\n  --DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n\n  EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n  COMMIT;\n  \n      /***********************************************************************/\n   /***************************  TRANSACTION   ***********************************/\n   /***********************************************************************/\n     EXECUTE IMMEDIATE 'truncate table TBL_COM_TRANS_PREPREDICTION';\n\n  VAR_QUERY:='INSERT INTO TBL_COM_TRANS_PREPREDICTION (EFFDATE,TRANS_NUM)\n  \n  \n  (\n  select  /*+ gather_plan_statistics */eff_date,sum(trans_num)\nfrom tbl_com_transaction \nwhere dep_id in( SELECT DEP_ID\n                  FROM AKIN.TBL_DEPOSIT\n                   WHERE  DEP_ID IN (\n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CURRENCY IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUSTOMER IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     '))\n\ngroup by eff_date);';\n\n\n  \n\n-- with tmp as\n--(SELECT DEP_ID\n--                  FROM AKIN.TBL_DEPOSIT\n--                  WHERE  DEP_ID IN (  \n--' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n--     ') AND REF_CURRENCY IN ( ' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n--     ')' ||\n--     ' AND REF_CUSTOMER IN ( ' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n--     ')' ||\n--     ' AND REF_BRANCH IN ( ' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n--     '))\n--\n--SELECT\n--  SUM(trans_num),\n--  eff_date\n--FROM tbl_com_transaction t right join tmp tt\n--on t.dep_id = tt.dep_id  \n--GROUP BY eff_date;';\n--     \n     DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n       EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n\n     commit;\n  \n END PRC_COM_DIRECT_COST;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\",\n\n  first_date as \"firstDate\",\n  bazeh as \"bazeh\",\n  ref_dep_profile as \"depProfile\",\n  \n  ref_cus_profile as \"cusProfile\",\n  ref_cur_profile as \"curProfile\",\n  ref_brn_profile as \"brnProfile\"\n\n FROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''COM2'' order by id';\n  RETURN VAR2;\n END FNC_COM_GET_REPORT_INFO;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_COM_final_result ( INPAR_REPORT IN NUMBER ) AS\n var_repreq number;\nbegin\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_REPORT;\n  \n  --********************************************************************************************\n  INSERT INTO tbl_com_final_result (\n    ref_repreq,\n    ref_report,\n    value,\n    sub_modality_type,\n    duration_priority,\n    modality_type,\n    type,\n    duration_type\n)\n    SELECT\n        VAR_REPREQ,\n        INPAR_REPORT,\n        nvl( ( (\"TDC\" - (\"VT\" / (\n            SELECT\n                balance\n            FROM\n                tbl_com_direct_cost\n            WHERE\n                tbl_com_direct_cost.name = 'V'\n                AND ref_repreq = VAR_REPREQ\n        ) * reward_rate) ) ),0) AS value, --\n        type AS sub_modality_type,\n        duration_priority,\n        1 AS modality,-- modat dar\n        1 AS type,-- sorat\n        duration_type\n    FROM\n        (\n            SELECT\n                tc.ref_report,\n                tc.ref_repreq,\n                tc.type,\n                tc.duration_priority,\n                tc.duration_type,\n                tc.name,\n                tc.balance,\n                r.rate,\n                r.reward_rate\n            FROM\n                tbl_com_direct_cost tc,\n                (\n                    SELECT\n                        tbl_com_legal_deposit_rate.rate,\n                        tbl_com_legal_deposit_rate.deposit_type,\n                        tbl_com_legal_deposit_rate.reward_rate\n                    FROM\n                        tbl_com_legal_deposit_rate\n                ) r\n            WHERE\n                tc.ref_report = INPAR_REPORT\n                AND tc.ref_repreq = VAR_REPREQ\n                AND tc.name IN (\n                    'TDC',\n                    'VT'\n                )\n                AND r.deposit_type = tc.type\n        )\n            PIVOT ( SUM ( balance )\n                FOR name\n                IN ( 'TDC' AS \"TDC\",'VT' AS \"VT\" )\n            )\n    ORDER BY\n        type,\n        duration_priority;\n        --************************************gharz alhasane******************************************************\n          INSERT INTO tbl_com_final_result (\n    ref_repreq,\n    ref_report,\n    value,\n    sub_modality_type,\n    duration_priority,\n    modality_type,\n    type,\n    duration_type\n)\n        SELECT\n        VAR_REPREQ,\n        INPAR_REPORT,\n        nvl( ( (\"SDC\" - (\"VTGH\" / (\n            SELECT\n                balance\n            FROM\n                tbl_com_direct_cost\n            WHERE\n                tbl_com_direct_cost.name = 'V'\n                AND ref_repreq = VAR_REPREQ\n        ) * reward_rate) ) ),0) AS value, --\n        type AS sub_modality_type,\n        duration_priority,\n        2 AS modality,-- gharz alhasane\n        1 AS type,-- sorat\n        duration_type\n    FROM\n        (\n            SELECT\n                tc.ref_report,\n                tc.ref_repreq,\n                tc.type,\n                tc.duration_priority,\n                tc.duration_type,\n                tc.name,\n                tc.balance,\n                r.rate,\n                r.reward_rate\n            FROM\n                tbl_com_direct_cost tc,\n                (\n                    SELECT\n                        tbl_com_legal_deposit_rate.rate,\n                        tbl_com_legal_deposit_rate.deposit_type,\n                        tbl_com_legal_deposit_rate.reward_rate\n                    FROM\n                        tbl_com_legal_deposit_rate\n                ) r\n            WHERE\n                tc.ref_report = INPAR_REPORT\n                AND tc.ref_repreq = VAR_REPREQ\n                AND tc.name IN (\n                    'SDC',\n                    'VTGH'\n                )\n                AND r.deposit_type = tc.type\n        )\n            PIVOT ( SUM ( balance )\n                FOR name\n                IN ( 'SDC' AS \"SDC\",'VTGH' AS \"VTGH\" )\n            )\n    ORDER BY\n        type,\n        duration_priority;\n        \n     --************************************ sayer ******************************************************\nINSERT INTO tbl_com_final_result (\n    ref_repreq,\n    ref_report,\n    value,\n    sub_modality_type,\n    duration_priority,\n    modality_type,\n    type,\n    duration_type\n)\n        SELECT\n        VAR_REPREQ,\n        INPAR_REPORT,\n        nvl( ( (\"ODC\" - (\"VO\" / (\n            SELECT\n                balance\n            FROM\n                tbl_com_direct_cost\n            WHERE\n                tbl_com_direct_cost.name = 'V'\n                AND ref_repreq = VAR_REPREQ\n        ) * reward_rate) ) ),0) AS value, --\n        type AS sub_modality_type,\n        duration_priority,\n        3 AS modality,-- sayer\n        1 AS type,-- sorat\n        duration_type\n    FROM\n        (\n            SELECT\n                tc.ref_report,\n                tc.ref_repreq,\n                tc.type,\n                tc.duration_priority,\n                tc.duration_type,\n                tc.name,\n                tc.balance,\n                r.rate,\n                r.reward_rate\n            FROM\n                tbl_com_direct_cost tc,\n                (\n                    SELECT\n                        tbl_com_legal_deposit_rate.rate,\n                        tbl_com_legal_deposit_rate.deposit_type,\n                        tbl_com_legal_deposit_rate.reward_rate\n                    FROM\n                        tbl_com_legal_deposit_rate\n                ) r\n            WHERE\n                tc.ref_report = INPAR_REPORT\n                AND tc.ref_repreq = VAR_REPREQ\n                AND tc.name IN (\n                    'ODC',\n                    'VO'\n                )\n                AND r.deposit_type = tc.type\n        )\n            PIVOT ( SUM ( balance )\n                FOR name\n                IN ( 'ODC' AS \"ODC\",'VO' AS \"VO\" )\n            )\n    ORDER BY\n        type,\n        duration_priority;\n        \ncommit;\n\n\nINSERT INTO TBL_COM_FINAL_RESULT (\n  REF_REPORT\n ,REF_REPREQ\n ,VALUE\n ,TYPE\n ,MODALITY_TYPE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,SUB_MODALITY_TYPE\n)  \nselect INPAR_REPORT,VAR_REPREQ,sum(value),2,1,max(DURATION_TYPE),DURATION_PRIORITY,null from (\nSELECT nvl( \"VT\"*(1-AMOUNT-rate),0) as value,type,DURATION_PRIORITY,DURATION_TYPE\n FROM (\n  SELECT\n   TBL_COM_DIRECT_COST.REF_REPORT\n  ,TBL_COM_DIRECT_COST.REF_REPREQ\n  ,TBL_COM_DIRECT_COST.TYPE\n  ,TBL_COM_DIRECT_COST.DURATION_PRIORITY\n  ,TBL_COM_DIRECT_COST.DURATION_TYPE\n  ,TBL_COM_DIRECT_COST.NAME\n  ,TBL_COM_DIRECT_COST.BALANCE\n  ,TBL_COM_PREDICTION.AMOUNT\n  ,TBL_COM_LEGAL_DEPOSIT_RATE.RATE\n  FROM TBL_COM_DIRECT_COST,\n  TBL_COM_PREDICTION,\n  TBL_COM_LEGAL_DEPOSIT_RATE\n  WHERE TBL_COM_DIRECT_COST.REF_REPORT   = INPAR_REPORT\n   AND\n    TBL_COM_DIRECT_COST.REF_REPREQ   = VAR_REPREQ and TBL_COM_DIRECT_COST.name in ('VT'  )\n    and TBL_COM_PREDICTION.type_id = TBL_COM_DIRECT_COST.TYPE\n    and TBL_COM_PREDICTION.duration_type = TBL_COM_DIRECT_COST.DURATION_TYPE\n    and TBL_COM_PREDICTION.DU_PRIORITY = TBL_COM_DIRECT_COST.DURATION_PRIORITY\n   and TBL_COM_LEGAL_DEPOSIT_RATE.DEPOSIT_TYPE =  TBL_COM_DIRECT_COST.type\n )\n  PIVOT ( SUM ( BALANCE )\n   FOR NAME\n   IN ( 'TDC' as \"TDC\",'VT' as \"VT\" )\n  )\n  order by type,DURATION_PRIORITY)\n  group by  DURATION_PRIORITY;\ncommit;\n \nend;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_final_result(inpar_repreq IN NUMBER ,inpar_type IN NUMBER ) RETURN VARCHAR2\n  AS\n BEGIN\n if (inpar_type = 1) then\n  RETURN '\n  select a.sorat/b.makhrag as \"value\",a.duration_Type as \"durationType\",A.DURATION_PRIORITY as \"durationPriority\",a.SUB_MODALITY_TYPE as \"subModalityType\",a.MODALITY_TYPE  as \"modalityType\", type.NAME as \"name\" from (\nselect value as sorat,TBL_COM_FINAL_RESULT.DURATION_PRIORITY,TBL_COM_FINAL_RESULT.DURATION_TYPE,TBL_COM_FINAL_RESULT.SUB_MODALITY_TYPE,TBL_COM_FINAL_RESULT.MODALITY_TYPE from TBL_COM_FINAL_RESULT where TYPE = 1 and REF_REPREQ =   '||inpar_repreq||'\n\n)a,(\n\nselect value as makhrag ,DURATION_PRIORITY from TBL_COM_FINAL_RESULT where TYPE = 2 and REF_REPREQ = '||inpar_repreq||'\n)b\n\n ,\n  TBL_DEPOSIT_TYPE type\nWHERE A.DURATION_PRIORITY = B.DURATION_PRIORITY and type.REF_DEPOSIT_TYPE= a.SUB_MODALITY_TYPE \n\n  \n  ';\n  else \n  null;\n  end if;\n END;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n\n\n\nEND PKG_COM;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COM\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_COM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_CREATE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_BRANCH             IN VARCHAR2\n ,INPAR_DEPOSIT            IN VARCHAR2\n ,INPAR_CUSTOMER           IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_BAZEH              IN VARCHAR2\n ,INPAR_CURRENCY           IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_FILL_SCALE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE_MAIN;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE (\n  INPAR_LEDGER_CODE   IN NUMBER\n ,INPAR_TYPE          IN NUMBER\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_LEDGER_TYPE RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DIRECT_COST ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_final_result ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_final_result(inpar_repreq IN NUMBER ,inpar_type IN NUMBER ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*SELECT nvl((\"TDC\"- (\"VT\"/100000*0.4))/\"VT\"*(1-0.5-0.6),0),type,DURATION_PRIORITY\n FROM (\n  SELECT\n   TBL_COM_DIRECT_COST.REF_REPORT\n  ,TBL_COM_DIRECT_COST.REF_REPREQ\n  ,TYPE\n  ,TBL_COM_DIRECT_COST.DURATION_PRIORITY\n  ,TBL_COM_DIRECT_COST.DURATION_TYPE\n  ,NAME\n  ,TBL_COM_DIRECT_COST.BALANCE\n  FROM TBL_COM_DIRECT_COST\n  WHERE REF_REPORT   = 1848\n   AND\n    REF_REPREQ   = 1392 and name in ('TDC'  ,'VT'  )\n )\n  PIVOT ( SUM ( BALANCE )\n   FOR NAME\n   IN ( 'TDC' as \"TDC\",'VT' as \"VT\" )\n  )\n  order by type,DURATION_PRIORITY;*/\n  \n  \n  \n  \n  \n /* \n  select balance from TBL_COM_DIRECT_COST  where name = 'V' and REF_REPREQ = 1392; \n\n  INSERT\nINTO TBL_COM_LEGAL_DEPOSIT_RATE\n  (\n    DEPOSIT_TYPE,\n    RATE,\n    REWARD_RATE\n  )\n  (\n  select distinct ref_deposit_type,case when modality_type = 2 then 0.08 else 0.103 end,case when modality_type = 2 then 0.08*0.01 else 0.103*0.01 end  from akin.tbl_deposit);\n*/\nEND PKG_COM;"},{"Name":"PKG_COM","ObjectID":298243,"Digest":"a1708338ffbc15d259c64fd77b25943215940300097f9d93132a5be8971164a9","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COM\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_COM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_CREATE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_BRANCH             IN VARCHAR2\n ,INPAR_DEPOSIT            IN VARCHAR2\n ,INPAR_CUSTOMER           IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_BAZEH              IN VARCHAR2\n ,INPAR_CURRENCY           IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_FILL_SCALE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE_MAIN;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE (\n  INPAR_LEDGER_CODE   IN NUMBER\n ,INPAR_TYPE          IN NUMBER\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_LEDGER_TYPE RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DIRECT_COST ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_final_result ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_final_result(inpar_repreq IN NUMBER ,inpar_type IN NUMBER ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*SELECT nvl((\"TDC\"- (\"VT\"/100000*0.4))/\"VT\"*(1-0.5-0.6),0),type,DURATION_PRIORITY\n FROM (\n  SELECT\n   TBL_COM_DIRECT_COST.REF_REPORT\n  ,TBL_COM_DIRECT_COST.REF_REPREQ\n  ,TYPE\n  ,TBL_COM_DIRECT_COST.DURATION_PRIORITY\n  ,TBL_COM_DIRECT_COST.DURATION_TYPE\n  ,NAME\n  ,TBL_COM_DIRECT_COST.BALANCE\n  FROM TBL_COM_DIRECT_COST\n  WHERE REF_REPORT   = 1848\n   AND\n    REF_REPREQ   = 1392 and name in ('TDC'  ,'VT'  )\n )\n  PIVOT ( SUM ( BALANCE )\n   FOR NAME\n   IN ( 'TDC' as \"TDC\",'VT' as \"VT\" )\n  )\n  order by type,DURATION_PRIORITY;*/\n  \n  \n  \n  \n  \n /* \n  select balance from TBL_COM_DIRECT_COST  where name = 'V' and REF_REPREQ = 1392; \n\n  INSERT\nINTO TBL_COM_LEGAL_DEPOSIT_RATE\n  (\n    DEPOSIT_TYPE,\n    RATE,\n    REWARD_RATE\n  )\n  (\n  select distinct ref_deposit_type,case when modality_type = 2 then 0.08 else 0.103 end,case when modality_type = 2 then 0.08*0.01 else 0.103*0.01 end  from akin.tbl_deposit);\n*/\nEND PKG_COM;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_COM\" AS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Description:\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n END PRC_COM_DELETE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_CREATE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_BRANCH             IN VARCHAR2\n ,INPAR_DEPOSIT            IN VARCHAR2\n ,INPAR_CUSTOMER           IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_BAZEH              IN VARCHAR2\n ,INPAR_CURRENCY           IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ,REF_DEP_PROFILE\n   ,REF_CUS_PROFILE\n   ,REF_BRN_PROFILE\n   ,FIRST_DATE\n   ,BAZEH\n   ,REF_CUR_PROFILE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'com2'\n   ,INPAR_TYPE\n   ,INPAR_DEPOSIT\n   ,INPAR_CUSTOMER\n   ,INPAR_BRANCH\n   ,INPAR_FIRST_DATE\n   ,INPAR_BAZEH\n   ,INPAR_CURRENCY\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n     \n     \n       UPDATE TBL_REPORT\n   SET\n    H_ID = OUTPAR_ID\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  COMMIT;\n     \n     \n     \n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n    ,REF_DEP_PROFILE = INPAR_DEPOSIT\n    ,REF_CUS_PROFILE = INPAR_CUSTOMER\n    ,REF_BRN_PROFILE = INPAR_BRANCH\n    ,FIRST_DATE = INPAR_FIRST_DATE\n    ,BAZEH = INPAR_BAZEH\n    ,REF_CUR_PROFILE = INPAR_CURRENCY\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n\n--  UPDATE TBL_REPORT\n--   SET\n--    H_ID = ID\n--  WHERE TYPE   = 'COM2'\n--   AND\n--    H_ID IS NULL;\n\n  COMMIT;\n END PRC_COM_CREATE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_FILL_SCALE AS\n  VAR_SUM   NUMBER;\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_COM_SCALE';\n  SELECT\n   SUM(BALANCE)\n  INTO\n   VAR_SUM\n  FROM AKIN.TBL_DEPOSIT;\n\n  INSERT\n    /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_SCALE ( DEP_ID,BRANCH_ID,SCALE_TO_TOTAL ) ( SELECT\n        /*+   PARALLEL(auto)   */\n   DEP_ID\n  ,REF_BRANCH\n  ,BALANCE / VAR_SUM\n  FROM AKIN.TBL_DEPOSIT\n  );\n\n  COMMIT;\n END PRC_COM_FILL_SCALE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE_MAIN\n  AS\n BEGIN\n  EXECUTE IMMEDIATE 'truncate table TBL_COM_LEDGER_TYPE_MAIN';\n  INSERT  /*+   PARALLEL(auto) */ INTO TBL_COM_LEDGER_TYPE_MAIN ( EFF_DATE,AMOUNT,TYPE ) SELECT  /*+   PARALLEL(auto) */\n   EFF_DATE\n  ,SUM(BALANCE)\n  ,1\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE LEDGER_CODE IN (\n    SELECT\n     TBL_COM_LEDGER_TYPE.LEDGER_CODE\n    FROM TBL_COM_LEDGER_TYPE\n    WHERE TBL_COM_LEDGER_TYPE.TYPE   = 1\n   )\n  GROUP BY\n   EFF_DATE\n  UNION\n  SELECT  /*+   PARALLEL(auto) */\n   EFF_DATE\n  ,SUM(BALANCE)\n  ,2\n  FROM TBL_LEDGER_ARCHIVE\n  WHERE LEDGER_CODE IN (\n    SELECT\n     TBL_COM_LEDGER_TYPE.LEDGER_CODE\n    FROM TBL_COM_LEDGER_TYPE\n    WHERE TBL_COM_LEDGER_TYPE.TYPE   = 2\n   )\n  GROUP BY\n   EFF_DATE;\n\n  COMMIT;\n END PRC_COM_LEDGER_TYPE_MAIN;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE (\n  INPAR_LEDGER_CODE   IN NUMBER\n ,INPAR_TYPE          IN NUMBER\n )\n  AS\n BEGIN\n  UPDATE TBL_COM_LEDGER_TYPE\n   SET\n    TYPE = INPAR_TYPE\n  WHERE LEDGER_CODE   = INPAR_LEDGER_CODE;\n\n  COMMIT;\n END PRC_COM_LEDGER_TYPE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_LEDGER_TYPE RETURN VARCHAR2\n  AS\n BEGIN\n  RETURN 'SELECT id as \"id\",ledger_code as \"code\" ,type as \"type\",name as \"name\" from tbl_com_ledger_type';\n END;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DIRECT_COST ( INPAR_REPORT IN NUMBER ) AS\n\n  VAR_REPREQ             NUMBER;\n  VAR_FIRST_DATE         VARCHAR2(1000);\n  VAR_PERIOD             NUMBER;\n  VAR_DEPOSIT_PROFILE    NUMBER;\n  VAR_BRANCH_PROFILE     NUMBER;\n  VAR_CURRENCY_PROFILE   NUMBER;\n  VAR_CUSTOMER_PROFILE   NUMBER;\n  VAR_QUERY              VARCHAR2(30000);\n  VAR_DATE               VARCHAR2(1000);\n BEGIN\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_REPORT;\n\n  SELECT\n   FIRST_DATE\n  INTO\n   VAR_FIRST_DATE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   BAZEH\n  INTO\n   VAR_PERIOD\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   REF_CUR_PROFILE\n  INTO\n   VAR_CURRENCY_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n--  SELECT\n--   REF_CUS_PROFILE\n--  INTO\n--   VAR_CUSTOMER_PROFILE\n--  FROM TBL_REPORT\n--  WHERE ID   = INPAR_REPORT;\n\nselect null into VAR_CUSTOMER_PROFILE from dual;\n\n\n  SELECT\n   REF_BRN_PROFILE\n  INTO\n   VAR_BRANCH_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  SELECT\n   REF_DEP_PROFILE\n  INTO\n   VAR_DEPOSIT_PROFILE\n  FROM TBL_REPORT\n  WHERE ID   = INPAR_REPORT;\n\n  IF\n   ( VAR_PERIOD = 1 )\n  THEN\n  /*========== daily*/\n     /*=================================================================================================================================*/\n   FOR I IN 0..30 LOOP\n        /*=================================================================================================================================*/\n\n   /***********************************************************************/\n   /***************************   TDC   ***********************************/\n   /**********************************************************************   */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''TDC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n   /***********************************************************************/\n   /***************************   VT   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''VT''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n   /***********************************************************************/\n   /***************************   ODC   ***********************************/\n   /**********************************************************************   */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''ODC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n     /***********************************************************************/\n   /***************************   VO   ***********************************/\n   /**********************************************************************   */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,1\n ,' ||\n     I ||\n     '\n ,''VO''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   = to_date(''' ||\n     VAR_FIRST_DATE ||\n     ''',''yyyy-mm-dd'') + ' ||\n     I ||\n     '\n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n --  DBMS_OUTPUT.PUT_LINE(var_query);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n   END LOOP;\n  ELSIF ( VAR_PERIOD = 2 ) THEN\n   VAR_DATE   := VAR_FIRST_DATE;\n   /*============= weekly*/\n   /*=================================================================================================================================*/\n   FOR I IN 1..12 LOOP\n   /*=================================================================================================================================*/\n\n   /***********************************************************************/\n   /***************************   TDC   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''TDC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    VAR_DATE   := TO_CHAR(\n     TO_DATE(VAR_DATE,'yyyy-mm-dd') + 7\n    ,'yyyy-mm-dd'\n    );\n    DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n   /***********************************************************************/\n   /***************************   VT   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''VT''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n   /* DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n     /***********************************************************************/\n   /***************************   ODC   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''ODC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n    /***********************************************************************/\n   /***************************   VO   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,2\n ,' ||\n     I ||\n     '\n ,''VO''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 7 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    VAR_DATE   := TO_CHAR(\n     TO_DATE(VAR_DATE,'yyyy-mm-dd') + 7\n    ,'yyyy-mm-dd'\n    );\n   END LOOP;\n\n  ELSIF ( VAR_PERIOD = 3 ) THEN\n   VAR_DATE   := VAR_FIRST_DATE;\n   \n   \n   /*============= monthly*/\n   /*=================================================================================================================================*/\n   FOR I IN 1..12 LOOP\n   /*=================================================================================================================================*/\n\n   /***********************************************************************/\n   /***************************   TDC   ***********************************/\n   /**********************************************************************  */\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''TDC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n   \n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n   /***********************************************************************/\n   /***************************   VT   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''VT''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   = 1\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n   /* DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    /***********************************************************************/\n   /***************************   ODC   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''ODC''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 21\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n    /*DBMS_OUTPUT.PUT_LINE(VAR_QUERY);*/\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    \n    /***********************************************************************/\n   /***************************   VO   ***********************************/\n   /***********************************************************************/\n    SELECT\n     'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n) SELECT /*+  PARALLEL(auto)   */\n ' ||\n     INPAR_REPORT ||\n     '\n ,' ||\n     VAR_REPREQ ||\n     '\n ,TBL_VALUE.REF_TYPE\n ,SUM(BALANCE)\n ,3\n ,' ||\n     I ||\n     '\n ,''VO''\nFROM PRAGG.TBL_VALUE\nWHERE REF_MODALITY_TYPE          = 2\n AND\n  REF_TYPE IN (\n   SELECT\n    REF_DEPOSIT_TYPE\n   FROM PRAGG.TBL_DEPOSIT_TYPE\n   WHERE REF_MODALITY_TYPE   not in (1,2)\n  )\n AND\n  PRAGG.TBL_VALUE.DUE_DATE   between to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'')  and  to_date(''' ||\n     VAR_DATE ||\n     ''',''yyyy-mm-dd'') + 30 \n      \n  and \n  REF_ID IN (  \n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CUR_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUS_ID IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     ')  \nGROUP BY\n PRAGG.TBL_VALUE.REF_TYPE;'\n    INTO\n     VAR_QUERY\n    FROM DUAL;\n\n   -- DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n\n    EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n    COMMIT;\n    VAR_DATE   := TO_CHAR(\n     TO_DATE(VAR_DATE,'yyyy-mm-dd') + 30\n    ,'yyyy-mm-dd'\n    );\n   END LOOP;\n\n  ELSIF ( VAR_PERIOD = 4 ) THEN\n   NULL;\n  END IF;\n\n    \n   /***********************************************************************/\n   /***************************   V   ***********************************/\n   /***********************************************************************/\n\n  INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n   REF_REPORT\n  ,REF_REPREQ\n  ,TYPE\n  ,BALANCE\n  ,DURATION_TYPE\n  ,DURATION_PRIORITY\n  ,NAME\n  ) SELECT\n   INPAR_REPORT\n  ,VAR_REPREQ\n  ,NULL\n  ,SUM(BALANCE)\n  ,NULL\n  ,NULL\n  ,'V'\n  FROM AKIN.TBL_DEPOSIT;\n\n  COMMIT;\n  \n    /***********************************************************************/\n   /***************************   V   ***********************************/\n   /***********************************************************************/\n  INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n   REF_REPORT\n  ,REF_REPREQ\n  ,TYPE\n  ,BALANCE\n  ,DURATION_TYPE\n  ,DURATION_PRIORITY\n  ,NAME\n  ) SELECT\n   INPAR_REPORT\n  ,VAR_REPREQ\n  ,NULL\n  ,SUM(BALANCE)\n  ,NULL\n  ,NULL\n  ,'SDC'\n  FROM PRAGG.TBL_LEDGER_ARCHIVE\n  WHERE LEDGER_CODE IN (\n     52915040101,52915040201\n    )\n   AND\n    EFF_DATE   = (\n     SELECT\n      MAX(EFF_DATE)\n     FROM PRAGG.TBL_LEDGER_ARCHIVE\n    );\n\n  COMMIT;\n\n    /***********************************************************************/\n   /***************************   VTGH   ***********************************/\n   /***********************************************************************/\n  VAR_QUERY   := 'INSERT  /*+ APPEND PARALLEL(auto)   */ INTO TBL_COM_DIRECT_COST (\n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,BALANCE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,NAME\n)\n      SELECT\n      ' ||\n  INPAR_REPORT ||\n  '\n ,' ||\n  VAR_REPREQ ||\n  '\n ,REF_DEPOSIT_TYPE\n ,SUM(BALANCE)\n  ,NULL\n ,NULL\n ,''VTGH''\n REF_DEPOSIT_TYPE\nFROM  akin.tbl_deposit\nwhere MODALITY_TYPE = 2\nand \n  DEP_ID IN (  \n' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n  ') AND REF_CURRENCY IN ( ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n  ')' ||\n  ' AND REF_CUSTOMER IN ( ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n  ')' ||\n  ' AND REF_BRANCH IN ( ' ||\n  FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n  ') \ngroup by REF_DEPOSIT_TYPE;';\n  --DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n\n  EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n  COMMIT;\n  \n      /***********************************************************************/\n   /***************************  TRANSACTION   ***********************************/\n   /***********************************************************************/\n     EXECUTE IMMEDIATE 'truncate table TBL_COM_TRANS_PREPREDICTION';\n\n  VAR_QUERY:='INSERT INTO TBL_COM_TRANS_PREPREDICTION (EFFDATE,TRANS_NUM)\n  \n  \n  (\n  select  /*+ gather_plan_statistics */eff_date,sum(trans_num)\nfrom tbl_com_transaction \nwhere dep_id in( SELECT DEP_ID\n                  FROM AKIN.TBL_DEPOSIT\n                   WHERE  DEP_ID IN (\n' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n     ') AND REF_CURRENCY IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n     ')' ||\n     ' AND REF_CUSTOMER IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n     ')' ||\n     ' AND REF_BRANCH IN ( ' ||\n     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n     '))\n\ngroup by eff_date);';\n\n\n  \n\n-- with tmp as\n--(SELECT DEP_ID\n--                  FROM AKIN.TBL_DEPOSIT\n--                  WHERE  DEP_ID IN (  \n--' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_DEPOSIT_PROFILE) ||\n--     ') AND REF_CURRENCY IN ( ' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_CURRENCY',VAR_CURRENCY_PROFILE) ||\n--     ')' ||\n--     ' AND REF_CUSTOMER IN ( ' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER_PROFILE) ||\n--     ')' ||\n--     ' AND REF_BRANCH IN ( ' ||\n--     FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',VAR_BRANCH_PROFILE) ||\n--     '))\n--\n--SELECT\n--  SUM(trans_num),\n--  eff_date\n--FROM tbl_com_transaction t right join tmp tt\n--on t.dep_id = tt.dep_id  \n--GROUP BY eff_date;';\n--     \n     DBMS_OUTPUT.PUT_LINE(VAR_QUERY);\n       EXECUTE IMMEDIATE 'BEGIN ' || VAR_QUERY || ' END;';\n\n     commit;\n  \n END PRC_COM_DIRECT_COST;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2   VARCHAR2(3000);\n BEGIN\n  VAR2   := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\",\n\n  first_date as \"firstDate\",\n  bazeh as \"bazeh\",\n  ref_dep_profile as \"depProfile\",\n  \n  ref_cus_profile as \"cusProfile\",\n  ref_cur_profile as \"curProfile\",\n  ref_brn_profile as \"brnProfile\"\n\n FROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''COM2'' order by id';\n  RETURN VAR2;\n END FNC_COM_GET_REPORT_INFO;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_COM_final_result ( INPAR_REPORT IN NUMBER ) AS\n var_repreq number;\nbegin\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_REPORT;\n  \n  --********************************************************************************************\n  INSERT INTO tbl_com_final_result (\n    ref_repreq,\n    ref_report,\n    value,\n    sub_modality_type,\n    duration_priority,\n    modality_type,\n    type,\n    duration_type\n)\n    SELECT\n        VAR_REPREQ,\n        INPAR_REPORT,\n        nvl( ( (\"TDC\" - (\"VT\" / (\n            SELECT\n                balance\n            FROM\n                tbl_com_direct_cost\n            WHERE\n                tbl_com_direct_cost.name = 'V'\n                AND ref_repreq = VAR_REPREQ\n        ) * reward_rate) ) ),0) AS value, --\n        type AS sub_modality_type,\n        duration_priority,\n        1 AS modality,-- modat dar\n        1 AS type,-- sorat\n        duration_type\n    FROM\n        (\n            SELECT\n                tc.ref_report,\n                tc.ref_repreq,\n                tc.type,\n                tc.duration_priority,\n                tc.duration_type,\n                tc.name,\n                tc.balance,\n                r.rate,\n                r.reward_rate\n            FROM\n                tbl_com_direct_cost tc,\n                (\n                    SELECT\n                        tbl_com_legal_deposit_rate.rate,\n                        tbl_com_legal_deposit_rate.deposit_type,\n                        tbl_com_legal_deposit_rate.reward_rate\n                    FROM\n                        tbl_com_legal_deposit_rate\n                ) r\n            WHERE\n                tc.ref_report = INPAR_REPORT\n                AND tc.ref_repreq = VAR_REPREQ\n                AND tc.name IN (\n                    'TDC',\n                    'VT'\n                )\n                AND r.deposit_type = tc.type\n        )\n            PIVOT ( SUM ( balance )\n                FOR name\n                IN ( 'TDC' AS \"TDC\",'VT' AS \"VT\" )\n            )\n    ORDER BY\n        type,\n        duration_priority;\n        --************************************gharz alhasane******************************************************\n          INSERT INTO tbl_com_final_result (\n    ref_repreq,\n    ref_report,\n    value,\n    sub_modality_type,\n    duration_priority,\n    modality_type,\n    type,\n    duration_type\n)\n        SELECT\n        VAR_REPREQ,\n        INPAR_REPORT,\n        nvl( ( (\"SDC\" - (\"VTGH\" / (\n            SELECT\n                balance\n            FROM\n                tbl_com_direct_cost\n            WHERE\n                tbl_com_direct_cost.name = 'V'\n                AND ref_repreq = VAR_REPREQ\n        ) * reward_rate) ) ),0) AS value, --\n        type AS sub_modality_type,\n        duration_priority,\n        2 AS modality,-- gharz alhasane\n        1 AS type,-- sorat\n        duration_type\n    FROM\n        (\n            SELECT\n                tc.ref_report,\n                tc.ref_repreq,\n                tc.type,\n                tc.duration_priority,\n                tc.duration_type,\n                tc.name,\n                tc.balance,\n                r.rate,\n                r.reward_rate\n            FROM\n                tbl_com_direct_cost tc,\n                (\n                    SELECT\n                        tbl_com_legal_deposit_rate.rate,\n                        tbl_com_legal_deposit_rate.deposit_type,\n                        tbl_com_legal_deposit_rate.reward_rate\n                    FROM\n                        tbl_com_legal_deposit_rate\n                ) r\n            WHERE\n                tc.ref_report = INPAR_REPORT\n                AND tc.ref_repreq = VAR_REPREQ\n                AND tc.name IN (\n                    'SDC',\n                    'VTGH'\n                )\n                AND r.deposit_type = tc.type\n        )\n            PIVOT ( SUM ( balance )\n                FOR name\n                IN ( 'SDC' AS \"SDC\",'VTGH' AS \"VTGH\" )\n            )\n    ORDER BY\n        type,\n        duration_priority;\n        \n     --************************************ sayer ******************************************************\nINSERT INTO tbl_com_final_result (\n    ref_repreq,\n    ref_report,\n    value,\n    sub_modality_type,\n    duration_priority,\n    modality_type,\n    type,\n    duration_type\n)\n        SELECT\n        VAR_REPREQ,\n        INPAR_REPORT,\n        nvl( ( (\"ODC\" - (\"VO\" / (\n            SELECT\n                balance\n            FROM\n                tbl_com_direct_cost\n            WHERE\n                tbl_com_direct_cost.name = 'V'\n                AND ref_repreq = VAR_REPREQ\n        ) * reward_rate) ) ),0) AS value, --\n        type AS sub_modality_type,\n        duration_priority,\n        3 AS modality,-- sayer\n        1 AS type,-- sorat\n        duration_type\n    FROM\n        (\n            SELECT\n                tc.ref_report,\n                tc.ref_repreq,\n                tc.type,\n                tc.duration_priority,\n                tc.duration_type,\n                tc.name,\n                tc.balance,\n                r.rate,\n                r.reward_rate\n            FROM\n                tbl_com_direct_cost tc,\n                (\n                    SELECT\n                        tbl_com_legal_deposit_rate.rate,\n                        tbl_com_legal_deposit_rate.deposit_type,\n                        tbl_com_legal_deposit_rate.reward_rate\n                    FROM\n                        tbl_com_legal_deposit_rate\n                ) r\n            WHERE\n                tc.ref_report = INPAR_REPORT\n                AND tc.ref_repreq = VAR_REPREQ\n                AND tc.name IN (\n                    'ODC',\n                    'VO'\n                )\n                AND r.deposit_type = tc.type\n        )\n            PIVOT ( SUM ( balance )\n                FOR name\n                IN ( 'ODC' AS \"ODC\",'VO' AS \"VO\" )\n            )\n    ORDER BY\n        type,\n        duration_priority;\n        \ncommit;\n\n\nINSERT INTO TBL_COM_FINAL_RESULT (\n  REF_REPORT\n ,REF_REPREQ\n ,VALUE\n ,TYPE\n ,MODALITY_TYPE\n ,DURATION_TYPE\n ,DURATION_PRIORITY\n ,SUB_MODALITY_TYPE\n)  \nselect INPAR_REPORT,VAR_REPREQ,sum(value),2,1,max(DURATION_TYPE),DURATION_PRIORITY,null from (\nSELECT nvl( \"VT\"*(1-AMOUNT-rate),0) as value,type,DURATION_PRIORITY,DURATION_TYPE\n FROM (\n  SELECT\n   TBL_COM_DIRECT_COST.REF_REPORT\n  ,TBL_COM_DIRECT_COST.REF_REPREQ\n  ,TBL_COM_DIRECT_COST.TYPE\n  ,TBL_COM_DIRECT_COST.DURATION_PRIORITY\n  ,TBL_COM_DIRECT_COST.DURATION_TYPE\n  ,TBL_COM_DIRECT_COST.NAME\n  ,TBL_COM_DIRECT_COST.BALANCE\n  ,TBL_COM_PREDICTION.AMOUNT\n  ,TBL_COM_LEGAL_DEPOSIT_RATE.RATE\n  FROM TBL_COM_DIRECT_COST,\n  TBL_COM_PREDICTION,\n  TBL_COM_LEGAL_DEPOSIT_RATE\n  WHERE TBL_COM_DIRECT_COST.REF_REPORT   = INPAR_REPORT\n   AND\n    TBL_COM_DIRECT_COST.REF_REPREQ   = VAR_REPREQ and TBL_COM_DIRECT_COST.name in ('VT'  )\n    and TBL_COM_PREDICTION.type_id = TBL_COM_DIRECT_COST.TYPE\n    and TBL_COM_PREDICTION.duration_type = TBL_COM_DIRECT_COST.DURATION_TYPE\n    and TBL_COM_PREDICTION.DU_PRIORITY = TBL_COM_DIRECT_COST.DURATION_PRIORITY\n   and TBL_COM_LEGAL_DEPOSIT_RATE.DEPOSIT_TYPE =  TBL_COM_DIRECT_COST.type\n )\n  PIVOT ( SUM ( BALANCE )\n   FOR NAME\n   IN ( 'TDC' as \"TDC\",'VT' as \"VT\" )\n  )\n  order by type,DURATION_PRIORITY)\n  group by  DURATION_PRIORITY;\ncommit;\n \nend;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_final_result(inpar_repreq IN NUMBER ,inpar_type IN NUMBER ) RETURN VARCHAR2\n  AS\n BEGIN\n if (inpar_type = 1) then\n  RETURN '\n  select a.sorat/b.makhrag as \"value\",a.duration_Type as \"durationType\",A.DURATION_PRIORITY as \"durationPriority\",a.SUB_MODALITY_TYPE as \"subModalityType\",a.MODALITY_TYPE  as \"modalityType\", type.NAME as \"name\" from (\nselect value as sorat,TBL_COM_FINAL_RESULT.DURATION_PRIORITY,TBL_COM_FINAL_RESULT.DURATION_TYPE,TBL_COM_FINAL_RESULT.SUB_MODALITY_TYPE,TBL_COM_FINAL_RESULT.MODALITY_TYPE from TBL_COM_FINAL_RESULT where TYPE = 1 and REF_REPREQ =   '||inpar_repreq||'\n\n)a,(\n\nselect value as makhrag ,DURATION_PRIORITY from TBL_COM_FINAL_RESULT where TYPE = 2 and REF_REPREQ = '||inpar_repreq||'\n)b\n\n ,\n  TBL_DEPOSIT_TYPE type\nWHERE A.DURATION_PRIORITY = B.DURATION_PRIORITY and type.REF_DEPOSIT_TYPE= a.SUB_MODALITY_TYPE \n\n  \n  ';\n  else \n  null;\n  end if;\n END;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n\n\n\nEND PKG_COM;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COM\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_COM_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_CREATE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_BRANCH             IN VARCHAR2\n ,INPAR_DEPOSIT            IN VARCHAR2\n ,INPAR_CUSTOMER           IN VARCHAR2\n ,INPAR_FIRST_DATE         IN VARCHAR2\n ,INPAR_BAZEH              IN VARCHAR2\n ,INPAR_CURRENCY           IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_FILL_SCALE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE_MAIN;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_LEDGER_TYPE (\n  INPAR_LEDGER_CODE   IN NUMBER\n ,INPAR_TYPE          IN NUMBER\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_LEDGER_TYPE RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_GET_REPORT_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_DIRECT_COST ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_final_result ( INPAR_REPORT IN NUMBER );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_COM_final_result(inpar_repreq IN NUMBER ,inpar_type IN NUMBER ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n/*SELECT nvl((\"TDC\"- (\"VT\"/100000*0.4))/\"VT\"*(1-0.5-0.6),0),type,DURATION_PRIORITY\n FROM (\n  SELECT\n   TBL_COM_DIRECT_COST.REF_REPORT\n  ,TBL_COM_DIRECT_COST.REF_REPREQ\n  ,TYPE\n  ,TBL_COM_DIRECT_COST.DURATION_PRIORITY\n  ,TBL_COM_DIRECT_COST.DURATION_TYPE\n  ,NAME\n  ,TBL_COM_DIRECT_COST.BALANCE\n  FROM TBL_COM_DIRECT_COST\n  WHERE REF_REPORT   = 1848\n   AND\n    REF_REPREQ   = 1392 and name in ('TDC'  ,'VT'  )\n )\n  PIVOT ( SUM ( BALANCE )\n   FOR NAME\n   IN ( 'TDC' as \"TDC\",'VT' as \"VT\" )\n  )\n  order by type,DURATION_PRIORITY;*/\n  \n  \n  \n  \n  \n /* \n  select balance from TBL_COM_DIRECT_COST  where name = 'V' and REF_REPREQ = 1392; \n\n  INSERT\nINTO TBL_COM_LEGAL_DEPOSIT_RATE\n  (\n    DEPOSIT_TYPE,\n    RATE,\n    REWARD_RATE\n  )\n  (\n  select distinct ref_deposit_type,case when modality_type = 2 then 0.08 else 0.103 end,case when modality_type = 2 then 0.08*0.01 else 0.103*0.01 end  from akin.tbl_deposit);\n*/\nEND PKG_COM;"},{"Name":"PKG_COMPARATIVE_STATISTIC","ObjectID":301430,"Digest":"b5594276b482a1cc0c2777aab305aed52b27c38bca9c6bee37a4b88daca9eaec","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COMPARATIVE_STATISTIC\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: گزارش \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي\n                    گزارش درخواستي  با نام \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي               \n    اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست               \n    ستاد يک شعبه خاص با کد 8899 مي باشد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_com_stat_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_month (INPAR_DATE IN DATE )   RETURN DATE ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_com_stat_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_STAT_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_value            IN VARCHAR2\n ,INPAR_type            IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date  in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_com_stat_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_comp_statistic_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ,inpar_branch in number,\n inpar_currency in number\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_com_stat_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_com_stat_FINAL_REPORT (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_comparative_statistic;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_COMPARATIVE_STATISTIC\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: گزارش \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي\n                    گزارش درخواستي  با نام \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي               \n    اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست               \n    ستاد يک شعبه خاص با کد 8899 مي باشد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_com_stat_PROFILE_REPORT (\n        inpar_name               IN VARCHAR2,\n        inpar_des                IN VARCHAR2,\n        inpar_ref_user           IN VARCHAR2,\n        inpar_status             IN VARCHAR2,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n        inpar_type               IN VARCHAR2,\n        outpar_id                OUT VARCHAR2\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_report (\n                name,\n                des,\n                create_date,\n                ref_user,\n                status,\n                type,\n                category\n            ) VALUES (\n                inpar_name,\n                inpar_des,\n                SYSDATE,\n                inpar_ref_user,\n                inpar_status,\n                inpar_type,\n                'comStat'\n            );\n\n            COMMIT;\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_report\n            WHERE\n                create_date = (\n                    SELECT\n                        MAX(create_date)\n                    FROM\n                        tbl_report\n                )\n                AND id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_report\n                );\n                update tbl_report set H_id = outpar_id where id  = outpar_id;\n\n        ELSE\n            UPDATE tbl_report\n            SET\n                name = inpar_name,\n                des = inpar_des,\n                ref_user = inpar_ref_user,\n                status = inpar_status,\n                type = inpar_type\n            WHERE\n                id = inpar_id;\n\n            COMMIT;\n        END IF;\n    END PRC_com_stat_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_esfand (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n     var_date   DATE;\n     VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive  PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || '/12'),1,7);\n\n        RETURN var_date;\n    END fnc_com_stat_esfand;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_pre_month (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n        VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        IF\n            ( lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0) = 01 )\n        THEN\n            SELECT DISTINCT\n                MAX(eff_date)\n            INTO var_date\n            FROM\n                tbl_ledger_archive  PARTITION ( VAR_PARTITION ) \n            WHERE\n                substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') )\n                                                                                                             || '/'\n                                                                                                             ||\n                    CASE\n                        WHEN lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0) = 01 THEN '12'\n                        ELSE lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0)\n                    END\n                ),1,7);\n\n        ELSE\n            SELECT DISTINCT\n                MAX(eff_date)\n            INTO var_date\n            FROM\n                tbl_ledger_archive PARTITION ( VAR_PARTITION ) \n            WHERE\n                substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') )\n                                                                                                             || '/'\n                                                                                                             ||\n                    CASE\n                        WHEN lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0) = 01 THEN '12'\n                        ELSE lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0)\n                    END\n                ),1,7);\n\n        END IF;\n\n        RETURN var_date;\n    END fnc_com_stat_pre_month;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_pre_year (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n        VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || substr(TO_CHAR(SYSDATE - 1,'yyyy/mm/dd','nls_calendar=persian'),5) ),1,7);\n\n        RETURN var_date;\n    END fnc_com_stat_pre_year;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    PROCEDURE prc_com_stat_profile_detail (\n        inpar_ref_rep_id         IN VARCHAR2,\n        inpar_profile_id         IN VARCHAR2,\n        inpar_value              IN VARCHAR2,\n        inpar_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n       ,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n        inpar_date  in VARCHAR2\n        ,outpar_id                OUT VARCHAR2\n\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_comparative_stat_pro_det (\n                ref_report,\n                profile_id,\n                type,\n                value,\n                eff_date\n            ) VALUES (\n                inpar_ref_rep_id,\n                inpar_profile_id,\n                inpar_type,\n                inpar_value,\n                trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            );\n\n            COMMIT; \n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_CAR_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REP_ID   = INPAR_REF_REP_ID;*/\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_comparative_stat_pro_det\n            WHERE\n                id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_comparative_stat_pro_det\n                );\n\n        ELSE\n            UPDATE tbl_comparative_stat_pro_det\n            SET\n                ref_report = inpar_ref_rep_id,\n                profile_id = inpar_profile_id,\n                value = inpar_value,\n                type = inpar_type,\n                eff_date =  trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            WHERE\n                id = inpar_id;\n\n        END IF;\n\n        COMMIT;\n    END prc_com_stat_profile_detail;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    PROCEDURE prc_com_stat_delete_report (\n        inpar_id   IN VARCHAR2,\n        outpar     OUT VARCHAR2\n    )\n        AS\n    BEGIN\n        DELETE FROM tbl_report\n        WHERE\n            id = inpar_id;\n\n        COMMIT;\n        DELETE FROM tbl_comparative_stat_val\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        DELETE FROM tbl_comparative_stat_pro_det\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        outpar := 1;\n    END prc_com_stat_delete_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_all_report (\n        inpar_id IN NUMBER\n    ) RETURN VARCHAR2 AS\n        var2   VARCHAR2(3000);\n    BEGIN\n        var2 := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n                || inpar_id\n                || ' and upper(category) = ''COM_STAT''';\n        RETURN var2;\n    END fnc_com_stat_all_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION FNC_COM_STAT_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2 as \n        output   VARCHAR2(20000);\n    BEGIN\n       \n            output := 'select det.id as \"id\",re.name as \"name\",re.des as \"des\",det.PROFILE_ID as \"ledgerProfileId\" ,det.value as \"value\",to_char(to_date(det.eff_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"effDate\" \n         ,det.type as \"type\"   from TBL_COMPARATIVE_STAT_PRO_DET det,\n            tbl_report re  where ref_report = re.id and REF_report = '\n                      || inpar_report|| '  ';\n        \n\n        RETURN output;\n    END fnc_com_stat_get_input_edit;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_comp_statistic_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,-- 1 = setad 2 = other\n    inpar_currency   IN NUMBER-- 1 = rial 2= other\n) RETURN VARCHAR2 AS\n    var CLOB;\n    var2 CLOB;\n    var3 CLOB;\n    var_branch VARCHAR2(200);\n    var_cur VARCHAR2(200);\n    VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n\n        if(inpar_branch = 1) then \n        var_branch:=' and ref_branch = 8899 ';\n        if(inpar_currency = 1) then \n            var_cur:=' and ref_cur_id = 4 ';\n        else\n            var_cur:= '   and ref_cur_id \u003c\u003e4  ';\n        end if;\n    else\n        var_branch:=' and ref_branch \u003c\u003e 8899 ';\n        if(inpar_currency = 1) then \n            var_cur:=' and ref_cur_id = 4 ';\n        else\n            var_cur:= ' and ref_cur_id \u003c\u003e4  '; \n        end if; \n    end if;\n    SELECT\n        '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n ,'',''\n ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n        || inpar_id\n           || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n     ,''[0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_VALUES\n    ,REGEXP_SUBSTR(\n        STR\n     ,''[^0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_SING\n    ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n  ,TBL_LEDGER_branch  PARTITION ( '|| VAR_PARTITION ||')  DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n    '||var_branch||'  '||var_cur||'\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE('''\n              || inpar_date\n                 || ''')))\n '\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE var\n    INTO var3;\n    SELECT\n        CASE\n            WHEN substr(TO_CHAR(var3),-1) IN (\n                '-',\n                '+'\n            ) THEN var3 || '0'\n            ELSE var3\n        END\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE 'select '\n                      || nvl(TO_CHAR(var),0)\n                      || ' from dual'\n    INTO var2;\n\n    RETURN abs(to_number(var2) );\n-- RETURN VAR;\n    END fnc_comp_statistic_gi_calc;\n\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n\n\n    PROCEDURE prc_com_stat_report_value (\n        inpar_id IN VARCHAR2\n    ) AS\n        var_repreq          NUMBER;\n        var_type_profile    NUMBER;\n        var_type_profile2   NUMBER;\n        inpar_date date;\n    BEGIN\n\nselect distinct(eff_date) into inpar_date from TBL_COMPARATIVE_STAT_PRO_DET where REF_REPORT=inpar_id;\n\n        SELECT\n            profile_id\n        INTO var_type_profile\n        FROM\n            tbl_comparative_stat_pro_det\n        WHERE\n            ref_report = inpar_id\n            AND type = 1;\n\n        SELECT\n            profile_id\n        INTO var_type_profile2\n        FROM\n            tbl_comparative_stat_pro_det\n        WHERE\n            ref_report = inpar_id\n            AND type = 0;\n\n        SELECT\n            MAX(id)\n        INTO var_repreq\n        FROM\n            tbl_repreq\n        WHERE\n            ref_report_id = inpar_id;\n            INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,1)\n,1,\n1,1 from dual;\n\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,2)\n,1,\n0,1 from dual;\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,1)\n,0,\n1,1 from dual;\ncommit;\n\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,2)\n,0,\n0,1 from dual;\ncommit;\n\n--**********************************************************************************************************\n\n INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,1)\n,1,\n1,0 from dual;\n\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,2)\n,1,\n0,0 from dual;\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,1)\n,0,\n1,0 from dual;\ncommit;\n\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,2)\n,0,\n0,0 from dual;\ncommit;\n\n\n\n\n\n    END prc_com_stat_report_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_com_stat_FINAL_REPORT (\n \ninpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2 as \n var_report number;\n var_currentyear number;\n var_preyear number;\n begin \n select max(ref_report) into var_report from TBL_COMPARATIVE_STAT_VAL where ref_repreq = inpar_repreq;\n  select  substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,4)  into  var_currentyear from TBL_COMPARATIVE_STAT_PRO_DET where ref_report = var_report and rownum =1 ;\n    select  substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,4)-1  into var_preyear from TBL_COMPARATIVE_STAT_PRO_DET where ref_report = var_report and rownum =1 ;\n return 'SELECT \n\n  val.CURRENT_MONTH as \"currentMonth\",\n  val.SIMILAR_MONTH_PRE_YEAR as \"similarMonthPreYear\",\n  val.END_OF_PRE_YEAR as \"esfand\",\n  val.TYPE as \"shobeSetad\",\n  val.CUR_TYPE as \"arziRiyali\",\n  val.TITLE as \"kolOther\",\n '||var_currentyear||' as \"currentYear\" ,\n '||var_preyear||' as \"preYear\"\n\nFROM TBL_COMPARATIVE_STAT_VAL val\nwhere \n\nval.ref_repreq =  '||inpar_repreq||'\nand val.cur_type =  '||inpar_CUR_TYPE||'';\n end FNC_com_stat_FINAL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n\n end pkg_comparative_statistic;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COMPARATIVE_STATISTIC\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: گزارش \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي\n                    گزارش درخواستي  با نام \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي               \n    اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست               \n    ستاد يک شعبه خاص با کد 8899 مي باشد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_com_stat_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_month (INPAR_DATE IN DATE )   RETURN DATE ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_com_stat_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_STAT_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_value            IN VARCHAR2\n ,INPAR_type            IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date  in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_com_stat_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_comp_statistic_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ,inpar_branch in number,\n inpar_currency in number\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_com_stat_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_com_stat_FINAL_REPORT (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_comparative_statistic;"},{"Name":"PKG_COMPARATIVE_STATISTIC","ObjectID":301431,"Digest":"b5594276b482a1cc0c2777aab305aed52b27c38bca9c6bee37a4b88daca9eaec","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COMPARATIVE_STATISTIC\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: گزارش \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي\n                    گزارش درخواستي  با نام \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي               \n    اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست               \n    ستاد يک شعبه خاص با کد 8899 مي باشد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_com_stat_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_month (INPAR_DATE IN DATE )   RETURN DATE ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_com_stat_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_STAT_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_value            IN VARCHAR2\n ,INPAR_type            IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date  in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_com_stat_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_comp_statistic_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ,inpar_branch in number,\n inpar_currency in number\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_com_stat_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_com_stat_FINAL_REPORT (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_comparative_statistic;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_COMPARATIVE_STATISTIC\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: گزارش \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي\n                    گزارش درخواستي  با نام \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي               \n    اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست               \n    ستاد يک شعبه خاص با کد 8899 مي باشد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_com_stat_PROFILE_REPORT (\n        inpar_name               IN VARCHAR2,\n        inpar_des                IN VARCHAR2,\n        inpar_ref_user           IN VARCHAR2,\n        inpar_status             IN VARCHAR2,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n        inpar_type               IN VARCHAR2,\n        outpar_id                OUT VARCHAR2\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_report (\n                name,\n                des,\n                create_date,\n                ref_user,\n                status,\n                type,\n                category\n            ) VALUES (\n                inpar_name,\n                inpar_des,\n                SYSDATE,\n                inpar_ref_user,\n                inpar_status,\n                inpar_type,\n                'comStat'\n            );\n\n            COMMIT;\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_report\n            WHERE\n                create_date = (\n                    SELECT\n                        MAX(create_date)\n                    FROM\n                        tbl_report\n                )\n                AND id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_report\n                );\n                update tbl_report set H_id = outpar_id where id  = outpar_id;\n\n        ELSE\n            UPDATE tbl_report\n            SET\n                name = inpar_name,\n                des = inpar_des,\n                ref_user = inpar_ref_user,\n                status = inpar_status,\n                type = inpar_type\n            WHERE\n                id = inpar_id;\n\n            COMMIT;\n        END IF;\n    END PRC_com_stat_PROFILE_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_esfand (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n     var_date   DATE;\n     VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive  PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || '/12'),1,7);\n\n        RETURN var_date;\n    END fnc_com_stat_esfand;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_pre_month (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n        VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        IF\n            ( lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0) = 01 )\n        THEN\n            SELECT DISTINCT\n                MAX(eff_date)\n            INTO var_date\n            FROM\n                tbl_ledger_archive  PARTITION ( VAR_PARTITION ) \n            WHERE\n                substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') )\n                                                                                                             || '/'\n                                                                                                             ||\n                    CASE\n                        WHEN lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0) = 01 THEN '12'\n                        ELSE lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0)\n                    END\n                ),1,7);\n\n        ELSE\n            SELECT DISTINCT\n                MAX(eff_date)\n            INTO var_date\n            FROM\n                tbl_ledger_archive PARTITION ( VAR_PARTITION ) \n            WHERE\n                substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') )\n                                                                                                             || '/'\n                                                                                                             ||\n                    CASE\n                        WHEN lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0) = 01 THEN '12'\n                        ELSE lpad(substr(TO_CHAR(inpar_date,'yyyy/mm/dd','nls_calendar=persian'),6,2) - 1,2,0)\n                    END\n                ),1,7);\n\n        END IF;\n\n        RETURN var_date;\n    END fnc_com_stat_pre_month;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_pre_year (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n        VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || substr(TO_CHAR(SYSDATE - 1,'yyyy/mm/dd','nls_calendar=persian'),5) ),1,7);\n\n        RETURN var_date;\n    END fnc_com_stat_pre_year;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    PROCEDURE prc_com_stat_profile_detail (\n        inpar_ref_rep_id         IN VARCHAR2,\n        inpar_profile_id         IN VARCHAR2,\n        inpar_value              IN VARCHAR2,\n        inpar_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n       ,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n        inpar_date  in VARCHAR2\n        ,outpar_id                OUT VARCHAR2\n\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_comparative_stat_pro_det (\n                ref_report,\n                profile_id,\n                type,\n                value,\n                eff_date\n            ) VALUES (\n                inpar_ref_rep_id,\n                inpar_profile_id,\n                inpar_type,\n                inpar_value,\n                trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            );\n\n            COMMIT; \n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_CAR_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REP_ID   = INPAR_REF_REP_ID;*/\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_comparative_stat_pro_det\n            WHERE\n                id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_comparative_stat_pro_det\n                );\n\n        ELSE\n            UPDATE tbl_comparative_stat_pro_det\n            SET\n                ref_report = inpar_ref_rep_id,\n                profile_id = inpar_profile_id,\n                value = inpar_value,\n                type = inpar_type,\n                eff_date =  trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            WHERE\n                id = inpar_id;\n\n        END IF;\n\n        COMMIT;\n    END prc_com_stat_profile_detail;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    PROCEDURE prc_com_stat_delete_report (\n        inpar_id   IN VARCHAR2,\n        outpar     OUT VARCHAR2\n    )\n        AS\n    BEGIN\n        DELETE FROM tbl_report\n        WHERE\n            id = inpar_id;\n\n        COMMIT;\n        DELETE FROM tbl_comparative_stat_val\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        DELETE FROM tbl_comparative_stat_pro_det\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        outpar := 1;\n    END prc_com_stat_delete_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_com_stat_all_report (\n        inpar_id IN NUMBER\n    ) RETURN VARCHAR2 AS\n        var2   VARCHAR2(3000);\n    BEGIN\n        var2 := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n                || inpar_id\n                || ' and upper(category) = ''COM_STAT''';\n        RETURN var2;\n    END fnc_com_stat_all_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION FNC_COM_STAT_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2 as \n        output   VARCHAR2(20000);\n    BEGIN\n       \n            output := 'select det.id as \"id\",re.name as \"name\",re.des as \"des\",det.PROFILE_ID as \"ledgerProfileId\" ,det.value as \"value\",to_char(to_date(det.eff_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"effDate\" \n         ,det.type as \"type\"   from TBL_COMPARATIVE_STAT_PRO_DET det,\n            tbl_report re  where ref_report = re.id and REF_report = '\n                      || inpar_report|| '  ';\n        \n\n        RETURN output;\n    END fnc_com_stat_get_input_edit;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_comp_statistic_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,-- 1 = setad 2 = other\n    inpar_currency   IN NUMBER-- 1 = rial 2= other\n) RETURN VARCHAR2 AS\n    var CLOB;\n    var2 CLOB;\n    var3 CLOB;\n    var_branch VARCHAR2(200);\n    var_cur VARCHAR2(200);\n    VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n\n        if(inpar_branch = 1) then \n        var_branch:=' and ref_branch = 8899 ';\n        if(inpar_currency = 1) then \n            var_cur:=' and ref_cur_id = 4 ';\n        else\n            var_cur:= '   and ref_cur_id \u003c\u003e4  ';\n        end if;\n    else\n        var_branch:=' and ref_branch \u003c\u003e 8899 ';\n        if(inpar_currency = 1) then \n            var_cur:=' and ref_cur_id = 4 ';\n        else\n            var_cur:= ' and ref_cur_id \u003c\u003e4  '; \n        end if; \n    end if;\n    SELECT\n        '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n ,'',''\n ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n        || inpar_id\n           || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n     ,''[0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_VALUES\n    ,REGEXP_SUBSTR(\n        STR\n     ,''[^0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_SING\n    ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n  ,TBL_LEDGER_branch  PARTITION ( '|| VAR_PARTITION ||')  DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n    '||var_branch||'  '||var_cur||'\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE('''\n              || inpar_date\n                 || ''')))\n '\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE var\n    INTO var3;\n    SELECT\n        CASE\n            WHEN substr(TO_CHAR(var3),-1) IN (\n                '-',\n                '+'\n            ) THEN var3 || '0'\n            ELSE var3\n        END\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE 'select '\n                      || nvl(TO_CHAR(var),0)\n                      || ' from dual'\n    INTO var2;\n\n    RETURN abs(to_number(var2) );\n-- RETURN VAR;\n    END fnc_comp_statistic_gi_calc;\n\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \n\n\n    PROCEDURE prc_com_stat_report_value (\n        inpar_id IN VARCHAR2\n    ) AS\n        var_repreq          NUMBER;\n        var_type_profile    NUMBER;\n        var_type_profile2   NUMBER;\n        inpar_date date;\n    BEGIN\n\nselect distinct(eff_date) into inpar_date from TBL_COMPARATIVE_STAT_PRO_DET where REF_REPORT=inpar_id;\n\n        SELECT\n            profile_id\n        INTO var_type_profile\n        FROM\n            tbl_comparative_stat_pro_det\n        WHERE\n            ref_report = inpar_id\n            AND type = 1;\n\n        SELECT\n            profile_id\n        INTO var_type_profile2\n        FROM\n            tbl_comparative_stat_pro_det\n        WHERE\n            ref_report = inpar_id\n            AND type = 0;\n\n        SELECT\n            MAX(id)\n        INTO var_repreq\n        FROM\n            tbl_repreq\n        WHERE\n            ref_report_id = inpar_id;\n            INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,1)\n,1,\n1,1 from dual;\n\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,2)\n,1,\n0,1 from dual;\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,1)\n,0,\n1,1 from dual;\ncommit;\n\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,to_date(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,2)\n,0,\n0,1 from dual;\ncommit;\n\n--**********************************************************************************************************\n\n INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,1)\n,1,\n1,0 from dual;\n\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),1,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),1,2)\n,1,\n0,0 from dual;\ncommit;\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,1)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,1)\n,0,\n1,0 from dual;\ncommit;\n\n  INSERT INTO tbl_comparative_stat_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    pre_month,\n    similar_month_pre_year,\n    end_of_pre_year,\n    type,\n    cur_type,title\n) \nselect inpar_id,var_repreq,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,to_date(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_MONTH(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_PRE_YEAR(inpar_date),2,2)\n,PKG_COMPARATIVE_STATISTIC.fnc_comp_statistic_gi_calc(var_type_profile2,PKG_COMPARATIVE_STATISTIC.FNC_COM_STAT_ESFAND(inpar_date),2,2)\n,0,\n0,0 from dual;\ncommit;\n\n\n\n\n\n    END prc_com_stat_report_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_com_stat_FINAL_REPORT (\n \ninpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2 as \n var_report number;\n var_currentyear number;\n var_preyear number;\n begin \n select max(ref_report) into var_report from TBL_COMPARATIVE_STAT_VAL where ref_repreq = inpar_repreq;\n  select  substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,4)  into  var_currentyear from TBL_COMPARATIVE_STAT_PRO_DET where ref_report = var_report and rownum =1 ;\n    select  substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,4)-1  into var_preyear from TBL_COMPARATIVE_STAT_PRO_DET where ref_report = var_report and rownum =1 ;\n return 'SELECT \n\n  val.CURRENT_MONTH as \"currentMonth\",\n  val.SIMILAR_MONTH_PRE_YEAR as \"similarMonthPreYear\",\n  val.END_OF_PRE_YEAR as \"esfand\",\n  val.TYPE as \"shobeSetad\",\n  val.CUR_TYPE as \"arziRiyali\",\n  val.TITLE as \"kolOther\",\n '||var_currentyear||' as \"currentYear\" ,\n '||var_preyear||' as \"preYear\"\n\nFROM TBL_COMPARATIVE_STAT_VAL val\nwhere \n\nval.ref_repreq =  '||inpar_repreq||'\nand val.cur_type =  '||inpar_CUR_TYPE||'';\n end FNC_com_stat_FINAL_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n\n end pkg_comparative_statistic;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_COMPARATIVE_STATISTIC\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: گزارش \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي\n                    گزارش درخواستي  با نام \"آمار مقايسه‌اي مانده تسهيلات بانك به تفكيك ريالي و ارزي               \n    اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست               \n    ستاد يک شعبه خاص با کد 8899 مي باشد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_com_stat_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_month (INPAR_DATE IN DATE )   RETURN DATE ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION FNC_com_stat_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_com_stat_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_COM_STAT_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_value            IN VARCHAR2\n ,INPAR_type            IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date  in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_com_stat_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_COM_STAT_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_comp_statistic_GI_CALC (\n  INPAR_ID     IN NUMBER\n ,INPAR_DATE   IN DATE\n ,inpar_branch in number,\n inpar_currency in number\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_com_stat_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_com_stat_FINAL_REPORT (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_comparative_statistic;"},{"Name":"PKG_CREDITRISK_BRANCH_INDEX","ObjectID":301556,"Digest":"e2dce3b8694266cc37f51b26a5e6b75e83486c6780270a7fe06000f73683e262","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CREDITRISK_BRANCH_INDEX\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش \"شاخص ريسك اعتباري شعب\"\n                                          اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست.               \n            شاخص ريسک اعتباري از تقسيم مطالبات غير جاري بر مانده تسهيلات بدست مي آيد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_cr_br_index_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_cr_br_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_cr_br_index_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date               in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_cr_br_index_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_FINAL_REPORT  (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nFUNCTION fnc_creditrisk_br_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,-- 1 = setad 2 = other\n    inpar_currency   IN NUMBER-- 1 = rial 2= other\n) RETURN VARCHAR2 ;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_creditRisk_branch_index;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CREDITRISK_BRANCH_INDEX\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش \"شاخص ريسك اعتباري شعب\"\n                                          اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست.               \n            شاخص ريسک اعتباري از تقسيم مطالبات غير جاري بر مانده تسهيلات بدست مي آيد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_esfand (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n       -- VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive --PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || '/12'),1,7);\n\n        RETURN var_date;\n  end fnc_cr_br_index_esfand;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION fnc_cr_br_pre_year (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n              --  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive --PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || substr(TO_CHAR(SYSDATE - 1,'yyyy/mm/dd','nls_calendar=persian'),5) ),1,7);\n\n        RETURN var_date;\n    END fnc_cr_br_pre_year;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nprocedure prc_cr_br_index_profile_report (\n        inpar_name               IN VARCHAR2,\n        inpar_des                IN VARCHAR2,\n        inpar_ref_user           IN VARCHAR2,\n        inpar_status             IN VARCHAR2,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n        inpar_type               IN VARCHAR2,\n        outpar_id                OUT VARCHAR2\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_report (\n                name,\n                des,\n                create_date,\n                ref_user,\n                status,\n                type,\n                category\n            ) VALUES (\n                inpar_name,\n                inpar_des,\n                SYSDATE,\n                inpar_ref_user,\n                inpar_status,\n                'crIndex',\n                'crIndex'\n            );\n\n            COMMIT;\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_report\n            WHERE\n                create_date = (\n                    SELECT\n                        MAX(create_date)\n                    FROM\n                        tbl_report\n                )\n                AND id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_report\n                );\n  update tbl_report set H_id = outpar_id where id  = outpar_id;\n        ELSE\n            UPDATE tbl_report\n            SET\n                name = inpar_name,\n                des = inpar_des,\n                ref_user = inpar_ref_user,\n                status = inpar_status,\n                type = inpar_type\n            WHERE\n                id = inpar_id;\n\n            COMMIT;\n        END IF;\n  end prc_cr_br_index_profile_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_cr_br_index_profile_detail (\n        inpar_ref_rep_id         IN VARCHAR2,\n        inpar_profile_id         IN VARCHAR2,\n        inpar_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n       ,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n         inpar_date               in VARCHAR2\n        ,outpar_id                OUT VARCHAR2\n\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO TBL_CR_BR_INDEX_PRO_DET (\n                ref_report,\n                profile_id,\n                type,\n              \n                eff_date\n            ) VALUES (\n                inpar_ref_rep_id,\n                inpar_profile_id,\n                inpar_type,\n              \n                trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            );\n\n            COMMIT; \n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_CAR_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REP_ID   = INPAR_REF_REP_ID;*/\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                TBL_CR_BR_INDEX_PRO_DET\n            WHERE\n                id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        TBL_CR_BR_INDEX_PRO_DET\n                );\n\n        ELSE\n            UPDATE TBL_CR_BR_INDEX_PRO_DET\n            SET\n                ref_report = inpar_ref_rep_id,\n                profile_id = inpar_profile_id,\n          \n                type = inpar_type,\n                eff_date = trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            WHERE\n                id = inpar_id;\n\n        END IF;\n\n        COMMIT;\n  end prc_cr_br_index_profile_detail;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_cr_br_index_delete_report (\n        inpar_id   IN VARCHAR2,\n        outpar     OUT VARCHAR2\n    )    \n        AS\n    BEGIN\n        DELETE FROM tbl_report\n        WHERE\n            id = inpar_id;\n\n        COMMIT;\n        DELETE FROM TBL_CR_BR_INDEX_PRO_DET\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        DELETE FROM TBL_CR_BR_INDEX_VAL\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        outpar := 1;\n  end prc_cr_br_index_delete_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_all_report (\n        inpar_id IN NUMBER\n    ) RETURN VARCHAR2 AS\n        var2   VARCHAR2(3000);\n    BEGIN\n        var2 := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n                || inpar_id\n                || ' and upper(category) = ''CR_INDEX''';\n        RETURN var2;\n  end fnc_cr_br_index_all_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_get_input_edit (\n        inpar_report   IN NUMBER\n    ) RETURN VARCHAR2 AS\n        output   VARCHAR2(2000);\n    BEGIN\n       \n            output := 'select det.id as \"id\",re.name as \"name\",re.des as \"des\",det.PROFILE_ID as \"ledgerProfileId\" ,to_char(to_date(det.eff_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"effDate\" \n         ,det.type as \"type\"   from TBL_CR_BR_INDEX_PRO_DET det,\n            tbl_report re  where ref_report = re.id and REF_report = '\n                      || inpar_report|| '  ';\n       \n        RETURN output;\n  end fnc_cr_br_index_get_input_edit;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nprocedure prc_cr_br_index_report_value (\n  inpar_id   in varchar2) as\n  \n    var_repreq          NUMBER;\n        var_type_profile    NUMBER;\n        var_type_profile2   NUMBER;\n        inpar_date date;\n        var_esfand DATE ;\n        var_pre_year date;\n        VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\nBEGIN    \n\nselect distinct(eff_date) into inpar_date from TBL_CR_BR_INDEX_PRO_DET where REF_REPORT=inpar_id;\n\nvar_pre_year :=FNC_cr_br_pre_year(inpar_date);\n\nVAR_ESFAND :=FNC_CR_BR_INDEX_ESFAND (inpar_date);\n        SELECT\n            profile_id\n        INTO var_type_profile\n        FROM\n            TBL_CR_BR_INDEX_PRO_DET\n        WHERE\n            ref_report = inpar_id\n            AND type = 1;\n\n        SELECT\n            profile_id\n        INTO var_type_profile2\n        FROM\n            TBL_CR_BR_INDEX_PRO_DET\n        WHERE\n            ref_report = inpar_id\n            AND type = 0;\n\n        SELECT\n            MAX(id)\n        INTO var_repreq\n        FROM\n            tbl_repreq\n        WHERE\n            ref_report_id = inpar_id;\n\nINSERT INTO tbl_cr_br_index_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    end_of_pre_year,\n    cur_type,\n    title,\n    ref_branch,\n    branch_name,\n    CURRENT_MONTH_PRE_YEAR\n) \nSELECT /* + PARALLEL (AOUTO)*/\n    inpar_id,\n    var_repreq\n,pkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile,inpar_date,ref_branch,ref_cur_id),\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile,var_esfand,ref_branch,ref_cur_id),\nref_cur_id,\n1,\nref_branch,\nref_branch,\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile,var_pre_year,ref_branch,ref_cur_id)\nFROM tbl_ledger_branch  \nWHERE\n    eff_date IN (\n        inpar_date,\n        var_esfand\n    )\n    group BY ref_branch,ref_cur_id;\nCOMMIT;\nINSERT INTO tbl_cr_br_index_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    end_of_pre_year,\n    cur_type,\n    title,\n    ref_branch,\n    branch_name,\n    CURRENT_MONTH_PRE_YEAR\n) \nSELECT /* + PARALLEL (AOUTO)*/\n    inpar_id,\n    var_repreq\n,pkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile2,inpar_date,ref_branch,ref_cur_id),\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile2,var_esfand,ref_branch,ref_cur_id),\nref_cur_id,\n0,\nref_branch,\nref_branch,\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile2,var_pre_year,ref_branch,ref_cur_id)\nFROM tbl_ledger_branch  \nWHERE\n    eff_date IN (\n        inpar_date,\n        var_esfand\n    )\n    group BY ref_branch,ref_cur_id;\n    COMMIT;\n    UPDATE TBL_CR_BR_INDEX_VAL TCR SET TCR.BRANCH_NAME =(SELECT TBL_BRANCH.NAME  FROM TBL_BRANCH WHERE TBL_BRANCH.BRN_ID = TCR.REF_BRANCH )  WHERE TCR.REF_REPREQ = VAR_REPREQ;\n    COMMIT;\n\n  end prc_cr_br_index_report_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_final_report (\n\n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number -- BAYAD 4 BARAE RIALI BEDAHAD\n ) RETURN VARCHAR2 as \n \n begin \n \n return 'SELECT \n\n  CURRENT_MONTH as \"currentMonth\",\n  END_OF_PRE_YEAR as \"esfand\",\n  CUR_TYPE as \"arziRiyali\",\n  TITLE as \"kolOther\",\n  ref_branch as \"refBranch\",\n  branch_name as \"branchName\"\nFROM TBL_CR_BR_INDEX_VAL \nwhere \n ref_repreq =  '||inpar_repreq||'\nand cur_type =  '||inpar_CUR_TYPE||'\n';\n \n  end fnc_cr_br_index_final_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_creditrisk_br_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,\n    inpar_currency   IN NUMBER\n) RETURN VARCHAR2 AS\n    var CLOB;\n    var2 CLOB;\n    var3 CLOB;\nVAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE),'J');\n    BEGIN\n\n    SELECT\n        '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n ,'',''\n ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n        || inpar_id\n           || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n     ,''[0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_VALUES\n    ,REGEXP_SUBSTR(\n        STR\n     ,''[^0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_SING\n    ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n  ,TBL_LEDGER_branch PARTITION ( '||VAR_PARTITION||' )  DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     and ref_branch = '||inpar_branch||' and ref_cur_id =  '||inpar_currency||'\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE('''\n              || inpar_date\n                 || ''')))\n '\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE var\n    INTO var3;\n    SELECT\n        CASE\n            WHEN substr(TO_CHAR(var3),-1) IN (\n                '-',\n                '+'\n            ) THEN var3 || '0'\n            ELSE var3\n        END\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE 'select '\n                      || nvl(TO_CHAR(var),0)\n                      || ' from dual'\n    INTO var2;\n\n    RETURN abs(to_number(var2) );\n-- RETURN VAR;\n    END fnc_creditrisk_br_gi_calc;\n\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n\n\n\nend pkg_creditrisk_branch_index;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CREDITRISK_BRANCH_INDEX\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش \"شاخص ريسك اعتباري شعب\"\n                                          اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست.               \n            شاخص ريسک اعتباري از تقسيم مطالبات غير جاري بر مانده تسهيلات بدست مي آيد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_cr_br_index_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_cr_br_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_cr_br_index_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date               in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_cr_br_index_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_FINAL_REPORT  (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nFUNCTION fnc_creditrisk_br_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,-- 1 = setad 2 = other\n    inpar_currency   IN NUMBER-- 1 = rial 2= other\n) RETURN VARCHAR2 ;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_creditRisk_branch_index;"},{"Name":"PKG_CREDITRISK_BRANCH_INDEX","ObjectID":301565,"Digest":"e2dce3b8694266cc37f51b26a5e6b75e83486c6780270a7fe06000f73683e262","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CREDITRISK_BRANCH_INDEX\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش \"شاخص ريسك اعتباري شعب\"\n                                          اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست.               \n            شاخص ريسک اعتباري از تقسيم مطالبات غير جاري بر مانده تسهيلات بدست مي آيد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_cr_br_index_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_cr_br_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_cr_br_index_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date               in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_cr_br_index_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_FINAL_REPORT  (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nFUNCTION fnc_creditrisk_br_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,-- 1 = setad 2 = other\n    inpar_currency   IN NUMBER-- 1 = rial 2= other\n) RETURN VARCHAR2 ;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_creditRisk_branch_index;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CREDITRISK_BRANCH_INDEX\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش \"شاخص ريسك اعتباري شعب\"\n                                          اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست.               \n            شاخص ريسک اعتباري از تقسيم مطالبات غير جاري بر مانده تسهيلات بدست مي آيد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_esfand (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n       -- VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive --PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || '/12'),1,7);\n\n        RETURN var_date;\n  end fnc_cr_br_index_esfand;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n   FUNCTION fnc_cr_br_pre_year (\n        inpar_date IN DATE\n    ) RETURN DATE AS\n        var_date   DATE;\n              --  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n\n    BEGIN\n        SELECT DISTINCT\n            MAX(eff_date)\n        INTO var_date\n        FROM\n            tbl_ledger_archive --PARTITION ( VAR_PARTITION ) \n        WHERE\n            substr(TO_CHAR(eff_date,'yyyy/mm/dd','nls_calendar=persian'),1,7) = substr(TO_CHAR(EXTRACT(YEAR FROM TO_DATE(TO_CHAR(inpar_date,'yyyy/mm/dd'\n,'nls_calendar=persian'),'yyyy/mm/dd') ) - 1\n                                                                                                         || substr(TO_CHAR(SYSDATE - 1,'yyyy/mm/dd','nls_calendar=persian'),5) ),1,7);\n\n        RETURN var_date;\n    END fnc_cr_br_pre_year;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nprocedure prc_cr_br_index_profile_report (\n        inpar_name               IN VARCHAR2,\n        inpar_des                IN VARCHAR2,\n        inpar_ref_user           IN VARCHAR2,\n        inpar_status             IN VARCHAR2,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n        inpar_type               IN VARCHAR2,\n        outpar_id                OUT VARCHAR2\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_report (\n                name,\n                des,\n                create_date,\n                ref_user,\n                status,\n                type,\n                category\n            ) VALUES (\n                inpar_name,\n                inpar_des,\n                SYSDATE,\n                inpar_ref_user,\n                inpar_status,\n                'crIndex',\n                'crIndex'\n            );\n\n            COMMIT;\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_report\n            WHERE\n                create_date = (\n                    SELECT\n                        MAX(create_date)\n                    FROM\n                        tbl_report\n                )\n                AND id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_report\n                );\n  update tbl_report set H_id = outpar_id where id  = outpar_id;\n        ELSE\n            UPDATE tbl_report\n            SET\n                name = inpar_name,\n                des = inpar_des,\n                ref_user = inpar_ref_user,\n                status = inpar_status,\n                type = inpar_type\n            WHERE\n                id = inpar_id;\n\n            COMMIT;\n        END IF;\n  end prc_cr_br_index_profile_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_cr_br_index_profile_detail (\n        inpar_ref_rep_id         IN VARCHAR2,\n        inpar_profile_id         IN VARCHAR2,\n        inpar_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n       ,\n        inpar_insert_or_update   IN VARCHAR2,\n        inpar_id                 IN VARCHAR2,\n         inpar_date               in VARCHAR2\n        ,outpar_id                OUT VARCHAR2\n\n    )\n        AS\n    BEGIN\n        IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO TBL_CR_BR_INDEX_PRO_DET (\n                ref_report,\n                profile_id,\n                type,\n              \n                eff_date\n            ) VALUES (\n                inpar_ref_rep_id,\n                inpar_profile_id,\n                inpar_type,\n              \n                trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            );\n\n            COMMIT; \n/*   SELECT*/\n/*    ID*/\n/*   INTO*/\n/*    OUTPAR_ID*/\n/*   FROM TBL_CAR_REP_PROFILE_DETAIL*/\n/*   WHERE REF_REP_ID   = INPAR_REF_REP_ID;*/\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                TBL_CR_BR_INDEX_PRO_DET\n            WHERE\n                id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        TBL_CR_BR_INDEX_PRO_DET\n                );\n\n        ELSE\n            UPDATE TBL_CR_BR_INDEX_PRO_DET\n            SET\n                ref_report = inpar_ref_rep_id,\n                profile_id = inpar_profile_id,\n          \n                type = inpar_type,\n                eff_date = trunc(TO_DATE(inpar_date,'yyyy/mm/dd','nls_calendar=persian'))\n            WHERE\n                id = inpar_id;\n\n        END IF;\n\n        COMMIT;\n  end prc_cr_br_index_profile_detail;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nprocedure prc_cr_br_index_delete_report (\n        inpar_id   IN VARCHAR2,\n        outpar     OUT VARCHAR2\n    )    \n        AS\n    BEGIN\n        DELETE FROM tbl_report\n        WHERE\n            id = inpar_id;\n\n        COMMIT;\n        DELETE FROM TBL_CR_BR_INDEX_PRO_DET\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        DELETE FROM TBL_CR_BR_INDEX_VAL\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        outpar := 1;\n  end prc_cr_br_index_delete_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_all_report (\n        inpar_id IN NUMBER\n    ) RETURN VARCHAR2 AS\n        var2   VARCHAR2(3000);\n    BEGIN\n        var2 := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n                || inpar_id\n                || ' and upper(category) = ''CR_INDEX''';\n        RETURN var2;\n  end fnc_cr_br_index_all_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_get_input_edit (\n        inpar_report   IN NUMBER\n    ) RETURN VARCHAR2 AS\n        output   VARCHAR2(2000);\n    BEGIN\n       \n            output := 'select det.id as \"id\",re.name as \"name\",re.des as \"des\",det.PROFILE_ID as \"ledgerProfileId\" ,to_char(to_date(det.eff_date,''dd-mm-yy''),''yyyy-mm-dd'',''nls_calendar=persian'') as \"effDate\" \n         ,det.type as \"type\"   from TBL_CR_BR_INDEX_PRO_DET det,\n            tbl_report re  where ref_report = re.id and REF_report = '\n                      || inpar_report|| '  ';\n       \n        RETURN output;\n  end fnc_cr_br_index_get_input_edit;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nprocedure prc_cr_br_index_report_value (\n  inpar_id   in varchar2) as\n  \n    var_repreq          NUMBER;\n        var_type_profile    NUMBER;\n        var_type_profile2   NUMBER;\n        inpar_date date;\n        var_esfand DATE ;\n        var_pre_year date;\n        VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\nBEGIN    \n\nselect distinct(eff_date) into inpar_date from TBL_CR_BR_INDEX_PRO_DET where REF_REPORT=inpar_id;\n\nvar_pre_year :=FNC_cr_br_pre_year(inpar_date);\n\nVAR_ESFAND :=FNC_CR_BR_INDEX_ESFAND (inpar_date);\n        SELECT\n            profile_id\n        INTO var_type_profile\n        FROM\n            TBL_CR_BR_INDEX_PRO_DET\n        WHERE\n            ref_report = inpar_id\n            AND type = 1;\n\n        SELECT\n            profile_id\n        INTO var_type_profile2\n        FROM\n            TBL_CR_BR_INDEX_PRO_DET\n        WHERE\n            ref_report = inpar_id\n            AND type = 0;\n\n        SELECT\n            MAX(id)\n        INTO var_repreq\n        FROM\n            tbl_repreq\n        WHERE\n            ref_report_id = inpar_id;\n\nINSERT INTO tbl_cr_br_index_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    end_of_pre_year,\n    cur_type,\n    title,\n    ref_branch,\n    branch_name,\n    CURRENT_MONTH_PRE_YEAR\n) \nSELECT /* + PARALLEL (AOUTO)*/\n    inpar_id,\n    var_repreq\n,pkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile,inpar_date,ref_branch,ref_cur_id),\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile,var_esfand,ref_branch,ref_cur_id),\nref_cur_id,\n1,\nref_branch,\nref_branch,\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile,var_pre_year,ref_branch,ref_cur_id)\nFROM tbl_ledger_branch  \nWHERE\n    eff_date IN (\n        inpar_date,\n        var_esfand\n    )\n    group BY ref_branch,ref_cur_id;\nCOMMIT;\nINSERT INTO tbl_cr_br_index_val (\n    ref_report,\n    ref_repreq,\n    current_month,\n    end_of_pre_year,\n    cur_type,\n    title,\n    ref_branch,\n    branch_name,\n    CURRENT_MONTH_PRE_YEAR\n) \nSELECT /* + PARALLEL (AOUTO)*/\n    inpar_id,\n    var_repreq\n,pkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile2,inpar_date,ref_branch,ref_cur_id),\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile2,var_esfand,ref_branch,ref_cur_id),\nref_cur_id,\n0,\nref_branch,\nref_branch,\npkg_creditrisk_branch_index.fnc_creditrisk_br_gi_calc(var_type_profile2,var_pre_year,ref_branch,ref_cur_id)\nFROM tbl_ledger_branch  \nWHERE\n    eff_date IN (\n        inpar_date,\n        var_esfand\n    )\n    group BY ref_branch,ref_cur_id;\n    COMMIT;\n    UPDATE TBL_CR_BR_INDEX_VAL TCR SET TCR.BRANCH_NAME =(SELECT TBL_BRANCH.NAME  FROM TBL_BRANCH WHERE TBL_BRANCH.BRN_ID = TCR.REF_BRANCH )  WHERE TCR.REF_REPREQ = VAR_REPREQ;\n    COMMIT;\n\n  end prc_cr_br_index_report_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_cr_br_index_final_report (\n\n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number -- BAYAD 4 BARAE RIALI BEDAHAD\n ) RETURN VARCHAR2 as \n \n begin \n \n return 'SELECT \n\n  CURRENT_MONTH as \"currentMonth\",\n  END_OF_PRE_YEAR as \"esfand\",\n  CUR_TYPE as \"arziRiyali\",\n  TITLE as \"kolOther\",\n  ref_branch as \"refBranch\",\n  branch_name as \"branchName\"\nFROM TBL_CR_BR_INDEX_VAL \nwhere \n ref_repreq =  '||inpar_repreq||'\nand cur_type =  '||inpar_CUR_TYPE||'\n';\n \n  end fnc_cr_br_index_final_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_creditrisk_br_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,\n    inpar_currency   IN NUMBER\n) RETURN VARCHAR2 AS\n    var CLOB;\n    var2 CLOB;\n    var3 CLOB;\nVAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE),'J');\n    BEGIN\n\n    SELECT\n        '\n  SELECT\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n ,'',''\n ,''''\n   )\n   FROM (\n    SELECT\n     ABS(DG.BALANCE) ||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = '\n        || inpar_id\n           || '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n     ,''[0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_VALUES\n    ,REGEXP_SUBSTR(\n        STR\n     ,''[^0-9]+''\n     ,1\n     ,LEVEL\n       ) SPLIT_SING\n    ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n  ,TBL_LEDGER_branch PARTITION ( '||VAR_PARTITION||' )  DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     and ref_branch = '||inpar_branch||' and ref_cur_id =  '||inpar_currency||'\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE('''\n              || inpar_date\n                 || ''')))\n '\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE var\n    INTO var3;\n    SELECT\n        CASE\n            WHEN substr(TO_CHAR(var3),-1) IN (\n                '-',\n                '+'\n            ) THEN var3 || '0'\n            ELSE var3\n        END\n    INTO var\n    FROM\n        dual;\n\n    EXECUTE IMMEDIATE 'select '\n                      || nvl(TO_CHAR(var),0)\n                      || ' from dual'\n    INTO var2;\n\n    RETURN abs(to_number(var2) );\n-- RETURN VAR;\n    END fnc_creditrisk_br_gi_calc;\n\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n\n\n\nend pkg_creditrisk_branch_index;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CREDITRISK_BRANCH_INDEX\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش \"شاخص ريسك اعتباري شعب\"\n                                          اين گزارش بايد از روي دفتر کل ساخته گردد و به همين دليل ديگر نياز به داده تاريخي نيست.               \n            شاخص ريسک اعتباري از تقسيم مطالبات غير جاري بر مانده تسهيلات بدست مي آيد               \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION FNC_cr_br_index_ESFAND (INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_cr_br_pre_year(INPAR_DATE IN DATE )   RETURN DATE ; \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_cr_br_index_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_PROFILE_DETAIL (\n  INPAR_REF_REP_ID         IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_type               IN VARCHAR2 -- 1 -\u003e mande kole tashilat   0 -\u003e mande motalebate gheire jari\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,inpar_date               in VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cr_br_index_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_GET_INPUT_EDIT (\n  INPAR_REPORT   IN NUMBER\n ) RETURN VARCHAR2;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n PROCEDURE PRC_cr_br_index_report_value (\n  INPAR_ID   IN VARCHAR2);\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_cr_br_index_FINAL_REPORT  (\n \n inpar_repreq     IN NUMBER\n ,inpar_CUR_TYPE in number  --1 = riali , 0 = arzi\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nFUNCTION fnc_creditrisk_br_gi_calc (\n    inpar_id         IN NUMBER,\n    inpar_date       IN DATE,\n    inpar_branch     IN NUMBER,-- 1 = setad 2 = other\n    inpar_currency   IN NUMBER-- 1 = rial 2= other\n) RETURN VARCHAR2 ;\n\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\nend pkg_creditRisk_branch_index;"},{"Name":"PKG_CONCDP","ObjectID":301919,"Digest":"6d63675411f036427552ba38a38d70c4164dc9fa5203b778936dbb324398735e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONCDP\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:   \"گزارش تمرکز دارايي و بدهي براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_concdp_result (inpar_type in varchar2,inpar_operation in varchar2) RETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan / inpar_operation if 1-\u003erate if 2-\u003etype if 3-\u003ebranch\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nend pkg_concdp;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CONCDP\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Description:\n                  \"گزارش تمرکز دارايي و بدهي براي بانک توسعه صادرات\"      \n      inpar_type if 1 -\u003e deposit , if 2 -\u003e loan / inpar_operation if 1-\u003erate if 2-\u003etype if 3-\u003ebranch\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_concdp_result(\n    inpar_type      IN VARCHAR2,\n    inpar_operation IN VARCHAR2)\n  RETURN VARCHAR2\nAS\nBEGIN\n-------------------------------------------------------------------------------------------------------------------------\n  IF(inpar_type        = 1) THEN\n    IF(inpar_operation =1) THEN\n      return 'SELECT\n        /*+  PARALLEL(auto) */\n        SUM(balance) AS \"balance\",\n        COUNT(*)     AS \"count\",\n         rate         AS \"id\",\n         ''نرخ سود''||'' ''||rate||'' ''||''درصد''       AS \"name\"\n      FROM akin.tbl_deposit\n      GROUP BY rate';\n    elsif(inpar_operation =2) THEN\n      return 'SELECT\n        /*+  PARALLEL(auto) */\n        SUM(TD.balance)     AS \"balance\",\n        COUNT(*)            AS \"count\",\n        TD.ref_deposit_type AS \"id\",\n        MAX(tdp.NAME)       AS \"name\"\n      FROM akin.tbl_deposit TD,\n        PRAGG.tbl_deposit_type TDP\n      WHERE td.ref_deposit_type = tdp.ref_deposit_type\n      GROUP BY TD.ref_deposit_type';\n    elsif (inpar_operation = 3) THEN\n      return 'SELECT\n        /*+  PARALLEL(auto) */\n        SUM(td.balance) AS \"balance\",\n        COUNT(*)        AS \"count\",\n        td.ref_branch   AS \"id\",\n        MAX(tb.NAME)    AS \"name\"\n      FROM akin.tbl_deposit td,\n        PRAGG.tbl_branch tb\n      WHERE tb.brn_id = td.ref_branch\n      GROUP BY td.ref_branch';\n    END IF;\n ------------------------------------------------------------------------------------------------------------------------- \n  else if (inpar_type   = 2) THEN\n      IF(inpar_operation = 1) THEN\n        return 'SELECT\n          /*+  PARALLEL(auto) */\n          SUM(approved_amount) AS \"balance\",\n          COUNT(*)             AS \"count\" ,\n          rate                 AS \"id\",\n         ''نرخ سود''||'' ''||rate||'' ''||''درصد''       AS \"name\"\n        FROM akin.tbl_loan\n        GROUP BY rate';\n      elsif(inpar_operation = 2) THEN\n       return 'SELECT\n          /*+  PARALLEL(auto) */\n          SUM(tl.approved_amount) AS \"balance\",\n          COUNT(*)                AS \"count\",\n          tl.ref_loan_type        AS \"id\",\n          MAX(tlp.NAME)           AS \"name\"\n        FROM akin.tbl_loan tl ,\n          PRAGG.tbl_loan_type tlp\n        WHERE tlp.ref_loan_type = tl.ref_loan_type\n        GROUP BY tl.ref_loan_type';\n      elsif(inpar_operation = 3) THEN\n       return 'SELECT\n          /*+  PARALLEL(auto) */\n          SUM(tl.approved_amount) AS \"balance\",\n          COUNT(*)                AS \"count\" ,\n          tl.ref_branch           AS \"id\",\n          MAX(tb.NAME)            AS \"name\"\n        FROM akin.tbl_loan tl,\n          PRAGG.tbl_branch tb\n        WHERE tb.brn_id = tl.ref_branch\n        GROUP BY tl.ref_branch';\n      END IF;\n -------------------------------------------------------------------------------------------------------------------------\n    END IF;\n    end if;\n -------------------------------------------------------------------------------------------------------------------------\n  END fnc_concdp_result;\nEND pkg_concdp;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONCDP\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:   \"گزارش تمرکز دارايي و بدهي براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_concdp_result (inpar_type in varchar2,inpar_operation in varchar2) RETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan / inpar_operation if 1-\u003erate if 2-\u003etype if 3-\u003ebranch\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nend pkg_concdp;"},{"Name":"PKG_CONCDP","ObjectID":301921,"Digest":"6d63675411f036427552ba38a38d70c4164dc9fa5203b778936dbb324398735e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONCDP\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:   \"گزارش تمرکز دارايي و بدهي براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_concdp_result (inpar_type in varchar2,inpar_operation in varchar2) RETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan / inpar_operation if 1-\u003erate if 2-\u003etype if 3-\u003ebranch\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nend pkg_concdp;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CONCDP\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Description:\n                  \"گزارش تمرکز دارايي و بدهي براي بانک توسعه صادرات\"      \n      inpar_type if 1 -\u003e deposit , if 2 -\u003e loan / inpar_operation if 1-\u003erate if 2-\u003etype if 3-\u003ebranch\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_concdp_result(\n    inpar_type      IN VARCHAR2,\n    inpar_operation IN VARCHAR2)\n  RETURN VARCHAR2\nAS\nBEGIN\n-------------------------------------------------------------------------------------------------------------------------\n  IF(inpar_type        = 1) THEN\n    IF(inpar_operation =1) THEN\n      return 'SELECT\n        /*+  PARALLEL(auto) */\n        SUM(balance) AS \"balance\",\n        COUNT(*)     AS \"count\",\n         rate         AS \"id\",\n         ''نرخ سود''||'' ''||rate||'' ''||''درصد''       AS \"name\"\n      FROM akin.tbl_deposit\n      GROUP BY rate';\n    elsif(inpar_operation =2) THEN\n      return 'SELECT\n        /*+  PARALLEL(auto) */\n        SUM(TD.balance)     AS \"balance\",\n        COUNT(*)            AS \"count\",\n        TD.ref_deposit_type AS \"id\",\n        MAX(tdp.NAME)       AS \"name\"\n      FROM akin.tbl_deposit TD,\n        PRAGG.tbl_deposit_type TDP\n      WHERE td.ref_deposit_type = tdp.ref_deposit_type\n      GROUP BY TD.ref_deposit_type';\n    elsif (inpar_operation = 3) THEN\n      return 'SELECT\n        /*+  PARALLEL(auto) */\n        SUM(td.balance) AS \"balance\",\n        COUNT(*)        AS \"count\",\n        td.ref_branch   AS \"id\",\n        MAX(tb.NAME)    AS \"name\"\n      FROM akin.tbl_deposit td,\n        PRAGG.tbl_branch tb\n      WHERE tb.brn_id = td.ref_branch\n      GROUP BY td.ref_branch';\n    END IF;\n ------------------------------------------------------------------------------------------------------------------------- \n  else if (inpar_type   = 2) THEN\n      IF(inpar_operation = 1) THEN\n        return 'SELECT\n          /*+  PARALLEL(auto) */\n          SUM(approved_amount) AS \"balance\",\n          COUNT(*)             AS \"count\" ,\n          rate                 AS \"id\",\n         ''نرخ سود''||'' ''||rate||'' ''||''درصد''       AS \"name\"\n        FROM akin.tbl_loan\n        GROUP BY rate';\n      elsif(inpar_operation = 2) THEN\n       return 'SELECT\n          /*+  PARALLEL(auto) */\n          SUM(tl.approved_amount) AS \"balance\",\n          COUNT(*)                AS \"count\",\n          tl.ref_loan_type        AS \"id\",\n          MAX(tlp.NAME)           AS \"name\"\n        FROM akin.tbl_loan tl ,\n          PRAGG.tbl_loan_type tlp\n        WHERE tlp.ref_loan_type = tl.ref_loan_type\n        GROUP BY tl.ref_loan_type';\n      elsif(inpar_operation = 3) THEN\n       return 'SELECT\n          /*+  PARALLEL(auto) */\n          SUM(tl.approved_amount) AS \"balance\",\n          COUNT(*)                AS \"count\" ,\n          tl.ref_branch           AS \"id\",\n          MAX(tb.NAME)            AS \"name\"\n        FROM akin.tbl_loan tl,\n          PRAGG.tbl_branch tb\n        WHERE tb.brn_id = tl.ref_branch\n        GROUP BY tl.ref_branch';\n      END IF;\n -------------------------------------------------------------------------------------------------------------------------\n    END IF;\n    end if;\n -------------------------------------------------------------------------------------------------------------------------\n  END fnc_concdp_result;\nEND pkg_concdp;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CONCDP\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:   \"گزارش تمرکز دارايي و بدهي براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_concdp_result (inpar_type in varchar2,inpar_operation in varchar2) RETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan / inpar_operation if 1-\u003erate if 2-\u003etype if 3-\u003ebranch\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/ \nend pkg_concdp;"},{"Name":"PKG_CUSTOMER_RESOURCE_ANALYSIS","ObjectID":302743,"Digest":"f7948e0f3d0bf4fba898ee772302e6b7e13f0af253c1df1a645a4aa88efa97a6","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_RESOURCE_ANALYSIS\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:          \"بانک توسعه صادرات\"\n  Description:   \"گزارش تحليل مصارف و منابع مشتريان بزرگ بانک براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_customer_analysis_result (inpar_type in varchar2,inpar_branch in varchar2 , inpar_currency in varchar2, inpar_customer_number in varchar2) \nRETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_GET_branch RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_currency RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_customer_resource_analysis;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CUSTOMER_RESOURCE_ANALYSIS\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:          \"بانک توسعه صادرات\"\n  Description:   \"گزارش تحليل مصارف و منابع مشتريان بزرگ بانک براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nfunction fnc_customer_analysis_result (inpar_type in varchar2,\n                          inpar_branch in varchar2 ,\n                          inpar_currency in varchar2,\n                          inpar_customer_number in varchar2) \nreturn varchar2  as\n  begin\n    \n    \n    if (inpar_type = 1)\n      then \n      if(inpar_branch = -1 and inpar_currency = -1)\n      then\n      return 'SELECT\n      \"id\",\n      \n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM  \u003c='||inpar_customer_number||'    ----- tedad    kol';\n    \n    \n elsif (inpar_branch = -1 and inpar_currency \u003c\u003e -1)\n then\n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz\n';\n elsif (inpar_branch \u003c\u003e -1 and inpar_currency = -1)\n then \n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_BRANCH = '||inpar_branch||'  ----- branch \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    shobe';\n\nelsif (inpar_branch \u003c\u003e -1 and inpar_currency \u003c\u003e -1)\nthen\nreturn 'SELECT\n\"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  and REF_BRANCH = '||inpar_branch||'  ---------shobe \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz and shobe';\nend if;\n\n\n--------------------------------------------------------------------------------------------------------\n--------------------------------------------------------------------------------------------------------\n\n else if (inpar_type = 2)\n      then \n      if(inpar_branch = -1 and inpar_currency = -1)\n      then\n       return 'SELECT\n       \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_loan TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM  \u003c='||inpar_customer_number||'    ----- tedad    kol';\n    \n    \n elsif (inpar_branch = -1 and inpar_currency \u003c\u003e -1)\n then\n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_loan TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz\n';\n elsif (inpar_branch \u003c\u003e -1 and inpar_currency = -1)\n then \n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_loan TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_BRANCH = '||inpar_branch||'  ----- branch \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    shobe';\n\nelsif (inpar_branch \u003c\u003e -1 and inpar_currency \u003c\u003e -1)\nthen\nreturn 'SELECT\n\"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(TD.REF_CURRENCY) AS REF_CURRENCY\n  ,MAX(TD.REF_BRANCH) AS REF_BRANCH\n  FROM AKIN.tbl_loan  TD\n  ,    TBL_CUSTOMER TC\n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  and REF_BRANCH = '||inpar_branch||'  ---------shobe \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz and shobe';\nend if;\nend if;\nend if;\n\n  end fnc_customer_analysis_result;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_get_branch return varchar2 as\n  begin\n    return 'select brn_id as \"id\",name as \"name\" from tbl_branch  union select  -1 as \"id\" , ''کل'' as \"name\" from dual';\n    return null;\n  end fnc_get_branch;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_get_currency return varchar2 as\n  begin\n    return 'select cur_id as \"id\" , cur_name as \"name\" from TBL_CURRENCY union select  -1 as \"id\" , ''کل'' as \"name\" from dual';\n  end fnc_get_currency;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_customer_resource_analysis;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_RESOURCE_ANALYSIS\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:          \"بانک توسعه صادرات\"\n  Description:   \"گزارش تحليل مصارف و منابع مشتريان بزرگ بانک براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_customer_analysis_result (inpar_type in varchar2,inpar_branch in varchar2 , inpar_currency in varchar2, inpar_customer_number in varchar2) \nRETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_GET_branch RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_currency RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_customer_resource_analysis;"},{"Name":"PKG_CUSTOMER_RESOURCE_ANALYSIS","ObjectID":302744,"Digest":"f7948e0f3d0bf4fba898ee772302e6b7e13f0af253c1df1a645a4aa88efa97a6","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_RESOURCE_ANALYSIS\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:          \"بانک توسعه صادرات\"\n  Description:   \"گزارش تحليل مصارف و منابع مشتريان بزرگ بانک براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_customer_analysis_result (inpar_type in varchar2,inpar_branch in varchar2 , inpar_currency in varchar2, inpar_customer_number in varchar2) \nRETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_GET_branch RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_currency RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_customer_resource_analysis;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CUSTOMER_RESOURCE_ANALYSIS\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:          \"بانک توسعه صادرات\"\n  Description:   \"گزارش تحليل مصارف و منابع مشتريان بزرگ بانک براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nfunction fnc_customer_analysis_result (inpar_type in varchar2,\n                          inpar_branch in varchar2 ,\n                          inpar_currency in varchar2,\n                          inpar_customer_number in varchar2) \nreturn varchar2  as\n  begin\n    \n    \n    if (inpar_type = 1)\n      then \n      if(inpar_branch = -1 and inpar_currency = -1)\n      then\n      return 'SELECT\n      \"id\",\n      \n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM  \u003c='||inpar_customer_number||'    ----- tedad    kol';\n    \n    \n elsif (inpar_branch = -1 and inpar_currency \u003c\u003e -1)\n then\n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz\n';\n elsif (inpar_branch \u003c\u003e -1 and inpar_currency = -1)\n then \n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_BRANCH = '||inpar_branch||'  ----- branch \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    shobe';\n\nelsif (inpar_branch \u003c\u003e -1 and inpar_currency \u003c\u003e -1)\nthen\nreturn 'SELECT\n\"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.BALANCE) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_deposit TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  and REF_BRANCH = '||inpar_branch||'  ---------shobe \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz and shobe';\nend if;\n\n\n--------------------------------------------------------------------------------------------------------\n--------------------------------------------------------------------------------------------------------\n\n else if (inpar_type = 2)\n      then \n      if(inpar_branch = -1 and inpar_currency = -1)\n      then\n       return 'SELECT\n       \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_loan TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM  \u003c='||inpar_customer_number||'    ----- tedad    kol';\n    \n    \n elsif (inpar_branch = -1 and inpar_currency \u003c\u003e -1)\n then\n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_loan TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz\n';\n elsif (inpar_branch \u003c\u003e -1 and inpar_currency = -1)\n then \n return 'SELECT\n \"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(tcu.cur_name) AS REF_CURRENCY\n  ,MAX(Tb.name) AS REF_BRANCH\n  FROM AKIN.tbl_loan TD\n  ,    TBL_CUSTOMER TC,tbl_branch tb, tbl_currency tcu \n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and tb.brn_id = td.ref_branch and td.ref_currency = tcu.cur_id\n  and td.REF_BRANCH = '||inpar_branch||'  ----- branch \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    shobe';\n\nelsif (inpar_branch \u003c\u003e -1 and inpar_currency \u003c\u003e -1)\nthen\nreturn 'SELECT\n\"id\",\n \"balance\"\n ,NAME AS \"name\"\n ,REF_CURRENCY AS \"refCurrency\"\n ,REF_BRANCH AS \"refBranch\"\nFROM (\n  SELECT  /*+   PARALLEL(auto) */\n  max(cus_id) as \"id\",\n   SUM(TD.approved_amount) AS \"balance\"\n  ,MAX(TC.NAME ||\n   '' '' ||\n   TC.FAMILY) AS NAME\n  ,MAX(TD.REF_CURRENCY) AS REF_CURRENCY\n  ,MAX(TD.REF_BRANCH) AS REF_BRANCH\n  FROM AKIN.tbl_loan  TD\n  ,    TBL_CUSTOMER TC\n  WHERE TC.CUS_ID   = TD.REF_CUSTOMER\n  and td.REF_CURRENCY = '||inpar_currency||'  ----- arz \n  and REF_BRANCH = '||inpar_branch||'  ---------shobe \n  GROUP BY\n   TD.REF_CUSTOMER\n  ORDER BY \"balance\" DESC\n )\nWHERE ROWNUM \u003c='||inpar_customer_number||'----- tedad    arz and shobe';\nend if;\nend if;\nend if;\n\n  end fnc_customer_analysis_result;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_get_branch return varchar2 as\n  begin\n    return 'select brn_id as \"id\",name as \"name\" from tbl_branch  union select  -1 as \"id\" , ''کل'' as \"name\" from dual';\n    return null;\n  end fnc_get_branch;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_get_currency return varchar2 as\n  begin\n    return 'select cur_id as \"id\" , cur_name as \"name\" from TBL_CURRENCY union select  -1 as \"id\" , ''کل'' as \"name\" from dual';\n  end fnc_get_currency;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_customer_resource_analysis;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_RESOURCE_ANALYSIS\" as \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:          \"بانک توسعه صادرات\"\n  Description:   \"گزارش تحليل مصارف و منابع مشتريان بزرگ بانک براي بانک توسعه صادرات\"     \n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_customer_analysis_result (inpar_type in varchar2,inpar_branch in varchar2 , inpar_currency in varchar2, inpar_customer_number in varchar2) \nRETURN VARCHAR2 ; --inpar_type if 1 -\u003e deposit , if 2 -\u003e loan \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION FNC_GET_branch RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION FNC_GET_currency RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nend pkg_customer_resource_analysis;"},{"Name":"PKG_SHOCK","ObjectID":302931,"Digest":"fac8817ff68222f85994a316f4a15ab47c9888fb250d4e23f4b3ec832475ac5d","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SHOCK\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  @package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  @editor Name:\n  @release Date/Time:\n  @edit Name:\n  @version: 1\n  @category:2\n  @bank:           \"بانک توسعه صادرات\" و \"بانک صنعت و معدن\"\n  @description:    \"گزارش آزمون بحران\"\n  @profile formul nevis baraE  \"Seporde\" --\u003e  ref_dep_profile\n  @profile formul nevis baraE  \"Darayi \" --\u003e ref_lon_profile\n  @profile formul nevis baraE  \"Darayi Naghd\" --\u003e ref_ledger_profile\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_SHOCK_PROFILE_REPORT(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      inpar_dep_id           IN VARCHAR2 ,\n      inpar_darayi           IN VARCHAR2 ,\n      inpar_darayi_naghd     IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_ALL_REPORT(\n      INPAR_ID IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_FINAL_REPORT(\n      inpar_repreq IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_shock_gi_calc(\n      inpar_id   IN NUMBER,\n      inpar_date IN DATE )\n    RETURN VARCHAR2 ;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_DELETE_REPORT(\n      INPAR_ID IN VARCHAR2 ,\n      OUTPAR OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_report_value(\n      INPAR_ID_REPORT IN VARCHAR2);\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_get_column_name(\n    INPAR_ID_REPreq IN VARCHAR2)\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nEND pkg_shock;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_SHOCK\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Bank:           \"بانک توسعه صادرات\" و \"بانک صنعت و معدن\"\n  Description:    \"گزارش آزمون بحران\"\n  profile formul nevis baraE  \"Seporde\" --\u003e  ref_dep_profile\n  profile formul nevis baraE  \"Darayi \" --\u003e ref_lon_profile\n  profile formul nevis baraE  \"Darayi naghd\" --\u003e ref_ledger_profile\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_shock_profile_report(\n    inpar_name             IN VARCHAR2 ,\n    inpar_des              IN VARCHAR2 ,\n    inpar_ref_user         IN VARCHAR2 ,\n    inpar_status           IN VARCHAR2 ,\n    inpar_insert_or_update IN VARCHAR2 ,\n    inpar_id               IN VARCHAR2 ,\n    inpar_dep_id           IN VARCHAR2 ,\n    inpar_darayi           IN VARCHAR2 ,\n    inpar_darayi_naghd     IN VARCHAR2 ,\n    outpar_id OUT VARCHAR2 )\nAS\nBEGIN\n   IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_report (\n                name,\n                des,\n                create_date,\n                ref_user,\n                status,\n                type,\n                category,\n                ref_dep_profile,\n                ref_LON_profile,\n                ref_ledger_profiel\n            ) VALUES (\n                inpar_name,\n                inpar_des,\n                SYSDATE,\n                inpar_ref_user,\n                inpar_status,\n                'shock',\n                'shock',\n                inpar_dep_id,\n                inpar_darayi\n                ,inpar_darayi_naghd\n                \n            );\n\n            COMMIT;\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_report\n            WHERE\n                create_date = (\n                    SELECT\n                        MAX(create_date)\n                    FROM\n                        tbl_report\n                )\n                AND id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_report\n                );\n  update tbl_report set H_id = outpar_id where id  = outpar_id;\n        ELSE\n            UPDATE tbl_report\n            SET\n                name = inpar_name,\n                des = inpar_des,\n                ref_user = inpar_ref_user,\n                status = inpar_status,\n                ref_dep_profile = inpar_dep_id,\n                ref_LON_profile = inpar_darayi,\n                ref_ledger_profiel = inpar_darayi_naghd\n            WHERE\n                id = inpar_id;\n\n            COMMIT;\n        END IF;\n\nEND prc_shock_profile_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_shock_delete_report(\n    inpar_id   IN VARCHAR2,\n        outpar     OUT VARCHAR2\n    )    \n        AS\n    BEGIN\n        DELETE FROM tbl_report\n        WHERE\n            id = inpar_id;\n\n        COMMIT;\n        DELETE FROM TBL_SHOCK_FINAL_RESULT\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        \n        outpar := 1;\nEND prc_shock_delete_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_shock_all_report(\n         inpar_id IN NUMBER\n    ) RETURN VARCHAR2 AS\n        var2   VARCHAR2(3000);\n    BEGIN\n        var2 := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\",\n  ref_dep_profile as \"depositLedgerProfileId\",\n  ref_lon_profile as \"assets1LedgerProfileId\",\n  ref_ledger_profiel as \"assets2LedgerProfileId\"\nFROM TBL_REPORT \nwhere id = '\n                || inpar_id\n                || ' and upper(category) = ''SHOCK''';\n        RETURN var2;\nEND fnc_shock_all_report;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_shock_final_report(\n   \n inpar_repreq     IN NUMBER\n ) RETURN VARCHAR2 as \n \n begin \n \n return 'SELECT \n\n  type as \"type\",\n  month_name as \"monthName\",\n  value as \"value\"\n  \n\nFROM tbl_shock_final_result  \nwhere \n ref_repreq =  '||inpar_repreq||'\n\n';\n \nEND fnc_shock_final_report;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_shock_gi_calc(\n    inpar_id   IN NUMBER,\n    inpar_date IN DATE )RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n  SELECT\n   '\n  SELECT /*+   PARALLEL(auto) */\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ''(''||DG.BALANCE ||'')''||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = ' ||\n   INPAR_ID ||\n   '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''')))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN (to_number(VAR2));\n  \n\nEND fnc_shock_gi_calc;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_shock_report_value(\n    INPAR_ID_REPORT IN VARCHAR2)\nAS\nVAR_REPREQ number;\nVAR_dep number;\n\nVAR_lon number;\n\nVAR_ledger number;\n\nBEGIN\n     SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_ID_REPORT;\n\n   select ref_dep_profile,ref_lon_profile,ref_ledger_profiel into VAR_dep,VAR_lon,VAR_ledger  from tbl_report where id = INPAR_ID_REPORT;\n  \nfor i in ( select  /*+ parallel(auto) */  d,shamsi,s from (\n    select  /*+ parallel(auto) */  * from \n    (select  /*+ parallel(auto) */ a.d,A.shamsi,b.s from (\n    select  /*+ parallel(auto) */  d, to_char(d,'yyyy/mm/dd','nls_calendar=persian') shamsi, to_char(d,'yyyymm','nls_calendar=persian') as s   from (\n    SELECT  /*+ parallel(auto) */ DISTINCT\n     FIRST_VALUE(\n      to_date(EFF_DATE,'yyyy/mm/dd','nls_calendar=persian')\n     ) IGNORE NULLS OVER(PARTITION BY\n      substr(eff_date,0,7)\n      ORDER BY\n       EFF_DATE\n      DESC\n     ) AS D  \n    FROM (\n      SELECT  /*+ parallel(auto) */ DISTINCT\n       to_char(EFF_DATE,'yyyy/mm/dd','nls_calendar=persian') as EFF_DATE\n      FROM TBL_LEDGER_ARCHIVE\n     )\n    WHERE to_date(EFF_DATE,'yyyy/mm/dd','nls_calendar=persian') \u003e ADD_MONTHS(SYSDATE,-12)\n    ORDER BY d)) a right join (Select /*+ parallel(auto) */\n    to_char(add_months(trunc(sysdate),-Rownum),'yyyymm','nls_calendar=persian') as s,\n     -Rownum\n    From dual\n    Connect By Rownum \u003c= 12) b\n    on b.s = a.s)\n     union\n    (\n    select  /*+ parallel(auto) */  max(eff_date ) d ,to_char(max(eff_date ),'yyyy/mm/dd','nls_calendar=persian'), to_char(trunc(sysdate),'yyyymm','nls_calendar=persian')  s from tbl_ledger_archive  \n    ))\n    order by s)loop\n    \n    \n    INSERT INTO TBL_SHOCK_FINAL_RESULT (\n \n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,MONTH_NAME\n ,VALUE\n) VALUES (\n \n INPAR_ID_REPORT\n ,VAR_REPREQ\n ,1\n ,i.s\n ,pkg_shock.fnc_shock_gi_calc(VAR_dep,i.d)\n);\n    commit;\n        INSERT INTO TBL_SHOCK_FINAL_RESULT (\n \n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,MONTH_NAME\n ,VALUE\n) VALUES (\n \n INPAR_ID_REPORT\n ,VAR_REPREQ\n ,2\n ,i.s\n ,pkg_shock.fnc_shock_gi_calc(VAR_lon,i.d)\n);\ncommit;\n    INSERT INTO TBL_SHOCK_FINAL_RESULT (\n \n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,MONTH_NAME\n ,VALUE\n) VALUES (\n \n INPAR_ID_REPORT\n ,VAR_REPREQ\n ,3\n ,i.s\n ,pkg_shock.fnc_shock_gi_calc(VAR_ledger,i.d)\n);\ncommit;\n    end loop;\n    \n      \n END prc_shock_report_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_get_column_name(\n    INPAR_ID_REPreq IN VARCHAR2)\n    RETURN VARCHAR2 as \n\n--\n--'select * from(\n--Select /*+ parallel(auto) */\n--case when substr(MONTH_NAME,5,7)   = ''01'' then ''فروردين'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''02'' then ''ارديبهشت'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''03'' then ''خرداد'' ||'' ''||substr(MONTH_NAME,0,4)     \n--when substr(MONTH_NAME,5,7) = ''04'' then ''تير'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''05'' then ''مرداد'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''06'' then ''شهريور'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7)= ''07'' then ''مهر'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''08'' then ''آبان'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''09'' then ''آذر'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''10'' then ''دي'' ||'' ''||substr(MONTH_NAME,0,4)     \n--when substr(MONTH_NAME,5,7) = ''11'' then ''بهمن'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''12'' then ''اسفند'' ||'' ''||substr(MONTH_NAME,0,4)    \n--end as \"header\" \n--,\n--''x''||MONTH_NAME as \"value\"\n--From tbl_shock_final_result where tbl_shock_final_result.ref_repreq = '||INPAR_ID_REPreq||' and TYPE = 1 and tbl_shock_final_result.month_name \u003c\u003e to_char(trunc(sysdate),''yyyymm'',''nls_calendar=persian'')\n-- union \n--select ''امروز'' as \"header\" ,''x''||to_char(trunc(sysdate),''yyyymm'',''nls_calendar=persian'') as \"value\" From tbl_shock_final_result where tbl_shock_final_result.ref_repreq = '||INPAR_ID_REPreq||' and TYPE = 1 )\n--order by case when \"header\" = ''امروز'' then ''0'' else \"value\" end  asc\n--'; \n\n\n\n\n\n\n\n    begin\n    return '\nselect distinct ''امروز'' as \"header\" ,''x''||to_char(trunc(sysdate),''yyyymm'',''nls_calendar=persian'') as \"value\" From tbl_shock_final_result where tbl_shock_final_result.ref_repreq = '||INPAR_ID_REPreq||' and TYPE = 1 \norder by case when \"header\" = ''امروز'' then ''0'' else \"value\" end  asc\n'; \n\n    end;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nEND pkg_shock;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SHOCK\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  @package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  @editor Name:\n  @release Date/Time:\n  @edit Name:\n  @version: 1\n  @category:2\n  @bank:           \"بانک توسعه صادرات\" و \"بانک صنعت و معدن\"\n  @description:    \"گزارش آزمون بحران\"\n  @profile formul nevis baraE  \"Seporde\" --\u003e  ref_dep_profile\n  @profile formul nevis baraE  \"Darayi \" --\u003e ref_lon_profile\n  @profile formul nevis baraE  \"Darayi Naghd\" --\u003e ref_ledger_profile\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_SHOCK_PROFILE_REPORT(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      inpar_dep_id           IN VARCHAR2 ,\n      inpar_darayi           IN VARCHAR2 ,\n      inpar_darayi_naghd     IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_ALL_REPORT(\n      INPAR_ID IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_FINAL_REPORT(\n      inpar_repreq IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_shock_gi_calc(\n      inpar_id   IN NUMBER,\n      inpar_date IN DATE )\n    RETURN VARCHAR2 ;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_DELETE_REPORT(\n      INPAR_ID IN VARCHAR2 ,\n      OUTPAR OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_report_value(\n      INPAR_ID_REPORT IN VARCHAR2);\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_get_column_name(\n    INPAR_ID_REPreq IN VARCHAR2)\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nEND pkg_shock;"},{"Name":"PKG_SHOCK","ObjectID":302933,"Digest":"fac8817ff68222f85994a316f4a15ab47c9888fb250d4e23f4b3ec832475ac5d","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SHOCK\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  @package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  @editor Name:\n  @release Date/Time:\n  @edit Name:\n  @version: 1\n  @category:2\n  @bank:           \"بانک توسعه صادرات\" و \"بانک صنعت و معدن\"\n  @description:    \"گزارش آزمون بحران\"\n  @profile formul nevis baraE  \"Seporde\" --\u003e  ref_dep_profile\n  @profile formul nevis baraE  \"Darayi \" --\u003e ref_lon_profile\n  @profile formul nevis baraE  \"Darayi Naghd\" --\u003e ref_ledger_profile\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_SHOCK_PROFILE_REPORT(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      inpar_dep_id           IN VARCHAR2 ,\n      inpar_darayi           IN VARCHAR2 ,\n      inpar_darayi_naghd     IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_ALL_REPORT(\n      INPAR_ID IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_FINAL_REPORT(\n      inpar_repreq IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_shock_gi_calc(\n      inpar_id   IN NUMBER,\n      inpar_date IN DATE )\n    RETURN VARCHAR2 ;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_DELETE_REPORT(\n      INPAR_ID IN VARCHAR2 ,\n      OUTPAR OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_report_value(\n      INPAR_ID_REPORT IN VARCHAR2);\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_get_column_name(\n    INPAR_ID_REPreq IN VARCHAR2)\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nEND pkg_shock;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_SHOCK\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name:\n  Release Date/Time:\n  Edit Name:\n  Version: 1\n  Category:2\n  Bank:           \"بانک توسعه صادرات\" و \"بانک صنعت و معدن\"\n  Description:    \"گزارش آزمون بحران\"\n  profile formul nevis baraE  \"Seporde\" --\u003e  ref_dep_profile\n  profile formul nevis baraE  \"Darayi \" --\u003e ref_lon_profile\n  profile formul nevis baraE  \"Darayi naghd\" --\u003e ref_ledger_profile\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_shock_profile_report(\n    inpar_name             IN VARCHAR2 ,\n    inpar_des              IN VARCHAR2 ,\n    inpar_ref_user         IN VARCHAR2 ,\n    inpar_status           IN VARCHAR2 ,\n    inpar_insert_or_update IN VARCHAR2 ,\n    inpar_id               IN VARCHAR2 ,\n    inpar_dep_id           IN VARCHAR2 ,\n    inpar_darayi           IN VARCHAR2 ,\n    inpar_darayi_naghd     IN VARCHAR2 ,\n    outpar_id OUT VARCHAR2 )\nAS\nBEGIN\n   IF\n            ( inpar_insert_or_update = 0 )\n        THEN\n            INSERT INTO tbl_report (\n                name,\n                des,\n                create_date,\n                ref_user,\n                status,\n                type,\n                category,\n                ref_dep_profile,\n                ref_LON_profile,\n                ref_ledger_profiel\n            ) VALUES (\n                inpar_name,\n                inpar_des,\n                SYSDATE,\n                inpar_ref_user,\n                inpar_status,\n                'shock',\n                'shock',\n                inpar_dep_id,\n                inpar_darayi\n                ,inpar_darayi_naghd\n                \n            );\n\n            COMMIT;\n            SELECT\n                id\n            INTO outpar_id\n            FROM\n                tbl_report\n            WHERE\n                create_date = (\n                    SELECT\n                        MAX(create_date)\n                    FROM\n                        tbl_report\n                )\n                AND id = (\n                    SELECT\n                        MAX(id)\n                    FROM\n                        tbl_report\n                );\n  update tbl_report set H_id = outpar_id where id  = outpar_id;\n        ELSE\n            UPDATE tbl_report\n            SET\n                name = inpar_name,\n                des = inpar_des,\n                ref_user = inpar_ref_user,\n                status = inpar_status,\n                ref_dep_profile = inpar_dep_id,\n                ref_LON_profile = inpar_darayi,\n                ref_ledger_profiel = inpar_darayi_naghd\n            WHERE\n                id = inpar_id;\n\n            COMMIT;\n        END IF;\n\nEND prc_shock_profile_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nPROCEDURE prc_shock_delete_report(\n    inpar_id   IN VARCHAR2,\n        outpar     OUT VARCHAR2\n    )    \n        AS\n    BEGIN\n        DELETE FROM tbl_report\n        WHERE\n            id = inpar_id;\n\n        COMMIT;\n        DELETE FROM TBL_SHOCK_FINAL_RESULT\n        WHERE\n            ref_report = inpar_id;\n\n        COMMIT;\n        \n        outpar := 1;\nEND prc_shock_delete_report;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_shock_all_report(\n         inpar_id IN NUMBER\n    ) RETURN VARCHAR2 AS\n        var2   VARCHAR2(3000);\n    BEGIN\n        var2 := 'SELECT ID as \"id\",\n  NAME as \"name\",\n  DES as \"des\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"refUser\",\n  STATUS as \"status\",\n  CATEGORY as \"category\",\n  ref_dep_profile as \"depositLedgerProfileId\",\n  ref_lon_profile as \"assets1LedgerProfileId\",\n  ref_ledger_profiel as \"assets2LedgerProfileId\"\nFROM TBL_REPORT \nwhere id = '\n                || inpar_id\n                || ' and upper(category) = ''SHOCK''';\n        RETURN var2;\nEND fnc_shock_all_report;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nFUNCTION fnc_shock_final_report(\n   \n inpar_repreq     IN NUMBER\n ) RETURN VARCHAR2 as \n \n begin \n \n return 'SELECT \n\n  type as \"type\",\n  month_name as \"monthName\",\n  value as \"value\"\n  \n\nFROM tbl_shock_final_result  \nwhere \n ref_repreq =  '||inpar_repreq||'\n\n';\n \nEND fnc_shock_final_report;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_shock_gi_calc(\n    inpar_id   IN NUMBER,\n    inpar_date IN DATE )RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n BEGIN\n  SELECT\n   '\n  SELECT /*+   PARALLEL(auto) */\n   REPLACE(\n    WMSYS.WM_CONCAT(V)\n   ,'',''\n   ,''''\n   )\n   FROM (\n    SELECT\n     ''(''||DG.BALANCE ||'')''||\n     A.SPLIT_SING AS V\n    FROM (\n      WITH T AS (\n       SELECT\n        REPLACE(FORMULA||''+'','','','''') STR\n       FROM TBL_LEDGER_REPORT_MAP\n       WHERE id   = ' ||\n   INPAR_ID ||\n   '   ) SELECT\n       REGEXP_SUBSTR(\n        STR\n       ,''[0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_VALUES\n      ,REGEXP_SUBSTR(\n        STR\n       ,''[^0-9]+''\n       ,1\n       ,LEVEL\n       ) SPLIT_SING\n      ,LEVEL AS LEV\n      FROM T\n      CONNECT BY\n       LEVEL \u003c= (\n        SELECT\n         LENGTH(REPLACE(STR,''-'',NULL) )\n        FROM T\n       )\n     ) A\n    ,TBL_LEDGER_archive DG\n    WHERE DG.LEDGER_CODE   = A.SPLIT_VALUES\n     AND\n      SPLIT_VALUES IS NOT NULL\n        AND\n      trunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n   INPAR_DATE ||\n   ''')))\n '\n  INTO\n   VAR\n  FROM DUAL;\n\n\n\n  EXECUTE IMMEDIATE VAR INTO\n   VAR3;\n  SELECT\n   CASE\n    WHEN SUBSTR(\n     TO_CHAR(VAR3)\n    ,-1\n    ) IN (\n     '-','+'\n    ) THEN VAR3 ||\n    '0'\n    ELSE VAR3\n   END\n  INTO\n   VAR\n  FROM DUAL;\n\n  EXECUTE IMMEDIATE 'select ' ||\n  NVL(TO_CHAR(VAR),0) ||\n  ' from dual' INTO\n   VAR2;\n\n  RETURN (to_number(VAR2));\n  \n\nEND fnc_shock_gi_calc;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nPROCEDURE prc_shock_report_value(\n    INPAR_ID_REPORT IN VARCHAR2)\nAS\nVAR_REPREQ number;\nVAR_dep number;\n\nVAR_lon number;\n\nVAR_ledger number;\n\nBEGIN\n     SELECT\n   MAX(ID)\n  INTO\n   VAR_REPREQ\n  FROM TBL_REPREQ\n  WHERE REF_REPORT_ID   = INPAR_ID_REPORT;\n\n   select ref_dep_profile,ref_lon_profile,ref_ledger_profiel into VAR_dep,VAR_lon,VAR_ledger  from tbl_report where id = INPAR_ID_REPORT;\n  \nfor i in ( select  /*+ parallel(auto) */  d,shamsi,s from (\n    select  /*+ parallel(auto) */  * from \n    (select  /*+ parallel(auto) */ a.d,A.shamsi,b.s from (\n    select  /*+ parallel(auto) */  d, to_char(d,'yyyy/mm/dd','nls_calendar=persian') shamsi, to_char(d,'yyyymm','nls_calendar=persian') as s   from (\n    SELECT  /*+ parallel(auto) */ DISTINCT\n     FIRST_VALUE(\n      to_date(EFF_DATE,'yyyy/mm/dd','nls_calendar=persian')\n     ) IGNORE NULLS OVER(PARTITION BY\n      substr(eff_date,0,7)\n      ORDER BY\n       EFF_DATE\n      DESC\n     ) AS D  \n    FROM (\n      SELECT  /*+ parallel(auto) */ DISTINCT\n       to_char(EFF_DATE,'yyyy/mm/dd','nls_calendar=persian') as EFF_DATE\n      FROM TBL_LEDGER_ARCHIVE\n     )\n    WHERE to_date(EFF_DATE,'yyyy/mm/dd','nls_calendar=persian') \u003e ADD_MONTHS(SYSDATE,-12)\n    ORDER BY d)) a right join (Select /*+ parallel(auto) */\n    to_char(add_months(trunc(sysdate),-Rownum),'yyyymm','nls_calendar=persian') as s,\n     -Rownum\n    From dual\n    Connect By Rownum \u003c= 12) b\n    on b.s = a.s)\n     union\n    (\n    select  /*+ parallel(auto) */  max(eff_date ) d ,to_char(max(eff_date ),'yyyy/mm/dd','nls_calendar=persian'), to_char(trunc(sysdate),'yyyymm','nls_calendar=persian')  s from tbl_ledger_archive  \n    ))\n    order by s)loop\n    \n    \n    INSERT INTO TBL_SHOCK_FINAL_RESULT (\n \n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,MONTH_NAME\n ,VALUE\n) VALUES (\n \n INPAR_ID_REPORT\n ,VAR_REPREQ\n ,1\n ,i.s\n ,pkg_shock.fnc_shock_gi_calc(VAR_dep,i.d)\n);\n    commit;\n        INSERT INTO TBL_SHOCK_FINAL_RESULT (\n \n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,MONTH_NAME\n ,VALUE\n) VALUES (\n \n INPAR_ID_REPORT\n ,VAR_REPREQ\n ,2\n ,i.s\n ,pkg_shock.fnc_shock_gi_calc(VAR_lon,i.d)\n);\ncommit;\n    INSERT INTO TBL_SHOCK_FINAL_RESULT (\n \n REF_REPORT\n ,REF_REPREQ\n ,TYPE\n ,MONTH_NAME\n ,VALUE\n) VALUES (\n \n INPAR_ID_REPORT\n ,VAR_REPREQ\n ,3\n ,i.s\n ,pkg_shock.fnc_shock_gi_calc(VAR_ledger,i.d)\n);\ncommit;\n    end loop;\n    \n      \n END prc_shock_report_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_get_column_name(\n    INPAR_ID_REPreq IN VARCHAR2)\n    RETURN VARCHAR2 as \n\n--\n--'select * from(\n--Select /*+ parallel(auto) */\n--case when substr(MONTH_NAME,5,7)   = ''01'' then ''فروردين'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''02'' then ''ارديبهشت'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''03'' then ''خرداد'' ||'' ''||substr(MONTH_NAME,0,4)     \n--when substr(MONTH_NAME,5,7) = ''04'' then ''تير'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''05'' then ''مرداد'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''06'' then ''شهريور'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7)= ''07'' then ''مهر'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''08'' then ''آبان'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''09'' then ''آذر'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''10'' then ''دي'' ||'' ''||substr(MONTH_NAME,0,4)     \n--when substr(MONTH_NAME,5,7) = ''11'' then ''بهمن'' ||'' ''||substr(MONTH_NAME,0,4)    \n--when substr(MONTH_NAME,5,7) = ''12'' then ''اسفند'' ||'' ''||substr(MONTH_NAME,0,4)    \n--end as \"header\" \n--,\n--''x''||MONTH_NAME as \"value\"\n--From tbl_shock_final_result where tbl_shock_final_result.ref_repreq = '||INPAR_ID_REPreq||' and TYPE = 1 and tbl_shock_final_result.month_name \u003c\u003e to_char(trunc(sysdate),''yyyymm'',''nls_calendar=persian'')\n-- union \n--select ''امروز'' as \"header\" ,''x''||to_char(trunc(sysdate),''yyyymm'',''nls_calendar=persian'') as \"value\" From tbl_shock_final_result where tbl_shock_final_result.ref_repreq = '||INPAR_ID_REPreq||' and TYPE = 1 )\n--order by case when \"header\" = ''امروز'' then ''0'' else \"value\" end  asc\n--'; \n\n\n\n\n\n\n\n    begin\n    return '\nselect distinct ''امروز'' as \"header\" ,''x''||to_char(trunc(sysdate),''yyyymm'',''nls_calendar=persian'') as \"value\" From tbl_shock_final_result where tbl_shock_final_result.ref_repreq = '||INPAR_ID_REPreq||' and TYPE = 1 \norder by case when \"header\" = ''امروز'' then ''0'' else \"value\" end  asc\n'; \n\n    end;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nEND pkg_shock;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SHOCK\" \nAS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  /*\n  @package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  @editor Name:\n  @release Date/Time:\n  @edit Name:\n  @version: 1\n  @category:2\n  @bank:           \"بانک توسعه صادرات\" و \"بانک صنعت و معدن\"\n  @description:    \"گزارش آزمون بحران\"\n  @profile formul nevis baraE  \"Seporde\" --\u003e  ref_dep_profile\n  @profile formul nevis baraE  \"Darayi \" --\u003e ref_lon_profile\n  @profile formul nevis baraE  \"Darayi Naghd\" --\u003e ref_ledger_profile\n  */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_SHOCK_PROFILE_REPORT(\n      INPAR_NAME             IN VARCHAR2 ,\n      INPAR_DES              IN VARCHAR2 ,\n      INPAR_REF_USER         IN VARCHAR2 ,\n      INPAR_STATUS           IN VARCHAR2 ,\n      INPAR_INSERT_OR_UPDATE IN VARCHAR2 ,\n      INPAR_ID               IN VARCHAR2 ,\n      inpar_dep_id           IN VARCHAR2 ,\n      inpar_darayi           IN VARCHAR2 ,\n      inpar_darayi_naghd     IN VARCHAR2 ,\n      OUTPAR_ID OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_ALL_REPORT(\n      INPAR_ID IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_shock_FINAL_REPORT(\n      inpar_repreq IN NUMBER )\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_shock_gi_calc(\n      inpar_id   IN NUMBER,\n      inpar_date IN DATE )\n    RETURN VARCHAR2 ;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_DELETE_REPORT(\n      INPAR_ID IN VARCHAR2 ,\n      OUTPAR OUT VARCHAR2 );\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_shock_report_value(\n      INPAR_ID_REPORT IN VARCHAR2);\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  FUNCTION fnc_get_column_name(\n    INPAR_ID_REPreq IN VARCHAR2)\n    RETURN VARCHAR2;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\nEND pkg_shock;"},{"Name":"PKG_LIQUIDITY_RATES","ObjectID":303315,"Digest":"1117cddf5859dcaaf7c3a0a8a72406cabcf41822ce5c4169c10333aa536d69f2","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LIQUIDITY_RATES\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"توسعه صادرات\"\n  Description: \"گزارش نسبت هاي نقدينگي براي بانک توسعه صادرات\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_result  (\n \n inpar_date    IN varchar,\n inpar_BRANCH   IN varchar,\n  inpar_CUR   IN varchar\n \n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_return_var_name RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_limit   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_liquidity_update_limit ( INPAR_rate_id IN NUMBER ,inpar_minval in number,inpar_max_val in number,inpar_mincolor in varchar2, inpar_maxcolor in varchar2\n ,outpar_id out varchar2)  ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_notif(inpar_date  IN date)   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_liquidity_rates;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LIQUIDITY_RATES\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"توسعه صادرات\"\n  Description: \"گزارش نسبت هاي نقدينگي براي بانک توسعه صادرات\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_liquidity_rates_result  (\n \n inpar_date     in varchar,\n inpar_BRANCH   IN varchar,\n  inpar_CUR   IN varchar\n \n ) return varchar2 as\n \n    VAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n    \n VAR_CASH_MONEY                   VARCHAR2(1000) := '100000000 ,200000000';   /*VARCHAR2(1000);*/\n VAR_TRANSACTION_SECURITIES       VARCHAR2(1000) := '200000000';\n VAR_SHORT_TERM_INVESTMENT        VARCHAR2(1000) := '200000000';\n VAR_TOTAL_DEPOSIT                VARCHAR2(1000) := '200000000';\n VAR_SHORT_TERM_BANK_EXPOSURES    VARCHAR2(1000) := '200000000';\n VAR_RESOURCES_ABSORBED           VARCHAR2(1000) := '200000000';\n VAR_LOST_ASSETS                  VARCHAR2(1000) := '200000000';\n VAR_REMOVABLE_FUNDS              VARCHAR2(1000) := '200000000';\n VAR_EQUITY                       VARCHAR2(1000) := '200000000';\n VAR_INVESTING_IN_COMPANIES       VARCHAR2(1000) := '200000000';\n VAR_VISIBLE_ASSETS               VARCHAR2(1000) := '200000000';\n VAR_INTANGIBLE_ASSETS            VARCHAR2(1000) := '200000000';\n VAR_DEPOSIT                      VARCHAR2(1000) := '200000000';\n VAR_LOAN                         VARCHAR2(1000) := '200000000';\n VAR_CASH_ASSETS                  VARCHAR2(1000) := '200000000';\n VAR_HIGH_LIQUIDITY_CASH          VARCHAR2(1000) := '200000000';\n VAR_SHORT_TERM_DEBT              VARCHAR2(1000) := '200000000';\n VAR_NET_CASH                     VARCHAR2(1000) := '200000000';\n VAR_BONDS                        VARCHAR2(1000) := '200000000';\n VAR_CASH_INVENTORY               VARCHAR2(1000) := '200000000';\n VAR_CASH_FLOWS_INPUT_PREDIC      VARCHAR2(1000) := '200000000';\n VAR_CASH_FLOWS_OUTPUT_PREDIC     VARCHAR2(1000) := '200000000';\n VAR_TOTAL_ESCAPE_DEPOSIT         VARCHAR2(1000) := '200000000';\n VAR_TOTAL_CASH_BALANCE           VARCHAR2(1000) := '200000000';\n VAR_TOTAL_BALANCE                VARCHAR2(1000) := '200000000';\n VAR_ALL_BANK_RESOURCES           VARCHAR2(1000) := '200000000';\n VAR_CASH_CURRENCY                VARCHAR2(1000) := '200000000';\n VAR_TOTAL_CURRENCY               VARCHAR2(1000) := '200000000';\n VAR_LONG_TERM_INVESTMENT         VARCHAR2(1000) := '200000000';\n VAR_TOTAL_BANK_ASSETS            VARCHAR2(1000) := '200000000';\n VAR_visitor_deposit              VARCHAR2(1000) := '300000000,200000000,100000000';\n VAR_long_term_deposit            VARCHAR2(1000) := '200000000';\n /***************************************************************************************************************************/\n CASH_MONEY                       NUMBER;\n TRANSACTION_SECURITIES           NUMBER;\n SHORT_TERM_INVESTMENT            NUMBER;\n TOTAL_DEPOSIT                    NUMBER;\n SHORT_TERM_BANK_EXPOSURES        NUMBER;\n RESOURCES_ABSORBED               NUMBER;\n LOST_ASSETS                      NUMBER;\n REMOVABLE_FUNDS                  NUMBER;\n EQUITY                           NUMBER;\n INVESTING_IN_COMPANIES           NUMBER;\n VISIBLE_ASSETS                   NUMBER;\n INTANGIBLE_ASSETS                NUMBER;\n DEPOSIT                          NUMBER;\n LOAN                             NUMBER;\n CASH_ASSETS                      NUMBER;\n HIGH_LIQUIDITY_CASH              NUMBER;\n SHORT_TERM_DEBT                  NUMBER;\n NET_CASH                         NUMBER;\n BONDS                            NUMBER;\n CASH_INVENTORY                   NUMBER;\n CASH_FLOWS_INPUT_PREDIC          NUMBER;\n CASH_FLOWS_OUTPUT_PREDIC         NUMBER;\n TOTAL_ESCAPE_DEPOSIT             NUMBER;\n TOTAL_CASH_BALANCE               NUMBER;\n TOTAL_BALANCE                    NUMBER;\n ALL_BANK_RESOURCES               NUMBER;\n CASH_CURRENCY                    NUMBER;\n TOTAL_CURRENCY                   NUMBER;\n LONG_TERM_INVESTMENT             NUMBER;\n TOTAL_BANK_ASSETS                NUMBER;\n visitor_deposit              NUMBER;\n long_term_deposit            NUMBER;\n VAR                              VARCHAR2(30000);\n /*************************************************************************************************/\n VAR_DEPENDENCE_ON_DEPOSITS       NUMBER;\n VAR_REL_TO_FINANCIAL_INSTIT      NUMBER;\n VAR_LIQUIDITY_VULNERABLE_RATIO   NUMBER;\n VAR_BANK_INVSET_COVER_RATIO      NUMBER;\n VAR_LOAN_COVER_BY_DEP_RATIO      NUMBER;\n VAR_DEBT_COVER_BY_CASH_RATIO     NUMBER;\n VAR_CASHMEREABILITY_RATIO        NUMBER;\n VAR_COMMER_NONCOMMER_TO_ASSETS   NUMBER;\n VAR_CASH_RATIO                   NUMBER;\n VAR_FLOW_COVERAGE_RATIO          NUMBER;\n VAR_COVERAGE_FLUCTUATION_RATIO   NUMBER;\n VAR_SHORT_TERM_DEBT_RATIO        NUMBER;\n VAR_CASH_TO_TOTAL_RES_RATIO      NUMBER;\n VAR_TOTAL_BAL_TO_RES_RATIO       NUMBER;\n EXCHANGE_RATE_RATIO              NUMBER;\n DEBT_COVERAGE_RATIO              NUMBER;\n var_visitor_dep_to_total_dep     number;\n var_long_term_dep_to_total_dep   number;\n    \n   \n\n\n /******************************************************************************************************/\nBEGIN\n\nif(inpar_cur = 4)\nthen\n VAR   := '\n  SELECT  /*+   PARALLEL(auto) */ \n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_MONEY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TRANSACTION_SECURITIES ||\n ') then  BALANCE end),\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_BANK_EXPOSURES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_RESOURCES_ABSORBED ||\n ') then  BALANCE end) ,\n \n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOST_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_REMOVABLE_FUNDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_EQUITY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INVESTING_IN_COMPANIES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_VISIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INTANGIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOAN ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_HIGH_LIQUIDITY_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_DEBT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_NET_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_BONDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_INVENTORY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_INPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_OUTPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_ESCAPE_DEPOSIT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CASH_BALANCE ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BALANCE ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_ALL_BANK_RESOURCES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_CURRENCY ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CURRENCY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LONG_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BANK_ASSETS ||\n ') then  BALANCE end)  ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_visitor_deposit ||\n ') then  BALANCE end)  ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_long_term_deposit ||\n ') then  BALANCE end) \n  \n  \n   FROM TBL_LEDGER_BRANCH PARTITION ('||VAR_PARTITION1||') where eff_date = TRUNC(TO_DATE('''||inpar_date||''',''yyyy-mm-dd''))  AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',inpar_BRANCH)\n        || ') AND REF_CUR_ID= 4' ;\n  else\n  \n  \n   VAR   := '\n  SELECT  /*+   PARALLEL(auto) */ \n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_MONEY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TRANSACTION_SECURITIES ||\n ') then  BALANCE end),\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_BANK_EXPOSURES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_RESOURCES_ABSORBED ||\n ') then  BALANCE end) ,\n \n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOST_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_REMOVABLE_FUNDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_EQUITY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INVESTING_IN_COMPANIES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_VISIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INTANGIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOAN ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_HIGH_LIQUIDITY_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_DEBT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_NET_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_BONDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_INVENTORY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_INPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_OUTPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_ESCAPE_DEPOSIT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CASH_BALANCE ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BALANCE ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_ALL_BANK_RESOURCES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_CURRENCY ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CURRENCY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LONG_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BANK_ASSETS ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_visitor_deposit ||\n ') then  BALANCE end)  ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_long_term_deposit ||\n ') then  BALANCE end) \n  \n  \n  \n   FROM TBL_LEDGER_BRANCH PARTITION ('||VAR_PARTITION1||') where eff_date = TRUNC(TO_DATE('''||inpar_date||''',''yyyy-mm-dd''))  AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',inpar_BRANCH)\n        || ') AND REF_CUR_ID \u003c\u003e 4' ;\n  \n  end if;\n \n EXECUTE IMMEDIATE VAR INTO\n  CASH_MONEY,TRANSACTION_SECURITIES,SHORT_TERM_INVESTMENT,TOTAL_DEPOSIT,SHORT_TERM_BANK_EXPOSURES,RESOURCES_ABSORBED,LOST_ASSETS,REMOVABLE_FUNDS\n,EQUITY,INVESTING_IN_COMPANIES,VISIBLE_ASSETS,INTANGIBLE_ASSETS,DEPOSIT,LOAN,CASH_ASSETS,HIGH_LIQUIDITY_CASH,SHORT_TERM_DEBT,NET_CASH\n,BONDS,CASH_INVENTORY,CASH_FLOWS_INPUT_PREDIC,CASH_FLOWS_OUTPUT_PREDIC,TOTAL_ESCAPE_DEPOSIT,TOTAL_CASH_BALANCE,TOTAL_BALANCE,ALL_BANK_RESOURCES\n,CASH_CURRENCY,TOTAL_CURRENCY,LONG_TERM_INVESTMENT,TOTAL_BANK_ASSETS,visitor_deposit,long_term_deposit;\n\n VAR_DEPENDENCE_ON_DEPOSITS       := (cash_money +transaction_securities +short_term_investment )/(total_deposit);\n VAR_REL_TO_FINANCIAL_INSTIT       := (cash_money +transaction_securities +short_term_bank_exposures)/(resources_absorbed);\n VAR_LIQUIDITY_VULNERABLE_RATIO    :=(lost_assets)/(removable_funds);\n VAR_BANK_INVSET_COVER_RATIO       :=(equity)/(investing_in_companies+visible_assets+intangible_assets);\n VAR_LOAN_COVER_BY_DEP_RATIO       := (deposit)/(loan);\n VAR_DEBT_COVER_BY_CASH_RATIO      := (high_liquidity_cash)/(short_term_debt);\n VAR_CASHMEREABILITY_RATIO         := (net_cash)/(cash_assets);\n VAR_COMMER_NONCOMMER_TO_ASSETS    :=(bonds)/(cash_assets);\n VAR_CASH_RATIO                    := (cash_inventory)/(total_deposit);\n VAR_FLOW_COVERAGE_RATIO           := (cash_flows_input_predic)/(cash_flows_output_predic) ;\n VAR_COVERAGE_FLUCTUATION_RATIO    := (cash_assets)/(total_escape_deposit);\n VAR_SHORT_TERM_DEBT_RATIO         := (cash_assets)/(short_term_debt);\n VAR_CASH_TO_TOTAL_RES_RATIO       := (total_cash_balance)/(all_bank_resources);\n VAR_TOTAL_BAL_TO_RES_RATIO        :=(total_balance)/(all_bank_resources);\n EXCHANGE_RATE_RATIO               :=(cash_currency)/(total_currency);\n DEBT_COVERAGE_RATIO               :=(long_term_investment)/(total_bank_assets);\n var_visitor_dep_to_total_dep      :=  (visitor_deposit)/(total_deposit);\n var_long_term_dep_to_total_dep    :=  (long_term_deposit)/(total_deposit);\n \n\n\n return 'select /*+   PARALLEL(auto) */   round( regexp_substr('''   ||\n VAR_DEPENDENCE_ON_DEPOSITS      ||  ',' ||       \n VAR_REL_TO_FINANCIAL_INSTIT     ||  ',' ||\n VAR_LIQUIDITY_VULNERABLE_RATIO  ||  ',' ||\n VAR_BANK_INVSET_COVER_RATIO     ||  ',' ||\n VAR_LOAN_COVER_BY_DEP_RATIO     ||  ',' ||\n VAR_DEBT_COVER_BY_CASH_RATIO    ||  ',' ||\n VAR_CASHMEREABILITY_RATIO       ||  ',' ||\n VAR_COMMER_NONCOMMER_TO_ASSETS  ||  ',' ||\n VAR_CASH_RATIO                  ||  ',' ||\n VAR_FLOW_COVERAGE_RATIO         ||  ',' ||\n VAR_COVERAGE_FLUCTUATION_RATIO  ||  ',' ||\n VAR_SHORT_TERM_DEBT_RATIO       ||  ',' ||\n VAR_CASH_TO_TOTAL_RES_RATIO     ||  ',' ||\n VAR_TOTAL_BAL_TO_RES_RATIO      ||  ',' ||\n EXCHANGE_RATE_RATIO             ||  ',' ||\n DEBT_COVERAGE_RATIO             ||  ',' ||\n var_visitor_dep_to_total_dep    ||  ',' ||\n var_long_term_dep_to_total_dep\n ||\n ''',''[^,]+'',1,level),2) as \"value\",level as \"id\" from dual\n     connect by regexp_substr('''   ||\n VAR_DEPENDENCE_ON_DEPOSITS      ||  ',' ||\n VAR_REL_TO_FINANCIAL_INSTIT     ||  ',' ||\n VAR_LIQUIDITY_VULNERABLE_RATIO  ||  ',' ||\n VAR_BANK_INVSET_COVER_RATIO     ||  ',' ||\n VAR_LOAN_COVER_BY_DEP_RATIO     ||  ',' ||\n VAR_DEBT_COVER_BY_CASH_RATIO    ||  ',' ||\n VAR_CASHMEREABILITY_RATIO       ||  ',' ||\n VAR_COMMER_NONCOMMER_TO_ASSETS  ||  ',' ||\n VAR_CASH_RATIO                  ||  ',' ||\n VAR_FLOW_COVERAGE_RATIO         ||  ',' ||\n VAR_COVERAGE_FLUCTUATION_RATIO  ||  ',' ||\n VAR_SHORT_TERM_DEBT_RATIO       ||  ',' ||\n VAR_CASH_TO_TOTAL_RES_RATIO     ||  ',' ||\n VAR_TOTAL_BAL_TO_RES_RATIO      ||  ',' ||\n EXCHANGE_RATE_RATIO             ||  ',' ||\n DEBT_COVERAGE_RATIO             ||  ',' ||\n var_visitor_dep_to_total_dep    ||  ',' ||\n var_long_term_dep_to_total_dep\n ||\n ''',''[^,]+'',1,level) is not null';\n \n\nEND;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/        \n    \n    \n FUNCTION FNC_liquidity_return_var_name RETURN VARCHAR2\n \n as\n \n begin \n \n return '\nselect /*+   PARALLEL(auto) */  regexp_substr(''نسبت وابستگي به سپرده ها,\nنسبت وابستگي به موسسات مالي,\nنسبت آسيب پذيري نقدينگي,\nنسبت پوشش سرمايه گذاري بانک,\nنسبت پوشش تسهيلات توسط سپرده ها,\nنسبت پوشش بدهي هاي کوتاه مدت توسط دارايي هاي نقد,\nنسبت قابليت نقد شوندگي,\nنسبت اوراق بهادار تجاري و غير تجاري به دارايي هاي نقد,\nنسبت وجه نقد,\nنسبت پوشش جريان نقد,\nنسبت پوشش نوسانات,\nنسبت پوشش بدهي کوتاه مدت,\nنسبت موجودي نقد به کل منابع,\nنسبت موجودي نقد و موجودي نزد بانک ها به کل منابع,\nنسبت نقد ارز,\nنسبت پوشش بدهي,\nنسبت سپرده هاي ديداري به کل سپرده ها,\nنسبت سپردهاي بلند مدت به جمع سپردها'',\n\n''[^,]+'', 1, level) \n\nas \"name\",level as \"id\" from dual\nconnect by regexp_substr(''نسبت وابستگي به سپرده ها,\nنسبت وابستگي به موسسات مالي,\nنسبت آسيب پذيري نقدينگي,\nنسبت پوشش سرمايه گذاري بانک,\nنسبت پوشش تسهيلات توسط سپرده ها,\nنسبت پوشش بدهي هاي کوتاه مدت توسط دارايي هاي نقد,\nنسبت قابليت نقد شوندگي,\nنسبت اوراق بهادار تجاري و غير تجاري به دارايي هاي نقد,\nنسبت وجه نقد,\nنسبت پوشش جريان نقد,\nنسبت پوشش نوسانات,\nنسبت پوشش بدهي کوتاه مدت,\nنسبت موجودي نقد به کل منابع,\nنسبت موجودي نقد و موجودي نزد بانک ها به کل منابع,\nنسبت نقد ارز,\nنسبت پوشش بدهي,\nنسبت سپرده هاي ديداري به کل سپرده ها,\nنسبت سپردهاي بلند مدت به جمع سپردها'',\n\n''[^,]+'', 1, level) is not null\n  ';\nend;\n \n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/    \nFUNCTION FNC_liquidity_rates_limit   RETURN VARCHAR2 \n as\n \n begin\n \n return 'SELECT  RATE_ID as \"id\", MINVAL as \"minValue\", MAXVAL as \"maxValue\",mincolor as \"minColor\",maxcolor as \"maxColor\" FROM TBL_LIQUIDITY_RATES_LIMIT order by ID ';\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_liquidity_update_limit ( INPAR_rate_id IN NUMBER ,inpar_minval in number,inpar_max_val in number,inpar_mincolor in varchar2, inpar_maxcolor in varchar2 ,outpar_id out varchar2)  \n as\n begin\n UPDATE TBL_LIQUIDITY_RATES_LIMIT\nSET minval       =inpar_minval\n,\nmaxval =inpar_max_val\n,\nMINCOLOR = inpar_mincolor\n,\nMAXCOLOR = inpar_maxcolor\nWHERE \nRATE_ID = INPAR_rate_id\n;\ncommit;\noutpar_id :=1;\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/    \n  FUNCTION FNC_LIQUIDITY_RATES_NOTIF ( INPAR_DATE IN DATE ) RETURN VARCHAR2 AS\n VAR_DATE           VARCHAR2(100);\n VAR_SELECT         VARCHAR2(30000);\n VAR_FINAL_SELECT   VARCHAR2(30000);\n PRAGMA AUTONOMOUS_TRANSACTION;\n\nBEGIN\n SELECT\n  TO_CHAR(INPAR_DATE,'yyyy-mm-dd')\n INTO\n  VAR_DATE\n FROM DUAL;\n\n SELECT\n  PKG_LIQUIDITY_RATES.FNC_LIQUIDITY_RATES_RESULT(VAR_DATE,NULL,4)\n INTO\n  VAR_SELECT\n FROM DUAL;\n delete from TBL_NOTIFICATIONS where TYPE = 'liquidity-reports';\ncommit;\n VAR_FINAL_SELECT   := '\n  INSERT\nINTO TBL_NOTIFICATIONS\n  (\n \n    TITLE, --toozih -\u003e for example ;  nesbate X bishtar az hade mojaz ast\n    TYPE, --esme gozaresh (nesbat haE naghdinegi)\n    START_TIME, --tarikh shoroE \n    END_TIME, --tarikh payan\n    STATUS, -- finished\n    DESCRIPTION --description\n  )\n  SELECT case when less_more= 1 then \"name\"||'' کمتر از حد مجاز است'' else  \"name\"||'' بيشتر از حد مجاز است''  end,  ''liquidity-reports'',sysdate,sysdate,''finished'','''' from (\n SELECT a.\"id\",a.\"value\",case when a.\"value\" \u003cb.minval then 1 when a.\"value\" \u003eb.maxval then 2 else 0 end as less_more,C.\"name\" FROM (\n '\n|| VAR_SELECT || ' )a,\n ( select * from TBL_LIQUIDITY_RATES_LIMIT)b,\n (\n '||PKG_LIQUIDITY_RATES.FNC_liquidity_return_var_name||'\n )c\n where \n a.\"id\" = b.rate_id\n and (a.\"value\" \u003e b.maxval\n or \n a.\"value\"\u003cb.minval\n)  and c.\"id\" = a.\"id\");\n \n '\n;\nEXECUTE IMMEDIATE 'begin ' ||VAR_FINAL_SELECT || 'end;';\ncommit;\n RETURN 1;\nEND;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    \n    \n\nend pkg_liquidity_rates;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LIQUIDITY_RATES\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"توسعه صادرات\"\n  Description: \"گزارش نسبت هاي نقدينگي براي بانک توسعه صادرات\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_result  (\n \n inpar_date    IN varchar,\n inpar_BRANCH   IN varchar,\n  inpar_CUR   IN varchar\n \n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_return_var_name RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_limit   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_liquidity_update_limit ( INPAR_rate_id IN NUMBER ,inpar_minval in number,inpar_max_val in number,inpar_mincolor in varchar2, inpar_maxcolor in varchar2\n ,outpar_id out varchar2)  ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_notif(inpar_date  IN date)   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_liquidity_rates;"},{"Name":"PKG_LIQUIDITY_RATES","ObjectID":303342,"Digest":"1117cddf5859dcaaf7c3a0a8a72406cabcf41822ce5c4169c10333aa536d69f2","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LIQUIDITY_RATES\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"توسعه صادرات\"\n  Description: \"گزارش نسبت هاي نقدينگي براي بانک توسعه صادرات\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_result  (\n \n inpar_date    IN varchar,\n inpar_BRANCH   IN varchar,\n  inpar_CUR   IN varchar\n \n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_return_var_name RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_limit   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_liquidity_update_limit ( INPAR_rate_id IN NUMBER ,inpar_minval in number,inpar_max_val in number,inpar_mincolor in varchar2, inpar_maxcolor in varchar2\n ,outpar_id out varchar2)  ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_notif(inpar_date  IN date)   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_liquidity_rates;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LIQUIDITY_RATES\" as\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"توسعه صادرات\"\n  Description: \"گزارش نسبت هاي نقدينگي براي بانک توسعه صادرات\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nfunction fnc_liquidity_rates_result  (\n \n inpar_date     in varchar,\n inpar_BRANCH   IN varchar,\n  inpar_CUR   IN varchar\n \n ) return varchar2 as\n \n    VAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n    \n VAR_CASH_MONEY                   VARCHAR2(1000) := '100000000 ,200000000';   /*VARCHAR2(1000);*/\n VAR_TRANSACTION_SECURITIES       VARCHAR2(1000) := '200000000';\n VAR_SHORT_TERM_INVESTMENT        VARCHAR2(1000) := '200000000';\n VAR_TOTAL_DEPOSIT                VARCHAR2(1000) := '200000000';\n VAR_SHORT_TERM_BANK_EXPOSURES    VARCHAR2(1000) := '200000000';\n VAR_RESOURCES_ABSORBED           VARCHAR2(1000) := '200000000';\n VAR_LOST_ASSETS                  VARCHAR2(1000) := '200000000';\n VAR_REMOVABLE_FUNDS              VARCHAR2(1000) := '200000000';\n VAR_EQUITY                       VARCHAR2(1000) := '200000000';\n VAR_INVESTING_IN_COMPANIES       VARCHAR2(1000) := '200000000';\n VAR_VISIBLE_ASSETS               VARCHAR2(1000) := '200000000';\n VAR_INTANGIBLE_ASSETS            VARCHAR2(1000) := '200000000';\n VAR_DEPOSIT                      VARCHAR2(1000) := '200000000';\n VAR_LOAN                         VARCHAR2(1000) := '200000000';\n VAR_CASH_ASSETS                  VARCHAR2(1000) := '200000000';\n VAR_HIGH_LIQUIDITY_CASH          VARCHAR2(1000) := '200000000';\n VAR_SHORT_TERM_DEBT              VARCHAR2(1000) := '200000000';\n VAR_NET_CASH                     VARCHAR2(1000) := '200000000';\n VAR_BONDS                        VARCHAR2(1000) := '200000000';\n VAR_CASH_INVENTORY               VARCHAR2(1000) := '200000000';\n VAR_CASH_FLOWS_INPUT_PREDIC      VARCHAR2(1000) := '200000000';\n VAR_CASH_FLOWS_OUTPUT_PREDIC     VARCHAR2(1000) := '200000000';\n VAR_TOTAL_ESCAPE_DEPOSIT         VARCHAR2(1000) := '200000000';\n VAR_TOTAL_CASH_BALANCE           VARCHAR2(1000) := '200000000';\n VAR_TOTAL_BALANCE                VARCHAR2(1000) := '200000000';\n VAR_ALL_BANK_RESOURCES           VARCHAR2(1000) := '200000000';\n VAR_CASH_CURRENCY                VARCHAR2(1000) := '200000000';\n VAR_TOTAL_CURRENCY               VARCHAR2(1000) := '200000000';\n VAR_LONG_TERM_INVESTMENT         VARCHAR2(1000) := '200000000';\n VAR_TOTAL_BANK_ASSETS            VARCHAR2(1000) := '200000000';\n VAR_visitor_deposit              VARCHAR2(1000) := '300000000,200000000,100000000';\n VAR_long_term_deposit            VARCHAR2(1000) := '200000000';\n /***************************************************************************************************************************/\n CASH_MONEY                       NUMBER;\n TRANSACTION_SECURITIES           NUMBER;\n SHORT_TERM_INVESTMENT            NUMBER;\n TOTAL_DEPOSIT                    NUMBER;\n SHORT_TERM_BANK_EXPOSURES        NUMBER;\n RESOURCES_ABSORBED               NUMBER;\n LOST_ASSETS                      NUMBER;\n REMOVABLE_FUNDS                  NUMBER;\n EQUITY                           NUMBER;\n INVESTING_IN_COMPANIES           NUMBER;\n VISIBLE_ASSETS                   NUMBER;\n INTANGIBLE_ASSETS                NUMBER;\n DEPOSIT                          NUMBER;\n LOAN                             NUMBER;\n CASH_ASSETS                      NUMBER;\n HIGH_LIQUIDITY_CASH              NUMBER;\n SHORT_TERM_DEBT                  NUMBER;\n NET_CASH                         NUMBER;\n BONDS                            NUMBER;\n CASH_INVENTORY                   NUMBER;\n CASH_FLOWS_INPUT_PREDIC          NUMBER;\n CASH_FLOWS_OUTPUT_PREDIC         NUMBER;\n TOTAL_ESCAPE_DEPOSIT             NUMBER;\n TOTAL_CASH_BALANCE               NUMBER;\n TOTAL_BALANCE                    NUMBER;\n ALL_BANK_RESOURCES               NUMBER;\n CASH_CURRENCY                    NUMBER;\n TOTAL_CURRENCY                   NUMBER;\n LONG_TERM_INVESTMENT             NUMBER;\n TOTAL_BANK_ASSETS                NUMBER;\n visitor_deposit              NUMBER;\n long_term_deposit            NUMBER;\n VAR                              VARCHAR2(30000);\n /*************************************************************************************************/\n VAR_DEPENDENCE_ON_DEPOSITS       NUMBER;\n VAR_REL_TO_FINANCIAL_INSTIT      NUMBER;\n VAR_LIQUIDITY_VULNERABLE_RATIO   NUMBER;\n VAR_BANK_INVSET_COVER_RATIO      NUMBER;\n VAR_LOAN_COVER_BY_DEP_RATIO      NUMBER;\n VAR_DEBT_COVER_BY_CASH_RATIO     NUMBER;\n VAR_CASHMEREABILITY_RATIO        NUMBER;\n VAR_COMMER_NONCOMMER_TO_ASSETS   NUMBER;\n VAR_CASH_RATIO                   NUMBER;\n VAR_FLOW_COVERAGE_RATIO          NUMBER;\n VAR_COVERAGE_FLUCTUATION_RATIO   NUMBER;\n VAR_SHORT_TERM_DEBT_RATIO        NUMBER;\n VAR_CASH_TO_TOTAL_RES_RATIO      NUMBER;\n VAR_TOTAL_BAL_TO_RES_RATIO       NUMBER;\n EXCHANGE_RATE_RATIO              NUMBER;\n DEBT_COVERAGE_RATIO              NUMBER;\n var_visitor_dep_to_total_dep     number;\n var_long_term_dep_to_total_dep   number;\n    \n   \n\n\n /******************************************************************************************************/\nBEGIN\n\nif(inpar_cur = 4)\nthen\n VAR   := '\n  SELECT  /*+   PARALLEL(auto) */ \n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_MONEY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TRANSACTION_SECURITIES ||\n ') then  BALANCE end),\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_BANK_EXPOSURES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_RESOURCES_ABSORBED ||\n ') then  BALANCE end) ,\n \n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOST_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_REMOVABLE_FUNDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_EQUITY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INVESTING_IN_COMPANIES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_VISIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INTANGIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOAN ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_HIGH_LIQUIDITY_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_DEBT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_NET_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_BONDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_INVENTORY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_INPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_OUTPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_ESCAPE_DEPOSIT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CASH_BALANCE ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BALANCE ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_ALL_BANK_RESOURCES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_CURRENCY ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CURRENCY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LONG_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BANK_ASSETS ||\n ') then  BALANCE end)  ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_visitor_deposit ||\n ') then  BALANCE end)  ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_long_term_deposit ||\n ') then  BALANCE end) \n  \n  \n   FROM TBL_LEDGER_BRANCH PARTITION ('||VAR_PARTITION1||') where eff_date = TRUNC(TO_DATE('''||inpar_date||''',''yyyy-mm-dd''))  AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',inpar_BRANCH)\n        || ') AND REF_CUR_ID= 4' ;\n  else\n  \n  \n   VAR   := '\n  SELECT  /*+   PARALLEL(auto) */ \n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_MONEY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TRANSACTION_SECURITIES ||\n ') then  BALANCE end),\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_BANK_EXPOSURES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_RESOURCES_ABSORBED ||\n ') then  BALANCE end) ,\n \n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOST_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_REMOVABLE_FUNDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_EQUITY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INVESTING_IN_COMPANIES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_VISIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_INTANGIBLE_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_DEPOSIT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LOAN ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_ASSETS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_HIGH_LIQUIDITY_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_SHORT_TERM_DEBT ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_NET_CASH ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_BONDS ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_INVENTORY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_INPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_FLOWS_OUTPUT_PREDIC ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_ESCAPE_DEPOSIT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CASH_BALANCE ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BALANCE ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_ALL_BANK_RESOURCES ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_CASH_CURRENCY ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_CURRENCY ||\n ') then  BALANCE end) ,\n  SUM(case when LEDGER_CODE in (' ||\n VAR_LONG_TERM_INVESTMENT ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_TOTAL_BANK_ASSETS ||\n ') then  BALANCE end) ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_visitor_deposit ||\n ') then  BALANCE end)  ,\n    SUM(case when LEDGER_CODE in (' ||\n VAR_long_term_deposit ||\n ') then  BALANCE end) \n  \n  \n  \n   FROM TBL_LEDGER_BRANCH PARTITION ('||VAR_PARTITION1||') where eff_date = TRUNC(TO_DATE('''||inpar_date||''',''yyyy-mm-dd''))  AND REF_BRANCH IN ( '\n        || FNC_PRIVATE_CREATE_QUERY('TBL_BRANCH',inpar_BRANCH)\n        || ') AND REF_CUR_ID \u003c\u003e 4' ;\n  \n  end if;\n \n EXECUTE IMMEDIATE VAR INTO\n  CASH_MONEY,TRANSACTION_SECURITIES,SHORT_TERM_INVESTMENT,TOTAL_DEPOSIT,SHORT_TERM_BANK_EXPOSURES,RESOURCES_ABSORBED,LOST_ASSETS,REMOVABLE_FUNDS\n,EQUITY,INVESTING_IN_COMPANIES,VISIBLE_ASSETS,INTANGIBLE_ASSETS,DEPOSIT,LOAN,CASH_ASSETS,HIGH_LIQUIDITY_CASH,SHORT_TERM_DEBT,NET_CASH\n,BONDS,CASH_INVENTORY,CASH_FLOWS_INPUT_PREDIC,CASH_FLOWS_OUTPUT_PREDIC,TOTAL_ESCAPE_DEPOSIT,TOTAL_CASH_BALANCE,TOTAL_BALANCE,ALL_BANK_RESOURCES\n,CASH_CURRENCY,TOTAL_CURRENCY,LONG_TERM_INVESTMENT,TOTAL_BANK_ASSETS,visitor_deposit,long_term_deposit;\n\n VAR_DEPENDENCE_ON_DEPOSITS       := (cash_money +transaction_securities +short_term_investment )/(total_deposit);\n VAR_REL_TO_FINANCIAL_INSTIT       := (cash_money +transaction_securities +short_term_bank_exposures)/(resources_absorbed);\n VAR_LIQUIDITY_VULNERABLE_RATIO    :=(lost_assets)/(removable_funds);\n VAR_BANK_INVSET_COVER_RATIO       :=(equity)/(investing_in_companies+visible_assets+intangible_assets);\n VAR_LOAN_COVER_BY_DEP_RATIO       := (deposit)/(loan);\n VAR_DEBT_COVER_BY_CASH_RATIO      := (high_liquidity_cash)/(short_term_debt);\n VAR_CASHMEREABILITY_RATIO         := (net_cash)/(cash_assets);\n VAR_COMMER_NONCOMMER_TO_ASSETS    :=(bonds)/(cash_assets);\n VAR_CASH_RATIO                    := (cash_inventory)/(total_deposit);\n VAR_FLOW_COVERAGE_RATIO           := (cash_flows_input_predic)/(cash_flows_output_predic) ;\n VAR_COVERAGE_FLUCTUATION_RATIO    := (cash_assets)/(total_escape_deposit);\n VAR_SHORT_TERM_DEBT_RATIO         := (cash_assets)/(short_term_debt);\n VAR_CASH_TO_TOTAL_RES_RATIO       := (total_cash_balance)/(all_bank_resources);\n VAR_TOTAL_BAL_TO_RES_RATIO        :=(total_balance)/(all_bank_resources);\n EXCHANGE_RATE_RATIO               :=(cash_currency)/(total_currency);\n DEBT_COVERAGE_RATIO               :=(long_term_investment)/(total_bank_assets);\n var_visitor_dep_to_total_dep      :=  (visitor_deposit)/(total_deposit);\n var_long_term_dep_to_total_dep    :=  (long_term_deposit)/(total_deposit);\n \n\n\n return 'select /*+   PARALLEL(auto) */   round( regexp_substr('''   ||\n VAR_DEPENDENCE_ON_DEPOSITS      ||  ',' ||       \n VAR_REL_TO_FINANCIAL_INSTIT     ||  ',' ||\n VAR_LIQUIDITY_VULNERABLE_RATIO  ||  ',' ||\n VAR_BANK_INVSET_COVER_RATIO     ||  ',' ||\n VAR_LOAN_COVER_BY_DEP_RATIO     ||  ',' ||\n VAR_DEBT_COVER_BY_CASH_RATIO    ||  ',' ||\n VAR_CASHMEREABILITY_RATIO       ||  ',' ||\n VAR_COMMER_NONCOMMER_TO_ASSETS  ||  ',' ||\n VAR_CASH_RATIO                  ||  ',' ||\n VAR_FLOW_COVERAGE_RATIO         ||  ',' ||\n VAR_COVERAGE_FLUCTUATION_RATIO  ||  ',' ||\n VAR_SHORT_TERM_DEBT_RATIO       ||  ',' ||\n VAR_CASH_TO_TOTAL_RES_RATIO     ||  ',' ||\n VAR_TOTAL_BAL_TO_RES_RATIO      ||  ',' ||\n EXCHANGE_RATE_RATIO             ||  ',' ||\n DEBT_COVERAGE_RATIO             ||  ',' ||\n var_visitor_dep_to_total_dep    ||  ',' ||\n var_long_term_dep_to_total_dep\n ||\n ''',''[^,]+'',1,level),2) as \"value\",level as \"id\" from dual\n     connect by regexp_substr('''   ||\n VAR_DEPENDENCE_ON_DEPOSITS      ||  ',' ||\n VAR_REL_TO_FINANCIAL_INSTIT     ||  ',' ||\n VAR_LIQUIDITY_VULNERABLE_RATIO  ||  ',' ||\n VAR_BANK_INVSET_COVER_RATIO     ||  ',' ||\n VAR_LOAN_COVER_BY_DEP_RATIO     ||  ',' ||\n VAR_DEBT_COVER_BY_CASH_RATIO    ||  ',' ||\n VAR_CASHMEREABILITY_RATIO       ||  ',' ||\n VAR_COMMER_NONCOMMER_TO_ASSETS  ||  ',' ||\n VAR_CASH_RATIO                  ||  ',' ||\n VAR_FLOW_COVERAGE_RATIO         ||  ',' ||\n VAR_COVERAGE_FLUCTUATION_RATIO  ||  ',' ||\n VAR_SHORT_TERM_DEBT_RATIO       ||  ',' ||\n VAR_CASH_TO_TOTAL_RES_RATIO     ||  ',' ||\n VAR_TOTAL_BAL_TO_RES_RATIO      ||  ',' ||\n EXCHANGE_RATE_RATIO             ||  ',' ||\n DEBT_COVERAGE_RATIO             ||  ',' ||\n var_visitor_dep_to_total_dep    ||  ',' ||\n var_long_term_dep_to_total_dep\n ||\n ''',''[^,]+'',1,level) is not null';\n \n\nEND;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/        \n    \n    \n FUNCTION FNC_liquidity_return_var_name RETURN VARCHAR2\n \n as\n \n begin \n \n return '\nselect /*+   PARALLEL(auto) */  regexp_substr(''نسبت وابستگي به سپرده ها,\nنسبت وابستگي به موسسات مالي,\nنسبت آسيب پذيري نقدينگي,\nنسبت پوشش سرمايه گذاري بانک,\nنسبت پوشش تسهيلات توسط سپرده ها,\nنسبت پوشش بدهي هاي کوتاه مدت توسط دارايي هاي نقد,\nنسبت قابليت نقد شوندگي,\nنسبت اوراق بهادار تجاري و غير تجاري به دارايي هاي نقد,\nنسبت وجه نقد,\nنسبت پوشش جريان نقد,\nنسبت پوشش نوسانات,\nنسبت پوشش بدهي کوتاه مدت,\nنسبت موجودي نقد به کل منابع,\nنسبت موجودي نقد و موجودي نزد بانک ها به کل منابع,\nنسبت نقد ارز,\nنسبت پوشش بدهي,\nنسبت سپرده هاي ديداري به کل سپرده ها,\nنسبت سپردهاي بلند مدت به جمع سپردها'',\n\n''[^,]+'', 1, level) \n\nas \"name\",level as \"id\" from dual\nconnect by regexp_substr(''نسبت وابستگي به سپرده ها,\nنسبت وابستگي به موسسات مالي,\nنسبت آسيب پذيري نقدينگي,\nنسبت پوشش سرمايه گذاري بانک,\nنسبت پوشش تسهيلات توسط سپرده ها,\nنسبت پوشش بدهي هاي کوتاه مدت توسط دارايي هاي نقد,\nنسبت قابليت نقد شوندگي,\nنسبت اوراق بهادار تجاري و غير تجاري به دارايي هاي نقد,\nنسبت وجه نقد,\nنسبت پوشش جريان نقد,\nنسبت پوشش نوسانات,\nنسبت پوشش بدهي کوتاه مدت,\nنسبت موجودي نقد به کل منابع,\nنسبت موجودي نقد و موجودي نزد بانک ها به کل منابع,\nنسبت نقد ارز,\nنسبت پوشش بدهي,\nنسبت سپرده هاي ديداري به کل سپرده ها,\nنسبت سپردهاي بلند مدت به جمع سپردها'',\n\n''[^,]+'', 1, level) is not null\n  ';\nend;\n \n \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/    \nFUNCTION FNC_liquidity_rates_limit   RETURN VARCHAR2 \n as\n \n begin\n \n return 'SELECT  RATE_ID as \"id\", MINVAL as \"minValue\", MAXVAL as \"maxValue\",mincolor as \"minColor\",maxcolor as \"maxColor\" FROM TBL_LIQUIDITY_RATES_LIMIT order by ID ';\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_liquidity_update_limit ( INPAR_rate_id IN NUMBER ,inpar_minval in number,inpar_max_val in number,inpar_mincolor in varchar2, inpar_maxcolor in varchar2 ,outpar_id out varchar2)  \n as\n begin\n UPDATE TBL_LIQUIDITY_RATES_LIMIT\nSET minval       =inpar_minval\n,\nmaxval =inpar_max_val\n,\nMINCOLOR = inpar_mincolor\n,\nMAXCOLOR = inpar_maxcolor\nWHERE \nRATE_ID = INPAR_rate_id\n;\ncommit;\noutpar_id :=1;\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/    \n  FUNCTION FNC_LIQUIDITY_RATES_NOTIF ( INPAR_DATE IN DATE ) RETURN VARCHAR2 AS\n VAR_DATE           VARCHAR2(100);\n VAR_SELECT         VARCHAR2(30000);\n VAR_FINAL_SELECT   VARCHAR2(30000);\n PRAGMA AUTONOMOUS_TRANSACTION;\n\nBEGIN\n SELECT\n  TO_CHAR(INPAR_DATE,'yyyy-mm-dd')\n INTO\n  VAR_DATE\n FROM DUAL;\n\n SELECT\n  PKG_LIQUIDITY_RATES.FNC_LIQUIDITY_RATES_RESULT(VAR_DATE,NULL,4)\n INTO\n  VAR_SELECT\n FROM DUAL;\n delete from TBL_NOTIFICATIONS where TYPE = 'liquidity-reports';\ncommit;\n VAR_FINAL_SELECT   := '\n  INSERT\nINTO TBL_NOTIFICATIONS\n  (\n \n    TITLE, --toozih -\u003e for example ;  nesbate X bishtar az hade mojaz ast\n    TYPE, --esme gozaresh (nesbat haE naghdinegi)\n    START_TIME, --tarikh shoroE \n    END_TIME, --tarikh payan\n    STATUS, -- finished\n    DESCRIPTION --description\n  )\n  SELECT case when less_more= 1 then \"name\"||'' کمتر از حد مجاز است'' else  \"name\"||'' بيشتر از حد مجاز است''  end,  ''liquidity-reports'',sysdate,sysdate,''finished'','''' from (\n SELECT a.\"id\",a.\"value\",case when a.\"value\" \u003cb.minval then 1 when a.\"value\" \u003eb.maxval then 2 else 0 end as less_more,C.\"name\" FROM (\n '\n|| VAR_SELECT || ' )a,\n ( select * from TBL_LIQUIDITY_RATES_LIMIT)b,\n (\n '||PKG_LIQUIDITY_RATES.FNC_liquidity_return_var_name||'\n )c\n where \n a.\"id\" = b.rate_id\n and (a.\"value\" \u003e b.maxval\n or \n a.\"value\"\u003cb.minval\n)  and c.\"id\" = a.\"id\");\n \n '\n;\nEXECUTE IMMEDIATE 'begin ' ||VAR_FINAL_SELECT || 'end;';\ncommit;\n RETURN 1;\nEND;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    \n    \n\nend pkg_liquidity_rates;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LIQUIDITY_RATES\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"توسعه صادرات\"\n  Description: \"گزارش نسبت هاي نقدينگي براي بانک توسعه صادرات\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_result  (\n \n inpar_date    IN varchar,\n inpar_BRANCH   IN varchar,\n  inpar_CUR   IN varchar\n \n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_return_var_name RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_limit   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE prc_liquidity_update_limit ( INPAR_rate_id IN NUMBER ,inpar_minval in number,inpar_max_val in number,inpar_mincolor in varchar2, inpar_maxcolor in varchar2\n ,outpar_id out varchar2)  ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_liquidity_rates_notif(inpar_date  IN date)   RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_liquidity_rates;"},{"Name":"PKG_BRANCH_BALANCE_SHEET","ObjectID":303365,"Digest":"1a260c97b0c11095cde5445dfc38232505531322af10974ed1b348b59a30c7a4","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BRANCH_BALANCE_SHEET\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BRANCH_BR_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_BR_PROFILE1 IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, INPAR_BR_PROFILE2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_BRANCH_BALANCE_SHEET;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_BRANCH_BALANCE_SHEET\" AS\n\n  FUNCTION FNC_COMPARE_BRANCH_BR_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_BR_PROFILE1 IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, INPAR_BR_PROFILE2 IN NUMBER \n)RETURN VARCHAR2  AS\nVAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\nVAR_PARTITION2 VARCHAR2(200):= 'P'||TO_CHAR(to_date(INPAR_DATE2,'yyyy-mm-dd'),'J');\n  \n  \n  BEGIN\n     RETURN \n'SELECT /*+  PARALLEL(auto)   */ LEDGER_CODE as \"id\"\n ,NAME as \"text\"\n ,DEPTH as \"level\"\n ,PARENT_CODE as \"parent\"\n  ,nvl(\"1\",0) \"x1\",nvl(\"2\",0) \"x2\"\n  FROM\n(\n select LEDGER_CODE\n ,MAX(NAME) AS NAME\n ,MAX(DEPTH) AS DEPTH\n ,MAX(PARENT_CODE) AS PARENT_CODE\n , SUM(BALANCE) AS BALANCE,\n '||INPAR_BR_PROFILE1||' AS P\n  from tbl_ledger_branch PARTITION ('||VAR_PARTITION1||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||INPAR_DATE||''',''yyyy-mm-dd''),''yyyy-mm-dd'') AND ref_branch IN ('||fnc_private_create_query('TBL_BRANCH',INPAR_BR_PROFILE1)||') GROUP BY ledger_code \nunion\n  select LEDGER_CODE\n ,MAX(NAME) AS NAME\n ,MAX(DEPTH) AS DEPTH\n ,MAX(PARENT_CODE) AS PARENT_CODE\n , SUM(BALANCE) AS BALANCE,\n '||INPAR_BR_PROFILE2||'+200 AS P\n from tbl_ledger_branch PARTITION ('||VAR_PARTITION2||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||inpar_date2||''',''yyyy-mm-dd''),''yyyy-mm-dd'') AND ref_branch IN ('||fnc_private_create_query('TBL_BRANCH',INPAR_BR_PROFILE2)||') GROUP BY ledger_code \n)\nPIVOT\n(\n  max(balance)\n  FOR P IN ('||INPAR_BR_PROFILE1||' as \"1\", '||INPAR_BR_PROFILE2||'+200 as \"2\")\n) order by ledger_code';\n   END FNC_COMPARE_BRANCH_BR_SHEET;\n\nEND PKG_BRANCH_BALANCE_SHEET;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BRANCH_BALANCE_SHEET\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BRANCH_BR_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_BR_PROFILE1 IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, INPAR_BR_PROFILE2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_BRANCH_BALANCE_SHEET;"},{"Name":"PKG_BRANCH_BALANCE_SHEET","ObjectID":303366,"Digest":"1a260c97b0c11095cde5445dfc38232505531322af10974ed1b348b59a30c7a4","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BRANCH_BALANCE_SHEET\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BRANCH_BR_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_BR_PROFILE1 IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, INPAR_BR_PROFILE2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_BRANCH_BALANCE_SHEET;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_BRANCH_BALANCE_SHEET\" AS\n\n  FUNCTION FNC_COMPARE_BRANCH_BR_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_BR_PROFILE1 IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, INPAR_BR_PROFILE2 IN NUMBER \n)RETURN VARCHAR2  AS\nVAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\nVAR_PARTITION2 VARCHAR2(200):= 'P'||TO_CHAR(to_date(INPAR_DATE2,'yyyy-mm-dd'),'J');\n  \n  \n  BEGIN\n     RETURN \n'SELECT /*+  PARALLEL(auto)   */ LEDGER_CODE as \"id\"\n ,NAME as \"text\"\n ,DEPTH as \"level\"\n ,PARENT_CODE as \"parent\"\n  ,nvl(\"1\",0) \"x1\",nvl(\"2\",0) \"x2\"\n  FROM\n(\n select LEDGER_CODE\n ,MAX(NAME) AS NAME\n ,MAX(DEPTH) AS DEPTH\n ,MAX(PARENT_CODE) AS PARENT_CODE\n , SUM(BALANCE) AS BALANCE,\n '||INPAR_BR_PROFILE1||' AS P\n  from tbl_ledger_branch PARTITION ('||VAR_PARTITION1||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||INPAR_DATE||''',''yyyy-mm-dd''),''yyyy-mm-dd'') AND ref_branch IN ('||fnc_private_create_query('TBL_BRANCH',INPAR_BR_PROFILE1)||') GROUP BY ledger_code \nunion\n  select LEDGER_CODE\n ,MAX(NAME) AS NAME\n ,MAX(DEPTH) AS DEPTH\n ,MAX(PARENT_CODE) AS PARENT_CODE\n , SUM(BALANCE) AS BALANCE,\n '||INPAR_BR_PROFILE2||'+200 AS P\n from tbl_ledger_branch PARTITION ('||VAR_PARTITION2||') where to_date(EFF_DATE,''yyyy-mm-dd'') =to_date(to_date('''||inpar_date2||''',''yyyy-mm-dd''),''yyyy-mm-dd'') AND ref_branch IN ('||fnc_private_create_query('TBL_BRANCH',INPAR_BR_PROFILE2)||') GROUP BY ledger_code \n)\nPIVOT\n(\n  max(balance)\n  FOR P IN ('||INPAR_BR_PROFILE1||' as \"1\", '||INPAR_BR_PROFILE2||'+200 as \"2\")\n) order by ledger_code';\n   END FNC_COMPARE_BRANCH_BR_SHEET;\n\nEND PKG_BRANCH_BALANCE_SHEET;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_BRANCH_BALANCE_SHEET\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_COMPARE_BRANCH_BR_SHEET \n(\n  INPAR_DATE IN VARCHAR2 \n, INPAR_BR_PROFILE1 IN NUMBER \n, INPAR_DATE2 IN VARCHAR2 \n, INPAR_BR_PROFILE2 IN NUMBER \n)RETURN VARCHAR2 ;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_BRANCH_BALANCE_SHEET;"},{"Name":"PKG_DU_GAP_PROF","ObjectID":303455,"Digest":"780f76f20fff5d9ce2e88f2f7c2a503f3b02671865f61be593a50252458cf581","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP_PROF\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش شکاف ديرش ورژن جديد\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n  ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,inpar_cus_profile        in varchar2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,inpar_first              in varchar2 -- tarikh ijad gozaresh\n  ,inpar_change_rate              in varchar2\n  ,inpar_tahlil_hasasiat     in varchar2   --ke dar sotoone REF_BRN_PROFILE dar jadvale report rikhte mishavad\n   ,inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone REF_TIMING_PROFILE dar jadvale report rikhte mishavad\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_du_gap_prof_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_du_gap_prof_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_REPORT_value (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req                 IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_get_DU_GAP_PROF (\n INPAR_rep_req                 IN number,\n inpar_du_gap_type in number\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  procedure prc_du_gap_prof_sens(\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n      ,var_first       in date\n      ,var_change_rate in varchar2\n   ) ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_sens (\n INPAR_rep_req                 IN VARCHAR2,\n inpar_du_gap_type in VARCHAR2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_tree RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_du_gap_prof;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DU_GAP_PROF\" AS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n    /*\n    Package Programmers Name:  morteza.sahi - Navid.Sedigh\n    Editor Name: \n    Release Date/Time:\n    Edit Name: \n    Version: 1\n    Category:2\n    Description: \"پياده سازي گزارش شکاف ديرش ورژن جديد\"\n      */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   PROCEDURE PRC_DU_GAP_PROF_PROFILE_REPORT (\n    INPAR_NAME               IN VARCHAR2\n   ,INPAR_DES                IN VARCHAR2\n   ,INPAR_REF_USER           IN VARCHAR2\n   ,INPAR_STATUS             IN VARCHAR2\n   ,INPAR_DEP_PROFILE        IN VARCHAR2\n   ,INPAR_LON_PROFILE        IN VARCHAR2\n   ,INPAR_CUS_PROFILE        IN VARCHAR2\n   ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n   ,INPAR_ID                 IN VARCHAR2\n   ,INPAR_TYPE               IN VARCHAR2\n   ,inpar_first              in varchar2\n   ,inpar_change_rate        in varchar2\n   ,inpar_tahlil_hasasiat     in varchar2   --ke dar sotoone REF_BRN_PROFILE dar jadvale report rikhte mishavad\n   ,inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone REF_TIMING_PROFILE dar jadvale report rikhte mishavad\n   ,OUTPAR_ID                OUT VARCHAR2\n   )\n    AS\n   BEGIN\n  \n    IF\n     ( INPAR_INSERT_OR_UPDATE = 0 )\n    THEN\n     INSERT INTO TBL_REPORT (\n      NAME\n     ,DES\n     ,CREATE_DATE\n     ,REF_USER\n     ,STATUS\n     ,REF_DEP_PROFILE\n     ,REF_LON_PROFILE\n     ,REF_CUS_PROFILE\n     ,FIRST_DATE\n     ,TYPE\n     ,CATEGORY\n     ,bazeh\n     ,REF_TIMING_PROFILE\n     ,REF_BRN_PROFILE\n     ) VALUES (\n      INPAR_NAME\n     ,INPAR_DES\n     ,SYSDATE\n     ,INPAR_REF_USER\n     ,INPAR_STATUS\n     ,INPAR_DEP_PROFILE\n     ,INPAR_LON_PROFILE\n     ,INPAR_CUS_PROFILE\n    -- , to_date(inpar_first,'yyyy/mm/dd')\n   ,inpar_first\n     ,'duration2'\n     ,'duration2',\n     inpar_change_rate\n     ,inpar_tasir_hasasiat\n     ,inpar_tahlil_hasasiat\n     );\n  \n     COMMIT;\n     SELECT\n      ID\n     INTO\n      OUTPAR_ID\n     FROM TBL_REPORT\n     WHERE CREATE_DATE   = (\n        SELECT\n         MAX(CREATE_DATE)\n        FROM TBL_REPORT\n       )\n      AND\n       ID            = (\n        SELECT\n         MAX(ID)\n        FROM TBL_REPORT\n       );\n  \n     UPDATE TBL_REPORT\n      SET\n       H_ID = OUTPAR_ID\n     WHERE ID   = OUTPAR_ID;\n  \n    ELSE\n     UPDATE TBL_REPORT\n      SET\n       NAME = INPAR_NAME\n      ,DES = INPAR_DES\n      ,REF_USER = INPAR_REF_USER\n      ,STATUS = INPAR_STATUS\n      ,TYPE = INPAR_TYPE\n      ,REF_DEP_PROFILE = INPAR_DEP_PROFILE\n      ,REF_LON_PROFILE = INPAR_LON_PROFILE\n      ,REF_CUS_PROFILE = INPAR_CUS_PROFILE\n      ,FIRST_DATE      = inpar_first\n      , bazeh = inpar_change_rate\n    ,REF_BRN_PROFILE  = inpar_tahlil_hasasiat\n    ,REF_TIMING_PROFILE = inpar_tasir_hasasiat\n     WHERE ID   = INPAR_ID;\n  \n     COMMIT;\n     \n     \n     \n        \n   --betoone vase tasir gozareshe jadid besaze\n   update tbl_notifications \n   set flag = 1\n   where ref_report = inpar_id;\n   commit;\n   \n   \n    END IF;\n   END PRC_DU_GAP_PROF_PROFILE_REPORT;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   PROCEDURE PRC_DU_GAP_PROF_DELETE_REPORT (\n    INPAR_ID   IN VARCHAR2\n   ,OUTPAR     OUT VARCHAR2\n   )\n    AS\n   BEGIN\n    DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n  \n    COMMIT;\n   END PRC_DU_GAP_PROF_DELETE_REPORT;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   FUNCTION FNC_DU_GAP_PROF_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n    VAR2   VARCHAR2(3000);\n   BEGIN\n    VAR2   := 'SELECT ID as \"id\",\n    NAME as \"name\",\n    DES as \"des\",\n    FIRST_DATE as \"firstDate\",\n    CREATE_DATE as \"createDate\",\n    REF_USER as \"refUser\",\n    STATUS as \"status\",\n    CATEGORY as \"category\",\n    ref_dep_profile as \"refDeposit\"\n                  ,REF_LON_PROFILE as \"refLoan\"\n                  ,REF_CUS_PROFILE as \"refCustomer\"\n                  ,bazeh as \"changeRate\",\n                  REF_BRN_PROFILE as \"tahlilHasasiat\"\n                  ,REF_TIMING_PROFILE as \"tasir\"\n  FROM TBL_REPORT \n  where id = '\n  || INPAR_ID || ' and upper(category) = ''DURATION2''';\n    RETURN VAR2;\n   END FNC_DU_GAP_PROF_ALL_REPORT;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   PROCEDURE PRC_DU_GAP_PROF_REPORT_VALUE (\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n   ) AS\n  \n    VAR_QUERY      VARCHAR2(20000);\n    VAR_SEPORDE    VARCHAR2(200);\n    VAR_CUSTOMER   VARCHAR2(200);\n    VAR_TASHILAT   VARCHAR2(200);\n    var_first      date;\n    var_change_rate number;\n    \n    BEGIN\n    EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n    \n    select to_date(first_date,'yyyy/mm/dd') into  var_first from tbl_report where id = inpar_report;\n    \n    \n    \n  SELECT\n     ref_cus_profile\n    ,ref_dep_profile\n    ,ref_lon_profile\n    into   VAR_CUSTOMER,VAR_SEPORDE,VAR_TASHILAT\n      FROM tbl_report\n        WHERE ID   = INPAR_REPORT;\n  \n  select max(id) into VAR_CUSTOMER from tbl_profile where h_id = VAR_CUSTOMER ;\n  select max(id) into VAR_SEPORDE from tbl_profile where h_id = VAR_SEPORDE ;\n  \n  select max(id) into VAR_TASHILAT from tbl_profile where h_id = VAR_TASHILAT ;\n  select bazeh into var_change_rate from tbl_report where ID = INPAR_REPORT;\n  \n  \n    VAR_QUERY   := '\n    insert /*+ APPEND PARALLEL(auto)   */ into tbl_value_temp ( REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE)\n   SELECT /*+   PARALLEL(auto)   */\n   REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE\n  FROM TBL_VALUE\n  where ref_id in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_SEPORDE) ||\n    ' )\n  and   REF_CUS_ID in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER) ||\n    ' );';\n  \n    EXECUTE IMMEDIATE ' begin ' || VAR_QUERY || ' end;';\n    COMMIT;\n    VAR_QUERY   := '\n    insert /*+ APPEND PARALLEL(auto)   */ into tbl_value_temp ( REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE)\n   SELECT /*+   PARALLEL(auto)   */\n   REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE\n  FROM TBL_VALUE\n  where ref_id in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',VAR_TASHILAT) ||\n    ' )\n  and   REF_CUS_ID in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER) ||\n    ' );';\n  \n    EXECUTE IMMEDIATE ' begin ' || VAR_QUERY || ' end;';\n    COMMIT;\n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,1\n    ,1\n    ,b.REF_LEGER_CODE\n    FROM (\n     with tmp as(\n  select ref_type type, REF_ID, balance x, trunc(due_date-(var_first-1)) /30 yi,rate/100 z  ,due_date, sum(balance) over (partition by ref_id) value,  REF_LEGER_CODE,count(balance) over (partition by ref_id) cnt\n    from TBL_VALUE_temp \n  where REF_MODALITY_TYPE in (11,1) and trunc(due_date-(var_first-1)) \u003e= 0\n  ),tmp2 as(\n  select  x ,z,type, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh , sum(x) balance, max(z) as rate ,max(type) as type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n  \n  \n     ) B;\n    COMMIT;\n    \n    \n    \n    \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,2\n    ,1\n     ,b.REF_LEGER_CODE\n    FROM (\n      \n  with tmp as(\n  select e.ref_type type, e.REF_ID, e.balance x, trunc(e.due_date-(var_first-1)) /30 yi,e.rate/100 z  ,e.due_date, ee.value as value, e.REF_LEGER_CODE,count(e.balance) over (partition by e.ref_id) cnt\n  from tbl_value_temp e , (select ref_id,sum(balance) over (partition by ref_id) value from  tbl_value where REF_MODALITY_TYPE = 2  and trunc(due_date-(var_first-1)) \u003e= 0 ) ee\n  where e.REF_MODALITY_TYPE in (2,21) and trunc(e.due_date-(var_first-1)) \u003e= 0 and ee.ref_id = e.ref_id\n  ),tmp2 as(\n  select type,x,z, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh, sum(x) balance, max(z) as rate ,max(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n     ) B;\n    COMMIT;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n    ,REF_LEDGER_CODE)\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    1\n    ,2\n     ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT ref_type type,\n      REF_ID,\n      balance x,\n      TRUNC(due_date-(var_first-1)) /30 yi,\n      rate          /100 z,\n       (rate/100) -var_change_rate     z1,\n      (rate/100) +var_change_rate     z2,\n      due_date,\n      SUM(balance) over (partition BY ref_id) value,\n      REF_LEGER_CODE,\n      COUNT(balance) over (partition BY ref_id) cnt\n    FROM TBL_VALUE_temp\n    WHERE REF_MODALITY_TYPE                IN (11,1)\n    AND TRUNC(due_date       -(var_first-1)) \u003e= 0\n    ),\n    tmp2 AS\n    (SELECT x ,\n      z,\n      z1,\n      z2,\n      type,\n      ref_id id,\n      x/power(1+z,yi) arzeshFeli,\n      x/power(1+z2,yi) arzeshFeliMosbat,\n      x/power(1+z1,yi) arzeshFeliManfi,\n      x/power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) diresh,\n    MAX(value          /total) total_ratio,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) * MAX(value/total) weighted_diresh ,\n    SUM(x) balance,\n    MAX(z)    AS rate ,\n    MAX(type) AS type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B;\n    commit;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,REF_LEDGER_CODE )\n  SELECT  INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    2\n    ,2\n     ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT e.ref_type type,\n      e.REF_ID,\n      e.balance x,\n      TRUNC(e.due_date-(var_first-1)) /30 yi,\n      e.rate          /100 z ,\n      (e.rate/100 -var_change_rate)     z1,\n      (e.rate/100 +var_change_rate)     z2,\n      e.due_date,\n      ee.value AS value,\n      e.REF_LEGER_CODE,\n      COUNT(e.balance) over (partition BY e.ref_id) cnt\n    FROM tbl_value_temp e ,\n      (SELECT ref_id,\n        SUM(balance) over (partition BY ref_id) value\n      FROM tbl_value\n      WHERE REF_MODALITY_TYPE            = 2\n      AND TRUNC(due_date-(var_first-1)) \u003e= 0\n      ) ee\n    WHERE e.REF_MODALITY_TYPE                  IN (2,21)\n    AND TRUNC(e.due_date       -(var_first-1)) \u003e= 0\n    AND ee.ref_id                               = e.ref_id\n    ),\n    tmp2 AS\n    (SELECT type,\n      x,\n      z,\n      z1,\n      z2,\n      ref_id id,\n      (x*yi)/power(1+z, yi) arzeshFeli,\n      (x*yi)/power(1+z2, yi) arzeshFeliMosbat,\n      (x*yi)/power(1+z1, yi) arzeshFeliManfi,\n      x /power(1+z, yi) makhraj,\n      value,\n      \n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)) diresh,\n    MAX(value /total) total_ratio,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)  * MAX(value/total)) weighted_diresh,\n    SUM(x) balance,\n    MAX(z) AS rate ,\n    MAX(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B; \n     \n     commit;\n    \n --===========for sens report   \n    prc_du_gap_prof_sens(\n    INPAR_REPORT \n   ,INPAR_REP_REQ   \n   ,var_first       \n   ,var_change_rate \n   ) ;\n  --=============  \n    \n   END PRC_DU_GAP_PROF_REPORT_VALUE;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n    FUNCTION FNC_GET_DU_GAP_PROF ( INPAR_REP_REQ IN NUMBER,\n   inpar_du_gap_type in number ) RETURN VARCHAR2 AS\n    VAR2   VARCHAR2(32000);\n\nvar_pivot varchar2(2000);\n\nvar_select varchar2(2000);\n   BEGIN\n\n\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    ''''||sens_name ||\n    ''' AS \"' ||\n    REPLACE(sens_name,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\ninto var_pivot\n FROM ( select distinct nvl(sens_name,1) as sens_name from TBL_DU_GAP_PROF_DETAIL\n WHERE REF_REPREQ           = INPAR_REP_REQ and  du_gap_type= inpar_du_gap_type)\n ;\n\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    '  \"' ||\n    REPLACE(sens_name,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  var_select\n FROM  ( select distinct nvl(sens_name,1) as sens_name from TBL_DU_GAP_PROF_DETAIL\n WHERE REF_REPREQ           = INPAR_REP_REQ and  du_gap_type= inpar_du_gap_type);\n\n\n\n    VAR2   := '\nselect \"mande\",\"type\",\"id\", '||var_select||' from (\n select  to_number(balance) as \"mande\",  to_number(sa)   as \"value\" ,type as \"type\", id as \"id\" ,nvl(sens_name,1) as \"sensName\"  from\n  (\n  select  \n  sa,nvl(name ,0) as id,1 as type ,balance,sens_type,sens_name from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n    SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type\n   ,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||' and type = 1\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE )\n  -- order by id\n  \n  \n  \n   union all\n \n\n \n  select \n  sa,nvl(name ,0) as id,2,balance,sens_type,sens_name  from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||' and type = 2\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE)  \n   order by sens_type) where id \u003c\u003e 0  )\n\nPIVOT\n(\n  sum(\"value\")\n  FOR \"sensName\"\n  IN ('||var_pivot||')\n)\n\n   '\n  ;\n    RETURN VAR2;\n   END FNC_GET_DU_GAP_PROF;\n  \n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n  \n  procedure prc_du_gap_prof_sens(\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n   ,var_first       in date\n   ,var_change_rate in varchar2\n   ) AS\n \n    \n    BEGIN\n  \n    --========================================================== nerkhSude\n  for i in (\n\nselect * from ( select 1 as \"type\" ,regexp_substr(str, '[^,]+', 1, 1) as name, \n       regexp_substr(str, '[^,]+', 1, 2) as rate\n       from (select regexp_substr (REF_BRN_PROFILE, '[^#]+',1, rownum) str\nfrom tbl_report where ID = INPAR_REPORT\nconnect by level \u003c= regexp_count (REF_BRN_PROFILE, '[^#]+')))  where name is not null ) loop\n \n  \n  \n  \n  \n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,SENS_TYPE\n    ,SENS_NAME\n    ,REF_LEDGER_CODE\n                                                  \n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n    FROM (\n     with tmp as(\n  select ref_type type, REF_ID, balance x, trunc(due_date-(var_first-1)) /30 yi,(rate/100)+i.rate z  ,  REF_LEGER_CODE,due_date, sum(balance) over (partition by ref_id) value, count(balance) over (partition by ref_id) cnt\n  from TBL_VALUE_temp \n  where REF_MODALITY_TYPE in (11,1) and trunc(due_date-(var_first-1)) \u003e= 0\n  ),tmp2 as(\n  select  x ,z,type, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh , sum(x) balance, max(z) as rate ,max(type) as type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n  \n  \n     ) B;\n    COMMIT;\n    \n    \n    \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,SENS_TYPE\n    ,SENS_NAME\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n    FROM (\n      \n  with tmp as(\n  select e.ref_type type, e.REF_ID, e.balance x, trunc(e.due_date-(var_first-1)) /30 yi,(e.rate/100)+i.rate z  , e.REF_LEGER_CODE,e.due_date, ee.value as value, count(e.balance) over (partition by e.ref_id) cnt\n  from tbl_value_temp e , (select ref_id,sum(balance) over (partition by ref_id) value from  tbl_value where REF_MODALITY_TYPE = 2  and trunc(due_date-(var_first-1)) \u003e= 0 ) ee\n  where e.REF_MODALITY_TYPE in (2,21) and trunc(e.due_date-(var_first-1)) \u003e= 0 and ee.ref_id = e.ref_id\n  ),tmp2 as(\n  select type,x,z, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh, sum(x) balance, max(z) as rate ,max(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n     ) B;\n    COMMIT;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n   ,REF_LEDGER_CODE\n    )\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT ref_type type,\n      REF_ID,\n      balance x,\n      TRUNC(due_date-(var_first-1)) /30 yi,\n      (rate          /100) + i.rate z,\n       ((rate/100) + i.rate) -var_change_rate     z1,\n      ((rate/100) + i.rate) +var_change_rate     z2,\n      due_date,\n      SUM(balance) over (partition BY ref_id) value,  REF_LEGER_CODE,\n      COUNT(balance) over (partition BY ref_id) cnt\n    FROM TBL_VALUE_temp\n    WHERE REF_MODALITY_TYPE                IN (11,1)\n    AND TRUNC(due_date       -(var_first-1)) \u003e= 0\n    ),\n    tmp2 AS\n    (SELECT x ,\n      z,\n      z1,\n      z2,\n      type,\n      ref_id id,\n      x/power(1+z,yi) arzeshFeli,\n      x/power(1+z2,yi) arzeshFeliMosbat,\n      x/power(1+z1,yi) arzeshFeliManfi,\n      x/power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) diresh,\n    MAX(value          /total) total_ratio,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) * MAX(value/total) weighted_diresh ,\n    SUM(x) balance,\n    MAX(z)    AS rate ,\n    MAX(type) AS type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B;\n    commit;\n    \n      \n   INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n   ,REF_LEDGER_CODE\n    )\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT e.ref_type type,\n      e.REF_ID,\n      e.balance x,\n      TRUNC(e.due_date-(var_first-1)) /30 yi,\n      (e.rate          /100)+i.rate z ,\n      ((e.rate/100)+i.rate -var_change_rate)     z1,\n      ((e.rate/100)+i.rate +var_change_rate)     z2,\n      e.due_date,\n      ee.value AS value, e.REF_LEGER_CODE,\n      COUNT(e.balance) over (partition BY e.ref_id) cnt\n    FROM tbl_value_temp e ,\n      (SELECT ref_id,\n        SUM(balance) over (partition BY ref_id) value\n      FROM tbl_value\n      WHERE REF_MODALITY_TYPE            = 2\n      AND TRUNC(due_date-(var_first-1)) \u003e= 0\n      ) ee\n    WHERE e.REF_MODALITY_TYPE                  IN (2,21)\n    AND TRUNC(e.due_date       -(var_first-1)) \u003e= 0\n    AND ee.ref_id                               = e.ref_id\n    ),\n    tmp2 AS\n    (SELECT type,\n      x,\n      z,\n      z1,\n      z2,\n      ref_id id,\n      (x*yi)/power(1+z, yi) arzeshFeli,\n      (x*yi)/power(1+z2, yi) arzeshFeliMosbat,\n      (x*yi)/power(1+z1, yi) arzeshFeliManfi,\n      x /power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)) diresh,\n    MAX(value /total) total_ratio,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)  * MAX(value/total)) weighted_diresh,\n    SUM(x) balance,\n    MAX(z) AS rate ,\n    MAX(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B; \n     \n     commit;\n    \n    \n  end loop;\n     --========================================================== nerkhSude\n  \n  \n  \n\n     --========================================================== TasEeeeeiiiir\n    \n  \n  for i in (\n\nselect * from ( select 1 as \"type\" ,regexp_substr(str, '[^,]+', 1, 1) as name, \n       regexp_substr(str, '[^,]+', 1, 2) as rate\n       from (select regexp_substr (REF_TIMING_PROFILE, '[^#]+',1, rownum) str\nfrom tbl_report where ID = INPAR_REPORT\nconnect by level \u003c= regexp_count (REF_TIMING_PROFILE, '[^#]+')))  where name is not null ) loop\n \n  \n  \n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,SENS_TYPE\n    ,SENS_NAME\n     ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n    FROM (\n     with tmp as(\n  select ref_type type, REF_ID, case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end  x,  REF_LEGER_CODE,trunc(due_date-(var_first-1)) /30 yi,rate/100 z  ,due_date, sum(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition by ref_id) value, count(balance) over (partition by ref_id) cnt\n  from TBL_VALUE_temp \n  where REF_MODALITY_TYPE in (11,1) and trunc(due_date-(var_first-1)) \u003e= 0\n  ),tmp2 as(\n  select  x ,z,type, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh , sum(x) balance, max(z) as rate ,max(type) as type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n  \n  \n     ) B;\n    COMMIT;\n    \n    \n    \n    \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE,\n   SENS_TYPE\n   ,SENS_NAME\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n    FROM (\n      \n  with tmp as(\n  select e.ref_type type, e.REF_ID, case when REF_CUr_ID \u003c\u003e 4 then e.BALANCE + (e.BALANCE * i.rate) else e.BALANCE end  x,e.REF_LEGER_CODE, trunc(e.due_date-(var_first-1)) /30 yi,e.rate/100 z  ,e.due_date, ee.value as value, count(e.balance) over (partition by e.ref_id) cnt\n  from tbl_value_temp e , (select ref_id,sum(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition by ref_id) value from  tbl_value where REF_MODALITY_TYPE = 2  and trunc(due_date-(var_first-1)) \u003e= 0 ) ee\n  where e.REF_MODALITY_TYPE in (2,21) and trunc(e.due_date-(var_first-1)) \u003e= 0 and ee.ref_id = e.ref_id\n  ),tmp2 as(\n  select type,x,z, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh, sum(x) balance, max(z) as rate ,max(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n     ) B;\n    COMMIT;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n    ,REF_LEDGER_CODE\n    )\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT ref_type type,\n      REF_ID,\n      case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end  x,\n      TRUNC(due_date-(var_first-1)) /30 yi,\n      rate          /100 z,\n       (rate/100) -var_change_rate     z1,\n      (rate/100) +var_change_rate     z2,\n      due_date,REF_LEGER_CODE,\n      SUM(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition BY ref_id) value,\n      COUNT(balance) over (partition BY ref_id) cnt\n    FROM TBL_VALUE_temp\n    WHERE REF_MODALITY_TYPE                IN (11,1)\n    AND TRUNC(due_date       -(var_first-1)) \u003e= 0\n    ),\n    tmp2 AS\n    (SELECT x ,\n      z,\n      z1,\n      z2,\n      type,\n      ref_id id,\n      x/power(1+z,yi) arzeshFeli,\n      x/power(1+z2,yi) arzeshFeliMosbat,\n      x/power(1+z1,yi) arzeshFeliManfi,\n      x/power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) diresh,\n    MAX(value          /total) total_ratio,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) * MAX(value/total) weighted_diresh ,\n    SUM(x) balance,\n    MAX(z)    AS rate ,\n    MAX(type) AS type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B;\n    commit;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n    ,REF_LEDGER_CODE\n    )\n  SELECT  INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT e.ref_type type,\n      e.REF_ID,\n      case when REF_CUr_ID \u003c\u003e 4 then e.BALANCE + (e.BALANCE * i.rate) else e.BALANCE end  x,\n      TRUNC(e.due_date-(var_first-1)) /30 yi,\n      e.rate          /100 z ,\n      (e.rate/100 -var_change_rate)     z1,\n      (e.rate/100 +var_change_rate)     z2,\n      e.due_date,e.REF_LEGER_CODE,\n      ee.value AS value,\n      COUNT(e.balance) over (partition BY e.ref_id) cnt\n    FROM tbl_value_temp e ,\n      (SELECT ref_id,\n        SUM(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition BY ref_id) value\n      FROM tbl_value\n      WHERE REF_MODALITY_TYPE            = 2\n      AND TRUNC(due_date-(var_first-1)) \u003e= 0\n      ) ee\n    WHERE e.REF_MODALITY_TYPE                  IN (2,21)\n    AND TRUNC(e.due_date       -(var_first-1)) \u003e= 0\n    AND ee.ref_id                               = e.ref_id\n    ),\n    tmp2 AS\n    (SELECT type,\n      x,\n      z,\n      z1,\n      z2,\n      ref_id id,\n      (x*yi)/power(1+z, yi) arzeshFeli,\n      (x*yi)/power(1+z2, yi) arzeshFeliMosbat,\n      (x*yi)/power(1+z1, yi) arzeshFeliManfi,\n      x /power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)) diresh,\n    MAX(value /total) total_ratio,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)  * MAX(value/total)) weighted_diresh,\n    SUM(x) balance,\n    MAX(z) AS rate ,\n    MAX(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B; \n     \n     commit;\n    \n     --==========================================================\n\n  \n  \n  end loop;\n  end;\n  \n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n  \n     FUNCTION fnc_get_DU_GAP_PROF_sens (\n INPAR_rep_req                 IN VARCHAR2,\n inpar_du_gap_type in VARCHAR2\n  \n )RETURN VARCHAR2\n as\n begin\n \n return '\n select  to_number(balance) as \"mande\",  to_number(sa)   as \"value\" ,id as \"id\" ,type as \"type\",sens_type as \"sensType\",sens_name as \"sensName\"  from\n  (\n  select  \n  sa,nvl(name ,0) as id,1 as type ,balance,sens_type,sens_name from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n    SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type\n   ,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||'\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE )\n  -- order by id\n  \n  \n  \n   union all\n \n\n \n  select \n  sa,nvl(name ,0) as id,2,balance,sens_type,sens_name  from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||'\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE)  \n   order by sens_type) where id \u003c\u003e 0 and sens_type is not null' ;\n   \n   \n \n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_get_DU_GAP_PROF_tree RETURN VARCHAR2\nas\nbegin\n\nreturn 'select LEDGER_CODE \"id\",NAME \"name\",nvl(PARENT_CODE,''0'') \"parent\",DEPTH \"level\" from TBL_IDPS_TREE \nORDER BY LEDGER_CODE';\nend;\n\n  END PKG_DU_GAP_PROF;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP_PROF\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش شکاف ديرش ورژن جديد\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n  ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,inpar_cus_profile        in varchar2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,inpar_first              in varchar2 -- tarikh ijad gozaresh\n  ,inpar_change_rate              in varchar2\n  ,inpar_tahlil_hasasiat     in varchar2   --ke dar sotoone REF_BRN_PROFILE dar jadvale report rikhte mishavad\n   ,inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone REF_TIMING_PROFILE dar jadvale report rikhte mishavad\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_du_gap_prof_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_du_gap_prof_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_REPORT_value (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req                 IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_get_DU_GAP_PROF (\n INPAR_rep_req                 IN number,\n inpar_du_gap_type in number\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  procedure prc_du_gap_prof_sens(\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n      ,var_first       in date\n      ,var_change_rate in varchar2\n   ) ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_sens (\n INPAR_rep_req                 IN VARCHAR2,\n inpar_du_gap_type in VARCHAR2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_tree RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_du_gap_prof;"},{"Name":"PKG_DU_GAP_PROF","ObjectID":303882,"Digest":"780f76f20fff5d9ce2e88f2f7c2a503f3b02671865f61be593a50252458cf581","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP_PROF\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش شکاف ديرش ورژن جديد\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n  ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,inpar_cus_profile        in varchar2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,inpar_first              in varchar2 -- tarikh ijad gozaresh\n  ,inpar_change_rate              in varchar2\n  ,inpar_tahlil_hasasiat     in varchar2   --ke dar sotoone REF_BRN_PROFILE dar jadvale report rikhte mishavad\n   ,inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone REF_TIMING_PROFILE dar jadvale report rikhte mishavad\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_du_gap_prof_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_du_gap_prof_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_REPORT_value (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req                 IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_get_DU_GAP_PROF (\n INPAR_rep_req                 IN number,\n inpar_du_gap_type in number\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  procedure prc_du_gap_prof_sens(\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n      ,var_first       in date\n      ,var_change_rate in varchar2\n   ) ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_sens (\n INPAR_rep_req                 IN VARCHAR2,\n inpar_du_gap_type in VARCHAR2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_tree RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_du_gap_prof;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_DU_GAP_PROF\" AS\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n    /*\n    Package Programmers Name:  morteza.sahi - Navid.Sedigh\n    Editor Name: \n    Release Date/Time:\n    Edit Name: \n    Version: 1\n    Category:2\n    Description: \"پياده سازي گزارش شکاف ديرش ورژن جديد\"\n      */\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   PROCEDURE PRC_DU_GAP_PROF_PROFILE_REPORT (\n    INPAR_NAME               IN VARCHAR2\n   ,INPAR_DES                IN VARCHAR2\n   ,INPAR_REF_USER           IN VARCHAR2\n   ,INPAR_STATUS             IN VARCHAR2\n   ,INPAR_DEP_PROFILE        IN VARCHAR2\n   ,INPAR_LON_PROFILE        IN VARCHAR2\n   ,INPAR_CUS_PROFILE        IN VARCHAR2\n   ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n   ,INPAR_ID                 IN VARCHAR2\n   ,INPAR_TYPE               IN VARCHAR2\n   ,inpar_first              in varchar2\n   ,inpar_change_rate        in varchar2\n   ,inpar_tahlil_hasasiat     in varchar2   --ke dar sotoone REF_BRN_PROFILE dar jadvale report rikhte mishavad\n   ,inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone REF_TIMING_PROFILE dar jadvale report rikhte mishavad\n   ,OUTPAR_ID                OUT VARCHAR2\n   )\n    AS\n   BEGIN\n  \n    IF\n     ( INPAR_INSERT_OR_UPDATE = 0 )\n    THEN\n     INSERT INTO TBL_REPORT (\n      NAME\n     ,DES\n     ,CREATE_DATE\n     ,REF_USER\n     ,STATUS\n     ,REF_DEP_PROFILE\n     ,REF_LON_PROFILE\n     ,REF_CUS_PROFILE\n     ,FIRST_DATE\n     ,TYPE\n     ,CATEGORY\n     ,bazeh\n     ,REF_TIMING_PROFILE\n     ,REF_BRN_PROFILE\n     ) VALUES (\n      INPAR_NAME\n     ,INPAR_DES\n     ,SYSDATE\n     ,INPAR_REF_USER\n     ,INPAR_STATUS\n     ,INPAR_DEP_PROFILE\n     ,INPAR_LON_PROFILE\n     ,INPAR_CUS_PROFILE\n    -- , to_date(inpar_first,'yyyy/mm/dd')\n   ,inpar_first\n     ,'duration2'\n     ,'duration2',\n     inpar_change_rate\n     ,inpar_tasir_hasasiat\n     ,inpar_tahlil_hasasiat\n     );\n  \n     COMMIT;\n     SELECT\n      ID\n     INTO\n      OUTPAR_ID\n     FROM TBL_REPORT\n     WHERE CREATE_DATE   = (\n        SELECT\n         MAX(CREATE_DATE)\n        FROM TBL_REPORT\n       )\n      AND\n       ID            = (\n        SELECT\n         MAX(ID)\n        FROM TBL_REPORT\n       );\n  \n     UPDATE TBL_REPORT\n      SET\n       H_ID = OUTPAR_ID\n     WHERE ID   = OUTPAR_ID;\n  \n    ELSE\n     UPDATE TBL_REPORT\n      SET\n       NAME = INPAR_NAME\n      ,DES = INPAR_DES\n      ,REF_USER = INPAR_REF_USER\n      ,STATUS = INPAR_STATUS\n      ,TYPE = INPAR_TYPE\n      ,REF_DEP_PROFILE = INPAR_DEP_PROFILE\n      ,REF_LON_PROFILE = INPAR_LON_PROFILE\n      ,REF_CUS_PROFILE = INPAR_CUS_PROFILE\n      ,FIRST_DATE      = inpar_first\n      , bazeh = inpar_change_rate\n    ,REF_BRN_PROFILE  = inpar_tahlil_hasasiat\n    ,REF_TIMING_PROFILE = inpar_tasir_hasasiat\n     WHERE ID   = INPAR_ID;\n  \n     COMMIT;\n     \n     \n     \n        \n   --betoone vase tasir gozareshe jadid besaze\n   update tbl_notifications \n   set flag = 1\n   where ref_report = inpar_id;\n   commit;\n   \n   \n    END IF;\n   END PRC_DU_GAP_PROF_PROFILE_REPORT;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   PROCEDURE PRC_DU_GAP_PROF_DELETE_REPORT (\n    INPAR_ID   IN VARCHAR2\n   ,OUTPAR     OUT VARCHAR2\n   )\n    AS\n   BEGIN\n    DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n  \n    COMMIT;\n   END PRC_DU_GAP_PROF_DELETE_REPORT;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   FUNCTION FNC_DU_GAP_PROF_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n    VAR2   VARCHAR2(3000);\n   BEGIN\n    VAR2   := 'SELECT ID as \"id\",\n    NAME as \"name\",\n    DES as \"des\",\n    FIRST_DATE as \"firstDate\",\n    CREATE_DATE as \"createDate\",\n    REF_USER as \"refUser\",\n    STATUS as \"status\",\n    CATEGORY as \"category\",\n    ref_dep_profile as \"refDeposit\"\n                  ,REF_LON_PROFILE as \"refLoan\"\n                  ,REF_CUS_PROFILE as \"refCustomer\"\n                  ,bazeh as \"changeRate\",\n                  REF_BRN_PROFILE as \"tahlilHasasiat\"\n                  ,REF_TIMING_PROFILE as \"tasir\"\n  FROM TBL_REPORT \n  where id = '\n  || INPAR_ID || ' and upper(category) = ''DURATION2''';\n    RETURN VAR2;\n   END FNC_DU_GAP_PROF_ALL_REPORT;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n   PROCEDURE PRC_DU_GAP_PROF_REPORT_VALUE (\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n   ) AS\n  \n    VAR_QUERY      VARCHAR2(20000);\n    VAR_SEPORDE    VARCHAR2(200);\n    VAR_CUSTOMER   VARCHAR2(200);\n    VAR_TASHILAT   VARCHAR2(200);\n    var_first      date;\n    var_change_rate number;\n    \n    BEGIN\n    EXECUTE IMMEDIATE 'truncate table TBL_VALUE_TEMP';\n    \n    select to_date(first_date,'yyyy/mm/dd') into  var_first from tbl_report where id = inpar_report;\n    \n    \n    \n  SELECT\n     ref_cus_profile\n    ,ref_dep_profile\n    ,ref_lon_profile\n    into   VAR_CUSTOMER,VAR_SEPORDE,VAR_TASHILAT\n      FROM tbl_report\n        WHERE ID   = INPAR_REPORT;\n  \n  select max(id) into VAR_CUSTOMER from tbl_profile where h_id = VAR_CUSTOMER ;\n  select max(id) into VAR_SEPORDE from tbl_profile where h_id = VAR_SEPORDE ;\n  \n  select max(id) into VAR_TASHILAT from tbl_profile where h_id = VAR_TASHILAT ;\n  select bazeh into var_change_rate from tbl_report where ID = INPAR_REPORT;\n  \n  \n    VAR_QUERY   := '\n    insert /*+ APPEND PARALLEL(auto)   */ into tbl_value_temp ( REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE)\n   SELECT /*+   PARALLEL(auto)   */\n   REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE\n  FROM TBL_VALUE\n  where ref_id in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_DEPOSIT',VAR_SEPORDE) ||\n    ' )\n  and   REF_CUS_ID in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER) ||\n    ' );';\n  \n    EXECUTE IMMEDIATE ' begin ' || VAR_QUERY || ' end;';\n    COMMIT;\n    VAR_QUERY   := '\n    insert /*+ APPEND PARALLEL(auto)   */ into tbl_value_temp ( REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE)\n   SELECT /*+   PARALLEL(auto)   */\n   REF_MODALITY_TYPE\n   ,REF_ID\n   ,BALANCE\n   ,REF_BRANCH\n   ,DUE_DATE\n   ,REF_TYPE\n   ,REF_LEGER_CODE\n   ,REF_CUR_ID\n   ,REF_STA_ID\n   ,REF_CTY_ID\n   ,REF_CUS_ID\n   ,RATE\n  FROM TBL_VALUE\n  where ref_id in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_LOAN',VAR_TASHILAT) ||\n    ' )\n  and   REF_CUS_ID in (' ||\n    FNC_PRIVATE_CREATE_QUERY('TBL_CUSTOMER',VAR_CUSTOMER) ||\n    ' );';\n  \n    EXECUTE IMMEDIATE ' begin ' || VAR_QUERY || ' end;';\n    COMMIT;\n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,1\n    ,1\n    ,b.REF_LEGER_CODE\n    FROM (\n     with tmp as(\n  select ref_type type, REF_ID, balance x, trunc(due_date-(var_first-1)) /30 yi,rate/100 z  ,due_date, sum(balance) over (partition by ref_id) value,  REF_LEGER_CODE,count(balance) over (partition by ref_id) cnt\n    from TBL_VALUE_temp \n  where REF_MODALITY_TYPE in (11,1) and trunc(due_date-(var_first-1)) \u003e= 0\n  ),tmp2 as(\n  select  x ,z,type, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh , sum(x) balance, max(z) as rate ,max(type) as type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n  \n  \n     ) B;\n    COMMIT;\n    \n    \n    \n    \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,2\n    ,1\n     ,b.REF_LEGER_CODE\n    FROM (\n      \n  with tmp as(\n  select e.ref_type type, e.REF_ID, e.balance x, trunc(e.due_date-(var_first-1)) /30 yi,e.rate/100 z  ,e.due_date, ee.value as value, e.REF_LEGER_CODE,count(e.balance) over (partition by e.ref_id) cnt\n  from tbl_value_temp e , (select ref_id,sum(balance) over (partition by ref_id) value from  tbl_value where REF_MODALITY_TYPE = 2  and trunc(due_date-(var_first-1)) \u003e= 0 ) ee\n  where e.REF_MODALITY_TYPE in (2,21) and trunc(e.due_date-(var_first-1)) \u003e= 0 and ee.ref_id = e.ref_id\n  ),tmp2 as(\n  select type,x,z, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh, sum(x) balance, max(z) as rate ,max(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n     ) B;\n    COMMIT;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n    ,REF_LEDGER_CODE)\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    1\n    ,2\n     ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT ref_type type,\n      REF_ID,\n      balance x,\n      TRUNC(due_date-(var_first-1)) /30 yi,\n      rate          /100 z,\n       (rate/100) -var_change_rate     z1,\n      (rate/100) +var_change_rate     z2,\n      due_date,\n      SUM(balance) over (partition BY ref_id) value,\n      REF_LEGER_CODE,\n      COUNT(balance) over (partition BY ref_id) cnt\n    FROM TBL_VALUE_temp\n    WHERE REF_MODALITY_TYPE                IN (11,1)\n    AND TRUNC(due_date       -(var_first-1)) \u003e= 0\n    ),\n    tmp2 AS\n    (SELECT x ,\n      z,\n      z1,\n      z2,\n      type,\n      ref_id id,\n      x/power(1+z,yi) arzeshFeli,\n      x/power(1+z2,yi) arzeshFeliMosbat,\n      x/power(1+z1,yi) arzeshFeliManfi,\n      x/power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) diresh,\n    MAX(value          /total) total_ratio,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) * MAX(value/total) weighted_diresh ,\n    SUM(x) balance,\n    MAX(z)    AS rate ,\n    MAX(type) AS type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B;\n    commit;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,REF_LEDGER_CODE )\n  SELECT  INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    2\n    ,2\n     ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT e.ref_type type,\n      e.REF_ID,\n      e.balance x,\n      TRUNC(e.due_date-(var_first-1)) /30 yi,\n      e.rate          /100 z ,\n      (e.rate/100 -var_change_rate)     z1,\n      (e.rate/100 +var_change_rate)     z2,\n      e.due_date,\n      ee.value AS value,\n      e.REF_LEGER_CODE,\n      COUNT(e.balance) over (partition BY e.ref_id) cnt\n    FROM tbl_value_temp e ,\n      (SELECT ref_id,\n        SUM(balance) over (partition BY ref_id) value\n      FROM tbl_value\n      WHERE REF_MODALITY_TYPE            = 2\n      AND TRUNC(due_date-(var_first-1)) \u003e= 0\n      ) ee\n    WHERE e.REF_MODALITY_TYPE                  IN (2,21)\n    AND TRUNC(e.due_date       -(var_first-1)) \u003e= 0\n    AND ee.ref_id                               = e.ref_id\n    ),\n    tmp2 AS\n    (SELECT type,\n      x,\n      z,\n      z1,\n      z2,\n      ref_id id,\n      (x*yi)/power(1+z, yi) arzeshFeli,\n      (x*yi)/power(1+z2, yi) arzeshFeliMosbat,\n      (x*yi)/power(1+z1, yi) arzeshFeliManfi,\n      x /power(1+z, yi) makhraj,\n      value,\n      \n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)) diresh,\n    MAX(value /total) total_ratio,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)  * MAX(value/total)) weighted_diresh,\n    SUM(x) balance,\n    MAX(z) AS rate ,\n    MAX(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B; \n     \n     commit;\n    \n --===========for sens report   \n    prc_du_gap_prof_sens(\n    INPAR_REPORT \n   ,INPAR_REP_REQ   \n   ,var_first       \n   ,var_change_rate \n   ) ;\n  --=============  \n    \n   END PRC_DU_GAP_PROF_REPORT_VALUE;\n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n    FUNCTION FNC_GET_DU_GAP_PROF ( INPAR_REP_REQ IN NUMBER,\n   inpar_du_gap_type in number ) RETURN VARCHAR2 AS\n    VAR2   VARCHAR2(32000);\n\nvar_pivot varchar2(2000);\n\nvar_select varchar2(2000);\n   BEGIN\n\n\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    ''''||sens_name ||\n    ''' AS \"' ||\n    REPLACE(sens_name,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\ninto var_pivot\n FROM ( select distinct nvl(sens_name,1) as sens_name from TBL_DU_GAP_PROF_DETAIL\n WHERE REF_REPREQ           = INPAR_REP_REQ and  du_gap_type= inpar_du_gap_type)\n ;\n\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    '  \"' ||\n    REPLACE(sens_name,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  var_select\n FROM  ( select distinct nvl(sens_name,1) as sens_name from TBL_DU_GAP_PROF_DETAIL\n WHERE REF_REPREQ           = INPAR_REP_REQ and  du_gap_type= inpar_du_gap_type);\n\n\n\n    VAR2   := '\nselect \"mande\",\"type\",\"id\", '||var_select||' from (\n select  to_number(balance) as \"mande\",  to_number(sa)   as \"value\" ,type as \"type\", id as \"id\" ,nvl(sens_name,1) as \"sensName\"  from\n  (\n  select  \n  sa,nvl(name ,0) as id,1 as type ,balance,sens_type,sens_name from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n    SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type\n   ,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||' and type = 1\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE )\n  -- order by id\n  \n  \n  \n   union all\n \n\n \n  select \n  sa,nvl(name ,0) as id,2,balance,sens_type,sens_name  from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||' and type = 2\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE)  \n   order by sens_type) where id \u003c\u003e 0  )\n\nPIVOT\n(\n  sum(\"value\")\n  FOR \"sensName\"\n  IN ('||var_pivot||')\n)\n\n   '\n  ;\n    RETURN VAR2;\n   END FNC_GET_DU_GAP_PROF;\n  \n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n  \n  procedure prc_du_gap_prof_sens(\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n   ,var_first       in date\n   ,var_change_rate in varchar2\n   ) AS\n \n    \n    BEGIN\n  \n    --========================================================== nerkhSude\n  for i in (\n\nselect * from ( select 1 as \"type\" ,regexp_substr(str, '[^,]+', 1, 1) as name, \n       regexp_substr(str, '[^,]+', 1, 2) as rate\n       from (select regexp_substr (REF_BRN_PROFILE, '[^#]+',1, rownum) str\nfrom tbl_report where ID = INPAR_REPORT\nconnect by level \u003c= regexp_count (REF_BRN_PROFILE, '[^#]+')))  where name is not null ) loop\n \n  \n  \n  \n  \n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,SENS_TYPE\n    ,SENS_NAME\n    ,REF_LEDGER_CODE\n                                                  \n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n    FROM (\n     with tmp as(\n  select ref_type type, REF_ID, balance x, trunc(due_date-(var_first-1)) /30 yi,(rate/100)+i.rate z  ,  REF_LEGER_CODE,due_date, sum(balance) over (partition by ref_id) value, count(balance) over (partition by ref_id) cnt\n  from TBL_VALUE_temp \n  where REF_MODALITY_TYPE in (11,1) and trunc(due_date-(var_first-1)) \u003e= 0\n  ),tmp2 as(\n  select  x ,z,type, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh , sum(x) balance, max(z) as rate ,max(type) as type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n  \n  \n     ) B;\n    COMMIT;\n    \n    \n    \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,SENS_TYPE\n    ,SENS_NAME\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n    FROM (\n      \n  with tmp as(\n  select e.ref_type type, e.REF_ID, e.balance x, trunc(e.due_date-(var_first-1)) /30 yi,(e.rate/100)+i.rate z  , e.REF_LEGER_CODE,e.due_date, ee.value as value, count(e.balance) over (partition by e.ref_id) cnt\n  from tbl_value_temp e , (select ref_id,sum(balance) over (partition by ref_id) value from  tbl_value where REF_MODALITY_TYPE = 2  and trunc(due_date-(var_first-1)) \u003e= 0 ) ee\n  where e.REF_MODALITY_TYPE in (2,21) and trunc(e.due_date-(var_first-1)) \u003e= 0 and ee.ref_id = e.ref_id\n  ),tmp2 as(\n  select type,x,z, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh, sum(x) balance, max(z) as rate ,max(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n     ) B;\n    COMMIT;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n   ,REF_LEDGER_CODE\n    )\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT ref_type type,\n      REF_ID,\n      balance x,\n      TRUNC(due_date-(var_first-1)) /30 yi,\n      (rate          /100) + i.rate z,\n       ((rate/100) + i.rate) -var_change_rate     z1,\n      ((rate/100) + i.rate) +var_change_rate     z2,\n      due_date,\n      SUM(balance) over (partition BY ref_id) value,  REF_LEGER_CODE,\n      COUNT(balance) over (partition BY ref_id) cnt\n    FROM TBL_VALUE_temp\n    WHERE REF_MODALITY_TYPE                IN (11,1)\n    AND TRUNC(due_date       -(var_first-1)) \u003e= 0\n    ),\n    tmp2 AS\n    (SELECT x ,\n      z,\n      z1,\n      z2,\n      type,\n      ref_id id,\n      x/power(1+z,yi) arzeshFeli,\n      x/power(1+z2,yi) arzeshFeliMosbat,\n      x/power(1+z1,yi) arzeshFeliManfi,\n      x/power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) diresh,\n    MAX(value          /total) total_ratio,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) * MAX(value/total) weighted_diresh ,\n    SUM(x) balance,\n    MAX(z)    AS rate ,\n    MAX(type) AS type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B;\n    commit;\n    \n      \n   INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n   ,REF_LEDGER_CODE\n    )\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,1\n    ,i.name\n    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT e.ref_type type,\n      e.REF_ID,\n      e.balance x,\n      TRUNC(e.due_date-(var_first-1)) /30 yi,\n      (e.rate          /100)+i.rate z ,\n      ((e.rate/100)+i.rate -var_change_rate)     z1,\n      ((e.rate/100)+i.rate +var_change_rate)     z2,\n      e.due_date,\n      ee.value AS value, e.REF_LEGER_CODE,\n      COUNT(e.balance) over (partition BY e.ref_id) cnt\n    FROM tbl_value_temp e ,\n      (SELECT ref_id,\n        SUM(balance) over (partition BY ref_id) value\n      FROM tbl_value\n      WHERE REF_MODALITY_TYPE            = 2\n      AND TRUNC(due_date-(var_first-1)) \u003e= 0\n      ) ee\n    WHERE e.REF_MODALITY_TYPE                  IN (2,21)\n    AND TRUNC(e.due_date       -(var_first-1)) \u003e= 0\n    AND ee.ref_id                               = e.ref_id\n    ),\n    tmp2 AS\n    (SELECT type,\n      x,\n      z,\n      z1,\n      z2,\n      ref_id id,\n      (x*yi)/power(1+z, yi) arzeshFeli,\n      (x*yi)/power(1+z2, yi) arzeshFeliMosbat,\n      (x*yi)/power(1+z1, yi) arzeshFeliManfi,\n      x /power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)) diresh,\n    MAX(value /total) total_ratio,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)  * MAX(value/total)) weighted_diresh,\n    SUM(x) balance,\n    MAX(z) AS rate ,\n    MAX(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B; \n     \n     commit;\n    \n    \n  end loop;\n     --========================================================== nerkhSude\n  \n  \n  \n\n     --========================================================== TasEeeeeiiiir\n    \n  \n  for i in (\n\nselect * from ( select 1 as \"type\" ,regexp_substr(str, '[^,]+', 1, 1) as name, \n       regexp_substr(str, '[^,]+', 1, 2) as rate\n       from (select regexp_substr (REF_TIMING_PROFILE, '[^#]+',1, rownum) str\nfrom tbl_report where ID = INPAR_REPORT\nconnect by level \u003c= regexp_count (REF_TIMING_PROFILE, '[^#]+')))  where name is not null ) loop\n \n  \n  \n  INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n    ,type\n    ,DU_GAP_TYPE\n    ,SENS_TYPE\n    ,SENS_NAME\n     ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n    FROM (\n     with tmp as(\n  select ref_type type, REF_ID, case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end  x,  REF_LEGER_CODE,trunc(due_date-(var_first-1)) /30 yi,rate/100 z  ,due_date, sum(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition by ref_id) value, count(balance) over (partition by ref_id) cnt\n  from TBL_VALUE_temp \n  where REF_MODALITY_TYPE in (11,1) and trunc(due_date-(var_first-1)) \u003e= 0\n  ),tmp2 as(\n  select  x ,z,type, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh , sum(x) balance, max(z) as rate ,max(type) as type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n  \n  \n     ) B;\n    COMMIT;\n    \n    \n    \n    \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE,\n   SENS_TYPE\n   ,SENS_NAME\n    ,REF_LEDGER_CODE\n    ) SELECT\n     INPAR_REPORT\n    ,INPAR_REP_REQ\n    ,B.ID\n    ,B.RATE\n    ,ABS(b.BALANCE)\n    ,b.diresh\n    ,B.WEIGHTed_DIRESH\n    ,b.total_ratio\n    ,b.type\n    ,1\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n    FROM (\n      \n  with tmp as(\n  select e.ref_type type, e.REF_ID, case when REF_CUr_ID \u003c\u003e 4 then e.BALANCE + (e.BALANCE * i.rate) else e.BALANCE end  x,e.REF_LEGER_CODE, trunc(e.due_date-(var_first-1)) /30 yi,e.rate/100 z  ,e.due_date, ee.value as value, count(e.balance) over (partition by e.ref_id) cnt\n  from tbl_value_temp e , (select ref_id,sum(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition by ref_id) value from  tbl_value where REF_MODALITY_TYPE = 2  and trunc(due_date-(var_first-1)) \u003e= 0 ) ee\n  where e.REF_MODALITY_TYPE in (2,21) and trunc(e.due_date-(var_first-1)) \u003e= 0 and ee.ref_id = e.ref_id\n  ),tmp2 as(\n  select type,x,z, ref_id id,(x*yi)/power(1+z, yi) surat, x/power(1+z, yi) makhraj, value, sum(value/cnt) over () total,\n      REF_LEGER_CODE\n  from tmp\n  )\n  --select *\n  --from tmp2;\n  select id, sum(surat)/sum(makhraj) diresh, max(value/total) total_ratio,  sum(surat)/sum(makhraj) * max(value/total) weighted_diresh, sum(x) balance, max(z) as rate ,max(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  from tmp2\n  where makhraj \u003c\u003e 0\n  group by id\n     ) B;\n    COMMIT;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n    ,REF_LEDGER_CODE\n    )\n  SELECT   INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT ref_type type,\n      REF_ID,\n      case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end  x,\n      TRUNC(due_date-(var_first-1)) /30 yi,\n      rate          /100 z,\n       (rate/100) -var_change_rate     z1,\n      (rate/100) +var_change_rate     z2,\n      due_date,REF_LEGER_CODE,\n      SUM(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition BY ref_id) value,\n      COUNT(balance) over (partition BY ref_id) cnt\n    FROM TBL_VALUE_temp\n    WHERE REF_MODALITY_TYPE                IN (11,1)\n    AND TRUNC(due_date       -(var_first-1)) \u003e= 0\n    ),\n    tmp2 AS\n    (SELECT x ,\n      z,\n      z1,\n      z2,\n      type,\n      ref_id id,\n      x/power(1+z,yi) arzeshFeli,\n      x/power(1+z2,yi) arzeshFeliMosbat,\n      x/power(1+z1,yi) arzeshFeliManfi,\n      x/power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) diresh,\n    MAX(value          /total) total_ratio,\n    SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*(var_change_rate)*arzeshFeli) * MAX(value/total) weighted_diresh ,\n    SUM(x) balance,\n    MAX(z)    AS rate ,\n    MAX(type) AS type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B;\n    commit;\n    \n      \n    INSERT /*+ APPEND PARALLEL(auto)   */ INTO TBL_DU_GAP_PROF_DETAIL (\n     REF_REPORT\n    ,REF_REPREQ\n    ,ref_id\n    ,RATE\n    ,BALANCE\n    ,diresh\n    ,weighted_diresh,\n    total_ratio\n   , type\n   ,DU_GAP_TYPE\n   ,SENS_TYPE\n   ,SENS_NAME\n    ,REF_LEDGER_CODE\n    )\n  SELECT  INPAR_REPORT\n    ,INPAR_REP_REQ ,\n    B.ID ,\n    B.RATE ,\n    ABS(b.BALANCE) ,\n    b.diresh ,\n    B.WEIGHTed_DIRESH ,\n    b.total_ratio ,\n    b.type\n    ,2\n    ,2\n    ,i.name    ,b.REF_LEGER_CODE\n  FROM\n    ( WITH tmp AS\n    (SELECT e.ref_type type,\n      e.REF_ID,\n      case when REF_CUr_ID \u003c\u003e 4 then e.BALANCE + (e.BALANCE * i.rate) else e.BALANCE end  x,\n      TRUNC(e.due_date-(var_first-1)) /30 yi,\n      e.rate          /100 z ,\n      (e.rate/100 -var_change_rate)     z1,\n      (e.rate/100 +var_change_rate)     z2,\n      e.due_date,e.REF_LEGER_CODE,\n      ee.value AS value,\n      COUNT(e.balance) over (partition BY e.ref_id) cnt\n    FROM tbl_value_temp e ,\n      (SELECT ref_id,\n        SUM(case when REF_CUr_ID \u003c\u003e 4 then BALANCE + (BALANCE * i.rate) else BALANCE end ) over (partition BY ref_id) value\n      FROM tbl_value\n      WHERE REF_MODALITY_TYPE            = 2\n      AND TRUNC(due_date-(var_first-1)) \u003e= 0\n      ) ee\n    WHERE e.REF_MODALITY_TYPE                  IN (2,21)\n    AND TRUNC(e.due_date       -(var_first-1)) \u003e= 0\n    AND ee.ref_id                               = e.ref_id\n    ),\n    tmp2 AS\n    (SELECT type,\n      x,\n      z,\n      z1,\n      z2,\n      ref_id id,\n      (x*yi)/power(1+z, yi) arzeshFeli,\n      (x*yi)/power(1+z2, yi) arzeshFeliMosbat,\n      (x*yi)/power(1+z1, yi) arzeshFeliManfi,\n      x /power(1+z, yi) makhraj,\n      value,\n      SUM(value/cnt) over () total,\n      REF_LEGER_CODE\n    FROM tmp\n    )\n  --select *\n  --from tmp2;\n  SELECT id,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)) diresh,\n    MAX(value /total) total_ratio,\n    (SUM(arzeshFeliManfi-arzeshFeliMosbat)/SUM(2*var_change_rate*arzeshFeli)  * MAX(value/total)) weighted_diresh,\n    SUM(x) balance,\n    MAX(z) AS rate ,\n    MAX(type) type,\n    max(REF_LEGER_CODE) as REF_LEGER_CODE\n  FROM tmp2\n  WHERE makhraj \u003c\u003e 0\n  GROUP BY id\n    ) B; \n     \n     commit;\n    \n     --==========================================================\n\n  \n  \n  end loop;\n  end;\n  \n  /*---------------------------------------------------------------------------------------------*/\n  /*---------------------------------------------------------------------------------------------*/\n  \n  \n     FUNCTION fnc_get_DU_GAP_PROF_sens (\n INPAR_rep_req                 IN VARCHAR2,\n inpar_du_gap_type in VARCHAR2\n  \n )RETURN VARCHAR2\n as\n begin\n \n return '\n select  to_number(balance) as \"mande\",  to_number(sa)   as \"value\" ,id as \"id\" ,type as \"type\",sens_type as \"sensType\",sens_name as \"sensName\"  from\n  (\n  select  \n  sa,nvl(name ,0) as id,1 as type ,balance,sens_type,sens_name from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n    SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type\n   ,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||'\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE )\n  -- order by id\n  \n  \n  \n   union all\n \n\n \n  select \n  sa,nvl(name ,0) as id,2,balance,sens_type,sens_name  from (\n  SELECT REF_LEDGER_CODE as name\n   ,\n SUM(weighted_diresh) AS SA,\n   SUM(balance) AS balance\n   ,sens_type,sens_name\n  FROM TBL_DU_GAP_PROF_DETAIL\n  WHERE REF_REPREQ   =  ' ||\n    INPAR_REP_REQ ||\n    ' and du_gap_type = '||inpar_du_gap_type||'\n  GROUP BY sens_type,sens_name,REF_LEDGER_CODE)  \n   order by sens_type) where id \u003c\u003e 0 and sens_type is not null' ;\n   \n   \n \n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nFUNCTION fnc_get_DU_GAP_PROF_tree RETURN VARCHAR2\nas\nbegin\n\nreturn 'select LEDGER_CODE \"id\",NAME \"name\",nvl(PARENT_CODE,''0'') \"parent\",DEPTH \"level\" from TBL_IDPS_TREE \nORDER BY LEDGER_CODE';\nend;\n\n  END PKG_DU_GAP_PROF;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_DU_GAP_PROF\" as \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \"پياده سازي گزارش شکاف ديرش ورژن جديد\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_PROFILE_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n  ,INPAR_DEP_PROFILE           IN VARCHAR2\n ,INPAR_LON_PROFILE           IN VARCHAR2\n ,inpar_cus_profile        in varchar2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,inpar_first              in varchar2 -- tarikh ijad gozaresh\n  ,inpar_change_rate              in varchar2\n  ,inpar_tahlil_hasasiat     in varchar2   --ke dar sotoone REF_BRN_PROFILE dar jadvale report rikhte mishavad\n   ,inpar_tasir_hasasiat      in varchar2  -- Nerkh Tasir ke dar sotoone REF_TIMING_PROFILE dar jadvale report rikhte mishavad\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_du_gap_prof_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n FUNCTION FNC_du_gap_prof_ALL_REPORT ( INPAR_ID IN NUMBER ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    PROCEDURE PRC_DU_GAP_PROF_REPORT_value (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req                 IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_get_DU_GAP_PROF (\n INPAR_rep_req                 IN number,\n inpar_du_gap_type in number\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  procedure prc_du_gap_prof_sens(\n    INPAR_REPORT    IN VARCHAR2\n   ,INPAR_REP_REQ   IN VARCHAR2\n      ,var_first       in date\n      ,var_change_rate in varchar2\n   ) ;\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_sens (\n INPAR_rep_req                 IN VARCHAR2,\n inpar_du_gap_type in VARCHAR2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n /*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n      FUNCTION fnc_get_DU_GAP_PROF_tree RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nend pkg_du_gap_prof;"},{"Name":"PKG_SENSIVITY_ANALYSIS_TEST","ObjectID":305128,"Digest":"821306bc0c3a680605f74604d756e5f9252b7ade118ea749c98fd8fc3c66b816","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SENSIVITY_ANALYSIS_TEST\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"بانک تجارت\"\n  Description: \"گزارش آزمون تحليل حساسيت\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_SENS_ANALYSIS_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DELETE_REP (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GI_CALC (\n  INPAR_ID     IN VARCHAR2\n ,INPAR_DATE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GET_INPUT ( INPAR_TYPE IN VARCHAR2 ) /* if 1-\u003e formula if 2-\u003e input*/ RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SEns_ANALYSIS_GET_REP_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_INPUT_EDIT (\n  INPAR_REPORT   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_UPDATE_GI_CALC ( INPAR_REF_REPORT IN VARCHAR2,INPAR_DATE VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REP_VALUE ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_FINAL_RESULT (\n  INPAR_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_SENSIVITY_ANALYSIS_TEST;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_SENSIVITY_ANALYSIS_TEST\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"بانک تجارت\"\n  Description: \"گزارش آزمون تحليل حساسيت\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'sensAnalysis'\n   ,INPAR_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n\n  UPDATE TBL_REPORT\n   SET\n    H_ID = ID\n  WHERE TYPE   = 'sensAnalysis'\n   AND\n    H_ID IS NULL;\n\n  COMMIT;\n END PRC_SENS_ANALYSIS_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DELETE_REP (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_SENS_ANALYSIS_PRO_DET WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_SENS_ANALYSIS_DELETE_REP;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n  var_repreq number;\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_SENS_ANALYSIS_PRO_DET (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_VALUE\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n\n   COMMIT;\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n    /*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_SENS_ANALYSIS_PRO_DET\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,VALUE = INPAR_VALUE\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID\n   and IS_STANDARD \u003c\u003e1;\ncommit;\n\nselect max(ref_repreq) into var_repreq from TBL_NOTIFICATIONS where ref_report = INPAR_REF_REPORT; \ndelete from tbl_notifications\nwhere ref_repreq = var_repreq;\ncommit;\n\n  END IF;\n\n  COMMIT;\n END PRC_SENS_ANALYSIS_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GI_CALC (\n  INPAR_ID     IN VARCHAR2\n ,INPAR_DATE   IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n BEGIN\n  IF\n   ( INPAR_ID IS NOT NULL\n   )\n  THEN\n   SELECT /*+  PARALLEL(auto) */\n    '  \nSELECT  /*+  PARALLEL(auto) */  \nREPLACE(    \nWMSYS.WM_CONCAT(V)   \n,'',''   \n,''''   \n)   \nFROM (    \nSELECT  /*+  PARALLEL(auto) */   \nABS(DG.BALANCE) ||     \nA.SPLIT_SING AS V    \nFROM (      \nWITH T AS (       \nSELECT      \nREPLACE(FORMULA||''+'','','','''') STR       \nFROM TBL_LEDGER_REPORT_MAP       \nWHERE id   = ' ||\n    INPAR_ID ||\n    '   ) SELECT       \nREGEXP_SUBSTR(        \nSTR       \n,''[0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_VALUES      \n,REGEXP_SUBSTR(        \nSTR       \n,''[^0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_SING      \n,LEVEL AS LEV      \nFROM T      \nCONNECT BY       \nLEVEL \u003c= (        \nSELECT         \nLENGTH(REPLACE(STR,''-'',NULL) )        \nFROM T       \n)     \n) A    \n,TBL_LEDGER_archive PARTITION ('||VAR_PARTITION||')  DG    \nWHERE DG.LEDGER_CODE   = A.SPLIT_VALUES     \nAND      \nSPLIT_VALUES IS NOT NULL        \nAND      \ntrunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n    INPAR_DATE ||\n    ''',''yyyy-mm-dd'')))\n '\n   INTO\n    VAR\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE VAR INTO\n    VAR3;\n   SELECT\n    CASE\n     WHEN SUBSTR(\n      TO_CHAR(VAR3)\n     ,-1\n     ) IN (\n      '-','+'\n     ) THEN VAR3 ||\n     '0'\n     ELSE VAR3\n    END\n   INTO\n    VAR\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE 'select ' ||\n   NVL(TO_CHAR(VAR),0) ||\n   ' from dual' INTO\n    VAR2;\n\n   RETURN ABS(TO_NUMBER(VAR2) );\n  ELSE\n   RETURN 0;\n  END IF;\n END FNC_SENS_ANALYSIS_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GET_INPUT ( INPAR_TYPE IN VARCHAR2 ) /* if 1-\u003e formula if 2-\u003e input*/ RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  OUTPUT   := 'select   \nid as \"id\",\nNAME as \"infoGroup\",\nTYPE as \"type\",  \nvalue as \"manualValue\",\ntitle as \"title\"\nFROM TBL_SENS_ANALYSIS_PRO_DET where  is_standard =1 and  type = '\n|| INPAR_TYPE || '';\n  RETURN OUTPUT;\n END FNC_SENS_ANALYSIS_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SEns_ANALYSIS_GET_REP_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2         VARCHAR2(3000);\n  VAR_REPORT   VARCHAR2(3000);\n BEGIN\n--  SELECT\n--   REF_REPORT_ID\n--  INTO\n--   VAR_REPORT\n--  FROM TBL_REPREQ\n--  WHERE ID   = INPAR_ID;\n\n  VAR2   := 'SELECT ID as \"id\",\nNAME as \"name\",\nDES as \"description\",\nCREATE_DATE as \"createDate\",\nREF_USER as \"refUser\",\nSTATUS as \"status\",\nCATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''SENSANALYSIS'' order by id';\n  RETURN VAR2;\n END FNC_SEns_ANALYSIS_GET_REP_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_INPUT_EDIT (\n  INPAR_REPORT   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN VARCHAR2 AS\n\n  OUTPUT     VARCHAR2(32000);\n  VAR        VARCHAR2(32000);\n  VAR_DATE   VARCHAR2(100);\n  var_repreq number;\n  PRAGMA AUTONOMOUS_TRANSACTION;\n BEGIN\n  SELECT /*+ parallel(auto) */\n   TO_CHAR(MAX(EFF_DATE),'YYYY-MM-DD')\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\nselect max(ref_repreq) into var_repreq from TBL_SENS_ANALYSIS_PRO_DET where ref_report = INPAR_REPORT;\n/*===========*/\n\n  PKG_SENSIVITY_ANALYSIS_TEST.PRC_SENS_UPDATE_GI_CALC(INPAR_REPORT,VAR_DATE);\n/*============*/\nif(var_repreq is null) then\n  OUTPUT   := 'select   \nid as \"id\",\nNAME as \"infoGroup\",\nTYPE as \"type\",\n  title as \"title\",\n\nto_char(VALUE) as \"manualValue\",\n\nPROFILE_ID as \"profileId\"\nFROM TBL_SENS_ANALYSIS_PRO_DET where REF_report = ' ||\n  INPAR_REPORT ||\n  ' AND TYPE = ' ||\n  INPAR_TYPE ||\n  ' order by type ';\n   RETURN OUTPUT;\n  else\n   OUTPUT   := 'select   \nid as \"id\",\nNAME as \"infoGroup\",\nTYPE as \"type\",\n  title as \"title\",\n\nto_char(VALUE) as \"manualValue\",\n\nPROFILE_ID as \"profileId\"\nFROM TBL_SENS_ANALYSIS_PRO_DET where REF_repreq = ' ||\n  var_repreq ||\n  ' AND TYPE = ' ||\n  INPAR_TYPE ||\n  ' order by type ';\n  \n  RETURN OUTPUT;\n  end if;\n END FNC_SENS_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_UPDATE_GI_CALC ( INPAR_REF_REPORT IN VARCHAR2,INPAR_DATE VARCHAR2 )\n  AS\n BEGIN\n\n\n  FOR I IN (\n   SELECT\n    *\n   FROM TBL_SENS_ANALYSIS_PRO_DET\n   WHERE REF_REPORT   = INPAR_REF_REPORT\n  ) LOOP\n   IF\n    ( I.PROFILE_ID IS NOT NULL\n    )\n   THEN\n    UPDATE TBL_SENS_ANALYSIS_PRO_DET\n     SET\n      VALUE = PKG_SENSIVITY_ANALYSIS_TEST.FNC_SENS_ANALYSIS_GI_CALC(I.PROFILE_ID,INPAR_DATE)\n    WHERE REF_REPORT   = INPAR_REF_REPORT\n     AND\n      I.ID         = ID;\n\n    COMMIT;\n   END IF;\n  END LOOP;\n  \n  \n  \n  \n  \n END PRC_SENS_UPDATE_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REP_VALUE ( INPAR_REPORT IN VARCHAR2 ) AS\n  VAR_VERSION   NUMBER;\n  VAR_FORMULA   VARCHAR2(30000);\n  VAR_SUM       NUMBER;\n  var_repreq number;\n BEGIN\n/*=============*/\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_VERSION\n  FROM TBL_REPREQ;\n  /*===========*/\n  /*=============*/\n  SELECT\n   max(ref_repreq)\n  INTO\n   var_repreq\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  where ref_report = INPAR_REPORT;\n  /*===========*/\n\n\n\nif(var_repreq is null)\n then\n  INSERT INTO TBL_SENS_ANALYSIS_PRO_DET (\n   REF_REPORT\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,IS_STANDARD\n  ,TYPE\n  ,TITLE\n  ,REF_REPREQ\n  ) \n  \n--  (SELECT\n--       \n--        inpar_report\n--        ,\n--        NAME ,\n--        0 ,\n--        0 ,\n--        0 ,\n--        TYPE ,\n--        TITLE,\n--        var_version\n--      FROM TBL_SENS_ANALYSIS_PRO_DET\n--      WHERE is_standard=1);\n--      commit;\n  \n  ( SELECT \n   (/*SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'*/ INPAR_REPORT )\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,0\n  ,TYPE\n  ,TITLE\n  ,VAR_VERSION\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE IS_STANDARD   = 0 and ref_report = INPAR_REPORT\n  );\n\n  COMMIT;\n  \n  \n  else\n  \n  INSERT INTO TBL_SENS_ANALYSIS_PRO_DET (\n   REF_REPORT\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,IS_STANDARD\n  ,TYPE\n  ,TITLE\n  ,REF_REPREQ\n  ) \n  \n--  (SELECT\n--       \n--        inpar_report\n--        ,\n--        NAME ,\n--        0 ,\n--        0 ,\n--        0 ,\n--        TYPE ,\n--        TITLE,\n--        var_version\n--      FROM TBL_SENS_ANALYSIS_PRO_DET\n--      WHERE is_standard=1);\n--      commit;\n  \n  ( SELECT \n   (/*SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'*/ INPAR_REPORT )\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,0\n  ,TYPE\n  ,TITLE\n  ,VAR_VERSION\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE IS_STANDARD   = 0 and ref_repreq = var_repreq\n  );\n\n  COMMIT;\n  \n  \n  \n  \n  \n  end if;\n  \n  delete from tbl_sens_analysis_pro_det\n  where ref_report = inpar_report and ref_repreq is null;\n  commit; \n  \n  /*==============*/\n END PRC_SENS_ANALYSIS_REP_VALUE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_FINAL_RESULT (\n  INPAR_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2\n  AS\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n\n   RETURN 'SELECT\n case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else  round((\"kht\"/(0.88*(\"ssby\")+ 0.6*(0.88*(\"ssky\"+\"g5\"))+\"tdstm\" + \"spb\"))*100 ,3) end as \"100\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.95*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\" ))*100,3) end as \"5\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.90*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100 ,3) end as \"10\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.85*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100 ,3) end as \"15\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.80*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100,3) end as \"20\",\n case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.70*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100,3) end as \"30\"\nFROM (\n  SELECT\n   TITLE\n  ,TBL_SENS_ANALYSIS_PRO_DET.VALUE\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE TBL_SENS_ANALYSIS_PRO_DET.REF_REPREQ   ='\n|| INPAR_REPREQ || '\n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( ''kht'' AS \"kht\",''ssby'' AS \"ssby\",''ssky'' AS \"ssky\",''tdstm'' AS \"tdstm\",''s'' AS \"s\",''mnbm'' AS \"mnbm\",''mnsb'' AS \"mnsb\",''bb'' AS \"bb\",''aty''\nAS \"aty\",''assm'' AS \"assm\",''assk'' AS \"assk\",''g5'' AS \"g5\",''bbb'' AS \"bbb\",''snb'' AS \"snb\",''zb'' AS \"zb\",''za'' AS \"za\",''spb'' AS \"spb\" )\n  )'\n;\n  ELSIF ( INPAR_TYPE = 2 ) THEN\n   RETURN 'SELECT\n  case when (\"ks\" =  0 ) then 0 else round((\"kht\"/(0.88*(\"ks\")))*100,3)  end as \"100\",\n case when (\"ks\" =  0 ) then 0 else round((\"kht\"/0.95*(0.88*(\"ks\")))*100,3) end as   \"5\",\n  case when (\"ks\" =  0 ) then 0 else  round((\"kht\"/0.90*(0.88*(\"ks\")))*100,3) end as \"10\",\n  case when (\"ks\" =  0 ) then 0 else  round((\"kht\"/0.85*(0.88*(\"ks\")))*100,3) end as \"15\",\n  case when (\"ks\" =  0 ) then 0 else round((\"kht\"/0.80*(0.88*(\"ks\")))*100,3) end as \"20\",\n  case when (\"ks\" =  0 ) then 0 else round((\"kht\"/0.70*(0.88*(\"ks\")))*100,3)  end as \"30\"\nFROM (\n  SELECT\n   TITLE\n  ,TBL_SENS_ANALYSIS_PRO_DET.VALUE\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE TBL_SENS_ANALYSIS_PRO_DET.REF_REPREQ   ='\n|| INPAR_REPREQ || '\n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( ''kht'' AS \"kht\",''ks'' AS \"ks\",''tdstm'' AS \"tdstm\",''s'' AS \"s\",''mnbm'' AS \"mnbm\",''mnsb'' AS \"mnsb\",''bb'' AS \"bb\",''aty''\nAS \"aty\",''assm'' AS \"assm\",''assk'' AS \"assk\",''g5'' AS \"g5\",''bbb'' AS \"bbb\",''snb'' AS \"snb\",''zb'' AS \"zb\",''za'' AS \"za\",''spb'' AS \"spb\" )\n  )'\n;\n  ELSIF ( INPAR_TYPE = 3 ) THEN\n   RETURN 'SELECT\n case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") / (\"bbb\" + \"bb\") ) * 100\n ,3\n )  end AS \"100\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else   ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.1 * \"bbb\") ) / (\"bb\" + 0.9 * \"bbb\") ) * 100\n ,3\n ) end AS \"f10\"\n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else   ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.15 * \"bbb\") ) / (\"bb\" + 0.85 * \"bbb\") ) * 100\n ,3\n ) end AS \"f15\"\n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.2 * \"bbb\") ) / (\"bb\" + 0.8 * \"bbb\") ) * 100\n ,3\n ) end AS \"f20\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.25 * \"bbb\") ) / (\"bb\" + 0.75 * \"bbb\") ) * 100\n ,3\n ) end  AS \"f25\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.5 * \"bbb\") ) / (\"bb\" + 0.5 * \"bbb\") ) * 100\n ,3\n ) end AS \"f50\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.75 * \"bbb\") ) / (\"bb\" + 0.25 * \"bbb\") ) * 100\n ,3\n ) end  AS \"f75\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (1 * \"bbb\") ) / (\"bb\" + 0 * \"bbb\") ) * 100\n ,3\n ) end  AS \"f100\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.88 * 0.1 * \"bb\") ) / (\"bbb\" + 0.9 * \"bb\") ) * 100\n ,3\n ) end AS \"s10\"\n \n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.88 * 0.15* \"bb\") ) / (\"bbb\" + 0.85 * \"bb\") ) * 100\n ,3\n ) end AS \"s15\"\n \n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.88 * 0.2 * \"bb\") ) / (\"bbb\" + 0.8 * \"bb\") ) * 100\n ,3\n ) end AS \"s20\"\nFROM (\n  SELECT\n   TITLE\n  ,TBL_SENS_ANALYSIS_PRO_DET.VALUE\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE TBL_SENS_ANALYSIS_PRO_DET.REF_REPREQ   ='\n|| INPAR_REPREQ || '\n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( ''kht'' AS \"kht\",''ssby'' AS \"ssby\",''ssky'' AS \"ssky\",''tdstm'' AS \"tdstm\",''s'' AS \"s\",''mnbm'' AS \"mnbm\",''mnsb'' AS \"mnsb\",''bb'' AS \"bb\",''aty''\nAS \"aty\",''assm'' AS \"assm\",''assk'' AS \"assk\",''g5'' AS \"g5\",''bbb'' AS \"bbb\",''snb'' AS \"snb\",''zb'' AS \"zb\",''za'' AS \"za\",''spb'' AS \"spb\" )\n  )'\n;\n  END IF;\n\n  RETURN NULL;\n END FNC_SENS_GET_FINAL_RESULT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_SENSIVITY_ANALYSIS_TEST;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SENSIVITY_ANALYSIS_TEST\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"بانک تجارت\"\n  Description: \"گزارش آزمون تحليل حساسيت\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_SENS_ANALYSIS_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DELETE_REP (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GI_CALC (\n  INPAR_ID     IN VARCHAR2\n ,INPAR_DATE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GET_INPUT ( INPAR_TYPE IN VARCHAR2 ) /* if 1-\u003e formula if 2-\u003e input*/ RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SEns_ANALYSIS_GET_REP_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_INPUT_EDIT (\n  INPAR_REPORT   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_UPDATE_GI_CALC ( INPAR_REF_REPORT IN VARCHAR2,INPAR_DATE VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REP_VALUE ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_FINAL_RESULT (\n  INPAR_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_SENSIVITY_ANALYSIS_TEST;"},{"Name":"PKG_SENSIVITY_ANALYSIS_TEST","ObjectID":305133,"Digest":"821306bc0c3a680605f74604d756e5f9252b7ade118ea749c98fd8fc3c66b816","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SENSIVITY_ANALYSIS_TEST\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"بانک تجارت\"\n  Description: \"گزارش آزمون تحليل حساسيت\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_SENS_ANALYSIS_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DELETE_REP (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GI_CALC (\n  INPAR_ID     IN VARCHAR2\n ,INPAR_DATE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GET_INPUT ( INPAR_TYPE IN VARCHAR2 ) /* if 1-\u003e formula if 2-\u003e input*/ RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SEns_ANALYSIS_GET_REP_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_INPUT_EDIT (\n  INPAR_REPORT   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_UPDATE_GI_CALC ( INPAR_REF_REPORT IN VARCHAR2,INPAR_DATE VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REP_VALUE ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_FINAL_RESULT (\n  INPAR_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_SENSIVITY_ANALYSIS_TEST;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_SENSIVITY_ANALYSIS_TEST\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"بانک تجارت\"\n  Description: \"گزارش آزمون تحليل حساسيت\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_REPORT (\n    NAME\n   ,DES\n   ,CREATE_DATE\n   ,REF_USER\n   ,STATUS\n   ,CATEGORY\n   ,TYPE\n   ) VALUES (\n    INPAR_NAME\n   ,INPAR_DES\n   ,SYSDATE\n   ,INPAR_REF_USER\n   ,INPAR_STATUS\n   ,'sensAnalysis'\n   ,INPAR_TYPE\n   );\n\n   COMMIT;\n   SELECT\n    ID\n   INTO\n    OUTPAR_ID\n   FROM TBL_REPORT\n   WHERE CREATE_DATE   = (\n      SELECT\n       MAX(CREATE_DATE)\n      FROM TBL_REPORT\n     )\n    AND\n     ID            = (\n      SELECT\n       MAX(ID)\n      FROM TBL_REPORT\n     );\n\n  ELSE\n   UPDATE TBL_REPORT\n    SET\n     NAME = INPAR_NAME\n    ,DES = INPAR_DES\n    ,REF_USER = INPAR_REF_USER\n    ,STATUS = INPAR_STATUS\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID;\n\n   COMMIT;\n  END IF;\n\n  UPDATE TBL_REPORT\n   SET\n    H_ID = ID\n  WHERE TYPE   = 'sensAnalysis'\n   AND\n    H_ID IS NULL;\n\n  COMMIT;\n END PRC_SENS_ANALYSIS_REPORT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DELETE_REP (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n )\n  AS\n BEGIN\n  DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n\n  COMMIT;\n  DELETE FROM TBL_SENS_ANALYSIS_PRO_DET WHERE REF_REPORT   = INPAR_ID;\n\n  COMMIT;\n END PRC_SENS_ANALYSIS_DELETE_REP;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n )\n  AS\n  var_repreq number;\n BEGIN\n  IF\n   ( INPAR_INSERT_OR_UPDATE = 0 )\n  THEN\n   INSERT INTO TBL_SENS_ANALYSIS_PRO_DET (\n    REF_REPORT\n   ,NAME\n   ,PROFILE_ID\n   ,VALUE\n   ,IS_STANDARD\n   ,TYPE\n   ,TITLE\n   ) VALUES (\n    INPAR_REF_REPORT\n   ,INPAR_NAME\n   ,INPAR_PROFILE_ID\n   ,INPAR_VALUE\n   ,0\n   ,INPAR_TYPE\n   ,INPAR_TITLE\n   );\n\n   COMMIT;\n    /*   SELECT*/\n    /*    ID*/\n    /*   INTO*/\n    /*    OUTPAR_ID*/\n    /*   FROM TBL_COM_REP_PROFILE_DETAIL*/\n    /*   WHERE REF_REPORT   = INPAR_REF_REPORT;*/\n   OUTPAR_ID   := INPAR_REF_REPORT;\n  ELSE\n   UPDATE TBL_SENS_ANALYSIS_PRO_DET\n    SET\n     REF_REPORT = INPAR_REF_REPORT\n    ,NAME = INPAR_NAME\n    ,PROFILE_ID = INPAR_PROFILE_ID\n    ,VALUE = INPAR_VALUE\n    ,IS_STANDARD = 0\n    ,TYPE = INPAR_TYPE\n   WHERE ID   = INPAR_ID\n   and IS_STANDARD \u003c\u003e1;\ncommit;\n\nselect max(ref_repreq) into var_repreq from TBL_NOTIFICATIONS where ref_report = INPAR_REF_REPORT; \ndelete from tbl_notifications\nwhere ref_repreq = var_repreq;\ncommit;\n\n  END IF;\n\n  COMMIT;\n END PRC_SENS_ANALYSIS_DETAIL;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GI_CALC (\n  INPAR_ID     IN VARCHAR2\n ,INPAR_DATE   IN VARCHAR2\n ) RETURN VARCHAR2 AS\n  VAR    CLOB;\n  VAR2   CLOB;\n  VAR3   CLOB;\n  VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\n BEGIN\n  IF\n   ( INPAR_ID IS NOT NULL\n   )\n  THEN\n   SELECT /*+  PARALLEL(auto) */\n    '  \nSELECT  /*+  PARALLEL(auto) */  \nREPLACE(    \nWMSYS.WM_CONCAT(V)   \n,'',''   \n,''''   \n)   \nFROM (    \nSELECT  /*+  PARALLEL(auto) */   \nABS(DG.BALANCE) ||     \nA.SPLIT_SING AS V    \nFROM (      \nWITH T AS (       \nSELECT      \nREPLACE(FORMULA||''+'','','','''') STR       \nFROM TBL_LEDGER_REPORT_MAP       \nWHERE id   = ' ||\n    INPAR_ID ||\n    '   ) SELECT       \nREGEXP_SUBSTR(        \nSTR       \n,''[0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_VALUES      \n,REGEXP_SUBSTR(        \nSTR       \n,''[^0-9]+''       \n,1       \n,LEVEL       \n) SPLIT_SING      \n,LEVEL AS LEV      \nFROM T      \nCONNECT BY       \nLEVEL \u003c= (        \nSELECT         \nLENGTH(REPLACE(STR,''-'',NULL) )        \nFROM T       \n)     \n) A    \n,TBL_LEDGER_archive PARTITION ('||VAR_PARTITION||')  DG    \nWHERE DG.LEDGER_CODE   = A.SPLIT_VALUES     \nAND      \nSPLIT_VALUES IS NOT NULL        \nAND      \ntrunc(DG.EFF_DATE)                                          = trunc(TO_DATE(''' ||\n    INPAR_DATE ||\n    ''',''yyyy-mm-dd'')))\n '\n   INTO\n    VAR\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE VAR INTO\n    VAR3;\n   SELECT\n    CASE\n     WHEN SUBSTR(\n      TO_CHAR(VAR3)\n     ,-1\n     ) IN (\n      '-','+'\n     ) THEN VAR3 ||\n     '0'\n     ELSE VAR3\n    END\n   INTO\n    VAR\n   FROM DUAL;\n\n   EXECUTE IMMEDIATE 'select ' ||\n   NVL(TO_CHAR(VAR),0) ||\n   ' from dual' INTO\n    VAR2;\n\n   RETURN ABS(TO_NUMBER(VAR2) );\n  ELSE\n   RETURN 0;\n  END IF;\n END FNC_SENS_ANALYSIS_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GET_INPUT ( INPAR_TYPE IN VARCHAR2 ) /* if 1-\u003e formula if 2-\u003e input*/ RETURN VARCHAR2 AS\n  OUTPUT   VARCHAR2(2000);\n  VAR      VARCHAR2(2000);\n BEGIN\n  OUTPUT   := 'select   \nid as \"id\",\nNAME as \"infoGroup\",\nTYPE as \"type\",  \nvalue as \"manualValue\",\ntitle as \"title\"\nFROM TBL_SENS_ANALYSIS_PRO_DET where  is_standard =1 and  type = '\n|| INPAR_TYPE || '';\n  RETURN OUTPUT;\n END FNC_SENS_ANALYSIS_GET_INPUT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SEns_ANALYSIS_GET_REP_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2 AS\n  VAR2         VARCHAR2(3000);\n  VAR_REPORT   VARCHAR2(3000);\n BEGIN\n--  SELECT\n--   REF_REPORT_ID\n--  INTO\n--   VAR_REPORT\n--  FROM TBL_REPREQ\n--  WHERE ID   = INPAR_ID;\n\n  VAR2   := 'SELECT ID as \"id\",\nNAME as \"name\",\nDES as \"description\",\nCREATE_DATE as \"createDate\",\nREF_USER as \"refUser\",\nSTATUS as \"status\",\nCATEGORY as \"category\"\nFROM TBL_REPORT \nwhere id = '\n|| INPAR_ID || ' and upper(category) = ''SENSANALYSIS'' order by id';\n  RETURN VAR2;\n END FNC_SEns_ANALYSIS_GET_REP_INFO;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_INPUT_EDIT (\n  INPAR_REPORT   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN VARCHAR2 AS\n\n  OUTPUT     VARCHAR2(32000);\n  VAR        VARCHAR2(32000);\n  VAR_DATE   VARCHAR2(100);\n  var_repreq number;\n  PRAGMA AUTONOMOUS_TRANSACTION;\n BEGIN\n  SELECT /*+ parallel(auto) */\n   TO_CHAR(MAX(EFF_DATE),'YYYY-MM-DD')\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\nselect max(ref_repreq) into var_repreq from TBL_SENS_ANALYSIS_PRO_DET where ref_report = INPAR_REPORT;\n/*===========*/\n\n  PKG_SENSIVITY_ANALYSIS_TEST.PRC_SENS_UPDATE_GI_CALC(INPAR_REPORT,VAR_DATE);\n/*============*/\nif(var_repreq is null) then\n  OUTPUT   := 'select   \nid as \"id\",\nNAME as \"infoGroup\",\nTYPE as \"type\",\n  title as \"title\",\n\nto_char(VALUE) as \"manualValue\",\n\nPROFILE_ID as \"profileId\"\nFROM TBL_SENS_ANALYSIS_PRO_DET where REF_report = ' ||\n  INPAR_REPORT ||\n  ' AND TYPE = ' ||\n  INPAR_TYPE ||\n  ' order by type ';\n   RETURN OUTPUT;\n  else\n   OUTPUT   := 'select   \nid as \"id\",\nNAME as \"infoGroup\",\nTYPE as \"type\",\n  title as \"title\",\n\nto_char(VALUE) as \"manualValue\",\n\nPROFILE_ID as \"profileId\"\nFROM TBL_SENS_ANALYSIS_PRO_DET where REF_repreq = ' ||\n  var_repreq ||\n  ' AND TYPE = ' ||\n  INPAR_TYPE ||\n  ' order by type ';\n  \n  RETURN OUTPUT;\n  end if;\n END FNC_SENS_GET_INPUT_EDIT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_UPDATE_GI_CALC ( INPAR_REF_REPORT IN VARCHAR2,INPAR_DATE VARCHAR2 )\n  AS\n BEGIN\n\n\n  FOR I IN (\n   SELECT\n    *\n   FROM TBL_SENS_ANALYSIS_PRO_DET\n   WHERE REF_REPORT   = INPAR_REF_REPORT\n  ) LOOP\n   IF\n    ( I.PROFILE_ID IS NOT NULL\n    )\n   THEN\n    UPDATE TBL_SENS_ANALYSIS_PRO_DET\n     SET\n      VALUE = PKG_SENSIVITY_ANALYSIS_TEST.FNC_SENS_ANALYSIS_GI_CALC(I.PROFILE_ID,INPAR_DATE)\n    WHERE REF_REPORT   = INPAR_REF_REPORT\n     AND\n      I.ID         = ID;\n\n    COMMIT;\n   END IF;\n  END LOOP;\n  \n  \n  \n  \n  \n END PRC_SENS_UPDATE_GI_CALC;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REP_VALUE ( INPAR_REPORT IN VARCHAR2 ) AS\n  VAR_VERSION   NUMBER;\n  VAR_FORMULA   VARCHAR2(30000);\n  VAR_SUM       NUMBER;\n  var_repreq number;\n BEGIN\n/*=============*/\n  SELECT\n   MAX(ID)\n  INTO\n   VAR_VERSION\n  FROM TBL_REPREQ;\n  /*===========*/\n  /*=============*/\n  SELECT\n   max(ref_repreq)\n  INTO\n   var_repreq\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  where ref_report = INPAR_REPORT;\n  /*===========*/\n\n\n\nif(var_repreq is null)\n then\n  INSERT INTO TBL_SENS_ANALYSIS_PRO_DET (\n   REF_REPORT\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,IS_STANDARD\n  ,TYPE\n  ,TITLE\n  ,REF_REPREQ\n  ) \n  \n--  (SELECT\n--       \n--        inpar_report\n--        ,\n--        NAME ,\n--        0 ,\n--        0 ,\n--        0 ,\n--        TYPE ,\n--        TITLE,\n--        var_version\n--      FROM TBL_SENS_ANALYSIS_PRO_DET\n--      WHERE is_standard=1);\n--      commit;\n  \n  ( SELECT \n   (/*SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'*/ INPAR_REPORT )\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,0\n  ,TYPE\n  ,TITLE\n  ,VAR_VERSION\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE IS_STANDARD   = 0 and ref_report = INPAR_REPORT\n  );\n\n  COMMIT;\n  \n  \n  else\n  \n  INSERT INTO TBL_SENS_ANALYSIS_PRO_DET (\n   REF_REPORT\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,IS_STANDARD\n  ,TYPE\n  ,TITLE\n  ,REF_REPREQ\n  ) \n  \n--  (SELECT\n--       \n--        inpar_report\n--        ,\n--        NAME ,\n--        0 ,\n--        0 ,\n--        0 ,\n--        TYPE ,\n--        TITLE,\n--        var_version\n--      FROM TBL_SENS_ANALYSIS_PRO_DET\n--      WHERE is_standard=1);\n--      commit;\n  \n  ( SELECT \n   (/*SELECT MAX(id) FROM tbl_report WHERE upper(type) = 'LCR'*/ INPAR_REPORT )\n  ,NAME\n  ,PROFILE_ID\n  ,VALUE\n  ,0\n  ,TYPE\n  ,TITLE\n  ,VAR_VERSION\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE IS_STANDARD   = 0 and ref_repreq = var_repreq\n  );\n\n  COMMIT;\n  \n  \n  \n  \n  \n  end if;\n  \n  delete from tbl_sens_analysis_pro_det\n  where ref_report = inpar_report and ref_repreq is null;\n  commit; \n  \n  /*==============*/\n END PRC_SENS_ANALYSIS_REP_VALUE;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_FINAL_RESULT (\n  INPAR_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2\n  AS\n BEGIN\n  IF\n   ( INPAR_TYPE = 1 )\n  THEN\n\n   RETURN 'SELECT\n case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else  round((\"kht\"/(0.88*(\"ssby\")+ 0.6*(0.88*(\"ssky\"+\"g5\"))+\"tdstm\" + \"spb\"))*100 ,3) end as \"100\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.95*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\" ))*100,3) end as \"5\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.90*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100 ,3) end as \"10\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.85*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100 ,3) end as \"15\",\n  case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.80*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100,3) end as \"20\",\n case when (\"ssby\"+\"ssky\"+ \"g5\" + \"tdstm\" + \"spb\" = 0 ) then 0 else round((\"kht\"/(0.88*(\"ssby\")+ 0.70*(0.6*(0.88*(\"ssky\"+\"g5\")))+\"tdstm\" + \"spb\"))*100,3) end as \"30\"\nFROM (\n  SELECT\n   TITLE\n  ,TBL_SENS_ANALYSIS_PRO_DET.VALUE\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE TBL_SENS_ANALYSIS_PRO_DET.REF_REPREQ   ='\n|| INPAR_REPREQ || '\n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( ''kht'' AS \"kht\",''ssby'' AS \"ssby\",''ssky'' AS \"ssky\",''tdstm'' AS \"tdstm\",''s'' AS \"s\",''mnbm'' AS \"mnbm\",''mnsb'' AS \"mnsb\",''bb'' AS \"bb\",''aty''\nAS \"aty\",''assm'' AS \"assm\",''assk'' AS \"assk\",''g5'' AS \"g5\",''bbb'' AS \"bbb\",''snb'' AS \"snb\",''zb'' AS \"zb\",''za'' AS \"za\",''spb'' AS \"spb\" )\n  )'\n;\n  ELSIF ( INPAR_TYPE = 2 ) THEN\n   RETURN 'SELECT\n  case when (\"ks\" =  0 ) then 0 else round((\"kht\"/(0.88*(\"ks\")))*100,3)  end as \"100\",\n case when (\"ks\" =  0 ) then 0 else round((\"kht\"/0.95*(0.88*(\"ks\")))*100,3) end as   \"5\",\n  case when (\"ks\" =  0 ) then 0 else  round((\"kht\"/0.90*(0.88*(\"ks\")))*100,3) end as \"10\",\n  case when (\"ks\" =  0 ) then 0 else  round((\"kht\"/0.85*(0.88*(\"ks\")))*100,3) end as \"15\",\n  case when (\"ks\" =  0 ) then 0 else round((\"kht\"/0.80*(0.88*(\"ks\")))*100,3) end as \"20\",\n  case when (\"ks\" =  0 ) then 0 else round((\"kht\"/0.70*(0.88*(\"ks\")))*100,3)  end as \"30\"\nFROM (\n  SELECT\n   TITLE\n  ,TBL_SENS_ANALYSIS_PRO_DET.VALUE\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE TBL_SENS_ANALYSIS_PRO_DET.REF_REPREQ   ='\n|| INPAR_REPREQ || '\n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( ''kht'' AS \"kht\",''ks'' AS \"ks\",''tdstm'' AS \"tdstm\",''s'' AS \"s\",''mnbm'' AS \"mnbm\",''mnsb'' AS \"mnsb\",''bb'' AS \"bb\",''aty''\nAS \"aty\",''assm'' AS \"assm\",''assk'' AS \"assk\",''g5'' AS \"g5\",''bbb'' AS \"bbb\",''snb'' AS \"snb\",''zb'' AS \"zb\",''za'' AS \"za\",''spb'' AS \"spb\" )\n  )'\n;\n  ELSIF ( INPAR_TYPE = 3 ) THEN\n   RETURN 'SELECT\n case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") / (\"bbb\" + \"bb\") ) * 100\n ,3\n )  end AS \"100\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else   ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.1 * \"bbb\") ) / (\"bb\" + 0.9 * \"bbb\") ) * 100\n ,3\n ) end AS \"f10\"\n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else   ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.15 * \"bbb\") ) / (\"bb\" + 0.85 * \"bbb\") ) * 100\n ,3\n ) end AS \"f15\"\n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.2 * \"bbb\") ) / (\"bb\" + 0.8 * \"bbb\") ) * 100\n ,3\n ) end AS \"f20\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.25 * \"bbb\") ) / (\"bb\" + 0.75 * \"bbb\") ) * 100\n ,3\n ) end  AS \"f25\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.5 * \"bbb\") ) / (\"bb\" + 0.5 * \"bbb\") ) * 100\n ,3\n ) end AS \"f50\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.75 * \"bbb\") ) / (\"bb\" + 0.25 * \"bbb\") ) * 100\n ,3\n ) end  AS \"f75\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (1 * \"bbb\") ) / (\"bb\" + 0 * \"bbb\") ) * 100\n ,3\n ) end  AS \"f100\"\n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else  ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.88 * 0.1 * \"bb\") ) / (\"bbb\" + 0.9 * \"bb\") ) * 100\n ,3\n ) end AS \"s10\"\n \n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.88 * 0.15* \"bb\") ) / (\"bbb\" + 0.85 * \"bb\") ) * 100\n ,3\n ) end AS \"s15\"\n \n \n \n ,case when (\"bbb\" + \"bb\" =  0 ) then 0 else ROUND(\n  ( ( (\"s\" + \"mnbm\" + \"mnsb\" + \"snb\") - (0.88 * 0.2 * \"bb\") ) / (\"bbb\" + 0.8 * \"bb\") ) * 100\n ,3\n ) end AS \"s20\"\nFROM (\n  SELECT\n   TITLE\n  ,TBL_SENS_ANALYSIS_PRO_DET.VALUE\n  FROM TBL_SENS_ANALYSIS_PRO_DET\n  WHERE TBL_SENS_ANALYSIS_PRO_DET.REF_REPREQ   ='\n|| INPAR_REPREQ || '\n )\n  PIVOT ( MAX ( VALUE )\n   FOR TITLE\n   IN ( ''kht'' AS \"kht\",''ssby'' AS \"ssby\",''ssky'' AS \"ssky\",''tdstm'' AS \"tdstm\",''s'' AS \"s\",''mnbm'' AS \"mnbm\",''mnsb'' AS \"mnsb\",''bb'' AS \"bb\",''aty''\nAS \"aty\",''assm'' AS \"assm\",''assk'' AS \"assk\",''g5'' AS \"g5\",''bbb'' AS \"bbb\",''snb'' AS \"snb\",''zb'' AS \"zb\",''za'' AS \"za\",''spb'' AS \"spb\" )\n  )'\n;\n  END IF;\n\n  RETURN NULL;\n END FNC_SENS_GET_FINAL_RESULT;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_SENSIVITY_ANALYSIS_TEST;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_SENSIVITY_ANALYSIS_TEST\" AS \n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Bank:        \"بانک تجارت\"\n  Description: \"گزارش آزمون تحليل حساسيت\"\n    */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n PROCEDURE PRC_SENS_ANALYSIS_REPORT (\n  INPAR_NAME               IN VARCHAR2\n ,INPAR_DES                IN VARCHAR2\n ,INPAR_REF_USER           IN VARCHAR2\n ,INPAR_STATUS             IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DELETE_REP (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_DETAIL (\n  INPAR_REF_REPORT         IN VARCHAR2\n ,INPAR_NAME               IN VARCHAR2\n ,INPAR_PROFILE_ID         IN VARCHAR2\n ,INPAR_VALUE              IN VARCHAR2\n ,INPAR_IS_STANDARD        IN VARCHAR2\n ,INPAR_TYPE               IN VARCHAR2\n ,INPAR_INSERT_OR_UPDATE   IN VARCHAR2\n ,INPAR_ID                 IN VARCHAR2\n ,INPAR_TITLE              IN VARCHAR2\n ,OUTPAR_ID                OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GI_CALC (\n  INPAR_ID     IN VARCHAR2\n ,INPAR_DATE   IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_ANALYSIS_GET_INPUT ( INPAR_TYPE IN VARCHAR2 ) /* if 1-\u003e formula if 2-\u003e input*/ RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SEns_ANALYSIS_GET_REP_INFO ( INPAR_ID IN VARCHAR2 ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_INPUT_EDIT (\n  INPAR_REPORT   IN VARCHAR2\n ,INPAR_TYPE     IN VARCHAR2\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_UPDATE_GI_CALC ( INPAR_REF_REPORT IN VARCHAR2,INPAR_DATE VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_SENS_ANALYSIS_REP_VALUE ( INPAR_REPORT IN VARCHAR2 );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/  \n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n FUNCTION FNC_SENS_GET_FINAL_RESULT (\n  INPAR_REPREQ   IN NUMBER\n ,INPAR_TYPE     IN NUMBER\n ) RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_SENSIVITY_ANALYSIS_TEST;"},{"Name":"PKG_LOG","ObjectID":308006,"Digest":"419a5f496b5a08d042018a9e43e8bf511f419cdc31e740b2126e36fae9198590","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LOG\" AS \n\n  /* TODO enter package declarations (types, exceptions, methods etc) here */ \n  PROCEDURE PRC_CALL(I_BLOCKNAME VARCHAR2, I_PARAMETERS VARCHAR2, I_USER VARCHAR2);\n  \n  FUNCTION FNC_GET_LOG_UI RETURN VARCHAR2;\n  \n  \n  \n   FUNCTION FNC_GET_LOG_inout RETURN VARCHAR2;\n\nEND PKG_LOG;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LOG\" AS\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\n  PROCEDURE PRC_CALL( I_BLOCKNAME VARCHAR2, I_PARAMETERS VARCHAR2, I_USER VARCHAR2) AS\n  /*\n    @author MYM\n    @date 1397-11-19\n    @what logs proc/func informations that called from ui\n  */\n  BEGIN\n    IF I_BLOCKNAME \u003c\u003e 'PRC_NOTIFICATION' THEN\n      INSERT INTO TBL_LOG_UI(BLOCKNAME, PARAMETERS, CALLDATE, CALLTIME, USERNAME)\n      VALUES(I_BLOCKNAME, I_PARAMETERS, TRUNC(SYSDATE), TO_CHAR(SYSTIMESTAMP, 'HH24:MI:SS:FF3'), I_USER);\n    END IF;\n  END PRC_CALL;\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\n  FUNCTION FNC_GET_LOG_UI RETURN VARCHAR2 AS \n  /*\n    @author MYM\n    @date 1397-11-16\n    @what get query of show log table in ui side\n  */\n  BEGIN\n    RETURN 'SELECT  /*+  PARALLEL(auto) */ TT.PERSIANEQUIVALENT \"action\", TO_CHAR(T.CALLDATE, ''yyyy/mm/dd'', ''nls_calendar=persian'') \"date\", T.CALLTIME \"time\", T.USERNAME \"user\"\n            FROM TBL_LOG_UI T, TBL_LOG_UI_MAP TT\n            WHERE T.BLOCKNAME = TT.BLOCKNAME and TT.PERSIANEQUIVALENT is not null \n            ORDER BY T.CALLDATE DESC,T.CALLTIME DESC';\n  END FNC_GET_LOG_UI;\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\nFUNCTION FNC_GET_LOG_inout RETURN VARCHAR2 as\n/*\n    @author NAVID\n    @date 1397-11-16\n    @what log for login and logout\n  */\nbegin\n\nreturn 'SELECT \n   \n  TO_CHAR(ual.insert_date, ''yyyy/mm/dd'', ''nls_calendar=persian'') as \"date\" ,\n  to_char( ual.INSERT_DATE ,''hh.mi.ss'') as  \"time\",\n  ual.SUCCEED as \"isSucceed\",\n  uo.USERNAME as \"user\",\n  case when  ual.type = 0 then ''ورود'' else ''خروج'' end as \"action\"\nFROM SAMAD_NEW.USERS_AUTH_LOGS ual , SAMAD_NEW.USERS_ORGS uo\nwhere ual.USER_ORG_ID = uo.ID\norder by 1 desc , 2 desc';\n\nend ;\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\nEND PKG_LOG;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LOG\" AS \n\n  /* TODO enter package declarations (types, exceptions, methods etc) here */ \n  PROCEDURE PRC_CALL(I_BLOCKNAME VARCHAR2, I_PARAMETERS VARCHAR2, I_USER VARCHAR2);\n  \n  FUNCTION FNC_GET_LOG_UI RETURN VARCHAR2;\n  \n  \n  \n   FUNCTION FNC_GET_LOG_inout RETURN VARCHAR2;\n\nEND PKG_LOG;"},{"Name":"PKG_LOG","ObjectID":308008,"Digest":"419a5f496b5a08d042018a9e43e8bf511f419cdc31e740b2126e36fae9198590","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LOG\" AS \n\n  /* TODO enter package declarations (types, exceptions, methods etc) here */ \n  PROCEDURE PRC_CALL(I_BLOCKNAME VARCHAR2, I_PARAMETERS VARCHAR2, I_USER VARCHAR2);\n  \n  FUNCTION FNC_GET_LOG_UI RETURN VARCHAR2;\n  \n  \n  \n   FUNCTION FNC_GET_LOG_inout RETURN VARCHAR2;\n\nEND PKG_LOG;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_LOG\" AS\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\n  PROCEDURE PRC_CALL( I_BLOCKNAME VARCHAR2, I_PARAMETERS VARCHAR2, I_USER VARCHAR2) AS\n  /*\n    @author MYM\n    @date 1397-11-19\n    @what logs proc/func informations that called from ui\n  */\n  BEGIN\n    IF I_BLOCKNAME \u003c\u003e 'PRC_NOTIFICATION' THEN\n      INSERT INTO TBL_LOG_UI(BLOCKNAME, PARAMETERS, CALLDATE, CALLTIME, USERNAME)\n      VALUES(I_BLOCKNAME, I_PARAMETERS, TRUNC(SYSDATE), TO_CHAR(SYSTIMESTAMP, 'HH24:MI:SS:FF3'), I_USER);\n    END IF;\n  END PRC_CALL;\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\n  FUNCTION FNC_GET_LOG_UI RETURN VARCHAR2 AS \n  /*\n    @author MYM\n    @date 1397-11-16\n    @what get query of show log table in ui side\n  */\n  BEGIN\n    RETURN 'SELECT  /*+  PARALLEL(auto) */ TT.PERSIANEQUIVALENT \"action\", TO_CHAR(T.CALLDATE, ''yyyy/mm/dd'', ''nls_calendar=persian'') \"date\", T.CALLTIME \"time\", T.USERNAME \"user\"\n            FROM TBL_LOG_UI T, TBL_LOG_UI_MAP TT\n            WHERE T.BLOCKNAME = TT.BLOCKNAME and TT.PERSIANEQUIVALENT is not null \n            ORDER BY T.CALLDATE DESC,T.CALLTIME DESC';\n  END FNC_GET_LOG_UI;\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\nFUNCTION FNC_GET_LOG_inout RETURN VARCHAR2 as\n/*\n    @author NAVID\n    @date 1397-11-16\n    @what log for login and logout\n  */\nbegin\n\nreturn 'SELECT \n   \n  TO_CHAR(ual.insert_date, ''yyyy/mm/dd'', ''nls_calendar=persian'') as \"date\" ,\n  to_char( ual.INSERT_DATE ,''hh.mi.ss'') as  \"time\",\n  ual.SUCCEED as \"isSucceed\",\n  uo.USERNAME as \"user\",\n  case when  ual.type = 0 then ''ورود'' else ''خروج'' end as \"action\"\nFROM SAMAD_NEW.USERS_AUTH_LOGS ual , SAMAD_NEW.USERS_ORGS uo\nwhere ual.USER_ORG_ID = uo.ID\norder by 1 desc , 2 desc';\n\nend ;\n----------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------\nEND PKG_LOG;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_LOG\" AS \n\n  /* TODO enter package declarations (types, exceptions, methods etc) here */ \n  PROCEDURE PRC_CALL(I_BLOCKNAME VARCHAR2, I_PARAMETERS VARCHAR2, I_USER VARCHAR2);\n  \n  FUNCTION FNC_GET_LOG_UI RETURN VARCHAR2;\n  \n  \n  \n   FUNCTION FNC_GET_LOG_inout RETURN VARCHAR2;\n\nEND PKG_LOG;"},{"Name":"PKG_API","ObjectID":308223,"Digest":"6d933179108928adb03b9cec6181ae3d9c2a11cc26cb8ed583a51f8c34d9b998","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_API\" AS \n\n  /* \n  @AUTHOR MYM\n  @DATE 1397-11-16\n  @WHAT This package play as an interface role for interaction between UI-team and DB-taem.\n        all pssible actions can categorize to following cats.\n        these actions are only for reports\n  */ \n\n  PROCEDURE PRC_REPORT_CREATE(I_JSON clob, O_FAKE OUT VARCHAR2);\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_DELETE(\n   I_JSON IN VARCHAR2\n  ,O_FAKE OUT NUMBER\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_NOTIFICATION(\n    I_JSON IN VARCHAR2, O_FAKE OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_REQUEST(\n    i_json varchar2, o_fake OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_SHOW(\n    I_JSON IN VARCHAR2\n  ) RETURN CLOB;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_LIST(\n   I_json varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_INFO(\n    i_json IN varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  \nEND PKG_API;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_API\" AS\n\n  PROCEDURE PRC_REPORT_CREATE(I_JSON clob, O_FAKE OUT VARCHAR2) AS\n    V_INSERT_UPDATE VARCHAR2(20);\n    V_JSON JSON;\n    V_TYPE VARCHAR2(50);\n    V_CATEGORY VARCHAR2(50);\n    V_FAKE number;\n    V_ERR_CODE VARCHAR2(50);\n    V_ERR_MSG VARCHAR2(1000);\n    V_OTHER VARCHAR2(500);\n    \nBEGIN\n  -- CHECK IF REPORT NAME IS EXIST\n  V_JSON := JSON(I_JSON);  \n  V_TYPE := json_ext.get_string(v_json, 'type');\n  V_CATEGORY := json_ext.get_string(v_json, 'category');\n  V_OTHER := json_ext.get_string(v_json, 'other');\n\n  IF (UPPER(json_ext.get_string(v_json, 'insertOrUpdate')) = 'INSERT') THEN\n    V_INSERT_UPDATE := 0;\n  ELSE \n    V_INSERT_UPDATE := 1;\n  END IF;\n  \n  IF V_OTHER IS NULL THEN\n      IF (V_TYPE = 'aes')THEN \n        DYNAMIC_LQ.PKG_AES.PRC_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user') , json_ext.get_string(v_json, 'profileDep') ,json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'type') , json_ext.get_string(v_json, 'status'), V_INSERT_UPDATE , json_ext.get_string(v_json, 'id'), o_fake);  \n      ELSIF (V_TYPE = 'idps')THEN \n        PRAGG.PKG_IDPS.PRC_IDPS_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'branch'), json_ext.get_string(v_json, 'startDate'), json_ext.get_string(v_json, 'endDate'), json_ext.get_string(v_json, 'duration'),  v_insert_update, json_ext.get_string(v_json, 'id'), json_ext.get_string(v_json, 'type'), o_fake);\n      ELSIF (V_TYPE = 'duedate_loan') then\n        PRAGG.PKG_DUE_DATE_LOAN.PRC_DUE_DATE_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'timingProfile'), v_insert_update, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'dateType'), o_fake);\n      ELSIF (V_TYPE = 'duedate') then\n        PRAGG.PKG_DUE_DATE.PRC_DUE_DATE_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'timingProfile'), v_insert_update, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'dateType'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'rial') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'currency') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'composite') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'rialBranch') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'currencyBranch') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'compositeBranch') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('dddr') AND UPPER(V_TYPE) = UPPER('dddr')) THEN\n        PKG_DUE_DATE_DEPOSIT_RATE.PRC_DDDR_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), V_INSERT_UPDATE, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'firstDate'), json_ext.get_string(v_json, 'lastDate'), json_ext.get_string(v_json, 'tree'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('ddlt') AND UPPER(V_TYPE) = UPPER('ddlt')) THEN\n        PKG_DUE_DATE_LOAN_TYPE.PRC_ddlt_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), V_INSERT_UPDATE, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'firstDate'), json_ext.get_string(v_json, 'lastDate'), json_ext.get_string(v_json, 'tree'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('duration2') AND UPPER(V_TYPE) = UPPER('duration2')) THEN --diresh\n        PKG_DU_GAP_PROF.PRC_DU_GAP_PROF_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'),  json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon'), json_ext.get_string(v_json, 'customerProfile'), V_INSERT_UPDATE, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'firstDate'), json_ext.get_string(v_json, 'changeRate'),  json_ext.get_string(v_json, 'tahlilHassasiat'),   json_ext.get_string(v_json, 'tasirHassasiat'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('GAP_NIIM') AND UPPER(V_TYPE) = UPPER('GAP_NIIM')) THEN --gapNiim\n        PKG_GAP_NIIM.PRC_GAP_NIIM_PROFILE_REPORT(json_ext.get_string(v_json, 'name'),json_ext.get_string(v_json, 'des'),json_ext.get_string(v_json, 'user'),json_ext.get_string(v_json, 'status'),v_insert_update,json_ext.get_string(v_json, 'id'),v_type,json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'depositProfile'),json_ext.get_string(v_json, 'profileLon'),json_ext.get_string(v_json, 'customerProfile'),json_ext.get_string(v_json, 'currencyProfile'),json_ext.get_string(v_json, 'profileBrn'),json_ext.get_string(v_json, 'dateType'),json_ext.get_string(v_json, 'tahlilHassassiat'),json_ext.get_string(v_json, 'tasirHassassiat'),o_fake);\n      END IF;\n  ELSE\n    AKIN.PRC_SHIVE_NEGASHT(json_ext.get_string(v_json, 'ledgerCode'), json_ext.get_string(v_json, 'onem'), json_ext.get_string(v_json, 'from1to3m'), json_ext.get_string(v_json, 'from3to12m'), json_ext.get_string(v_json, 'from1to5y'), json_ext.get_string(v_json, 'g5y'), json_ext.get_string(v_json, 'outOfStream'), O_FAKE);\n  END IF;\n  COMMIT;\n  \n  \n  \n  -- EXCEPTION HANDLING AREA\n  EXCEPTION \n    WHEN OTHERS THEN\n      V_err_code := SQLCODE;\n      V_err_msg := SQLERRM;--err_msg := SUBSTR(SQLERRM, 1, 200);\n      INSERT INTO TBL_LOG_ERROR(CODE, MESSAGE, RELEASE_POINT)\n      VALUES(V_err_code, V_err_msg, $$plsql_unit);\n      --RAISE I_AM_SORRY;\n  \nEND PRC_REPORT_CREATE;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_DELETE(\n   I_JSON IN VARCHAR2\n  ,O_FAKE OUT NUMBER\n  ) AS\n   V_TYPE VARCHAR2(50);\n   V_JSON JSON;\n  BEGIN\n    V_JSON := JSON(I_JSON);  \n    V_TYPE := json_ext.get_string(v_json, 'type');\n    \n    DELETE FROM TBL_REPORT WHERE ID = json_ext.get_string(v_json, 'repReq');\n    \n    IF V_TYPE = 'idps' THEN\n      DELETE FROM TBL_IDPS_REP_PROFILE_DETAIL WHERE REF_REPORT = json_ext.get_string(v_json, 'repReq');\n    END IF;\n    \n  END PRC_REPORT_DELETE;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_NOTIFICATION(\n    I_JSON VARCHAR2, O_FAKE OUT VARCHAR2\n  )AS\n  \n  INPAR_OPT_TYPE  VARCHAR2(20);\n  INPAR_ID VARCHAR2(100);\n INPAR_TYPE VARCHAR2(100);\n INPAR_class VARCHAR2(100);\n INPAR_TITLE VARCHAR2(100);\n INPAR_STATUS VARCHAR2(100);\n INPAR_USER_ID VARCHAR2(100);\n INPAR_DESCRIPTION VARCHAR2(100);\n INPAR_REF_REPORT VARCHAR2(100);\n INPAR_REF_REPREQ VARCHAR2(100);\n INPAR_REF_REPPER_DATE VARCHAR2(100);\n inpar_flag VARCHAR2(100);\n OUTPAR_STATUS VARCHAR2(1000);\n  v_json json;\nBEGIN\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:anjam amaliyat hay lazem baray darj - beroz resani - hazf va daryaft elanat\n  */\n  --------------------------------------------------------------------------------\n  v_json := json(i_json);\n  INPAR_OPT_TYPE := json_ext.get_string(v_json, 'optType');\n  INPAR_ID := json_ext.get_string(v_json, 'id');\n INPAR_TYPE := json_ext.get_string(v_json, 'type');\n INPAR_class := json_ext.get_string(v_json, 'class');\n INPAR_TITLE := json_ext.get_string(v_json, 'title');\n INPAR_STATUS := json_ext.get_string(v_json, 'status');\n INPAR_USER_ID := json_ext.get_string(v_json, 'user');\n INPAR_DESCRIPTION := json_ext.get_string(v_json, 'des');\n INPAR_REF_REPORT := json_ext.get_string(v_json, 'report');\n INPAR_REF_REPREQ := json_ext.get_string(v_json, 'repReq');\n INPAR_REF_REPPER_DATE := json_ext.get_string(v_json, 'repPerDate');\n inpar_flag := json_ext.get_string(v_json, 'flag');\n \n\n\nIF INPAR_OPT_TYPE = 'insert' THEN \n  --=======INSERT================ Darj yek elan jadid.\nINSERT\nINTO TBL_NOTIFICATIONS\n  (\n   \n    TITLE,\n    TYPE,\n    class,\n    REF_USER,\n    START_TIME,\n    STATUS,\n    DESCRIPTION,\n    REF_REPORT\n  )\n  VALUES\n  (\n   \n    INPAR_TITLE,\n    INPAR_TYPE,\n    INPAR_class,\n    INPAR_USER_ID,\n    sysdate,\n    'progress',\n    INPAR_DESCRIPTION,\n    INPAR_REF_REPORT\n  );\n    Commit;\n\n  select max(id) into O_FAKE from TBL_NOTIFICATIONS;\n  Commit;\n END IF; \n \nIF INPAR_OPT_TYPE = 'update' THEN \n  --=======UPDATE================Berozresani yek elan mojod.\n   UPDATE TBL_NOTIFICATIONS\n   SET STATUS           =INPAR_STATUS \n   , END_TIME = sysdate \n   , REF_REPREQ = INPAR_REF_REPREQ\n   , REF_REPPER_DATE = INPAR_REF_REPPER_DATE\n   , flag = inpar_flag\n   WHERE ID        = INPAR_ID\n   ;\n   Commit;\n END IF; \n\nIF INPAR_OPT_TYPE = 'delete' THEN\n  --=======DELETE================  Haz yek elan mojod.\n  DELETE\n  FROM TBL_NOTIFICATIONS\n  WHERE ID        = INPAR_ID;\n  Commit;\nEND IF;\n\nIF INPAR_OPT_TYPE = 'check' THEN\n  --=======CHECK STATUS================  Bargardandan tamimi vaziyat yek elan mojod.\n  SELECT \n  STATUS\n  into O_FAKE\n  FROM TBL_NOTIFICATIONS\n  \n  where ID = INPAR_ID;\nCommit;\nEND IF;\n\n\nIF INPAR_OPT_TYPE = 'getall' THEN\n  --=======GET ALL================ Bargardandan tamami elanat mojod. \n  SELECT \n  'SELECT ID as \"id\",\n  TITLE  as \"title\",\n  TYPE as \"type\",\n  class as \"class\",\n  REF_USER  as \"user\",\n  to_char(START_TIME,''yyyy/MM/dd'') as \"startTime\",\n  to_char(END_TIME,''yyyy/mm/dd'') as \"endTime\",\n    STATUS as \"status\",\n  DESCRIPTION as \"des\"\n  ,ref_repreq as \"ref\"\n  ,ref_repper_date as \"perDate\"\n  ,REF_REPORT as \"refReport\"\n  , flag as \"changed\"\nFROM TBL_NOTIFICATIONS\norder by START_TIME desc\n'\n\n  into O_FAKE\n  FROM dual;\n  \n\nEND IF;\n\n   IF (INPAR_OPT_TYPE = 'visited') then\n \n update pragg.TBL_NOTIFICATIONS set STATUS='visited' ,flag = 0 where id=INPAR_ID;\n commit;\n \n end if;\n \n  \n  END PRC_REPORT_NOTIFICATION;\n  \n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_REQUEST(\n    i_json varchar2, \n    o_fake OUT VARCHAR2\n  ) AS\n  I_REPORT   NUMBER;\n  I_USER     VARCHAR2(50);\n  I_NOTIFICATION    NUMBER;\n  VAR_REP_REQ_ID        NUMBER;\n VAR_NOTIF_ID          VARCHAR2(50);\n VAR_REPPER_DATE       DATE;\n VAR_INPAR_REPORT_ID   NUMBER;\n V_R                   NUMBER;\n LOC_MEGHDAR           VARCHAR2(4000);\n VAR_TYPE              VARCHAR2(200);\n v_json json;\n begin\n    v_json := json(i_json);\n    i_report := json_ext.get_string(v_json, 'refReport');\n    i_user := json_ext.get_string(v_json, 'refUser');\n    i_notification := json_ext.get_string(v_json, 'refNotification');\n\n/*yaftane id gozaresh az jadval gozareshat*/\n SELECT\n  MAX(ID)\n INTO\n  VAR_INPAR_REPORT_ID\n FROM TBL_REPORT\n WHERE H_ID   = (\n   SELECT\n    H_ID\n   FROM TBL_REPORT\n   WHERE ID   = I_REPORT\n  )\n GROUP BY\n  H_ID;\n\n/* darj yek darkhast gozaresh jadid dar jadval TBL_REP_REQ*/\n\n INSERT INTO TBL_REPREQ (\n  REF_REPORT_ID\n ,REF_USER_ID\n ,REQ_DATE\n ,STATUS\n ,REF_LEDGER_PROFILE\n ,REF_PROFILE_TIME\n ,REF_PROFILE_CURRENCY\n ,REF_PROFILE_CUSTOMER\n ,REF_PROFILE_BRANCH\n ,REF_PROFILE_DEPOSIT\n ,REF_PROFILE_LOAN\n ,REF_HID_REPORT\n ,TYPE\n ,CATEGORY\n ) VALUES (\n  VAR_INPAR_REPORT_ID\n ,i_user\n ,SYSDATE\n ,0\n ,(\n   SELECT\n    REF_LEDGER_PROFILE\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_TIME\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_CURRENCY\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_CUSTOMER\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_BRANCH\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_DEPOSIT\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_LOAN\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    H_ID\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    TYPE\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    CATEGORY\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n );\n\n COMMIT;\n  \n  /*yaftan id darkhast ijad shode*/\n SELECT\n  MAX(ID)\n INTO\n  VAR_REP_REQ_ID\n FROM TBL_REPREQ;\n  /*--------------------------*/\n\n SELECT\n  TYPE\n INTO\n  VAR_TYPE\n FROM TBL_REPORT\n WHERE ID   = VAR_INPAR_REPORT_ID;\n\n  IF( VAR_TYPE = 'duedate' )THEN\n    PKG_DUE_DATE.PRC_DUE_DATE_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'idps' or VAR_TYPE = 'IDPS' ) THEN-- until next announcement\n    PKG_IDPS.PRC_IDPS_REP_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( upper(VAR_TYPE) = 'COM2' ) THEN\n    PKG_COM.PRC_COM_direct_cost(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'LCR' ) THEN\n    PKG_LCR.PRC_LCR_REP_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'duedate_loan' ) THEN\n    PKG_DUE_DATE_LOAN.PRC_DUE_DATE_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'NOP' ) THEN\n    PKG_NOP.PRC_REPORT_VALUE_NOP(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DDDR' ) THEN\n    PKG_DUE_DATE_DEPOSIT_RATE.PRC_DDDR_GET_DETAIL(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'GAP_NIIM' ) THEN\n    PKG_GAP_NIIM.PRC_GAP_NIIM_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DDLT' ) THEN\n    PKG_DUE_DATE_LOAN_TYPE.prc_DDLT_GET_DETAIL(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'COMSTAT' ) THEN\n    pkg_comparative_statistic.PRC_com_stat_report_value(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'CRINDEX' ) THEN\n    pkg_creditRisk_branch_index.PRC_cr_br_index_report_value(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DEPOSIT' ) THEN -- CAT: WES\n    DYNAMIC_LQ.pkg_WES.PRC_DEP_REPORT_VALUE(VAR_INPAR_REPORT_ID, VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'LOAN' ) THEN -- CAT: WES\n    DYNAMIC_LQ.pkg_WES.PRC_DEP_REPORT_VALUE(VAR_INPAR_REPORT_ID, VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'SHOCK' ) THEN\n    pkg_shock.PRC_shock_report_value(VAR_INPAR_REPORT_ID); \n  ELSIF ( UPPER(VAR_TYPE) = 'SENSANALYSIS' ) THEN\n    pkg_sensivity_analysis_test.PRC_SENS_ANALYSIS_REP_VALUE(VAR_INPAR_REPORT_ID); \n  ELSIF ( UPPER(VAR_TYPE) = 'DURATION2' ) THEN\n    PKG_DU_GAP_PROF.PRC_DU_GAP_PROF_REPORT_VALUE(VAR_INPAR_REPORT_ID,VAR_REP_REQ_ID);--PRC_DU_GAP_PROF_REPORT_VALUE\n      ELSIF ( UPPER(VAR_TYPE) = 'CAR' ) THEN\n    PKG_CAR.PRC_CAR_FINAL_REPORT(VAR_INPAR_REPORT_ID,VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = '107' ) THEN\n    DYNAMIC_LQ.PRC_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n    DYNAMIC_LQ.PRC_AGGREGATION(VAR_REP_REQ_ID);\n  ELSIF (UPPER(VAR_TYPE)= 'AES') THEN\n    DYNAMIC_LQ.PKG_AES.PRC_REPORT_VALUE(VAR_REP_REQ_ID);\n ELSE\n  \n  /*ejra prasijer baray filter kardan dadeh hay gozersh*/\n  PRC_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  \n  /*ejra tajmi*/\n  PRC_AGGREGATION(VAR_REP_REQ_ID);\n  \n  /*PRC_GET_QUERY_REPORT(var_Rep_Req_ID,var_report_name);*/\n END IF;\n  \n  /*berozresani vaziat gozaresh be payan yafte dar jadval darkhastha */\n\n UPDATE TBL_REPREQ\n  SET\n   STATUS = 1\n WHERE ID   = VAR_REP_REQ_ID;\n\n COMMIT;\n  \n /* prc_liken(to_date('15-NOV-17'));*/\n  /*berozresani elanat*/\n PRC_NOTIFICATION(\n  'update'\n ,i_notification\n ,''\n ,''\n ,''\n ,'finished'\n ,0\n ,''\n ,0\n ,VAR_REP_REQ_ID\n ,''\n ,'0'\n ,VAR_NOTIF_ID\n );\n  \n  /*khoroji alaki, jeddi nagir*/\n\n o_fake   := VAR_NOTIF_ID;\nEXCEPTION\n WHEN OTHERS THEN\n  LOC_MEGHDAR   := SQLERRM;\n  PRC_NOTIFICATION(\n   'update'\n  ,i_notification\n  ,''\n  ,''\n  ,''\n  ,'error '|| LOC_MEGHDAR\n  ,0\n  ,''\n  ,0\n  ,VAR_REP_REQ_ID\n  ,''\n  ,'1'\n  ,VAR_NOTIF_ID\n  );\n  o_fake := -1;\n  COMMIT;\n  DELETE FROM TBL_REPREQ WHERE ID   = VAR_REP_REQ_ID;\n\n  COMMIT;\n  LOC_MEGHDAR   := SQLERRM;\n  UPDATE TBL_NOTIFICATIONS\n   SET\n    ERROR = LOC_MEGHDAR\n  WHERE ID   = i_notification;\n\n  COMMIT;\n/*     INSERT INTO TABLE1 (P) VALUES (LOC_MEGHDAR);*/\n/*       LOC_MEGHDAR := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;*/\n/*       INSERT INTO TABLE1 (P) VALUES (LOC_MEGHDAR);*/\n  END PRC_REPORT_REQUEST;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_SHOW(\n    I_JSON IN VARCHAR2\n  ) RETURN CLOB AS\n  r_query CLOB;\n  v_category varchar2(200);\n  v_type varchar2(200);\n  v_report varchar2(200);\n  V_REPREQ VARCHAR2(200);\n  V_SHOWTYPE VARCHAR2(500);\n  V_JSON JSON;\nBEGIN\n  V_JSON := JSON(I_JSON);\n  v_repreq := json_ext.get_string(v_json, 'repReq');\n  V_SHOWTYPE := json_ext.get_string(v_json, 'showType');\n  -- GET REPORT ID OF THIS REPORT REQUEST\n  IF V_REPREQ IS NOT NULL THEN -- ~FOR REPREQLESS REPORTS\n    SELECT REF_REPORT_ID INTO V_REPORT\n    FROM TBL_REPREQ\n    WHERE ID = v_REPREQ;\n    -- GET TYPE \u0026 CAT OF THIS REPORT\n    SELECT CATEGORY, TYPE\n    INTO V_CATEGORY, V_TYPE\n    FROM TBL_REPORT\n    WHERE ID = V_REPORT;\n  END IF;\n  \n  R_QUERY := 'NO MATCH!';\n  -- RETURN CORESPONDING QUERY FOR SHOWING REPORT RESULT\n  IF V_TYPE = '107' THEN \n    R_QUERY := DYNAMIC_LQ.FNC_GET_QUERY_REPORT(v_REPREQ);\n  ELSIF V_CATEGORY = 'WES' AND V_TYPE = 'deposit' THEN  \n    R_QUERY := DYNAMIC_LQ.PKG_WES.FNC_GET_DEP_VALUE(v_REPREQ);\n  ELSIF V_CATEGORY = 'AES'  THEN \n    R_QUERY := DYNAMIC_LQ.PKG_AES.FNC_GET_ALL_STREAMS(v_REPREQ);\n  ELSIF V_CATEGORY = 'idps' OR V_CATEGORY = 'IDPS' THEN\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'column' THEN PKG_IDPS.FNC_IDPS_GET_DETAIL_NAME(V_REPREQ)\n                    ELSE PKG_IDPS.FNC_IDPS_FINAL_RESULT(V_REPREQ, json_ext.get_string(v_json, 'function')) \n               END;\n    ELSIF V_TYPE = 'duedate_loan' THEN\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'tree'    THEN PRAGG.PKG_DUE_DATE_LOAN.FNC_DUE_DATE_GET_TREE()\n                    WHEN V_SHOWTYPE = 'leaf'    THEN PRAGG.PKG_DUE_DATE_LOAN.FNC_DUE_DATE_GET_LEAF(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detail'  THEN PRAGG.PKG_DUE_DATE_LOAN.FNC_DUE_DATE_GET_DETAIL(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'type'))\n                    WHEN V_SHOWTYPE = 'column'  THEN PRAGG.FNC_GET_DETAIL_TIMING (json_ext.get_string(v_json, 'repReq'))\n               END;\n  ELSIF V_TYPE = 'duedate' THEN\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'tree'    THEN PRAGG.PKG_DUE_DATE.FNC_DUE_DATE_GET_TREE()\n                    WHEN V_SHOWTYPE = 'leaf'    THEN PRAGG.PKG_DUE_DATE.FNC_DUE_DATE_GET_LEAF(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detail'  THEN PRAGG.PKG_DUE_DATE.FNC_DUE_DATE_GET_DETAIL(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'type'))\n                    WHEN V_SHOWTYPE = 'column'  THEN PRAGG.FNC_GET_DETAIL_TIMING (json_ext.get_string(v_json, 'repReq'))\n               END;\n   ELSIF((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND (V_TYPE = 'rial' OR V_TYPE = 'currency' OR V_TYPE = 'composite' OR V_TYPE = 'compositeBranch' OR V_TYPE = 'rialBranch' OR V_TYPE = 'currencyBranch')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'gap'     THEN PRAGG.GET_QUERY_GAP(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'column'  THEN FNC_GET_DETAIL_TIMING(json_ext.get_string(v_json, 'repReq'))\n                    ELSE fnc_GET_QUERY_REPORT_II(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'curType'))\n               END;\n  ELSIF(upper(V_CATEGORY) = upper('dddr') AND upper(V_TYPE) = upper('dddr')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'detailChild' THEN PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_GET_detail_child(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detailTree'  THEN PKG_DUE_DATE_DEPOSIT_RATE.fnc_dddr_get_tree_detail(V_REPORT)\n                    WHEN V_SHOWTYPE = 'count'       THEN PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_GET_count(json_ext.get_string(v_json, 'repReq'))\n               END;\n  ElSIF(UPPER(V_CATEGORY) = UPPER('ddlt') AND UPPER(V_TYPE) = UPPER('ddlt')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'detailChild'            THEN PKG_DUE_DATE_LOAN_TYPE.FNC_DDLT_GET_detail_child(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detailTree'             THEN PKG_DUE_DATE_LOAN_TYPE.fnc_DDLT_get_tree_detail(V_REPORT)\n                    WHEN V_SHOWTYPE = 'count'                  THEN PKG_DUE_DATE_LOAN_TYPE.fnc_DDLT_GET_count(json_ext.get_string(v_json, 'repReq'))\n               END;\n  ELSIF(UPPER(V_CATEGORY) = UPPER('duration2') AND UPPER(V_TYPE) = UPPER('duration2')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'durationGapProfile'            THEN pkg_du_gap_prof.fnc_get_DU_GAP_PROF(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'durationGapType'))\n                    WHEN V_SHOWTYPE = 'durationGapProfileSens'        THEN pkg_du_gap_prof.fnc_get_DU_GAP_PROF_sens(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'durationGapType'))\n               END;\n  ELSIF(UPPER(V_CATEGORY) = UPPER('GAP_NIIM') AND UPPER(V_TYPE) = UPPER('GAP_NIIM')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'reportQuery'           THEN  PKG_GAP_NIIM.FNC_GAP_NIIM_GET_REPORT_QUERY(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'timingDetail'          THEN PKG_GAP_NIIM.FNC_GAP_NIIM_GET_DETAIL_TIMING(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'reportSens'            THEN PKG_GAP_NIIM.FNC_GAP_NIIM_GET_REPORT_sens(json_ext.get_string(v_json, 'repReq'))\n               END;\n  ELSE -- without repreq\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'concRegion'                 THEN PKG_CONC.FNC_GET_REGION ()\n                    WHEN V_SHOWTYPE = 'concTop100'                 THEN PKG_CONC.FNC_GET_TOP100_CUSTOMER(json_ext.get_string(v_json, 'reg'))\n                    WHEN V_SHOWTYPE = 'concTop100Detail'           THEN PKG_CONC.FNC_GET_TOP100_CUSTOMER_DETAIL(json_ext.get_string(v_json, 'reg'))\n                    WHEN V_SHOWTYPE = 'concPageNumber'             THEN pkg_conc.FNC_PAGE_NUMBER(json_ext.get_string(v_json, 'pageSize'))\n                    WHEN V_SHOWTYPE = 'concStateReport'            THEN pkg_conc.FNC_CONC_STATE_REPORT()\n                    WHEN V_SHOWTYPE = 'concMainReport'             THEN pkg_conc.FNC_CONC_MAIN_REPORT()\n                    WHEN V_SHOWTYPE = 'concStateDetailReport'      THEN pkg_conc.FNC_CONC_STATE_DETAIL_REPORT(json_ext.get_string(v_json, 'state'))\n                    WHEN V_SHOWTYPE = 'ledgerReport'               THEN FNC_GET_LEDGER_REPORT(json_ext.get_string(v_json, 'date'), json_ext.get_string(v_json, 'currency'))\n                    WHEN V_SHOWTYPE = 'dueDateForm'                THEN akin.FNC_GET_DUE_DATE_FORM()\n                    WHEN V_SHOWTYPE = 'NOPResult'                  THEN PKG_NOP_SIMPLE.FNC_NOP_RESULT(json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'NOPSimpleTree'              THEN PKG_NOP_SIMPLE.FNC_NOP_simple_tree()\n                    WHEN V_SHOWTYPE = 'NOPDetial'                  THEN pkg_nop_simple.FNC_NOP_GET_DETAIL_NAME(json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'NOPResultGold'              THEN pkg_nop_simple.FNC_NOP_RESULT_gold(json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'ledgerAvailableDates'       THEN FNC_GET_LEDGER_AVA_DATES()\n                    WHEN V_SHOWTYPE = 'costumerConcAvailableDates' THEN PKG_CUSTOMER_CONC.FNC_GET_AVAILABLE_DATE()\n                    WHEN V_SHOWTYPE = 'costumerConcFinalResult'    THEN PKG_CUSTOMER_CONC.FNC_CUSTOMER_CONC_FINAL_RESULT(json_ext.get_string(v_json, 'date'),json_ext.get_string(v_json, 'modalityType'))\n                    WHEN V_SHOWTYPE = 'ledgerBranch'               THEN FNC_GET_REPORT_LEDGER_BRANCH(json_ext.get_string(v_json, 'branches'),json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'currencyCompare'            THEN PKG_BALANCE_SHEET.FNC_COMPARE_BALANCE_SHEET(json_ext.get_string(v_json, 'date1'),json_ext.get_string(v_json, 'currency1'),json_ext.get_string(v_json, 'date2'),json_ext.get_string(v_json, 'currency2'))\n                    WHEN V_SHOWTYPE = 'branchCompare'              THEN PKG_BRANCH_BALANCE_SHEET.FNC_COMPARE_BRANCH_BR_SHEET(json_ext.get_string(v_json, 'date1'),json_ext.get_string(v_json, 'branch1'),json_ext.get_string(v_json, 'date2'),json_ext.get_string(v_json, 'branch2'))\n                   ELSE  'NO MATCH'\n               END;\n  END IF;\n  \n  \n  RETURN R_QUERY;\n  \nEND FNC_REPORT_SHOW;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_LIST(\n  I_JSON VARCHAR2   \n  ) RETURN VARCHAR2 AS\n  R_QUERY VARCHAR2(1000);\n  V_JSON JSON;\n  BEGIN\n    V_JSON := JSON(I_JSON);\n    R_Query := FNC_GET_REPORT_LIST(json_ext.get_string(v_json, 'category'), json_ext.get_string(v_json, 'type'));\n    \n  return R_QUERY;\n  END FNC_REPORT_LIST;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_INFO(\n    i_json varchar2\n  ) RETURN VARCHAR2 AS\n   R_QUERY VARCHAR2(32000);\n   v_json json;\n   V_TYPE VARCHAR2(100);\n   V_CATEGORY VARCHAR2(100);\n   V_REPORT VARCHAR2(500);\n   V_INFOTYPE VARCHAR2(200);\n  VAR    VARCHAR2(32000);\nBEGIN\n  V_JSON := json(i_json);\n  V_REPORT := json_ext.get_string(v_json, 'id');--report\n  V_INFOTYPE := json_ext.get_string(v_json, 'infoType');\n\n  \n  IF V_REPORT IS NOT NULL THEN\n    SELECT TYPE, CATEGORY INTO V_TYPE, V_CATEGORY\n    FROM TBL_REPORT\n    WHERE ID = V_REPORT;\n  \n    IF UPPER(V_TYPE) = 'IDPS' THEN \n      R_QUERY := PKG_IDPS.FNC_IDPS_GET_REPORT_INFO(V_REPORT);\n    ELSIF V_TYPE = 'duedate' OR V_TYPE = 'duedate_loan' THEN\n      R_QUERY := FNC_GET_REPORT_PROFILE(V_REPORT);\n    ELSIF((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND (V_TYPE = 'rial' OR V_TYPE = 'currency' OR V_TYPE = 'composite' OR V_TYPE = 'compositeBranch' OR V_TYPE = 'rialBranch' OR V_TYPE = 'currencyBranch')) THEN \n      R_QUERY := FNC_GET_REPORT_PROFILE(V_REPORT);\n    ELSIF(V_CATEGORY = 'GAP_NIIM' or V_TYPE = 'GAP_NIIM') THEN\n      R_QUERY := 'SELECT ID as \"id\",\n                  NAME as \"name\",\n                  DES as \"description\",\n                  CREATE_DATE as \"createDate\",\n                  REF_USER as \"refUser\",\n                  STATUS as \"status\",\n                  CATEGORY as \"category\",\n                  ref_timing_profile as \"dateProfileId\",\n                  ref_dep_profile as \"depositProfileId\",\n                  ref_lon_profile as \"loanProfileId\",\n                  ref_cus_profile as \"customerProfileId\",\n                  ref_cur_profile as \"currencyProfileId\",\n                  ref_brn_profile as \"branchProfileId\",\n                  timing_profile_type as \"dateType\",\n                  REF_LEDGER_PROFIEL as \"tahlilHassassiat\",\n                  first_date as \"tasirHassassiat\"\n                 FROM TBL_REPORT \n                where id = '\n                || v_report || ' and upper(category) = ''GAP_NIIM'' order by id';\n    ELSIF(V_CATEGORY = 'duration2' or V_TYPE = 'duration2') THEN\n    --dar sistem qabli farq dASt: refLoan=loanProfileId\n    --barAye hamin bAznevisi Sod\n      R_QUERY :=  'SELECT ID as \"id\",\n                          NAME as \"name\",\n                          DES as \"description\",\n                          FIRST_DATE as \"firstDate\",\n                          CREATE_DATE as \"createDate\",\n                          REF_USER as \"refUser\",\n                          STATUS as \"status\",\n                          CATEGORY as \"category\",\n                          ref_dep_profile as \"depositProfileId\"\n                                        ,REF_LON_PROFILE as \"loanProfileId\"\n                                        ,REF_CUS_PROFILE as \"customerProfileId\"--DAR SYSTEM GHABLI FARGH DASHT : refLoan\n                                        ,bazeh as \"changeRate\",\n                                        REF_BRN_PROFILE as \"tahlilHasasiat\"\n                                        ,REF_TIMING_PROFILE as \"tasir\"\n                          FROM TBL_REPORT \n                          where id = '|| V_REPORT || ' and upper(category) = ''DURATION2''';\n    ELSE \n    R_QUERY := 'SELECT   \n                ID as \"id\",  \n                NAME as \"name\",  \n                TYPE as \"type\", \n                CATEGORY as \"category\",\n                DES as \"description\",\n                REF_DEP_PROFILE as \"depositProfileId\",  \n                REF_LON_PROFILE as \"loanProfileId\",\n                REF_BRN_PROFILE AS \"branchProfileId\",\n                REF_CUS_PROFILE AS \"customerProfileId\",\n                REF_LEDGER_PROFIEL AS \"ledgerProfileId\",\n                REF_TIMING_PROFILE AS \"timingProfileId\",\n                REF_CUR_PROFILE AS \"currencyProfileId\",\n                FIRST_DATE AS \"firstDate\",\n                LAST_DATE AS \"lastDate\"\n                FROM PRAGG.TBL_REPORT where ID = ' || V_REPORT;--report id\n      END IF;\n    ELSIF V_INFOTYPE = 'dddrDepositType' THEN \n      R_QUERY := PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_DEPOSIT_TYPE();\n    ELSIF V_INFOTYPE = 'ddltLoanType' THEN \n      R_QUERY := PKG_DUE_DATE_LOAN_TYPE.FNC_DDLT_loan_type();\n    END IF;\n\n  RETURN R_QUERY;\n  END FNC_REPORT_INFO;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\nEND PKG_API;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_API\" AS \n\n  /* \n  @AUTHOR MYM\n  @DATE 1397-11-16\n  @WHAT This package play as an interface role for interaction between UI-team and DB-taem.\n        all pssible actions can categorize to following cats.\n        these actions are only for reports\n  */ \n\n  PROCEDURE PRC_REPORT_CREATE(I_JSON clob, O_FAKE OUT VARCHAR2);\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_DELETE(\n   I_JSON IN VARCHAR2\n  ,O_FAKE OUT NUMBER\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_NOTIFICATION(\n    I_JSON IN VARCHAR2, O_FAKE OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_REQUEST(\n    i_json varchar2, o_fake OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_SHOW(\n    I_JSON IN VARCHAR2\n  ) RETURN CLOB;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_LIST(\n   I_json varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_INFO(\n    i_json IN varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  \nEND PKG_API;"},{"Name":"PKG_API","ObjectID":308224,"Digest":"6d933179108928adb03b9cec6181ae3d9c2a11cc26cb8ed583a51f8c34d9b998","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_API\" AS \n\n  /* \n  @AUTHOR MYM\n  @DATE 1397-11-16\n  @WHAT This package play as an interface role for interaction between UI-team and DB-taem.\n        all pssible actions can categorize to following cats.\n        these actions are only for reports\n  */ \n\n  PROCEDURE PRC_REPORT_CREATE(I_JSON clob, O_FAKE OUT VARCHAR2);\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_DELETE(\n   I_JSON IN VARCHAR2\n  ,O_FAKE OUT NUMBER\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_NOTIFICATION(\n    I_JSON IN VARCHAR2, O_FAKE OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_REQUEST(\n    i_json varchar2, o_fake OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_SHOW(\n    I_JSON IN VARCHAR2\n  ) RETURN CLOB;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_LIST(\n   I_json varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_INFO(\n    i_json IN varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  \nEND PKG_API;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_API\" AS\n\n  PROCEDURE PRC_REPORT_CREATE(I_JSON clob, O_FAKE OUT VARCHAR2) AS\n    V_INSERT_UPDATE VARCHAR2(20);\n    V_JSON JSON;\n    V_TYPE VARCHAR2(50);\n    V_CATEGORY VARCHAR2(50);\n    V_FAKE number;\n    V_ERR_CODE VARCHAR2(50);\n    V_ERR_MSG VARCHAR2(1000);\n    V_OTHER VARCHAR2(500);\n    \nBEGIN\n  -- CHECK IF REPORT NAME IS EXIST\n  V_JSON := JSON(I_JSON);  \n  V_TYPE := json_ext.get_string(v_json, 'type');\n  V_CATEGORY := json_ext.get_string(v_json, 'category');\n  V_OTHER := json_ext.get_string(v_json, 'other');\n\n  IF (UPPER(json_ext.get_string(v_json, 'insertOrUpdate')) = 'INSERT') THEN\n    V_INSERT_UPDATE := 0;\n  ELSE \n    V_INSERT_UPDATE := 1;\n  END IF;\n  \n  IF V_OTHER IS NULL THEN\n      IF (V_TYPE = 'aes')THEN \n        DYNAMIC_LQ.PKG_AES.PRC_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user') , json_ext.get_string(v_json, 'profileDep') ,json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'type') , json_ext.get_string(v_json, 'status'), V_INSERT_UPDATE , json_ext.get_string(v_json, 'id'), o_fake);  \n      ELSIF (V_TYPE = 'idps')THEN \n        PRAGG.PKG_IDPS.PRC_IDPS_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'branch'), json_ext.get_string(v_json, 'startDate'), json_ext.get_string(v_json, 'endDate'), json_ext.get_string(v_json, 'duration'),  v_insert_update, json_ext.get_string(v_json, 'id'), json_ext.get_string(v_json, 'type'), o_fake);\n      ELSIF (V_TYPE = 'duedate_loan') then\n        PRAGG.PKG_DUE_DATE_LOAN.PRC_DUE_DATE_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'timingProfile'), v_insert_update, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'dateType'), o_fake);\n      ELSIF (V_TYPE = 'duedate') then\n        PRAGG.PKG_DUE_DATE.PRC_DUE_DATE_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'timingProfile'), v_insert_update, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'dateType'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'rial') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'currency') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'composite') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'rialBranch') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'currencyBranch') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF ((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND V_TYPE = 'compositeBranch') THEN -- INSERT OR UPDATE: DUAL STANDARD BY SOBHAN AND SOHA\n        PRAGG.PRC_REPORT_PROFILE( -1*V_INSERT_UPDATE+1, json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), sysdate, json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), json_ext.get_string(v_json, 'ledgerProfile'), json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'dateType'), json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon') ,json_ext.get_string(v_json, 'profileBrn'), json_ext.get_string(v_json, 'customerProfile'), json_ext.get_string(v_json, 'currencyProfile'), v_type, v_category, json_ext.get_string(v_json, 'liken'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('dddr') AND UPPER(V_TYPE) = UPPER('dddr')) THEN\n        PKG_DUE_DATE_DEPOSIT_RATE.PRC_DDDR_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), V_INSERT_UPDATE, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'firstDate'), json_ext.get_string(v_json, 'lastDate'), json_ext.get_string(v_json, 'tree'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('ddlt') AND UPPER(V_TYPE) = UPPER('ddlt')) THEN\n        PKG_DUE_DATE_LOAN_TYPE.PRC_ddlt_REP_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'), V_INSERT_UPDATE, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'firstDate'), json_ext.get_string(v_json, 'lastDate'), json_ext.get_string(v_json, 'tree'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('duration2') AND UPPER(V_TYPE) = UPPER('duration2')) THEN --diresh\n        PKG_DU_GAP_PROF.PRC_DU_GAP_PROF_PROFILE_REPORT(json_ext.get_string(v_json, 'name'), json_ext.get_string(v_json, 'des'), json_ext.get_string(v_json, 'user'), json_ext.get_string(v_json, 'status'),  json_ext.get_string(v_json, 'depositProfile'), json_ext.get_string(v_json, 'profileLon'), json_ext.get_string(v_json, 'customerProfile'), V_INSERT_UPDATE, json_ext.get_string(v_json, 'id'), v_type, json_ext.get_string(v_json, 'firstDate'), json_ext.get_string(v_json, 'changeRate'),  json_ext.get_string(v_json, 'tahlilHassasiat'),   json_ext.get_string(v_json, 'tasirHassasiat'), o_fake);\n      ELSIF (UPPER(V_CATEGORY) = UPPER('GAP_NIIM') AND UPPER(V_TYPE) = UPPER('GAP_NIIM')) THEN --gapNiim\n        PKG_GAP_NIIM.PRC_GAP_NIIM_PROFILE_REPORT(json_ext.get_string(v_json, 'name'),json_ext.get_string(v_json, 'des'),json_ext.get_string(v_json, 'user'),json_ext.get_string(v_json, 'status'),v_insert_update,json_ext.get_string(v_json, 'id'),v_type,json_ext.get_string(v_json, 'timingProfile'),json_ext.get_string(v_json, 'depositProfile'),json_ext.get_string(v_json, 'profileLon'),json_ext.get_string(v_json, 'customerProfile'),json_ext.get_string(v_json, 'currencyProfile'),json_ext.get_string(v_json, 'profileBrn'),json_ext.get_string(v_json, 'dateType'),json_ext.get_string(v_json, 'tahlilHassassiat'),json_ext.get_string(v_json, 'tasirHassassiat'),o_fake);\n      END IF;\n  ELSE\n    AKIN.PRC_SHIVE_NEGASHT(json_ext.get_string(v_json, 'ledgerCode'), json_ext.get_string(v_json, 'onem'), json_ext.get_string(v_json, 'from1to3m'), json_ext.get_string(v_json, 'from3to12m'), json_ext.get_string(v_json, 'from1to5y'), json_ext.get_string(v_json, 'g5y'), json_ext.get_string(v_json, 'outOfStream'), O_FAKE);\n  END IF;\n  COMMIT;\n  \n  \n  \n  -- EXCEPTION HANDLING AREA\n  EXCEPTION \n    WHEN OTHERS THEN\n      V_err_code := SQLCODE;\n      V_err_msg := SQLERRM;--err_msg := SUBSTR(SQLERRM, 1, 200);\n      INSERT INTO TBL_LOG_ERROR(CODE, MESSAGE, RELEASE_POINT)\n      VALUES(V_err_code, V_err_msg, $$plsql_unit);\n      --RAISE I_AM_SORRY;\n  \nEND PRC_REPORT_CREATE;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_DELETE(\n   I_JSON IN VARCHAR2\n  ,O_FAKE OUT NUMBER\n  ) AS\n   V_TYPE VARCHAR2(50);\n   V_JSON JSON;\n  BEGIN\n    V_JSON := JSON(I_JSON);  \n    V_TYPE := json_ext.get_string(v_json, 'type');\n    \n    DELETE FROM TBL_REPORT WHERE ID = json_ext.get_string(v_json, 'repReq');\n    \n    IF V_TYPE = 'idps' THEN\n      DELETE FROM TBL_IDPS_REP_PROFILE_DETAIL WHERE REF_REPORT = json_ext.get_string(v_json, 'repReq');\n    END IF;\n    \n  END PRC_REPORT_DELETE;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_NOTIFICATION(\n    I_JSON VARCHAR2, O_FAKE OUT VARCHAR2\n  )AS\n  \n  INPAR_OPT_TYPE  VARCHAR2(20);\n  INPAR_ID VARCHAR2(100);\n INPAR_TYPE VARCHAR2(100);\n INPAR_class VARCHAR2(100);\n INPAR_TITLE VARCHAR2(100);\n INPAR_STATUS VARCHAR2(100);\n INPAR_USER_ID VARCHAR2(100);\n INPAR_DESCRIPTION VARCHAR2(100);\n INPAR_REF_REPORT VARCHAR2(100);\n INPAR_REF_REPREQ VARCHAR2(100);\n INPAR_REF_REPPER_DATE VARCHAR2(100);\n inpar_flag VARCHAR2(100);\n OUTPAR_STATUS VARCHAR2(1000);\n  v_json json;\nBEGIN\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:anjam amaliyat hay lazem baray darj - beroz resani - hazf va daryaft elanat\n  */\n  --------------------------------------------------------------------------------\n  v_json := json(i_json);\n  INPAR_OPT_TYPE := json_ext.get_string(v_json, 'optType');\n  INPAR_ID := json_ext.get_string(v_json, 'id');\n INPAR_TYPE := json_ext.get_string(v_json, 'type');\n INPAR_class := json_ext.get_string(v_json, 'class');\n INPAR_TITLE := json_ext.get_string(v_json, 'title');\n INPAR_STATUS := json_ext.get_string(v_json, 'status');\n INPAR_USER_ID := json_ext.get_string(v_json, 'user');\n INPAR_DESCRIPTION := json_ext.get_string(v_json, 'des');\n INPAR_REF_REPORT := json_ext.get_string(v_json, 'report');\n INPAR_REF_REPREQ := json_ext.get_string(v_json, 'repReq');\n INPAR_REF_REPPER_DATE := json_ext.get_string(v_json, 'repPerDate');\n inpar_flag := json_ext.get_string(v_json, 'flag');\n \n\n\nIF INPAR_OPT_TYPE = 'insert' THEN \n  --=======INSERT================ Darj yek elan jadid.\nINSERT\nINTO TBL_NOTIFICATIONS\n  (\n   \n    TITLE,\n    TYPE,\n    class,\n    REF_USER,\n    START_TIME,\n    STATUS,\n    DESCRIPTION,\n    REF_REPORT\n  )\n  VALUES\n  (\n   \n    INPAR_TITLE,\n    INPAR_TYPE,\n    INPAR_class,\n    INPAR_USER_ID,\n    sysdate,\n    'progress',\n    INPAR_DESCRIPTION,\n    INPAR_REF_REPORT\n  );\n    Commit;\n\n  select max(id) into O_FAKE from TBL_NOTIFICATIONS;\n  Commit;\n END IF; \n \nIF INPAR_OPT_TYPE = 'update' THEN \n  --=======UPDATE================Berozresani yek elan mojod.\n   UPDATE TBL_NOTIFICATIONS\n   SET STATUS           =INPAR_STATUS \n   , END_TIME = sysdate \n   , REF_REPREQ = INPAR_REF_REPREQ\n   , REF_REPPER_DATE = INPAR_REF_REPPER_DATE\n   , flag = inpar_flag\n   WHERE ID        = INPAR_ID\n   ;\n   Commit;\n END IF; \n\nIF INPAR_OPT_TYPE = 'delete' THEN\n  --=======DELETE================  Haz yek elan mojod.\n  DELETE\n  FROM TBL_NOTIFICATIONS\n  WHERE ID        = INPAR_ID;\n  Commit;\nEND IF;\n\nIF INPAR_OPT_TYPE = 'check' THEN\n  --=======CHECK STATUS================  Bargardandan tamimi vaziyat yek elan mojod.\n  SELECT \n  STATUS\n  into O_FAKE\n  FROM TBL_NOTIFICATIONS\n  \n  where ID = INPAR_ID;\nCommit;\nEND IF;\n\n\nIF INPAR_OPT_TYPE = 'getall' THEN\n  --=======GET ALL================ Bargardandan tamami elanat mojod. \n  SELECT \n  'SELECT ID as \"id\",\n  TITLE  as \"title\",\n  TYPE as \"type\",\n  class as \"class\",\n  REF_USER  as \"user\",\n  to_char(START_TIME,''yyyy/MM/dd'') as \"startTime\",\n  to_char(END_TIME,''yyyy/mm/dd'') as \"endTime\",\n    STATUS as \"status\",\n  DESCRIPTION as \"des\"\n  ,ref_repreq as \"ref\"\n  ,ref_repper_date as \"perDate\"\n  ,REF_REPORT as \"refReport\"\n  , flag as \"changed\"\nFROM TBL_NOTIFICATIONS\norder by START_TIME desc\n'\n\n  into O_FAKE\n  FROM dual;\n  \n\nEND IF;\n\n   IF (INPAR_OPT_TYPE = 'visited') then\n \n update pragg.TBL_NOTIFICATIONS set STATUS='visited' ,flag = 0 where id=INPAR_ID;\n commit;\n \n end if;\n \n  \n  END PRC_REPORT_NOTIFICATION;\n  \n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_REQUEST(\n    i_json varchar2, \n    o_fake OUT VARCHAR2\n  ) AS\n  I_REPORT   NUMBER;\n  I_USER     VARCHAR2(50);\n  I_NOTIFICATION    NUMBER;\n  VAR_REP_REQ_ID        NUMBER;\n VAR_NOTIF_ID          VARCHAR2(50);\n VAR_REPPER_DATE       DATE;\n VAR_INPAR_REPORT_ID   NUMBER;\n V_R                   NUMBER;\n LOC_MEGHDAR           VARCHAR2(4000);\n VAR_TYPE              VARCHAR2(200);\n v_json json;\n begin\n    v_json := json(i_json);\n    i_report := json_ext.get_string(v_json, 'refReport');\n    i_user := json_ext.get_string(v_json, 'refUser');\n    i_notification := json_ext.get_string(v_json, 'refNotification');\n\n/*yaftane id gozaresh az jadval gozareshat*/\n SELECT\n  MAX(ID)\n INTO\n  VAR_INPAR_REPORT_ID\n FROM TBL_REPORT\n WHERE H_ID   = (\n   SELECT\n    H_ID\n   FROM TBL_REPORT\n   WHERE ID   = I_REPORT\n  )\n GROUP BY\n  H_ID;\n\n/* darj yek darkhast gozaresh jadid dar jadval TBL_REP_REQ*/\n\n INSERT INTO TBL_REPREQ (\n  REF_REPORT_ID\n ,REF_USER_ID\n ,REQ_DATE\n ,STATUS\n ,REF_LEDGER_PROFILE\n ,REF_PROFILE_TIME\n ,REF_PROFILE_CURRENCY\n ,REF_PROFILE_CUSTOMER\n ,REF_PROFILE_BRANCH\n ,REF_PROFILE_DEPOSIT\n ,REF_PROFILE_LOAN\n ,REF_HID_REPORT\n ,TYPE\n ,CATEGORY\n ) VALUES (\n  VAR_INPAR_REPORT_ID\n ,i_user\n ,SYSDATE\n ,0\n ,(\n   SELECT\n    REF_LEDGER_PROFILE\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_TIME\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_CURRENCY\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_CUSTOMER\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_BRANCH\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_DEPOSIT\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    REF_PROFILE_LOAN\n   FROM TBL_REPORT_PROFILE\n   WHERE REF_REPORT   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    H_ID\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    TYPE\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n ,(\n   SELECT\n    CATEGORY\n   FROM TBL_REPORT\n   WHERE ID   = VAR_INPAR_REPORT_ID\n  )\n );\n\n COMMIT;\n  \n  /*yaftan id darkhast ijad shode*/\n SELECT\n  MAX(ID)\n INTO\n  VAR_REP_REQ_ID\n FROM TBL_REPREQ;\n  /*--------------------------*/\n\n SELECT\n  TYPE\n INTO\n  VAR_TYPE\n FROM TBL_REPORT\n WHERE ID   = VAR_INPAR_REPORT_ID;\n\n  IF( VAR_TYPE = 'duedate' )THEN\n    PKG_DUE_DATE.PRC_DUE_DATE_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'idps' or VAR_TYPE = 'IDPS' ) THEN-- until next announcement\n    PKG_IDPS.PRC_IDPS_REP_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( upper(VAR_TYPE) = 'COM2' ) THEN\n    PKG_COM.PRC_COM_direct_cost(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'LCR' ) THEN\n    PKG_LCR.PRC_LCR_REP_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'duedate_loan' ) THEN\n    PKG_DUE_DATE_LOAN.PRC_DUE_DATE_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'NOP' ) THEN\n    PKG_NOP.PRC_REPORT_VALUE_NOP(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DDDR' ) THEN\n    PKG_DUE_DATE_DEPOSIT_RATE.PRC_DDDR_GET_DETAIL(VAR_INPAR_REPORT_ID);\n  ELSIF ( VAR_TYPE = 'GAP_NIIM' ) THEN\n    PKG_GAP_NIIM.PRC_GAP_NIIM_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DDLT' ) THEN\n    PKG_DUE_DATE_LOAN_TYPE.prc_DDLT_GET_DETAIL(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'COMSTAT' ) THEN\n    pkg_comparative_statistic.PRC_com_stat_report_value(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'CRINDEX' ) THEN\n    pkg_creditRisk_branch_index.PRC_cr_br_index_report_value(VAR_INPAR_REPORT_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'DEPOSIT' ) THEN -- CAT: WES\n    DYNAMIC_LQ.pkg_WES.PRC_DEP_REPORT_VALUE(VAR_INPAR_REPORT_ID, VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'LOAN' ) THEN -- CAT: WES\n    DYNAMIC_LQ.pkg_WES.PRC_DEP_REPORT_VALUE(VAR_INPAR_REPORT_ID, VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = 'SHOCK' ) THEN\n    pkg_shock.PRC_shock_report_value(VAR_INPAR_REPORT_ID); \n  ELSIF ( UPPER(VAR_TYPE) = 'SENSANALYSIS' ) THEN\n    pkg_sensivity_analysis_test.PRC_SENS_ANALYSIS_REP_VALUE(VAR_INPAR_REPORT_ID); \n  ELSIF ( UPPER(VAR_TYPE) = 'DURATION2' ) THEN\n    PKG_DU_GAP_PROF.PRC_DU_GAP_PROF_REPORT_VALUE(VAR_INPAR_REPORT_ID,VAR_REP_REQ_ID);--PRC_DU_GAP_PROF_REPORT_VALUE\n      ELSIF ( UPPER(VAR_TYPE) = 'CAR' ) THEN\n    PKG_CAR.PRC_CAR_FINAL_REPORT(VAR_INPAR_REPORT_ID,VAR_REP_REQ_ID);\n  ELSIF ( UPPER(VAR_TYPE) = '107' ) THEN\n    DYNAMIC_LQ.PRC_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n    DYNAMIC_LQ.PRC_AGGREGATION(VAR_REP_REQ_ID);\n  ELSIF (UPPER(VAR_TYPE)= 'AES') THEN\n    DYNAMIC_LQ.PKG_AES.PRC_REPORT_VALUE(VAR_REP_REQ_ID);\n ELSE\n  \n  /*ejra prasijer baray filter kardan dadeh hay gozersh*/\n  PRC_REPORT_VALUE(VAR_INPAR_REPORT_ID);\n  \n  /*ejra tajmi*/\n  PRC_AGGREGATION(VAR_REP_REQ_ID);\n  \n  /*PRC_GET_QUERY_REPORT(var_Rep_Req_ID,var_report_name);*/\n END IF;\n  \n  /*berozresani vaziat gozaresh be payan yafte dar jadval darkhastha */\n\n UPDATE TBL_REPREQ\n  SET\n   STATUS = 1\n WHERE ID   = VAR_REP_REQ_ID;\n\n COMMIT;\n  \n /* prc_liken(to_date('15-NOV-17'));*/\n  /*berozresani elanat*/\n PRC_NOTIFICATION(\n  'update'\n ,i_notification\n ,''\n ,''\n ,''\n ,'finished'\n ,0\n ,''\n ,0\n ,VAR_REP_REQ_ID\n ,''\n ,'0'\n ,VAR_NOTIF_ID\n );\n  \n  /*khoroji alaki, jeddi nagir*/\n\n o_fake   := VAR_NOTIF_ID;\nEXCEPTION\n WHEN OTHERS THEN\n  LOC_MEGHDAR   := SQLERRM;\n  PRC_NOTIFICATION(\n   'update'\n  ,i_notification\n  ,''\n  ,''\n  ,''\n  ,'error '|| LOC_MEGHDAR\n  ,0\n  ,''\n  ,0\n  ,VAR_REP_REQ_ID\n  ,''\n  ,'1'\n  ,VAR_NOTIF_ID\n  );\n  o_fake := -1;\n  COMMIT;\n  DELETE FROM TBL_REPREQ WHERE ID   = VAR_REP_REQ_ID;\n\n  COMMIT;\n  LOC_MEGHDAR   := SQLERRM;\n  UPDATE TBL_NOTIFICATIONS\n   SET\n    ERROR = LOC_MEGHDAR\n  WHERE ID   = i_notification;\n\n  COMMIT;\n/*     INSERT INTO TABLE1 (P) VALUES (LOC_MEGHDAR);*/\n/*       LOC_MEGHDAR := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;*/\n/*       INSERT INTO TABLE1 (P) VALUES (LOC_MEGHDAR);*/\n  END PRC_REPORT_REQUEST;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_SHOW(\n    I_JSON IN VARCHAR2\n  ) RETURN CLOB AS\n  r_query CLOB;\n  v_category varchar2(200);\n  v_type varchar2(200);\n  v_report varchar2(200);\n  V_REPREQ VARCHAR2(200);\n  V_SHOWTYPE VARCHAR2(500);\n  V_JSON JSON;\nBEGIN\n  V_JSON := JSON(I_JSON);\n  v_repreq := json_ext.get_string(v_json, 'repReq');\n  V_SHOWTYPE := json_ext.get_string(v_json, 'showType');\n  -- GET REPORT ID OF THIS REPORT REQUEST\n  IF V_REPREQ IS NOT NULL THEN -- ~FOR REPREQLESS REPORTS\n    SELECT REF_REPORT_ID INTO V_REPORT\n    FROM TBL_REPREQ\n    WHERE ID = v_REPREQ;\n    -- GET TYPE \u0026 CAT OF THIS REPORT\n    SELECT CATEGORY, TYPE\n    INTO V_CATEGORY, V_TYPE\n    FROM TBL_REPORT\n    WHERE ID = V_REPORT;\n  END IF;\n  \n  R_QUERY := 'NO MATCH!';\n  -- RETURN CORESPONDING QUERY FOR SHOWING REPORT RESULT\n  IF V_TYPE = '107' THEN \n    R_QUERY := DYNAMIC_LQ.FNC_GET_QUERY_REPORT(v_REPREQ);\n  ELSIF V_CATEGORY = 'WES' AND V_TYPE = 'deposit' THEN  \n    R_QUERY := DYNAMIC_LQ.PKG_WES.FNC_GET_DEP_VALUE(v_REPREQ);\n  ELSIF V_CATEGORY = 'AES'  THEN \n    R_QUERY := DYNAMIC_LQ.PKG_AES.FNC_GET_ALL_STREAMS(v_REPREQ);\n  ELSIF V_CATEGORY = 'idps' OR V_CATEGORY = 'IDPS' THEN\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'column' THEN PKG_IDPS.FNC_IDPS_GET_DETAIL_NAME(V_REPREQ)\n                    ELSE PKG_IDPS.FNC_IDPS_FINAL_RESULT(V_REPREQ, json_ext.get_string(v_json, 'function')) \n               END;\n    ELSIF V_TYPE = 'duedate_loan' THEN\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'tree'    THEN PRAGG.PKG_DUE_DATE_LOAN.FNC_DUE_DATE_GET_TREE()\n                    WHEN V_SHOWTYPE = 'leaf'    THEN PRAGG.PKG_DUE_DATE_LOAN.FNC_DUE_DATE_GET_LEAF(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detail'  THEN PRAGG.PKG_DUE_DATE_LOAN.FNC_DUE_DATE_GET_DETAIL(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'type'))\n                    WHEN V_SHOWTYPE = 'column'  THEN PRAGG.FNC_GET_DETAIL_TIMING (json_ext.get_string(v_json, 'repReq'))\n               END;\n  ELSIF V_TYPE = 'duedate' THEN\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'tree'    THEN PRAGG.PKG_DUE_DATE.FNC_DUE_DATE_GET_TREE()\n                    WHEN V_SHOWTYPE = 'leaf'    THEN PRAGG.PKG_DUE_DATE.FNC_DUE_DATE_GET_LEAF(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detail'  THEN PRAGG.PKG_DUE_DATE.FNC_DUE_DATE_GET_DETAIL(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'type'))\n                    WHEN V_SHOWTYPE = 'column'  THEN PRAGG.FNC_GET_DETAIL_TIMING (json_ext.get_string(v_json, 'repReq'))\n               END;\n   ELSIF((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND (V_TYPE = 'rial' OR V_TYPE = 'currency' OR V_TYPE = 'composite' OR V_TYPE = 'compositeBranch' OR V_TYPE = 'rialBranch' OR V_TYPE = 'currencyBranch')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'gap'     THEN PRAGG.GET_QUERY_GAP(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'column'  THEN FNC_GET_DETAIL_TIMING(json_ext.get_string(v_json, 'repReq'))\n                    ELSE fnc_GET_QUERY_REPORT_II(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'curType'))\n               END;\n  ELSIF(upper(V_CATEGORY) = upper('dddr') AND upper(V_TYPE) = upper('dddr')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'detailChild' THEN PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_GET_detail_child(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detailTree'  THEN PKG_DUE_DATE_DEPOSIT_RATE.fnc_dddr_get_tree_detail(V_REPORT)\n                    WHEN V_SHOWTYPE = 'count'       THEN PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_GET_count(json_ext.get_string(v_json, 'repReq'))\n               END;\n  ElSIF(UPPER(V_CATEGORY) = UPPER('ddlt') AND UPPER(V_TYPE) = UPPER('ddlt')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'detailChild'            THEN PKG_DUE_DATE_LOAN_TYPE.FNC_DDLT_GET_detail_child(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'detailTree'             THEN PKG_DUE_DATE_LOAN_TYPE.fnc_DDLT_get_tree_detail(V_REPORT)\n                    WHEN V_SHOWTYPE = 'count'                  THEN PKG_DUE_DATE_LOAN_TYPE.fnc_DDLT_GET_count(json_ext.get_string(v_json, 'repReq'))\n               END;\n  ELSIF(UPPER(V_CATEGORY) = UPPER('duration2') AND UPPER(V_TYPE) = UPPER('duration2')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'durationGapProfile'            THEN pkg_du_gap_prof.fnc_get_DU_GAP_PROF(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'durationGapType'))\n                    WHEN V_SHOWTYPE = 'durationGapProfileSens'        THEN pkg_du_gap_prof.fnc_get_DU_GAP_PROF_sens(json_ext.get_string(v_json, 'repReq'), json_ext.get_string(v_json, 'durationGapType'))\n               END;\n  ELSIF(UPPER(V_CATEGORY) = UPPER('GAP_NIIM') AND UPPER(V_TYPE) = UPPER('GAP_NIIM')) THEN \n    R_QUERY := CASE WHEN V_SHOWTYPE = 'reportQuery'           THEN  PKG_GAP_NIIM.FNC_GAP_NIIM_GET_REPORT_QUERY(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'timingDetail'          THEN PKG_GAP_NIIM.FNC_GAP_NIIM_GET_DETAIL_TIMING(json_ext.get_string(v_json, 'repReq'))\n                    WHEN V_SHOWTYPE = 'reportSens'            THEN PKG_GAP_NIIM.FNC_GAP_NIIM_GET_REPORT_sens(json_ext.get_string(v_json, 'repReq'))\n               END;\n  ELSE -- without repreq\n    R_QUERY := CASE WHEN V_SHOWTYPE = 'concRegion'                 THEN PKG_CONC.FNC_GET_REGION ()\n                    WHEN V_SHOWTYPE = 'concTop100'                 THEN PKG_CONC.FNC_GET_TOP100_CUSTOMER(json_ext.get_string(v_json, 'reg'))\n                    WHEN V_SHOWTYPE = 'concTop100Detail'           THEN PKG_CONC.FNC_GET_TOP100_CUSTOMER_DETAIL(json_ext.get_string(v_json, 'reg'))\n                    WHEN V_SHOWTYPE = 'concPageNumber'             THEN pkg_conc.FNC_PAGE_NUMBER(json_ext.get_string(v_json, 'pageSize'))\n                    WHEN V_SHOWTYPE = 'concStateReport'            THEN pkg_conc.FNC_CONC_STATE_REPORT()\n                    WHEN V_SHOWTYPE = 'concMainReport'             THEN pkg_conc.FNC_CONC_MAIN_REPORT()\n                    WHEN V_SHOWTYPE = 'concStateDetailReport'      THEN pkg_conc.FNC_CONC_STATE_DETAIL_REPORT(json_ext.get_string(v_json, 'state'))\n                    WHEN V_SHOWTYPE = 'ledgerReport'               THEN FNC_GET_LEDGER_REPORT(json_ext.get_string(v_json, 'date'), json_ext.get_string(v_json, 'currency'))\n                    WHEN V_SHOWTYPE = 'dueDateForm'                THEN akin.FNC_GET_DUE_DATE_FORM()\n                    WHEN V_SHOWTYPE = 'NOPResult'                  THEN PKG_NOP_SIMPLE.FNC_NOP_RESULT(json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'NOPSimpleTree'              THEN PKG_NOP_SIMPLE.FNC_NOP_simple_tree()\n                    WHEN V_SHOWTYPE = 'NOPDetial'                  THEN pkg_nop_simple.FNC_NOP_GET_DETAIL_NAME(json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'NOPResultGold'              THEN pkg_nop_simple.FNC_NOP_RESULT_gold(json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'ledgerAvailableDates'       THEN FNC_GET_LEDGER_AVA_DATES()\n                    WHEN V_SHOWTYPE = 'costumerConcAvailableDates' THEN PKG_CUSTOMER_CONC.FNC_GET_AVAILABLE_DATE()\n                    WHEN V_SHOWTYPE = 'costumerConcFinalResult'    THEN PKG_CUSTOMER_CONC.FNC_CUSTOMER_CONC_FINAL_RESULT(json_ext.get_string(v_json, 'date'),json_ext.get_string(v_json, 'modalityType'))\n                    WHEN V_SHOWTYPE = 'ledgerBranch'               THEN FNC_GET_REPORT_LEDGER_BRANCH(json_ext.get_string(v_json, 'branches'),json_ext.get_string(v_json, 'date'))\n                    WHEN V_SHOWTYPE = 'currencyCompare'            THEN PKG_BALANCE_SHEET.FNC_COMPARE_BALANCE_SHEET(json_ext.get_string(v_json, 'date1'),json_ext.get_string(v_json, 'currency1'),json_ext.get_string(v_json, 'date2'),json_ext.get_string(v_json, 'currency2'))\n                    WHEN V_SHOWTYPE = 'branchCompare'              THEN PKG_BRANCH_BALANCE_SHEET.FNC_COMPARE_BRANCH_BR_SHEET(json_ext.get_string(v_json, 'date1'),json_ext.get_string(v_json, 'branch1'),json_ext.get_string(v_json, 'date2'),json_ext.get_string(v_json, 'branch2'))\n                   ELSE  'NO MATCH'\n               END;\n  END IF;\n  \n  \n  RETURN R_QUERY;\n  \nEND FNC_REPORT_SHOW;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_LIST(\n  I_JSON VARCHAR2   \n  ) RETURN VARCHAR2 AS\n  R_QUERY VARCHAR2(1000);\n  V_JSON JSON;\n  BEGIN\n    V_JSON := JSON(I_JSON);\n    R_Query := FNC_GET_REPORT_LIST(json_ext.get_string(v_json, 'category'), json_ext.get_string(v_json, 'type'));\n    \n  return R_QUERY;\n  END FNC_REPORT_LIST;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_INFO(\n    i_json varchar2\n  ) RETURN VARCHAR2 AS\n   R_QUERY VARCHAR2(32000);\n   v_json json;\n   V_TYPE VARCHAR2(100);\n   V_CATEGORY VARCHAR2(100);\n   V_REPORT VARCHAR2(500);\n   V_INFOTYPE VARCHAR2(200);\n  VAR    VARCHAR2(32000);\nBEGIN\n  V_JSON := json(i_json);\n  V_REPORT := json_ext.get_string(v_json, 'id');--report\n  V_INFOTYPE := json_ext.get_string(v_json, 'infoType');\n\n  \n  IF V_REPORT IS NOT NULL THEN\n    SELECT TYPE, CATEGORY INTO V_TYPE, V_CATEGORY\n    FROM TBL_REPORT\n    WHERE ID = V_REPORT;\n  \n    IF UPPER(V_TYPE) = 'IDPS' THEN \n      R_QUERY := PKG_IDPS.FNC_IDPS_GET_REPORT_INFO(V_REPORT);\n    ELSIF V_TYPE = 'duedate' OR V_TYPE = 'duedate_loan' THEN\n      R_QUERY := FNC_GET_REPORT_PROFILE(V_REPORT);\n    ELSIF((V_CATEGORY = 'gap' or V_CATEGORY = 'liquidity') AND (V_TYPE = 'rial' OR V_TYPE = 'currency' OR V_TYPE = 'composite' OR V_TYPE = 'compositeBranch' OR V_TYPE = 'rialBranch' OR V_TYPE = 'currencyBranch')) THEN \n      R_QUERY := FNC_GET_REPORT_PROFILE(V_REPORT);\n    ELSIF(V_CATEGORY = 'GAP_NIIM' or V_TYPE = 'GAP_NIIM') THEN\n      R_QUERY := 'SELECT ID as \"id\",\n                  NAME as \"name\",\n                  DES as \"description\",\n                  CREATE_DATE as \"createDate\",\n                  REF_USER as \"refUser\",\n                  STATUS as \"status\",\n                  CATEGORY as \"category\",\n                  ref_timing_profile as \"dateProfileId\",\n                  ref_dep_profile as \"depositProfileId\",\n                  ref_lon_profile as \"loanProfileId\",\n                  ref_cus_profile as \"customerProfileId\",\n                  ref_cur_profile as \"currencyProfileId\",\n                  ref_brn_profile as \"branchProfileId\",\n                  timing_profile_type as \"dateType\",\n                  REF_LEDGER_PROFIEL as \"tahlilHassassiat\",\n                  first_date as \"tasirHassassiat\"\n                 FROM TBL_REPORT \n                where id = '\n                || v_report || ' and upper(category) = ''GAP_NIIM'' order by id';\n    ELSIF(V_CATEGORY = 'duration2' or V_TYPE = 'duration2') THEN\n    --dar sistem qabli farq dASt: refLoan=loanProfileId\n    --barAye hamin bAznevisi Sod\n      R_QUERY :=  'SELECT ID as \"id\",\n                          NAME as \"name\",\n                          DES as \"description\",\n                          FIRST_DATE as \"firstDate\",\n                          CREATE_DATE as \"createDate\",\n                          REF_USER as \"refUser\",\n                          STATUS as \"status\",\n                          CATEGORY as \"category\",\n                          ref_dep_profile as \"depositProfileId\"\n                                        ,REF_LON_PROFILE as \"loanProfileId\"\n                                        ,REF_CUS_PROFILE as \"customerProfileId\"--DAR SYSTEM GHABLI FARGH DASHT : refLoan\n                                        ,bazeh as \"changeRate\",\n                                        REF_BRN_PROFILE as \"tahlilHasasiat\"\n                                        ,REF_TIMING_PROFILE as \"tasir\"\n                          FROM TBL_REPORT \n                          where id = '|| V_REPORT || ' and upper(category) = ''DURATION2''';\n    ELSE \n    R_QUERY := 'SELECT   \n                ID as \"id\",  \n                NAME as \"name\",  \n                TYPE as \"type\", \n                CATEGORY as \"category\",\n                DES as \"description\",\n                REF_DEP_PROFILE as \"depositProfileId\",  \n                REF_LON_PROFILE as \"loanProfileId\",\n                REF_BRN_PROFILE AS \"branchProfileId\",\n                REF_CUS_PROFILE AS \"customerProfileId\",\n                REF_LEDGER_PROFIEL AS \"ledgerProfileId\",\n                REF_TIMING_PROFILE AS \"timingProfileId\",\n                REF_CUR_PROFILE AS \"currencyProfileId\",\n                FIRST_DATE AS \"firstDate\",\n                LAST_DATE AS \"lastDate\"\n                FROM PRAGG.TBL_REPORT where ID = ' || V_REPORT;--report id\n      END IF;\n    ELSIF V_INFOTYPE = 'dddrDepositType' THEN \n      R_QUERY := PKG_DUE_DATE_DEPOSIT_RATE.FNC_DDDR_DEPOSIT_TYPE();\n    ELSIF V_INFOTYPE = 'ddltLoanType' THEN \n      R_QUERY := PKG_DUE_DATE_LOAN_TYPE.FNC_DDLT_loan_type();\n    END IF;\n\n  RETURN R_QUERY;\n  END FNC_REPORT_INFO;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\nEND PKG_API;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_API\" AS \n\n  /* \n  @AUTHOR MYM\n  @DATE 1397-11-16\n  @WHAT This package play as an interface role for interaction between UI-team and DB-taem.\n        all pssible actions can categorize to following cats.\n        these actions are only for reports\n  */ \n\n  PROCEDURE PRC_REPORT_CREATE(I_JSON clob, O_FAKE OUT VARCHAR2);\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_DELETE(\n   I_JSON IN VARCHAR2\n  ,O_FAKE OUT NUMBER\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_NOTIFICATION(\n    I_JSON IN VARCHAR2, O_FAKE OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  PROCEDURE PRC_REPORT_REQUEST(\n    i_json varchar2, o_fake OUT VARCHAR2\n  );\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_SHOW(\n    I_JSON IN VARCHAR2\n  ) RETURN CLOB;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_LIST(\n   I_json varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  FUNCTION FNC_REPORT_INFO(\n    i_json IN varchar2\n  ) RETURN VARCHAR2;\n  /*----------------------------------------------------------------------------------------------------------*/\n  /*----------------------------------------------------------------------------------------------------------*/\n  \nEND PKG_API;"},{"Name":"JSON_PARSER","ObjectID":308475,"Digest":"4079e2277f0d5377a1120461e281bbd974ca5b5ace6e06d95d140dde67492283","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PARSER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  /* scanner tokens:\n    '{', '}', ',', ':', '[', ']', STRING, NUMBER, TRUE, FALSE, NULL\n  */\n  type rToken IS RECORD (\n    type_name VARCHAR2(7),\n    line PLS_INTEGER,\n    col PLS_INTEGER,\n    data VARCHAR2(32767),\n    data_overflow clob); -- max_string_size\n\n  type lTokens is table of rToken index by pls_integer;\n  type json_src is record (len number, offset number, src varchar2(32767), s_clob clob);\n\n  json_strict boolean not null := false;\n\n  function next_char(indx number, s in out nocopy json_src) return varchar2;\n  function next_char2(indx number, s in out nocopy json_src, amount number default 1) return varchar2;\n\n  function prepareClob(buf in clob) return json_parser.json_src;\n  function prepareVarchar2(buf in varchar2) return json_parser.json_src;\n  function lexer(jsrc in out nocopy json_src) return lTokens;\n  procedure print_token(t rToken);\n\n  function parser(str varchar2) return json;\n  function parse_list(str varchar2) return json_list;\n  function parse_any(str varchar2) return json_value;\n  function parser(str clob) return json;\n  function parse_list(str clob) return json_list;\n  function parse_any(str clob) return json_value;\n  procedure remove_duplicates(obj in out nocopy json);\n  function get_version return varchar2;\n\nend json_parser;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_PARSER\" as\n  /*\n  Copyright (c) 2009 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  decimalpoint varchar2(1 char) := '.';\n\n  procedure updateDecimalPoint as\n  begin\n    SELECT substr(VALUE,1,1) into decimalpoint FROM NLS_SESSION_PARAMETERS WHERE PARAMETER = 'NLS_NUMERIC_CHARACTERS';\n  end updateDecimalPoint;\n\n  /*type json_src is record (len number, offset number, src varchar2(10), s_clob clob); */\n  function next_char(indx number, s in out nocopy json_src) return varchar2 as\n  begin\n    if(indx \u003e s.len) then return null; end if;\n    --right offset?\n    if(indx \u003e 4000 + s.offset or indx \u003c s.offset) then\n    --load right offset\n      s.offset := indx - (indx mod 4000);\n      s.src := dbms_lob.substr(s.s_clob, 4000, s.offset+1);\n    end if;\n    --read from s.src\n    return substr(s.src, indx-s.offset, 1);\n  end;\n\n  function next_char2(indx number, s in out nocopy json_src, amount number default 1) return varchar2 as\n    buf varchar2(32767) := '';\n  begin\n    for i in 1..amount loop\n      buf := buf || next_char(indx-1+i,s);\n    end loop;\n    return buf;\n  end;\n\n  function prepareClob(buf clob) return json_parser.json_src as\n    temp json_parser.json_src;\n  begin\n    temp.s_clob := buf;\n    temp.offset := 0;\n    temp.src := dbms_lob.substr(buf, 4000, temp.offset+1);\n    temp.len := dbms_lob.getlength(buf);\n    return temp;\n  end;\n\n  function prepareVarchar2(buf varchar2) return json_parser.json_src as\n    temp json_parser.json_src;\n  begin\n    temp.s_clob := buf;\n    temp.offset := 0;\n    temp.src := substr(buf, 1, 4000);\n    temp.len := length(buf);\n    return temp;\n  end;\n\n  procedure debug(text varchar2) as\n  begin\n    dbms_output.put_line(text);\n  end;\n\n  procedure print_token(t rToken) as\n  begin\n    dbms_output.put_line('Line: '||t.line||' - Column: '||t.col||' - Type: '||t.type_name||' - Content: '||t.data);\n  end print_token;\n\n  /* SCANNER FUNCTIONS START */\n  procedure s_error(text varchar2, line number, col number) as\n  begin\n    raise_application_error(-20100, 'JSON Scanner exception @ line: '||line||' column: '||col||' - '||text);\n  end;\n\n  procedure s_error(text varchar2, tok rToken) as\n  begin\n    raise_application_error(-20100, 'JSON Scanner exception @ line: '||tok.line||' column: '||tok.col||' - '||text);\n  end;\n\n  function mt(t varchar2, l pls_integer, c pls_integer, d varchar2) return rToken as\n    token rToken;\n  begin\n    token.type_name := t;\n    token.line := l;\n    token.col := c;\n    token.data := d;\n    return token;\n  end;\n\n  function lexNumber(jsrc in out nocopy json_src, tok in out nocopy rToken, indx in out nocopy pls_integer) return pls_integer as\n    numbuf varchar2(4000) := '';\n    buf varchar2(4);\n    checkLoop boolean;\n  begin\n    buf := next_char(indx, jsrc);\n    if(buf = '-') then numbuf := '-'; indx := indx + 1; end if;\n    buf := next_char(indx, jsrc);\n    --0 or [1-9]([0-9])*\n    if(buf = '0') then\n      numbuf := numbuf || '0'; indx := indx + 1;\n      buf := next_char(indx, jsrc);\n    elsif(buf \u003e= '1' and buf \u003c= '9') then\n      numbuf := numbuf || buf; indx := indx + 1;\n      --read digits\n      buf := next_char(indx, jsrc);\n      while(buf \u003e= '0' and buf \u003c= '9') loop\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end loop;\n    end if;\n    --fraction\n    if(buf = '.') then\n      numbuf := numbuf || buf; indx := indx + 1;\n      buf := next_char(indx, jsrc);\n      checkLoop := FALSE;\n      while(buf \u003e= '0' and buf \u003c= '9') loop\n        checkLoop := TRUE;\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end loop;\n      if(not checkLoop) then\n        s_error('Expected: digits in fraction', tok);\n      end if;\n    end if;\n    --exp part\n    if(buf in ('e', 'E')) then\n      numbuf := numbuf || buf; indx := indx + 1;\n      buf := next_char(indx, jsrc);\n      if(buf = '+' or buf = '-') then\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end if;\n      checkLoop := FALSE;\n      while(buf \u003e= '0' and buf \u003c= '9') loop\n        checkLoop := TRUE;\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end loop;\n      if(not checkLoop) then\n        s_error('Expected: digits in exp', tok);\n      end if;\n    end if;\n\n    tok.data := numbuf;\n    return indx;\n  end lexNumber;\n\n  -- [a-zA-Z]([a-zA-Z0-9])*\n  function lexName(jsrc in out nocopy json_src, tok in out nocopy rToken, indx in out nocopy pls_integer) return pls_integer as\n    varbuf varchar2(32767) := '';\n    buf varchar(4);\n    num number;\n  begin\n    buf := next_char(indx, jsrc);\n    while(REGEXP_LIKE(buf, '^[[:alnum:]\\_]$', 'i')) loop\n      varbuf := varbuf || buf;\n      indx := indx + 1;\n      buf := next_char(indx, jsrc);\n      if (buf is null) then\n        goto retname;\n        --debug('Premature string ending');\n      end if;\n    end loop;\n    \u003c\u003cretname\u003e\u003e\n\n    --could check for reserved keywords here\n\n    --debug(varbuf);\n    tok.data := varbuf;\n    return indx-1;\n  end lexName;\n\n  procedure updateClob(v_extended in out nocopy clob, v_str varchar2) as\n  begin\n    dbms_lob.writeappend(v_extended, length(v_str), v_str);\n  end updateClob;\n\n  function lexString(jsrc in out nocopy json_src, tok in out nocopy rToken, indx in out nocopy pls_integer, endChar char) return pls_integer as\n    v_extended clob := null; v_count number := 0;\n    varbuf varchar2(32767) := '';\n    buf varchar(4);\n    wrong boolean;\n  begin\n    indx := indx +1;\n    buf := next_char(indx, jsrc);\n    while(buf != endChar) loop\n      --clob control\n      if(v_count \u003e 8191) then --crazy oracle error (16383 is the highest working length with unistr - 8192 choosen to be safe)\n        if(v_extended is null) then\n          v_extended := empty_clob();\n          dbms_lob.createtemporary(v_extended, true);\n        end if;\n        updateClob(v_extended, unistr(varbuf));\n        varbuf := ''; v_count := 0;\n      end if;\n      if(buf = Chr(13) or buf = CHR(9) or buf = CHR(10)) then\n        s_error('Control characters not allowed (CHR(9),CHR(10)CHR(13))', tok);\n      end if;\n      if(buf = '\\') then\n        --varbuf := varbuf || buf;\n        indx := indx + 1;\n        buf := next_char(indx, jsrc);\n        case\n          when buf in ('\\') then\n            varbuf := varbuf || buf || buf; v_count := v_count + 2;\n            indx := indx + 1;\n            buf := next_char(indx, jsrc);\n          when buf in ('\"', '/') then\n            varbuf := varbuf || buf; v_count := v_count + 1;\n            indx := indx + 1;\n            buf := next_char(indx, jsrc);\n          when buf = '''' then\n            if(json_strict = false) then\n              varbuf := varbuf || buf; v_count := v_count + 1;\n              indx := indx + 1;\n              buf := next_char(indx, jsrc);\n            else\n              s_error('strictmode - expected: \" \\ / b f n r t u ', tok);\n            end if;\n          when buf in ('b', 'f', 'n', 'r', 't') then\n            --backspace b = U+0008\n            --formfeed  f = U+000C\n            --newline   n = U+000A\n            --carret    r = U+000D\n            --tabulator t = U+0009\n            case buf\n            when 'b' then varbuf := varbuf || chr(8);\n            when 'f' then varbuf := varbuf || chr(12);\n            when 'n' then varbuf := varbuf || chr(10);\n            when 'r' then varbuf := varbuf || chr(13);\n            when 't' then varbuf := varbuf || chr(9);\n            end case;\n            --varbuf := varbuf || buf;\n            v_count := v_count + 1;\n            indx := indx + 1;\n            buf := next_char(indx, jsrc);\n          when buf = 'u' then\n            --four hexidecimal chars\n            declare\n              four varchar2(4);\n            begin\n              four := next_char2(indx+1, jsrc, 4);\n              wrong := FALSE;\n              if(upper(substr(four, 1,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(upper(substr(four, 2,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(upper(substr(four, 3,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(upper(substr(four, 4,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(wrong) then\n                s_error('expected: \" \\u([0-9][A-F]){4}', tok);\n              end if;\n--              varbuf := varbuf || buf || four;\n              varbuf := varbuf || '\\'||four;--chr(to_number(four,'XXXX'));\n               v_count := v_count + 5;\n              indx := indx + 5;\n              buf := next_char(indx, jsrc);\n              end;\n          else\n            s_error('expected: \" \\ / b f n r t u ', tok);\n        end case;\n      else\n        varbuf := varbuf || buf; v_count := v_count + 1;\n        indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end if;\n    end loop;\n\n    if (buf is null) then\n      s_error('string ending not found', tok);\n      --debug('Premature string ending');\n    end if;\n\n    --debug(varbuf);\n    --dbms_output.put_line(varbuf);\n    if(v_extended is not null) then\n      updateClob(v_extended, unistr(varbuf));\n      tok.data_overflow := v_extended;\n      tok.data := dbms_lob.substr(v_extended, 1, 32767);\n    else\n      tok.data := unistr(varbuf);\n    end if;\n    return indx;\n  end lexString;\n\n  /* scanner tokens:\n    '{', '}', ',', ':', '[', ']', STRING, NUMBER, TRUE, FALSE, NULL\n  */\n  function lexer(jsrc in out nocopy json_src) return lTokens as\n    tokens lTokens;\n    indx pls_integer := 1;\n    tok_indx pls_integer := 1;\n    buf varchar2(4);\n    lin_no number := 1;\n    col_no number := 0;\n  begin\n    while (indx \u003c= jsrc.len) loop\n      --read into buf\n      buf := next_char(indx, jsrc);\n      col_no := col_no + 1;\n      --convert to switch case\n      case\n        when buf = '{' then tokens(tok_indx) := mt('{', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = '}' then tokens(tok_indx) := mt('}', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = ',' then tokens(tok_indx) := mt(',', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = ':' then tokens(tok_indx) := mt(':', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = '[' then tokens(tok_indx) := mt('[', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = ']' then tokens(tok_indx) := mt(']', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = 't' then\n          if(next_char2(indx, jsrc, 4) != 'true') then\n            if(json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i')) then\n              tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n              indx := lexName(jsrc, tokens(tok_indx), indx);\n              col_no := col_no + length(tokens(tok_indx).data) + 1;\n              tok_indx := tok_indx + 1;\n            else\n              s_error('Expected: ''true''', lin_no, col_no);\n            end if;\n          else\n            tokens(tok_indx) := mt('TRUE', lin_no, col_no, null); tok_indx := tok_indx + 1;\n            indx := indx + 3;\n            col_no := col_no + 3;\n          end if;\n        when buf = 'n' then\n          if(next_char2(indx, jsrc, 4) != 'null') then\n            if(json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i')) then\n              tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n              indx := lexName(jsrc, tokens(tok_indx), indx);\n              col_no := col_no + length(tokens(tok_indx).data) + 1;\n              tok_indx := tok_indx + 1;\n            else\n              s_error('Expected: ''null''', lin_no, col_no);\n            end if;\n          else\n            tokens(tok_indx) := mt('NULL', lin_no, col_no, null); tok_indx := tok_indx + 1;\n            indx := indx + 3;\n            col_no := col_no + 3;\n          end if;\n        when buf = 'f' then\n          if(next_char2(indx, jsrc, 5) != 'false') then\n            if(json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i')) then\n              tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n              indx := lexName(jsrc, tokens(tok_indx), indx);\n              col_no := col_no + length(tokens(tok_indx).data) + 1;\n              tok_indx := tok_indx + 1;\n            else\n              s_error('Expected: ''false''', lin_no, col_no);\n            end if;\n          else\n            tokens(tok_indx) := mt('FALSE', lin_no, col_no, null); tok_indx := tok_indx + 1;\n            indx := indx + 4;\n            col_no := col_no + 4;\n          end if;\n        /*   -- 9 = TAB, 10 = \\n, 13 = \\r (Linux = \\n, Windows = \\r\\n, Mac = \\r */\n        when (buf = Chr(10)) then --linux newlines\n          lin_no := lin_no + 1;\n          col_no := 0;\n\n        when (buf = Chr(13)) then --Windows or Mac way\n          lin_no := lin_no + 1;\n          col_no := 0;\n          if(jsrc.len \u003e= indx +1) then -- better safe than sorry\n            buf := next_char(indx+1, jsrc);\n            if(buf = Chr(10)) then --\\r\\n\n              indx := indx + 1;\n            end if;\n          end if;\n\n        when (buf = CHR(9)) then null; --tabbing\n        when (buf in ('-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) then --number\n          tokens(tok_indx) := mt('NUMBER', lin_no, col_no, null);\n          indx := lexNumber(jsrc, tokens(tok_indx), indx)-1;\n          col_no := col_no + length(tokens(tok_indx).data);\n          tok_indx := tok_indx + 1;\n        when buf = '\"' then --number\n          tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n          indx := lexString(jsrc, tokens(tok_indx), indx, '\"');\n          col_no := col_no + length(tokens(tok_indx).data) + 1;\n          tok_indx := tok_indx + 1;\n        when buf = '''' and json_strict = false then --number\n          tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n          indx := lexString(jsrc, tokens(tok_indx), indx, '''');\n          col_no := col_no + length(tokens(tok_indx).data) + 1; --hovsa her\n          tok_indx := tok_indx + 1;\n        when json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i') then\n          tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n          indx := lexName(jsrc, tokens(tok_indx), indx);\n          if(tokens(tok_indx).data_overflow is not null) then\n            col_no := col_no + dbms_lob.getlength(tokens(tok_indx).data_overflow) + 1;\n          else\n            col_no := col_no + length(tokens(tok_indx).data) + 1;\n          end if;\n          tok_indx := tok_indx + 1;\n        when json_strict = false and buf||next_char(indx+1, jsrc) = '/*' then --strip comments\n          declare\n            saveindx number := indx;\n            un_esc clob;\n          begin\n            indx := indx + 1;\n            loop\n              indx := indx + 1;\n              buf := next_char(indx, jsrc)||next_char(indx+1, jsrc);\n              exit when buf = '*/';\n              exit when buf is null;\n            end loop;\n\n            if(indx = saveindx+2) then\n              --enter unescaped mode\n              --dbms_output.put_line('Entering unescaped mode');\n              un_esc := empty_clob();\n              dbms_lob.createtemporary(un_esc, true);\n              indx := indx + 1;\n              loop\n                indx := indx + 1;\n                buf := next_char(indx, jsrc)||next_char(indx+1, jsrc)||next_char(indx+2, jsrc)||next_char(indx+3, jsrc);\n                exit when buf = '/**/';\n                if buf is null then\n                  s_error('Unexpected sequence /**/ to end unescaped data: '||buf, lin_no, col_no);\n                end if;\n                buf := next_char(indx, jsrc);\n                dbms_lob.writeappend(un_esc, length(buf), buf);\n              end loop;\n              tokens(tok_indx) := mt('ESTRING', lin_no, col_no, null);\n              tokens(tok_indx).data_overflow := un_esc;\n              col_no := col_no + dbms_lob.getlength(un_esc) + 1; --note: line count won't work properly\n              tok_indx := tok_indx + 1;\n              indx := indx + 2;\n            end if;\n\n            indx := indx + 1;\n          end;\n        when buf = ' ' then null; --space\n        else\n          s_error('Unexpected char: '||buf, lin_no, col_no);\n      end case;\n\n      indx := indx + 1;\n    end loop;\n\n    return tokens;\n  end lexer;\n\n  /* SCANNER END */\n\n  /* PARSER FUNCTIONS START*/\n  procedure p_error(text varchar2, tok rToken) as\n  begin\n    raise_application_error(-20101, 'JSON Parser exception @ line: '||tok.line||' column: '||tok.col||' - '||text);\n  end;\n\n  function parseObj(tokens lTokens, indx in out nocopy pls_integer) return json;\n\n  function parseArr(tokens lTokens, indx in out nocopy pls_integer) return json_list as\n    e_arr json_value_array := json_value_array();\n    ret_list json_list := json_list();\n    v_count number := 0;\n    tok rToken;\n  begin\n    --value, value, value ]\n    if(indx \u003e tokens.count) then p_error('more elements in array was excepted', tok); end if;\n    tok := tokens(indx);\n    while(tok.type_name != ']') loop\n      e_arr.extend;\n      v_count := v_count + 1;\n      case tok.type_name\n        when 'TRUE' then e_arr(v_count) := json_value(true);\n        when 'FALSE' then e_arr(v_count) := json_value(false);\n        when 'NULL' then e_arr(v_count) := json_value;\n        when 'STRING' then e_arr(v_count) := case when tok.data_overflow is not null then json_value(tok.data_overflow) else json_value(tok.data) end;\n        when 'ESTRING' then e_arr(v_count) := json_value(tok.data_overflow, false);\n        when 'NUMBER' then e_arr(v_count) := json_value(to_number(replace(tok.data, '.', decimalpoint)));\n        when '[' then\n          declare e_list json_list; begin\n            indx := indx + 1;\n            e_list := parseArr(tokens, indx);\n            e_arr(v_count) := e_list.to_json_value;\n          end;\n        when '{' then\n          indx := indx + 1;\n          e_arr(v_count) := parseObj(tokens, indx).to_json_value;\n        else\n          p_error('Expected a value', tok);\n      end case;\n      indx := indx + 1;\n      if(indx \u003e tokens.count) then p_error('] not found', tok); end if;\n      tok := tokens(indx);\n      if(tok.type_name = ',') then --advance\n        indx := indx + 1;\n        if(indx \u003e tokens.count) then p_error('more elements in array was excepted', tok); end if;\n        tok := tokens(indx);\n        if(tok.type_name = ']') then --premature exit\n          p_error('Premature exit in array', tok);\n        end if;\n      elsif(tok.type_name != ']') then --error\n        p_error('Expected , or ]', tok);\n      end if;\n\n    end loop;\n    ret_list.list_data := e_arr;\n    return ret_list;\n  end parseArr;\n\n  function parseMem(tokens lTokens, indx in out pls_integer, mem_name varchar2, mem_indx number) return json_value as\n    mem json_value;\n    tok rToken;\n  begin\n    tok := tokens(indx);\n    case tok.type_name\n      when 'TRUE' then mem := json_value(true);\n      when 'FALSE' then mem := json_value(false);\n      when 'NULL' then mem := json_value;\n      when 'STRING' then mem := case when tok.data_overflow is not null then json_value(tok.data_overflow) else json_value(tok.data) end;\n      when 'ESTRING' then mem := json_value(tok.data_overflow, false);\n      when 'NUMBER' then mem := json_value(to_number(replace(tok.data, '.', decimalpoint)));\n      when '[' then\n        declare\n          e_list json_list;\n        begin\n          indx := indx + 1;\n          e_list := parseArr(tokens, indx);\n          mem := e_list.to_json_value;\n        end;\n      when '{' then\n        indx := indx + 1;\n        mem := parseObj(tokens, indx).to_json_value;\n      else\n        p_error('Found '||tok.type_name, tok);\n    end case;\n    mem.mapname := mem_name;\n    mem.mapindx := mem_indx;\n\n    indx := indx + 1;\n    return mem;\n  end parseMem;\n\n  /*procedure test_duplicate_members(arr in json_member_array, mem_name in varchar2, wheretok rToken) as\n  begin\n    for i in 1 .. arr.count loop\n      if(arr(i).member_name = mem_name) then\n        p_error('Duplicate member name', wheretok);\n      end if;\n    end loop;\n  end test_duplicate_members;*/\n\n  function parseObj(tokens lTokens, indx in out nocopy pls_integer) return json as\n    type memmap is table of number index by varchar2(4000); -- i've read somewhere that this is not possible - but it is!\n    mymap memmap;\n    nullelemfound boolean := false;\n\n    obj json;\n    tok rToken;\n    mem_name varchar(4000);\n    arr json_value_array := json_value_array();\n  begin\n    --what to expect?\n    while(indx \u003c= tokens.count) loop\n      tok := tokens(indx);\n      --debug('E: '||tok.type_name);\n      case tok.type_name\n      when 'STRING' then\n        --member\n        mem_name := substr(tok.data, 1, 4000);\n        begin\n          if(mem_name is null) then\n            if(nullelemfound) then\n              p_error('Duplicate empty member: ', tok);\n            else\n              nullelemfound := true;\n            end if;\n          elsif(mymap(mem_name) is not null) then\n            p_error('Duplicate member name: '||mem_name, tok);\n          end if;\n        exception\n          when no_data_found then mymap(mem_name) := 1;\n        end;\n\n        indx := indx + 1;\n        if(indx \u003e tokens.count) then p_error('Unexpected end of input', tok); end if;\n        tok := tokens(indx);\n        indx := indx + 1;\n        if(indx \u003e tokens.count) then p_error('Unexpected end of input', tok); end if;\n        if(tok.type_name = ':') then\n          --parse\n          declare\n            jmb json_value;\n            x number;\n          begin\n            x := arr.count + 1;\n            jmb := parseMem(tokens, indx, mem_name, x);\n            arr.extend;\n            arr(x) := jmb;\n          end;\n        else\n          p_error('Expected '':''', tok);\n        end if;\n        --move indx forward if ',' is found\n        if(indx \u003e tokens.count) then p_error('Unexpected end of input', tok); end if;\n\n        tok := tokens(indx);\n        if(tok.type_name = ',') then\n          --debug('found ,');\n          indx := indx + 1;\n          tok := tokens(indx);\n          if(tok.type_name = '}') then --premature exit\n            p_error('Premature exit in json object', tok);\n          end if;\n        elsif(tok.type_name != '}') then\n           p_error('A comma seperator is probably missing', tok);\n        end if;\n      when '}' then\n        obj := json();\n        obj.json_data := arr;\n        return obj;\n      else\n        p_error('Expected string or }', tok);\n      end case;\n    end loop;\n\n    p_error('} not found', tokens(indx-1));\n\n    return obj;\n\n  end;\n\n  function parser(str varchar2) return json as\n    tokens lTokens;\n    obj json;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareVarchar2(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '{') then\n      indx := indx + 1;\n      obj := parseObj(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON Parser exception - no { start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('} should end the JSON object', tokens(indx));\n    end if;\n\n    return obj;\n  end parser;\n\n  function parse_list(str varchar2) return json_list as\n    tokens lTokens;\n    obj json_list;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareVarchar2(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '[') then\n      indx := indx + 1;\n      obj := parseArr(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON List Parser exception - no [ start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj;\n  end parse_list;\n\n  function parse_list(str clob) return json_list as\n    tokens lTokens;\n    obj json_list;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareClob(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '[') then\n      indx := indx + 1;\n      obj := parseArr(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON List Parser exception - no [ start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj;\n  end parse_list;\n\n  function parser(str clob) return json as\n    tokens lTokens;\n    obj json;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    --dbms_output.put_line('Using clob');\n    jsrc := prepareClob(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '{') then\n      indx := indx + 1;\n      obj := parseObj(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON Parser exception - no { start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('} should end the JSON object', tokens(indx));\n    end if;\n\n    return obj;\n  end parser;\n\n  function parse_any(str varchar2) return json_value as\n    tokens lTokens;\n    obj json_list;\n    ret json_value;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareVarchar2(str);\n    tokens := lexer(jsrc);\n    tokens(tokens.count+1).type_name := ']';\n    obj := parseArr(tokens, indx);\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj.head();\n  end parse_any;\n\n  function parse_any(str clob) return json_value as\n    tokens lTokens;\n    obj json_list;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    jsrc := prepareClob(str);\n    tokens := lexer(jsrc);\n    tokens(tokens.count+1).type_name := ']';\n    obj := parseArr(tokens, indx);\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj.head();\n  end parse_any;\n\n  /* last entry is the one to keep */\n  procedure remove_duplicates(obj in out nocopy json) as\n    type memberlist is table of json_value index by varchar2(4000);\n    members memberlist;\n    nulljsonvalue json_value := null;\n    validated json := json();\n    indx varchar2(4000);\n  begin\n    for i in 1 .. obj.count loop\n      if(obj.get(i).mapname is null) then\n        nulljsonvalue := obj.get(i);\n      else\n        members(obj.get(i).mapname) := obj.get(i);\n      end if;\n    end loop;\n\n    validated.check_duplicate(false);\n    indx := members.first;\n    loop\n      exit when indx is null;\n      validated.put(indx, members(indx));\n      indx := members.next(indx);\n    end loop;\n    if(nulljsonvalue is not null) then\n      validated.put('', nulljsonvalue);\n    end if;\n\n    validated.check_for_duplicate := obj.check_for_duplicate;\n\n    obj := validated;\n  end;\n\n  function get_version return varchar2 as\n  begin\n    return 'PL/JSON v1.0.4';\n  end get_version;\n\nend json_parser;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PARSER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  /* scanner tokens:\n    '{', '}', ',', ':', '[', ']', STRING, NUMBER, TRUE, FALSE, NULL\n  */\n  type rToken IS RECORD (\n    type_name VARCHAR2(7),\n    line PLS_INTEGER,\n    col PLS_INTEGER,\n    data VARCHAR2(32767),\n    data_overflow clob); -- max_string_size\n\n  type lTokens is table of rToken index by pls_integer;\n  type json_src is record (len number, offset number, src varchar2(32767), s_clob clob);\n\n  json_strict boolean not null := false;\n\n  function next_char(indx number, s in out nocopy json_src) return varchar2;\n  function next_char2(indx number, s in out nocopy json_src, amount number default 1) return varchar2;\n\n  function prepareClob(buf in clob) return json_parser.json_src;\n  function prepareVarchar2(buf in varchar2) return json_parser.json_src;\n  function lexer(jsrc in out nocopy json_src) return lTokens;\n  procedure print_token(t rToken);\n\n  function parser(str varchar2) return json;\n  function parse_list(str varchar2) return json_list;\n  function parse_any(str varchar2) return json_value;\n  function parser(str clob) return json;\n  function parse_list(str clob) return json_list;\n  function parse_any(str clob) return json_value;\n  procedure remove_duplicates(obj in out nocopy json);\n  function get_version return varchar2;\n\nend json_parser;"},{"Name":"JSON_PRINTER","ObjectID":308478,"Digest":"4d64b6a1458128a04868e14219ca61fb34414866f00d91cae2231121d137fc0e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PRINTER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  indent_string varchar2(10 char) := '  '; --chr(9); for tab\n  newline_char varchar2(2 char)   := chr(13)||chr(10); -- Windows style\n  --newline_char varchar2(2) := chr(10); -- Mac style\n  --newline_char varchar2(2) := chr(13); -- Linux style\n  ascii_output boolean    not null := true;\n  escape_solidus boolean  not null := false;\n\n  function pretty_print(obj json, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_list(obj json_list, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_any(json_part json_value, spaces boolean default true, line_length number default 0) return varchar2;\n  procedure pretty_print(obj json, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_list(obj json_list, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_any(json_part json_value, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n\n  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null);\n  procedure htp_output_clob(my_clob clob, jsonp varchar2 default null);\nend json_printer;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_PRINTER\" as\n  max_line_len number := 0;\n  cur_line_len number := 0;\n\n  function llcheck(str in varchar2) return varchar2 as\n  begin\n    --dbms_output.put_line(cur_line_len || ' : '|| str);\n    if(max_line_len \u003e 0 and length(str)+cur_line_len \u003e max_line_len) then\n      cur_line_len := length(str);\n      return newline_char || str;\n    else\n      cur_line_len := cur_line_len + length(str);\n      return str;\n    end if;\n  end llcheck;\n\n  function escapeString(str varchar2) return varchar2 as\n    sb varchar2(32767) := '';\n    buf varchar2(40);\n    num number;\n  begin\n    if(str is null) then return ''; end if;\n    for i in 1 .. length(str) loop\n      buf := substr(str, i, 1);\n      --backspace b = U+0008\n      --formfeed  f = U+000C\n      --newline   n = U+000A\n      --carret    r = U+000D\n      --tabulator t = U+0009\n      case buf\n      when chr( 8) then buf := '\\b';\n      when chr( 9) then buf := '\\t';\n      when chr(10) then buf := '\\n';\n      when chr(12) then buf := '\\f';\n      when chr(13) then buf := '\\r';\n      when chr(34) then buf := '\\\"';\n      when chr(47) then if(escape_solidus) then buf := '\\/'; end if;\n      when chr(92) then buf := '\\\\';\n      else\n        if(ascii(buf) \u003c 32) then\n          buf := '\\u'||replace(substr(to_char(ascii(buf), 'XXXX'),2,4), ' ', '0');\n        elsif (ascii_output) then\n          buf := replace(asciistr(buf), '\\', '\\u');\n        end if;\n      end case;\n\n      sb := sb || buf;\n    end loop;\n\n    return sb;\n  end escapeString;\n\n  function newline(spaces boolean) return varchar2 as\n  begin\n    cur_line_len := 0;\n    if(spaces) then return newline_char; else return ''; end if;\n  end;\n\n/*  function get_schema return varchar2 as\n  begin\n    return sys_context('userenv', 'current_schema');\n  end;\n*/\n  function tab(indent number, spaces boolean) return varchar2 as\n    i varchar(200) := '';\n  begin\n    if(not spaces) then return ''; end if;\n    for x in 1 .. indent loop i := i || indent_string; end loop;\n    return i;\n  end;\n\n  function getCommaSep(spaces boolean) return varchar2 as\n  begin\n    if(spaces) then return ', '; else return ','; end if;\n  end;\n\n  function getMemName(mem json_value, spaces boolean) return varchar2 as\n  begin\n    if(spaces) then\n      return llcheck('\"'||escapeString(mem.mapname)||'\"') || llcheck(' : ');\n    else\n      return llcheck('\"'||escapeString(mem.mapname)||'\"') || llcheck(':');\n    end if;\n  end;\n\n/* Clob method start here */\n  procedure add_to_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2, str varchar2) as\n  begin\n    if(lengthb(str) \u003e 32767 - lengthb(buf_str)) then\n--      dbms_lob.append(buf_lob, buf_str);\n      dbms_lob.writeappend(buf_lob, length(buf_str), buf_str);\n      buf_str := str;\n    else\n      buf_str := buf_str || str;\n    end if;\n  end add_to_clob;\n\n  procedure flush_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2) as\n  begin\n--    dbms_lob.append(buf_lob, buf_str);\n    dbms_lob.writeappend(buf_lob, length(buf_str), buf_str);\n  end flush_clob;\n\n  procedure ppObj(obj json, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2);\n\n  procedure ppEA(input json_list, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2) as\n    elem json_value;\n    arr json_value_array := input.list_data;\n    numbuf varchar2(4000);\n  begin\n    for y in 1 .. arr.count loop\n      elem := arr(y);\n      if(elem is not null) then\n      case elem.get_type\n        when 'number' then\n          numbuf := '';\n          if (elem.get_number \u003c 1 and elem.get_number \u003e 0) then numbuf := '0'; end if;\n          if (elem.get_number \u003c 0 and elem.get_number \u003e -1) then\n            numbuf := '-0';\n            numbuf := numbuf || substr(to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n          else\n            numbuf := numbuf || to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n          end if;\n          add_to_clob(buf, buf_str, llcheck(numbuf));\n        when 'string' then\n          if(elem.extended_str is not null) then --clob implementation\n            add_to_clob(buf, buf_str, case when elem.num = 1 then '\"' else '/**/' end);\n            declare\n              offset number := 1;\n              v_str varchar(32767);\n              amount number := 32767;\n            begin\n              while(offset \u003c= dbms_lob.getlength(elem.extended_str)) loop\n                dbms_lob.read(elem.extended_str, amount, offset, v_str);\n                if(elem.num = 1) then\n                  add_to_clob(buf, buf_str, escapeString(v_str));\n                else\n                  add_to_clob(buf, buf_str, v_str);\n                end if;\n                offset := offset + amount;\n              end loop;\n            end;\n            add_to_clob(buf, buf_str, case when elem.num = 1 then '\"' else '/**/' end || newline_char);\n          else\n            if(elem.num = 1) then\n              add_to_clob(buf, buf_str, llcheck('\"'||escapeString(elem.get_string)||'\"'));\n            else\n              add_to_clob(buf, buf_str, llcheck('/**/'||elem.get_string||'/**/'));\n            end if;\n          end if;\n        when 'bool' then\n          if(elem.get_bool) then\n            add_to_clob(buf, buf_str, llcheck('true'));\n          else\n            add_to_clob(buf, buf_str, llcheck('false'));\n          end if;\n        when 'null' then\n          add_to_clob(buf, buf_str, llcheck('null'));\n        when 'array' then\n          add_to_clob(buf, buf_str, llcheck('['));\n          ppEA(json_list(elem), indent, buf, spaces, buf_str);\n          add_to_clob(buf, buf_str, llcheck(']'));\n        when 'object' then\n          ppObj(json(elem), indent, buf, spaces, buf_str);\n        else add_to_clob(buf, buf_str, llcheck(elem.get_type));\n      end case;\n      end if;\n      if(y != arr.count) then add_to_clob(buf, buf_str, llcheck(getCommaSep(spaces))); end if;\n    end loop;\n  end ppEA;\n\n  procedure ppMem(mem json_value, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2) as\n    numbuf varchar2(4000);\n  begin\n    add_to_clob(buf, buf_str, llcheck(tab(indent, spaces)) || llcheck(getMemName(mem, spaces)));\n    case mem.get_type\n      when 'number' then\n        if (mem.get_number \u003c 1 and mem.get_number \u003e 0) then numbuf := '0'; end if;\n        if (mem.get_number \u003c 0 and mem.get_number \u003e -1) then\n          numbuf := '-0';\n          numbuf := numbuf || substr(to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          numbuf := numbuf || to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n        add_to_clob(buf, buf_str, llcheck(numbuf));\n      when 'string' then\n        if(mem.extended_str is not null) then --clob implementation\n          add_to_clob(buf, buf_str, case when mem.num = 1 then '\"' else '/**/' end);\n          declare\n            offset number := 1;\n            v_str varchar(32767);\n            amount number := 32767;\n          begin\n--            dbms_output.put_line('SIZE:'||dbms_lob.getlength(mem.extended_str));\n            while(offset \u003c= dbms_lob.getlength(mem.extended_str)) loop\n--            dbms_output.put_line('OFFSET:'||offset);\n --             v_str := dbms_lob.substr(mem.extended_str, 8192, offset);\n              dbms_lob.read(mem.extended_str, amount, offset, v_str);\n--            dbms_output.put_line('VSTR_SIZE:'||length(v_str));\n              if(mem.num = 1) then\n                add_to_clob(buf, buf_str, escapeString(v_str));\n              else\n                add_to_clob(buf, buf_str, v_str);\n              end if;\n              offset := offset + amount;\n            end loop;\n          end;\n          add_to_clob(buf, buf_str, case when mem.num = 1 then '\"' else '/**/' end || newline_char);\n        else\n          if(mem.num = 1) then\n            add_to_clob(buf, buf_str, llcheck('\"'||escapeString(mem.get_string)||'\"'));\n          else\n            add_to_clob(buf, buf_str, llcheck('/**/'||mem.get_string||'/**/'));\n          end if;\n        end if;\n      when 'bool' then\n        if(mem.get_bool) then\n          add_to_clob(buf, buf_str, llcheck('true'));\n        else\n          add_to_clob(buf, buf_str, llcheck('false'));\n        end if;\n      when 'null' then\n        add_to_clob(buf, buf_str, llcheck('null'));\n      when 'array' then\n        add_to_clob(buf, buf_str, llcheck('['));\n        ppEA(json_list(mem), indent, buf, spaces, buf_str);\n        add_to_clob(buf, buf_str, llcheck(']'));\n      when 'object' then\n        ppObj(json(mem), indent, buf, spaces, buf_str);\n      else add_to_clob(buf, buf_str, llcheck(mem.get_type));\n    end case;\n  end ppMem;\n\n  procedure ppObj(obj json, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2) as\n  begin\n    add_to_clob(buf, buf_str, llcheck('{') || newline(spaces));\n    for m in 1 .. obj.json_data.count loop\n      ppMem(obj.json_data(m), indent+1, buf, spaces, buf_str);\n      if(m != obj.json_data.count) then\n        add_to_clob(buf, buf_str, llcheck(',') || newline(spaces));\n      else\n        add_to_clob(buf, buf_str, newline(spaces));\n      end if;\n    end loop;\n    add_to_clob(buf, buf_str, llcheck(tab(indent, spaces)) || llcheck('}')); -- || chr(13);\n  end ppObj;\n\n  procedure pretty_print(obj json, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true) as\n    buf_str varchar2(32767);\n    amount number := dbms_lob.getlength(buf);\n  begin\n    if(erase_clob and amount \u003e 0) then dbms_lob.trim(buf, 0); dbms_lob.erase(buf, amount); end if;\n\n    max_line_len := line_length;\n    cur_line_len := 0;\n    ppObj(obj, 0, buf, spaces, buf_str);\n    flush_clob(buf, buf_str);\n  end;\n\n  procedure pretty_print_list(obj json_list, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true) as\n    buf_str varchar2(32767);\n    amount number := dbms_lob.getlength(buf);\n  begin\n    if(erase_clob and amount \u003e 0) then dbms_lob.trim(buf, 0); dbms_lob.erase(buf, amount); end if;\n\n    max_line_len := line_length;\n    cur_line_len := 0;\n    add_to_clob(buf, buf_str, llcheck('['));\n    ppEA(obj, 0, buf, spaces, buf_str);\n    add_to_clob(buf, buf_str, llcheck(']'));\n    flush_clob(buf, buf_str);\n  end;\n\n  procedure pretty_print_any(json_part json_value, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true) as\n    buf_str varchar2(32767) := '';\n    numbuf varchar2(4000);\n    amount number := dbms_lob.getlength(buf);\n  begin\n    if(erase_clob and amount \u003e 0) then dbms_lob.trim(buf, 0); dbms_lob.erase(buf, amount); end if;\n\n    case json_part.get_type\n      when 'number' then\n        if (json_part.get_number \u003c 1 and json_part.get_number \u003e 0) then numbuf := '0'; end if;\n        if (json_part.get_number \u003c 0 and json_part.get_number \u003e -1) then\n          numbuf := '-0';\n          numbuf := numbuf || substr(to_char(json_part.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          numbuf := numbuf || to_char(json_part.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n        add_to_clob(buf, buf_str, numbuf);\n      when 'string' then\n        if(json_part.extended_str is not null) then --clob implementation\n          add_to_clob(buf, buf_str, case when json_part.num = 1 then '\"' else '/**/' end);\n          declare\n            offset number := 1;\n            v_str varchar(32767);\n            amount number := 32767;\n          begin\n            while(offset \u003c= dbms_lob.getlength(json_part.extended_str)) loop\n              dbms_lob.read(json_part.extended_str, amount, offset, v_str);\n              if(json_part.num = 1) then\n                add_to_clob(buf, buf_str, escapeString(v_str));\n              else\n                add_to_clob(buf, buf_str, v_str);\n              end if;\n              offset := offset + amount;\n            end loop;\n          end;\n          add_to_clob(buf, buf_str, case when json_part.num = 1 then '\"' else '/**/' end);\n        else\n          if(json_part.num = 1) then\n            add_to_clob(buf, buf_str, llcheck('\"'||escapeString(json_part.get_string)||'\"'));\n          else\n            add_to_clob(buf, buf_str, llcheck('/**/'||json_part.get_string||'/**/'));\n          end if;\n        end if;\n      when 'bool' then\n\t      if(json_part.get_bool) then\n          add_to_clob(buf, buf_str, 'true');\n        else\n          add_to_clob(buf, buf_str, 'false');\n        end if;\n      when 'null' then\n        add_to_clob(buf, buf_str, 'null');\n      when 'array' then\n        pretty_print_list(json_list(json_part), spaces, buf, line_length);\n        return;\n      when 'object' then\n        pretty_print(json(json_part), spaces, buf, line_length);\n        return;\n      else add_to_clob(buf, buf_str, 'unknown type:'|| json_part.get_type);\n    end case;\n    flush_clob(buf, buf_str);\n  end;\n\n/* Clob method end here */\n\n/* Varchar2 method start here */\n\n  procedure ppObj(obj json, indent number, buf in out nocopy varchar2, spaces boolean);\n\n  procedure ppEA(input json_list, indent number, buf in out varchar2, spaces boolean) as\n    elem json_value;\n    arr json_value_array := input.list_data;\n    str varchar2(400);\n  begin\n    for y in 1 .. arr.count loop\n      elem := arr(y);\n      if(elem is not null) then\n      case elem.get_type\n        when 'number' then\n          str := '';\n          if (elem.get_number \u003c 1 and elem.get_number \u003e 0) then str := '0'; end if;\n          if (elem.get_number \u003c 0 and elem.get_number \u003e -1) then\n            str := '-0' || substr(to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n          else\n            str := str || to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n          end if;\n          buf := buf || llcheck(str);\n        when 'string' then\n          if(elem.num = 1) then\n            buf := buf || llcheck('\"'||escapeString(elem.get_string)||'\"');\n          else\n            buf := buf || llcheck('/**/'||elem.get_string||'/**/');\n          end if;\n        when 'bool' then\n          if(elem.get_bool) then\n            buf := buf || llcheck('true');\n          else\n            buf := buf || llcheck('false');\n          end if;\n        when 'null' then\n          buf := buf || llcheck('null');\n        when 'array' then\n          buf := buf || llcheck('[');\n          ppEA(json_list(elem), indent, buf, spaces);\n          buf := buf || llcheck(']');\n        when 'object' then\n          ppObj(json(elem), indent, buf, spaces);\n        else buf := buf || llcheck(elem.get_type); /* should never happen */\n      end case;\n      end if;\n      if(y != arr.count) then buf := buf || llcheck(getCommaSep(spaces)); end if;\n    end loop;\n  end ppEA;\n\n  procedure ppMem(mem json_value, indent number, buf in out nocopy varchar2, spaces boolean) as\n    str varchar2(400) := '';\n  begin\n    buf := buf || llcheck(tab(indent, spaces)) || getMemName(mem, spaces);\n    case mem.get_type\n      when 'number' then\n        if (mem.get_number \u003c 1 and mem.get_number \u003e 0) then str := '0'; end if;\n        if (mem.get_number \u003c 0 and mem.get_number \u003e -1) then\n          str := '-0' || substr(to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          str := str || to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n        buf := buf || llcheck(str);\n      when 'string' then\n        if(mem.num = 1) then\n          buf := buf || llcheck('\"'||escapeString(mem.get_string)||'\"');\n        else\n          buf := buf || llcheck('/**/'||mem.get_string||'/**/');\n        end if;\n      when 'bool' then\n        if(mem.get_bool) then\n          buf := buf || llcheck('true');\n        else\n          buf := buf || llcheck('false');\n        end if;\n      when 'null' then\n        buf := buf || llcheck('null');\n      when 'array' then\n        buf := buf || llcheck('[');\n        ppEA(json_list(mem), indent, buf, spaces);\n        buf := buf || llcheck(']');\n      when 'object' then\n        ppObj(json(mem), indent, buf, spaces);\n      else buf := buf || llcheck(mem.get_type); /* should never happen */\n    end case;\n  end ppMem;\n\n  procedure ppObj(obj json, indent number, buf in out nocopy varchar2, spaces boolean) as\n  begin\n    buf := buf || llcheck('{') || newline(spaces);\n    for m in 1 .. obj.json_data.count loop\n      ppMem(obj.json_data(m), indent+1, buf, spaces);\n      if(m != obj.json_data.count) then buf := buf || llcheck(',') || newline(spaces);\n      else buf := buf || newline(spaces); end if;\n    end loop;\n    buf := buf || llcheck(tab(indent, spaces)) || llcheck('}'); -- || chr(13);\n  end ppObj;\n\n  function pretty_print(obj json, spaces boolean default true, line_length number default 0) return varchar2 as\n    buf varchar2(32767) := '';\n  begin\n    max_line_len := line_length;\n    cur_line_len := 0;\n    ppObj(obj, 0, buf, spaces);\n    return buf;\n  end pretty_print;\n\n  function pretty_print_list(obj json_list, spaces boolean default true, line_length number default 0) return varchar2 as\n    buf varchar2(32767);\n  begin\n    max_line_len := line_length;\n    cur_line_len := 0;\n    buf := llcheck('[');\n    ppEA(obj, 0, buf, spaces);\n    buf := buf || llcheck(']');\n    return buf;\n  end;\n\n  function pretty_print_any(json_part json_value, spaces boolean default true, line_length number default 0) return varchar2 as\n    buf varchar2(32767) := '';\n  begin\n    case json_part.get_type\n      when 'number' then\n        if (json_part.get_number() \u003c 1 and json_part.get_number() \u003e 0) then buf := buf || '0'; end if;\n        if (json_part.get_number() \u003c 0 and json_part.get_number() \u003e -1) then\n          buf := buf || '-0';\n          buf := buf || substr(to_char(json_part.get_number(), 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          buf := buf || to_char(json_part.get_number(), 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n      when 'string' then\n        if(json_part.num = 1) then\n          buf := buf || '\"'||escapeString(json_part.get_string)||'\"';\n        else\n          buf := buf || '/**/'||json_part.get_string||'/**/';\n        end if;\n      when 'bool' then\n      \tif(json_part.get_bool) then buf := 'true'; else buf := 'false'; end if;\n      when 'null' then\n        buf := 'null';\n      when 'array' then\n        buf := pretty_print_list(json_list(json_part), spaces, line_length);\n      when 'object' then\n        buf := pretty_print(json(json_part), spaces, line_length);\n      else buf := 'weird error: '|| json_part.get_type;\n    end case;\n    return buf;\n  end;\n\n  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null) as\n    prev number := 1;\n    indx number := 1;\n    size_of_nl number := lengthb(delim);\n    v_str varchar2(32767);\n    amount number := 32767;\n  begin\n    if(jsonp is not null) then dbms_output.put_line(jsonp||'('); end if;\n    while(indx != 0) loop\n      --read every line\n      indx := dbms_lob.instr(my_clob, delim, prev+1);\n --     dbms_output.put_line(prev || ' to ' || indx);\n\n      if(indx = 0) then\n        --emit from prev to end;\n        amount := 32767;\n --       dbms_output.put_line(' mycloblen ' || dbms_lob.getlength(my_clob));\n        loop\n          dbms_lob.read(my_clob, amount, prev, v_str);\n          dbms_output.put_line(v_str);\n          prev := prev+amount-1;\n          exit when prev \u003e= dbms_lob.getlength(my_clob);\n        end loop;\n      else\n        amount := indx - prev;\n        if(amount \u003e 32767) then\n          amount := 32767;\n--          dbms_output.put_line(' mycloblen ' || dbms_lob.getlength(my_clob));\n          loop\n            dbms_lob.read(my_clob, amount, prev, v_str);\n            dbms_output.put_line(v_str);\n            prev := prev+amount-1;\n            amount := indx - prev;\n            exit when prev \u003e= indx - 1;\n            if(amount \u003e 32767) then amount := 32767; end if;\n          end loop;\n          prev := indx + size_of_nl;\n        else\n          dbms_lob.read(my_clob, amount, prev, v_str);\n          dbms_output.put_line(v_str);\n          prev := indx + size_of_nl;\n        end if;\n      end if;\n\n    end loop;\n    if(jsonp is not null) then dbms_output.put_line(')'); end if;\n\n/*    while (amount != 0) loop\n      indx := dbms_lob.instr(my_clob, delim, prev+1);\n\n--      dbms_output.put_line(prev || ' to ' || indx);\n      if(indx = 0) then\n        indx := dbms_lob.getlength(my_clob)+1;\n      end if;\n\n      if(indx-prev \u003e 32767) then\n        indx := prev+32767;\n      end if;\n--      dbms_output.put_line(prev || ' to ' || indx);\n      --substr doesnt work properly on all platforms! (come on oracle - error on Oracle VM for virtualbox)\n--        dbms_output.put_line(dbms_lob.substr(my_clob, indx-prev, prev));\n      amount := indx-prev;\n--        dbms_output.put_line('amount'||amount);\n      dbms_lob.read(my_clob, amount, prev, v_str);\n      dbms_output.put_line(v_str);\n      prev := indx+size_of_nl;\n      if(amount = 32767) then prev := prev-size_of_nl-1; end if;\n    end loop;\n    if(jsonp is not null) then dbms_output.put_line(')'); end if;*/\n  end;\n\n\n/*  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null) as\n    prev number := 1;\n    indx number := 1;\n    size_of_nl number := lengthb(delim);\n    v_str varchar2(32767);\n    amount number;\n  begin\n    if(jsonp is not null) then dbms_output.put_line(jsonp||'('); end if;\n    while (indx != 0) loop\n      indx := dbms_lob.instr(my_clob, delim, prev+1);\n\n--      dbms_output.put_line(prev || ' to ' || indx);\n      if(indx-prev \u003e 32767) then\n        indx := prev+32767;\n      end if;\n--      dbms_output.put_line(prev || ' to ' || indx);\n      --substr doesnt work properly on all platforms! (come on oracle - error on Oracle VM for virtualbox)\n      if(indx = 0) then\n--        dbms_output.put_line(dbms_lob.substr(my_clob, dbms_lob.getlength(my_clob)-prev+size_of_nl, prev));\n        amount := dbms_lob.getlength(my_clob)-prev+size_of_nl;\n        dbms_lob.read(my_clob, amount, prev, v_str);\n      else\n--        dbms_output.put_line(dbms_lob.substr(my_clob, indx-prev, prev));\n        amount := indx-prev;\n--        dbms_output.put_line('amount'||amount);\n        dbms_lob.read(my_clob, amount, prev, v_str);\n      end if;\n      dbms_output.put_line(v_str);\n      prev := indx+size_of_nl;\n      if(amount = 32767) then prev := prev-size_of_nl-1; end if;\n    end loop;\n    if(jsonp is not null) then dbms_output.put_line(')'); end if;\n  end;\n*/\n  procedure htp_output_clob(my_clob clob, jsonp varchar2 default null) as\n    /*amount number := 4096;\n    pos number := 1;\n    len number;\n    */\n    l_amt    number default 30;\n    l_off   number default 1;\n    l_str   varchar2(4096);\n\n  begin\n    if(jsonp is not null) then htp.prn(jsonp||'('); end if;\n\n    begin\n      loop\n        dbms_lob.read( my_clob, l_amt, l_off, l_str );\n\n        -- it is vital to use htp.PRN to avoid\n        -- spurious line feeds getting added to your\n        -- document\n        htp.prn( l_str  );\n        l_off := l_off+l_amt;\n        l_amt := 4096;\n      end loop;\n    exception\n      when no_data_found then NULL;\n    end;\n\n    /*\n    len := dbms_lob.getlength(my_clob);\n\n    while(pos \u003c len) loop\n      htp.prn(dbms_lob.substr(my_clob, amount, pos)); -- should I replace substr with dbms_lob.read?\n      --dbms_output.put_line(dbms_lob.substr(my_clob, amount, pos));\n      pos := pos + amount;\n    end loop;\n    */\n    if(jsonp is not null) then htp.prn(')'); end if;\n  end;\n\nend json_printer;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PRINTER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  indent_string varchar2(10 char) := '  '; --chr(9); for tab\n  newline_char varchar2(2 char)   := chr(13)||chr(10); -- Windows style\n  --newline_char varchar2(2) := chr(10); -- Mac style\n  --newline_char varchar2(2) := chr(13); -- Linux style\n  ascii_output boolean    not null := true;\n  escape_solidus boolean  not null := false;\n\n  function pretty_print(obj json, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_list(obj json_list, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_any(json_part json_value, spaces boolean default true, line_length number default 0) return varchar2;\n  procedure pretty_print(obj json, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_list(obj json_list, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_any(json_part json_value, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n\n  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null);\n  procedure htp_output_clob(my_clob clob, jsonp varchar2 default null);\nend json_printer;"},{"Name":"JSON_PRINTER","ObjectID":308477,"Digest":"4d64b6a1458128a04868e14219ca61fb34414866f00d91cae2231121d137fc0e","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PRINTER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  indent_string varchar2(10 char) := '  '; --chr(9); for tab\n  newline_char varchar2(2 char)   := chr(13)||chr(10); -- Windows style\n  --newline_char varchar2(2) := chr(10); -- Mac style\n  --newline_char varchar2(2) := chr(13); -- Linux style\n  ascii_output boolean    not null := true;\n  escape_solidus boolean  not null := false;\n\n  function pretty_print(obj json, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_list(obj json_list, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_any(json_part json_value, spaces boolean default true, line_length number default 0) return varchar2;\n  procedure pretty_print(obj json, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_list(obj json_list, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_any(json_part json_value, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n\n  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null);\n  procedure htp_output_clob(my_clob clob, jsonp varchar2 default null);\nend json_printer;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_PRINTER\" as\n  max_line_len number := 0;\n  cur_line_len number := 0;\n\n  function llcheck(str in varchar2) return varchar2 as\n  begin\n    --dbms_output.put_line(cur_line_len || ' : '|| str);\n    if(max_line_len \u003e 0 and length(str)+cur_line_len \u003e max_line_len) then\n      cur_line_len := length(str);\n      return newline_char || str;\n    else\n      cur_line_len := cur_line_len + length(str);\n      return str;\n    end if;\n  end llcheck;\n\n  function escapeString(str varchar2) return varchar2 as\n    sb varchar2(32767) := '';\n    buf varchar2(40);\n    num number;\n  begin\n    if(str is null) then return ''; end if;\n    for i in 1 .. length(str) loop\n      buf := substr(str, i, 1);\n      --backspace b = U+0008\n      --formfeed  f = U+000C\n      --newline   n = U+000A\n      --carret    r = U+000D\n      --tabulator t = U+0009\n      case buf\n      when chr( 8) then buf := '\\b';\n      when chr( 9) then buf := '\\t';\n      when chr(10) then buf := '\\n';\n      when chr(12) then buf := '\\f';\n      when chr(13) then buf := '\\r';\n      when chr(34) then buf := '\\\"';\n      when chr(47) then if(escape_solidus) then buf := '\\/'; end if;\n      when chr(92) then buf := '\\\\';\n      else\n        if(ascii(buf) \u003c 32) then\n          buf := '\\u'||replace(substr(to_char(ascii(buf), 'XXXX'),2,4), ' ', '0');\n        elsif (ascii_output) then\n          buf := replace(asciistr(buf), '\\', '\\u');\n        end if;\n      end case;\n\n      sb := sb || buf;\n    end loop;\n\n    return sb;\n  end escapeString;\n\n  function newline(spaces boolean) return varchar2 as\n  begin\n    cur_line_len := 0;\n    if(spaces) then return newline_char; else return ''; end if;\n  end;\n\n/*  function get_schema return varchar2 as\n  begin\n    return sys_context('userenv', 'current_schema');\n  end;\n*/\n  function tab(indent number, spaces boolean) return varchar2 as\n    i varchar(200) := '';\n  begin\n    if(not spaces) then return ''; end if;\n    for x in 1 .. indent loop i := i || indent_string; end loop;\n    return i;\n  end;\n\n  function getCommaSep(spaces boolean) return varchar2 as\n  begin\n    if(spaces) then return ', '; else return ','; end if;\n  end;\n\n  function getMemName(mem json_value, spaces boolean) return varchar2 as\n  begin\n    if(spaces) then\n      return llcheck('\"'||escapeString(mem.mapname)||'\"') || llcheck(' : ');\n    else\n      return llcheck('\"'||escapeString(mem.mapname)||'\"') || llcheck(':');\n    end if;\n  end;\n\n/* Clob method start here */\n  procedure add_to_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2, str varchar2) as\n  begin\n    if(lengthb(str) \u003e 32767 - lengthb(buf_str)) then\n--      dbms_lob.append(buf_lob, buf_str);\n      dbms_lob.writeappend(buf_lob, length(buf_str), buf_str);\n      buf_str := str;\n    else\n      buf_str := buf_str || str;\n    end if;\n  end add_to_clob;\n\n  procedure flush_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2) as\n  begin\n--    dbms_lob.append(buf_lob, buf_str);\n    dbms_lob.writeappend(buf_lob, length(buf_str), buf_str);\n  end flush_clob;\n\n  procedure ppObj(obj json, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2);\n\n  procedure ppEA(input json_list, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2) as\n    elem json_value;\n    arr json_value_array := input.list_data;\n    numbuf varchar2(4000);\n  begin\n    for y in 1 .. arr.count loop\n      elem := arr(y);\n      if(elem is not null) then\n      case elem.get_type\n        when 'number' then\n          numbuf := '';\n          if (elem.get_number \u003c 1 and elem.get_number \u003e 0) then numbuf := '0'; end if;\n          if (elem.get_number \u003c 0 and elem.get_number \u003e -1) then\n            numbuf := '-0';\n            numbuf := numbuf || substr(to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n          else\n            numbuf := numbuf || to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n          end if;\n          add_to_clob(buf, buf_str, llcheck(numbuf));\n        when 'string' then\n          if(elem.extended_str is not null) then --clob implementation\n            add_to_clob(buf, buf_str, case when elem.num = 1 then '\"' else '/**/' end);\n            declare\n              offset number := 1;\n              v_str varchar(32767);\n              amount number := 32767;\n            begin\n              while(offset \u003c= dbms_lob.getlength(elem.extended_str)) loop\n                dbms_lob.read(elem.extended_str, amount, offset, v_str);\n                if(elem.num = 1) then\n                  add_to_clob(buf, buf_str, escapeString(v_str));\n                else\n                  add_to_clob(buf, buf_str, v_str);\n                end if;\n                offset := offset + amount;\n              end loop;\n            end;\n            add_to_clob(buf, buf_str, case when elem.num = 1 then '\"' else '/**/' end || newline_char);\n          else\n            if(elem.num = 1) then\n              add_to_clob(buf, buf_str, llcheck('\"'||escapeString(elem.get_string)||'\"'));\n            else\n              add_to_clob(buf, buf_str, llcheck('/**/'||elem.get_string||'/**/'));\n            end if;\n          end if;\n        when 'bool' then\n          if(elem.get_bool) then\n            add_to_clob(buf, buf_str, llcheck('true'));\n          else\n            add_to_clob(buf, buf_str, llcheck('false'));\n          end if;\n        when 'null' then\n          add_to_clob(buf, buf_str, llcheck('null'));\n        when 'array' then\n          add_to_clob(buf, buf_str, llcheck('['));\n          ppEA(json_list(elem), indent, buf, spaces, buf_str);\n          add_to_clob(buf, buf_str, llcheck(']'));\n        when 'object' then\n          ppObj(json(elem), indent, buf, spaces, buf_str);\n        else add_to_clob(buf, buf_str, llcheck(elem.get_type));\n      end case;\n      end if;\n      if(y != arr.count) then add_to_clob(buf, buf_str, llcheck(getCommaSep(spaces))); end if;\n    end loop;\n  end ppEA;\n\n  procedure ppMem(mem json_value, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2) as\n    numbuf varchar2(4000);\n  begin\n    add_to_clob(buf, buf_str, llcheck(tab(indent, spaces)) || llcheck(getMemName(mem, spaces)));\n    case mem.get_type\n      when 'number' then\n        if (mem.get_number \u003c 1 and mem.get_number \u003e 0) then numbuf := '0'; end if;\n        if (mem.get_number \u003c 0 and mem.get_number \u003e -1) then\n          numbuf := '-0';\n          numbuf := numbuf || substr(to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          numbuf := numbuf || to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n        add_to_clob(buf, buf_str, llcheck(numbuf));\n      when 'string' then\n        if(mem.extended_str is not null) then --clob implementation\n          add_to_clob(buf, buf_str, case when mem.num = 1 then '\"' else '/**/' end);\n          declare\n            offset number := 1;\n            v_str varchar(32767);\n            amount number := 32767;\n          begin\n--            dbms_output.put_line('SIZE:'||dbms_lob.getlength(mem.extended_str));\n            while(offset \u003c= dbms_lob.getlength(mem.extended_str)) loop\n--            dbms_output.put_line('OFFSET:'||offset);\n --             v_str := dbms_lob.substr(mem.extended_str, 8192, offset);\n              dbms_lob.read(mem.extended_str, amount, offset, v_str);\n--            dbms_output.put_line('VSTR_SIZE:'||length(v_str));\n              if(mem.num = 1) then\n                add_to_clob(buf, buf_str, escapeString(v_str));\n              else\n                add_to_clob(buf, buf_str, v_str);\n              end if;\n              offset := offset + amount;\n            end loop;\n          end;\n          add_to_clob(buf, buf_str, case when mem.num = 1 then '\"' else '/**/' end || newline_char);\n        else\n          if(mem.num = 1) then\n            add_to_clob(buf, buf_str, llcheck('\"'||escapeString(mem.get_string)||'\"'));\n          else\n            add_to_clob(buf, buf_str, llcheck('/**/'||mem.get_string||'/**/'));\n          end if;\n        end if;\n      when 'bool' then\n        if(mem.get_bool) then\n          add_to_clob(buf, buf_str, llcheck('true'));\n        else\n          add_to_clob(buf, buf_str, llcheck('false'));\n        end if;\n      when 'null' then\n        add_to_clob(buf, buf_str, llcheck('null'));\n      when 'array' then\n        add_to_clob(buf, buf_str, llcheck('['));\n        ppEA(json_list(mem), indent, buf, spaces, buf_str);\n        add_to_clob(buf, buf_str, llcheck(']'));\n      when 'object' then\n        ppObj(json(mem), indent, buf, spaces, buf_str);\n      else add_to_clob(buf, buf_str, llcheck(mem.get_type));\n    end case;\n  end ppMem;\n\n  procedure ppObj(obj json, indent number, buf in out nocopy clob, spaces boolean, buf_str in out nocopy varchar2) as\n  begin\n    add_to_clob(buf, buf_str, llcheck('{') || newline(spaces));\n    for m in 1 .. obj.json_data.count loop\n      ppMem(obj.json_data(m), indent+1, buf, spaces, buf_str);\n      if(m != obj.json_data.count) then\n        add_to_clob(buf, buf_str, llcheck(',') || newline(spaces));\n      else\n        add_to_clob(buf, buf_str, newline(spaces));\n      end if;\n    end loop;\n    add_to_clob(buf, buf_str, llcheck(tab(indent, spaces)) || llcheck('}')); -- || chr(13);\n  end ppObj;\n\n  procedure pretty_print(obj json, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true) as\n    buf_str varchar2(32767);\n    amount number := dbms_lob.getlength(buf);\n  begin\n    if(erase_clob and amount \u003e 0) then dbms_lob.trim(buf, 0); dbms_lob.erase(buf, amount); end if;\n\n    max_line_len := line_length;\n    cur_line_len := 0;\n    ppObj(obj, 0, buf, spaces, buf_str);\n    flush_clob(buf, buf_str);\n  end;\n\n  procedure pretty_print_list(obj json_list, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true) as\n    buf_str varchar2(32767);\n    amount number := dbms_lob.getlength(buf);\n  begin\n    if(erase_clob and amount \u003e 0) then dbms_lob.trim(buf, 0); dbms_lob.erase(buf, amount); end if;\n\n    max_line_len := line_length;\n    cur_line_len := 0;\n    add_to_clob(buf, buf_str, llcheck('['));\n    ppEA(obj, 0, buf, spaces, buf_str);\n    add_to_clob(buf, buf_str, llcheck(']'));\n    flush_clob(buf, buf_str);\n  end;\n\n  procedure pretty_print_any(json_part json_value, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true) as\n    buf_str varchar2(32767) := '';\n    numbuf varchar2(4000);\n    amount number := dbms_lob.getlength(buf);\n  begin\n    if(erase_clob and amount \u003e 0) then dbms_lob.trim(buf, 0); dbms_lob.erase(buf, amount); end if;\n\n    case json_part.get_type\n      when 'number' then\n        if (json_part.get_number \u003c 1 and json_part.get_number \u003e 0) then numbuf := '0'; end if;\n        if (json_part.get_number \u003c 0 and json_part.get_number \u003e -1) then\n          numbuf := '-0';\n          numbuf := numbuf || substr(to_char(json_part.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          numbuf := numbuf || to_char(json_part.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n        add_to_clob(buf, buf_str, numbuf);\n      when 'string' then\n        if(json_part.extended_str is not null) then --clob implementation\n          add_to_clob(buf, buf_str, case when json_part.num = 1 then '\"' else '/**/' end);\n          declare\n            offset number := 1;\n            v_str varchar(32767);\n            amount number := 32767;\n          begin\n            while(offset \u003c= dbms_lob.getlength(json_part.extended_str)) loop\n              dbms_lob.read(json_part.extended_str, amount, offset, v_str);\n              if(json_part.num = 1) then\n                add_to_clob(buf, buf_str, escapeString(v_str));\n              else\n                add_to_clob(buf, buf_str, v_str);\n              end if;\n              offset := offset + amount;\n            end loop;\n          end;\n          add_to_clob(buf, buf_str, case when json_part.num = 1 then '\"' else '/**/' end);\n        else\n          if(json_part.num = 1) then\n            add_to_clob(buf, buf_str, llcheck('\"'||escapeString(json_part.get_string)||'\"'));\n          else\n            add_to_clob(buf, buf_str, llcheck('/**/'||json_part.get_string||'/**/'));\n          end if;\n        end if;\n      when 'bool' then\n\t      if(json_part.get_bool) then\n          add_to_clob(buf, buf_str, 'true');\n        else\n          add_to_clob(buf, buf_str, 'false');\n        end if;\n      when 'null' then\n        add_to_clob(buf, buf_str, 'null');\n      when 'array' then\n        pretty_print_list(json_list(json_part), spaces, buf, line_length);\n        return;\n      when 'object' then\n        pretty_print(json(json_part), spaces, buf, line_length);\n        return;\n      else add_to_clob(buf, buf_str, 'unknown type:'|| json_part.get_type);\n    end case;\n    flush_clob(buf, buf_str);\n  end;\n\n/* Clob method end here */\n\n/* Varchar2 method start here */\n\n  procedure ppObj(obj json, indent number, buf in out nocopy varchar2, spaces boolean);\n\n  procedure ppEA(input json_list, indent number, buf in out varchar2, spaces boolean) as\n    elem json_value;\n    arr json_value_array := input.list_data;\n    str varchar2(400);\n  begin\n    for y in 1 .. arr.count loop\n      elem := arr(y);\n      if(elem is not null) then\n      case elem.get_type\n        when 'number' then\n          str := '';\n          if (elem.get_number \u003c 1 and elem.get_number \u003e 0) then str := '0'; end if;\n          if (elem.get_number \u003c 0 and elem.get_number \u003e -1) then\n            str := '-0' || substr(to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n          else\n            str := str || to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n          end if;\n          buf := buf || llcheck(str);\n        when 'string' then\n          if(elem.num = 1) then\n            buf := buf || llcheck('\"'||escapeString(elem.get_string)||'\"');\n          else\n            buf := buf || llcheck('/**/'||elem.get_string||'/**/');\n          end if;\n        when 'bool' then\n          if(elem.get_bool) then\n            buf := buf || llcheck('true');\n          else\n            buf := buf || llcheck('false');\n          end if;\n        when 'null' then\n          buf := buf || llcheck('null');\n        when 'array' then\n          buf := buf || llcheck('[');\n          ppEA(json_list(elem), indent, buf, spaces);\n          buf := buf || llcheck(']');\n        when 'object' then\n          ppObj(json(elem), indent, buf, spaces);\n        else buf := buf || llcheck(elem.get_type); /* should never happen */\n      end case;\n      end if;\n      if(y != arr.count) then buf := buf || llcheck(getCommaSep(spaces)); end if;\n    end loop;\n  end ppEA;\n\n  procedure ppMem(mem json_value, indent number, buf in out nocopy varchar2, spaces boolean) as\n    str varchar2(400) := '';\n  begin\n    buf := buf || llcheck(tab(indent, spaces)) || getMemName(mem, spaces);\n    case mem.get_type\n      when 'number' then\n        if (mem.get_number \u003c 1 and mem.get_number \u003e 0) then str := '0'; end if;\n        if (mem.get_number \u003c 0 and mem.get_number \u003e -1) then\n          str := '-0' || substr(to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          str := str || to_char(mem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n        buf := buf || llcheck(str);\n      when 'string' then\n        if(mem.num = 1) then\n          buf := buf || llcheck('\"'||escapeString(mem.get_string)||'\"');\n        else\n          buf := buf || llcheck('/**/'||mem.get_string||'/**/');\n        end if;\n      when 'bool' then\n        if(mem.get_bool) then\n          buf := buf || llcheck('true');\n        else\n          buf := buf || llcheck('false');\n        end if;\n      when 'null' then\n        buf := buf || llcheck('null');\n      when 'array' then\n        buf := buf || llcheck('[');\n        ppEA(json_list(mem), indent, buf, spaces);\n        buf := buf || llcheck(']');\n      when 'object' then\n        ppObj(json(mem), indent, buf, spaces);\n      else buf := buf || llcheck(mem.get_type); /* should never happen */\n    end case;\n  end ppMem;\n\n  procedure ppObj(obj json, indent number, buf in out nocopy varchar2, spaces boolean) as\n  begin\n    buf := buf || llcheck('{') || newline(spaces);\n    for m in 1 .. obj.json_data.count loop\n      ppMem(obj.json_data(m), indent+1, buf, spaces);\n      if(m != obj.json_data.count) then buf := buf || llcheck(',') || newline(spaces);\n      else buf := buf || newline(spaces); end if;\n    end loop;\n    buf := buf || llcheck(tab(indent, spaces)) || llcheck('}'); -- || chr(13);\n  end ppObj;\n\n  function pretty_print(obj json, spaces boolean default true, line_length number default 0) return varchar2 as\n    buf varchar2(32767) := '';\n  begin\n    max_line_len := line_length;\n    cur_line_len := 0;\n    ppObj(obj, 0, buf, spaces);\n    return buf;\n  end pretty_print;\n\n  function pretty_print_list(obj json_list, spaces boolean default true, line_length number default 0) return varchar2 as\n    buf varchar2(32767);\n  begin\n    max_line_len := line_length;\n    cur_line_len := 0;\n    buf := llcheck('[');\n    ppEA(obj, 0, buf, spaces);\n    buf := buf || llcheck(']');\n    return buf;\n  end;\n\n  function pretty_print_any(json_part json_value, spaces boolean default true, line_length number default 0) return varchar2 as\n    buf varchar2(32767) := '';\n  begin\n    case json_part.get_type\n      when 'number' then\n        if (json_part.get_number() \u003c 1 and json_part.get_number() \u003e 0) then buf := buf || '0'; end if;\n        if (json_part.get_number() \u003c 0 and json_part.get_number() \u003e -1) then\n          buf := buf || '-0';\n          buf := buf || substr(to_char(json_part.get_number(), 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);\n        else\n          buf := buf || to_char(json_part.get_number(), 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');\n        end if;\n      when 'string' then\n        if(json_part.num = 1) then\n          buf := buf || '\"'||escapeString(json_part.get_string)||'\"';\n        else\n          buf := buf || '/**/'||json_part.get_string||'/**/';\n        end if;\n      when 'bool' then\n      \tif(json_part.get_bool) then buf := 'true'; else buf := 'false'; end if;\n      when 'null' then\n        buf := 'null';\n      when 'array' then\n        buf := pretty_print_list(json_list(json_part), spaces, line_length);\n      when 'object' then\n        buf := pretty_print(json(json_part), spaces, line_length);\n      else buf := 'weird error: '|| json_part.get_type;\n    end case;\n    return buf;\n  end;\n\n  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null) as\n    prev number := 1;\n    indx number := 1;\n    size_of_nl number := lengthb(delim);\n    v_str varchar2(32767);\n    amount number := 32767;\n  begin\n    if(jsonp is not null) then dbms_output.put_line(jsonp||'('); end if;\n    while(indx != 0) loop\n      --read every line\n      indx := dbms_lob.instr(my_clob, delim, prev+1);\n --     dbms_output.put_line(prev || ' to ' || indx);\n\n      if(indx = 0) then\n        --emit from prev to end;\n        amount := 32767;\n --       dbms_output.put_line(' mycloblen ' || dbms_lob.getlength(my_clob));\n        loop\n          dbms_lob.read(my_clob, amount, prev, v_str);\n          dbms_output.put_line(v_str);\n          prev := prev+amount-1;\n          exit when prev \u003e= dbms_lob.getlength(my_clob);\n        end loop;\n      else\n        amount := indx - prev;\n        if(amount \u003e 32767) then\n          amount := 32767;\n--          dbms_output.put_line(' mycloblen ' || dbms_lob.getlength(my_clob));\n          loop\n            dbms_lob.read(my_clob, amount, prev, v_str);\n            dbms_output.put_line(v_str);\n            prev := prev+amount-1;\n            amount := indx - prev;\n            exit when prev \u003e= indx - 1;\n            if(amount \u003e 32767) then amount := 32767; end if;\n          end loop;\n          prev := indx + size_of_nl;\n        else\n          dbms_lob.read(my_clob, amount, prev, v_str);\n          dbms_output.put_line(v_str);\n          prev := indx + size_of_nl;\n        end if;\n      end if;\n\n    end loop;\n    if(jsonp is not null) then dbms_output.put_line(')'); end if;\n\n/*    while (amount != 0) loop\n      indx := dbms_lob.instr(my_clob, delim, prev+1);\n\n--      dbms_output.put_line(prev || ' to ' || indx);\n      if(indx = 0) then\n        indx := dbms_lob.getlength(my_clob)+1;\n      end if;\n\n      if(indx-prev \u003e 32767) then\n        indx := prev+32767;\n      end if;\n--      dbms_output.put_line(prev || ' to ' || indx);\n      --substr doesnt work properly on all platforms! (come on oracle - error on Oracle VM for virtualbox)\n--        dbms_output.put_line(dbms_lob.substr(my_clob, indx-prev, prev));\n      amount := indx-prev;\n--        dbms_output.put_line('amount'||amount);\n      dbms_lob.read(my_clob, amount, prev, v_str);\n      dbms_output.put_line(v_str);\n      prev := indx+size_of_nl;\n      if(amount = 32767) then prev := prev-size_of_nl-1; end if;\n    end loop;\n    if(jsonp is not null) then dbms_output.put_line(')'); end if;*/\n  end;\n\n\n/*  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null) as\n    prev number := 1;\n    indx number := 1;\n    size_of_nl number := lengthb(delim);\n    v_str varchar2(32767);\n    amount number;\n  begin\n    if(jsonp is not null) then dbms_output.put_line(jsonp||'('); end if;\n    while (indx != 0) loop\n      indx := dbms_lob.instr(my_clob, delim, prev+1);\n\n--      dbms_output.put_line(prev || ' to ' || indx);\n      if(indx-prev \u003e 32767) then\n        indx := prev+32767;\n      end if;\n--      dbms_output.put_line(prev || ' to ' || indx);\n      --substr doesnt work properly on all platforms! (come on oracle - error on Oracle VM for virtualbox)\n      if(indx = 0) then\n--        dbms_output.put_line(dbms_lob.substr(my_clob, dbms_lob.getlength(my_clob)-prev+size_of_nl, prev));\n        amount := dbms_lob.getlength(my_clob)-prev+size_of_nl;\n        dbms_lob.read(my_clob, amount, prev, v_str);\n      else\n--        dbms_output.put_line(dbms_lob.substr(my_clob, indx-prev, prev));\n        amount := indx-prev;\n--        dbms_output.put_line('amount'||amount);\n        dbms_lob.read(my_clob, amount, prev, v_str);\n      end if;\n      dbms_output.put_line(v_str);\n      prev := indx+size_of_nl;\n      if(amount = 32767) then prev := prev-size_of_nl-1; end if;\n    end loop;\n    if(jsonp is not null) then dbms_output.put_line(')'); end if;\n  end;\n*/\n  procedure htp_output_clob(my_clob clob, jsonp varchar2 default null) as\n    /*amount number := 4096;\n    pos number := 1;\n    len number;\n    */\n    l_amt    number default 30;\n    l_off   number default 1;\n    l_str   varchar2(4096);\n\n  begin\n    if(jsonp is not null) then htp.prn(jsonp||'('); end if;\n\n    begin\n      loop\n        dbms_lob.read( my_clob, l_amt, l_off, l_str );\n\n        -- it is vital to use htp.PRN to avoid\n        -- spurious line feeds getting added to your\n        -- document\n        htp.prn( l_str  );\n        l_off := l_off+l_amt;\n        l_amt := 4096;\n      end loop;\n    exception\n      when no_data_found then NULL;\n    end;\n\n    /*\n    len := dbms_lob.getlength(my_clob);\n\n    while(pos \u003c len) loop\n      htp.prn(dbms_lob.substr(my_clob, amount, pos)); -- should I replace substr with dbms_lob.read?\n      --dbms_output.put_line(dbms_lob.substr(my_clob, amount, pos));\n      pos := pos + amount;\n    end loop;\n    */\n    if(jsonp is not null) then htp.prn(')'); end if;\n  end;\n\nend json_printer;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PRINTER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  indent_string varchar2(10 char) := '  '; --chr(9); for tab\n  newline_char varchar2(2 char)   := chr(13)||chr(10); -- Windows style\n  --newline_char varchar2(2) := chr(10); -- Mac style\n  --newline_char varchar2(2) := chr(13); -- Linux style\n  ascii_output boolean    not null := true;\n  escape_solidus boolean  not null := false;\n\n  function pretty_print(obj json, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_list(obj json_list, spaces boolean default true, line_length number default 0) return varchar2;\n  function pretty_print_any(json_part json_value, spaces boolean default true, line_length number default 0) return varchar2;\n  procedure pretty_print(obj json, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_list(obj json_list, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n  procedure pretty_print_any(json_part json_value, spaces boolean default true, buf in out nocopy clob, line_length number default 0, erase_clob boolean default true);\n\n  procedure dbms_output_clob(my_clob clob, delim varchar2, jsonp varchar2 default null);\n  procedure htp_output_clob(my_clob clob, jsonp varchar2 default null);\nend json_printer;"},{"Name":"JSON_PARSER","ObjectID":308476,"Digest":"4079e2277f0d5377a1120461e281bbd974ca5b5ace6e06d95d140dde67492283","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PARSER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  /* scanner tokens:\n    '{', '}', ',', ':', '[', ']', STRING, NUMBER, TRUE, FALSE, NULL\n  */\n  type rToken IS RECORD (\n    type_name VARCHAR2(7),\n    line PLS_INTEGER,\n    col PLS_INTEGER,\n    data VARCHAR2(32767),\n    data_overflow clob); -- max_string_size\n\n  type lTokens is table of rToken index by pls_integer;\n  type json_src is record (len number, offset number, src varchar2(32767), s_clob clob);\n\n  json_strict boolean not null := false;\n\n  function next_char(indx number, s in out nocopy json_src) return varchar2;\n  function next_char2(indx number, s in out nocopy json_src, amount number default 1) return varchar2;\n\n  function prepareClob(buf in clob) return json_parser.json_src;\n  function prepareVarchar2(buf in varchar2) return json_parser.json_src;\n  function lexer(jsrc in out nocopy json_src) return lTokens;\n  procedure print_token(t rToken);\n\n  function parser(str varchar2) return json;\n  function parse_list(str varchar2) return json_list;\n  function parse_any(str varchar2) return json_value;\n  function parser(str clob) return json;\n  function parse_list(str clob) return json_list;\n  function parse_any(str clob) return json_value;\n  procedure remove_duplicates(obj in out nocopy json);\n  function get_version return varchar2;\n\nend json_parser;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_PARSER\" as\n  /*\n  Copyright (c) 2009 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  decimalpoint varchar2(1 char) := '.';\n\n  procedure updateDecimalPoint as\n  begin\n    SELECT substr(VALUE,1,1) into decimalpoint FROM NLS_SESSION_PARAMETERS WHERE PARAMETER = 'NLS_NUMERIC_CHARACTERS';\n  end updateDecimalPoint;\n\n  /*type json_src is record (len number, offset number, src varchar2(10), s_clob clob); */\n  function next_char(indx number, s in out nocopy json_src) return varchar2 as\n  begin\n    if(indx \u003e s.len) then return null; end if;\n    --right offset?\n    if(indx \u003e 4000 + s.offset or indx \u003c s.offset) then\n    --load right offset\n      s.offset := indx - (indx mod 4000);\n      s.src := dbms_lob.substr(s.s_clob, 4000, s.offset+1);\n    end if;\n    --read from s.src\n    return substr(s.src, indx-s.offset, 1);\n  end;\n\n  function next_char2(indx number, s in out nocopy json_src, amount number default 1) return varchar2 as\n    buf varchar2(32767) := '';\n  begin\n    for i in 1..amount loop\n      buf := buf || next_char(indx-1+i,s);\n    end loop;\n    return buf;\n  end;\n\n  function prepareClob(buf clob) return json_parser.json_src as\n    temp json_parser.json_src;\n  begin\n    temp.s_clob := buf;\n    temp.offset := 0;\n    temp.src := dbms_lob.substr(buf, 4000, temp.offset+1);\n    temp.len := dbms_lob.getlength(buf);\n    return temp;\n  end;\n\n  function prepareVarchar2(buf varchar2) return json_parser.json_src as\n    temp json_parser.json_src;\n  begin\n    temp.s_clob := buf;\n    temp.offset := 0;\n    temp.src := substr(buf, 1, 4000);\n    temp.len := length(buf);\n    return temp;\n  end;\n\n  procedure debug(text varchar2) as\n  begin\n    dbms_output.put_line(text);\n  end;\n\n  procedure print_token(t rToken) as\n  begin\n    dbms_output.put_line('Line: '||t.line||' - Column: '||t.col||' - Type: '||t.type_name||' - Content: '||t.data);\n  end print_token;\n\n  /* SCANNER FUNCTIONS START */\n  procedure s_error(text varchar2, line number, col number) as\n  begin\n    raise_application_error(-20100, 'JSON Scanner exception @ line: '||line||' column: '||col||' - '||text);\n  end;\n\n  procedure s_error(text varchar2, tok rToken) as\n  begin\n    raise_application_error(-20100, 'JSON Scanner exception @ line: '||tok.line||' column: '||tok.col||' - '||text);\n  end;\n\n  function mt(t varchar2, l pls_integer, c pls_integer, d varchar2) return rToken as\n    token rToken;\n  begin\n    token.type_name := t;\n    token.line := l;\n    token.col := c;\n    token.data := d;\n    return token;\n  end;\n\n  function lexNumber(jsrc in out nocopy json_src, tok in out nocopy rToken, indx in out nocopy pls_integer) return pls_integer as\n    numbuf varchar2(4000) := '';\n    buf varchar2(4);\n    checkLoop boolean;\n  begin\n    buf := next_char(indx, jsrc);\n    if(buf = '-') then numbuf := '-'; indx := indx + 1; end if;\n    buf := next_char(indx, jsrc);\n    --0 or [1-9]([0-9])*\n    if(buf = '0') then\n      numbuf := numbuf || '0'; indx := indx + 1;\n      buf := next_char(indx, jsrc);\n    elsif(buf \u003e= '1' and buf \u003c= '9') then\n      numbuf := numbuf || buf; indx := indx + 1;\n      --read digits\n      buf := next_char(indx, jsrc);\n      while(buf \u003e= '0' and buf \u003c= '9') loop\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end loop;\n    end if;\n    --fraction\n    if(buf = '.') then\n      numbuf := numbuf || buf; indx := indx + 1;\n      buf := next_char(indx, jsrc);\n      checkLoop := FALSE;\n      while(buf \u003e= '0' and buf \u003c= '9') loop\n        checkLoop := TRUE;\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end loop;\n      if(not checkLoop) then\n        s_error('Expected: digits in fraction', tok);\n      end if;\n    end if;\n    --exp part\n    if(buf in ('e', 'E')) then\n      numbuf := numbuf || buf; indx := indx + 1;\n      buf := next_char(indx, jsrc);\n      if(buf = '+' or buf = '-') then\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end if;\n      checkLoop := FALSE;\n      while(buf \u003e= '0' and buf \u003c= '9') loop\n        checkLoop := TRUE;\n        numbuf := numbuf || buf; indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end loop;\n      if(not checkLoop) then\n        s_error('Expected: digits in exp', tok);\n      end if;\n    end if;\n\n    tok.data := numbuf;\n    return indx;\n  end lexNumber;\n\n  -- [a-zA-Z]([a-zA-Z0-9])*\n  function lexName(jsrc in out nocopy json_src, tok in out nocopy rToken, indx in out nocopy pls_integer) return pls_integer as\n    varbuf varchar2(32767) := '';\n    buf varchar(4);\n    num number;\n  begin\n    buf := next_char(indx, jsrc);\n    while(REGEXP_LIKE(buf, '^[[:alnum:]\\_]$', 'i')) loop\n      varbuf := varbuf || buf;\n      indx := indx + 1;\n      buf := next_char(indx, jsrc);\n      if (buf is null) then\n        goto retname;\n        --debug('Premature string ending');\n      end if;\n    end loop;\n    \u003c\u003cretname\u003e\u003e\n\n    --could check for reserved keywords here\n\n    --debug(varbuf);\n    tok.data := varbuf;\n    return indx-1;\n  end lexName;\n\n  procedure updateClob(v_extended in out nocopy clob, v_str varchar2) as\n  begin\n    dbms_lob.writeappend(v_extended, length(v_str), v_str);\n  end updateClob;\n\n  function lexString(jsrc in out nocopy json_src, tok in out nocopy rToken, indx in out nocopy pls_integer, endChar char) return pls_integer as\n    v_extended clob := null; v_count number := 0;\n    varbuf varchar2(32767) := '';\n    buf varchar(4);\n    wrong boolean;\n  begin\n    indx := indx +1;\n    buf := next_char(indx, jsrc);\n    while(buf != endChar) loop\n      --clob control\n      if(v_count \u003e 8191) then --crazy oracle error (16383 is the highest working length with unistr - 8192 choosen to be safe)\n        if(v_extended is null) then\n          v_extended := empty_clob();\n          dbms_lob.createtemporary(v_extended, true);\n        end if;\n        updateClob(v_extended, unistr(varbuf));\n        varbuf := ''; v_count := 0;\n      end if;\n      if(buf = Chr(13) or buf = CHR(9) or buf = CHR(10)) then\n        s_error('Control characters not allowed (CHR(9),CHR(10)CHR(13))', tok);\n      end if;\n      if(buf = '\\') then\n        --varbuf := varbuf || buf;\n        indx := indx + 1;\n        buf := next_char(indx, jsrc);\n        case\n          when buf in ('\\') then\n            varbuf := varbuf || buf || buf; v_count := v_count + 2;\n            indx := indx + 1;\n            buf := next_char(indx, jsrc);\n          when buf in ('\"', '/') then\n            varbuf := varbuf || buf; v_count := v_count + 1;\n            indx := indx + 1;\n            buf := next_char(indx, jsrc);\n          when buf = '''' then\n            if(json_strict = false) then\n              varbuf := varbuf || buf; v_count := v_count + 1;\n              indx := indx + 1;\n              buf := next_char(indx, jsrc);\n            else\n              s_error('strictmode - expected: \" \\ / b f n r t u ', tok);\n            end if;\n          when buf in ('b', 'f', 'n', 'r', 't') then\n            --backspace b = U+0008\n            --formfeed  f = U+000C\n            --newline   n = U+000A\n            --carret    r = U+000D\n            --tabulator t = U+0009\n            case buf\n            when 'b' then varbuf := varbuf || chr(8);\n            when 'f' then varbuf := varbuf || chr(12);\n            when 'n' then varbuf := varbuf || chr(10);\n            when 'r' then varbuf := varbuf || chr(13);\n            when 't' then varbuf := varbuf || chr(9);\n            end case;\n            --varbuf := varbuf || buf;\n            v_count := v_count + 1;\n            indx := indx + 1;\n            buf := next_char(indx, jsrc);\n          when buf = 'u' then\n            --four hexidecimal chars\n            declare\n              four varchar2(4);\n            begin\n              four := next_char2(indx+1, jsrc, 4);\n              wrong := FALSE;\n              if(upper(substr(four, 1,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(upper(substr(four, 2,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(upper(substr(four, 3,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(upper(substr(four, 4,1)) not in ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f')) then wrong := TRUE; end if;\n              if(wrong) then\n                s_error('expected: \" \\u([0-9][A-F]){4}', tok);\n              end if;\n--              varbuf := varbuf || buf || four;\n              varbuf := varbuf || '\\'||four;--chr(to_number(four,'XXXX'));\n               v_count := v_count + 5;\n              indx := indx + 5;\n              buf := next_char(indx, jsrc);\n              end;\n          else\n            s_error('expected: \" \\ / b f n r t u ', tok);\n        end case;\n      else\n        varbuf := varbuf || buf; v_count := v_count + 1;\n        indx := indx + 1;\n        buf := next_char(indx, jsrc);\n      end if;\n    end loop;\n\n    if (buf is null) then\n      s_error('string ending not found', tok);\n      --debug('Premature string ending');\n    end if;\n\n    --debug(varbuf);\n    --dbms_output.put_line(varbuf);\n    if(v_extended is not null) then\n      updateClob(v_extended, unistr(varbuf));\n      tok.data_overflow := v_extended;\n      tok.data := dbms_lob.substr(v_extended, 1, 32767);\n    else\n      tok.data := unistr(varbuf);\n    end if;\n    return indx;\n  end lexString;\n\n  /* scanner tokens:\n    '{', '}', ',', ':', '[', ']', STRING, NUMBER, TRUE, FALSE, NULL\n  */\n  function lexer(jsrc in out nocopy json_src) return lTokens as\n    tokens lTokens;\n    indx pls_integer := 1;\n    tok_indx pls_integer := 1;\n    buf varchar2(4);\n    lin_no number := 1;\n    col_no number := 0;\n  begin\n    while (indx \u003c= jsrc.len) loop\n      --read into buf\n      buf := next_char(indx, jsrc);\n      col_no := col_no + 1;\n      --convert to switch case\n      case\n        when buf = '{' then tokens(tok_indx) := mt('{', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = '}' then tokens(tok_indx) := mt('}', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = ',' then tokens(tok_indx) := mt(',', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = ':' then tokens(tok_indx) := mt(':', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = '[' then tokens(tok_indx) := mt('[', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = ']' then tokens(tok_indx) := mt(']', lin_no, col_no, null); tok_indx := tok_indx + 1;\n        when buf = 't' then\n          if(next_char2(indx, jsrc, 4) != 'true') then\n            if(json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i')) then\n              tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n              indx := lexName(jsrc, tokens(tok_indx), indx);\n              col_no := col_no + length(tokens(tok_indx).data) + 1;\n              tok_indx := tok_indx + 1;\n            else\n              s_error('Expected: ''true''', lin_no, col_no);\n            end if;\n          else\n            tokens(tok_indx) := mt('TRUE', lin_no, col_no, null); tok_indx := tok_indx + 1;\n            indx := indx + 3;\n            col_no := col_no + 3;\n          end if;\n        when buf = 'n' then\n          if(next_char2(indx, jsrc, 4) != 'null') then\n            if(json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i')) then\n              tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n              indx := lexName(jsrc, tokens(tok_indx), indx);\n              col_no := col_no + length(tokens(tok_indx).data) + 1;\n              tok_indx := tok_indx + 1;\n            else\n              s_error('Expected: ''null''', lin_no, col_no);\n            end if;\n          else\n            tokens(tok_indx) := mt('NULL', lin_no, col_no, null); tok_indx := tok_indx + 1;\n            indx := indx + 3;\n            col_no := col_no + 3;\n          end if;\n        when buf = 'f' then\n          if(next_char2(indx, jsrc, 5) != 'false') then\n            if(json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i')) then\n              tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n              indx := lexName(jsrc, tokens(tok_indx), indx);\n              col_no := col_no + length(tokens(tok_indx).data) + 1;\n              tok_indx := tok_indx + 1;\n            else\n              s_error('Expected: ''false''', lin_no, col_no);\n            end if;\n          else\n            tokens(tok_indx) := mt('FALSE', lin_no, col_no, null); tok_indx := tok_indx + 1;\n            indx := indx + 4;\n            col_no := col_no + 4;\n          end if;\n        /*   -- 9 = TAB, 10 = \\n, 13 = \\r (Linux = \\n, Windows = \\r\\n, Mac = \\r */\n        when (buf = Chr(10)) then --linux newlines\n          lin_no := lin_no + 1;\n          col_no := 0;\n\n        when (buf = Chr(13)) then --Windows or Mac way\n          lin_no := lin_no + 1;\n          col_no := 0;\n          if(jsrc.len \u003e= indx +1) then -- better safe than sorry\n            buf := next_char(indx+1, jsrc);\n            if(buf = Chr(10)) then --\\r\\n\n              indx := indx + 1;\n            end if;\n          end if;\n\n        when (buf = CHR(9)) then null; --tabbing\n        when (buf in ('-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) then --number\n          tokens(tok_indx) := mt('NUMBER', lin_no, col_no, null);\n          indx := lexNumber(jsrc, tokens(tok_indx), indx)-1;\n          col_no := col_no + length(tokens(tok_indx).data);\n          tok_indx := tok_indx + 1;\n        when buf = '\"' then --number\n          tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n          indx := lexString(jsrc, tokens(tok_indx), indx, '\"');\n          col_no := col_no + length(tokens(tok_indx).data) + 1;\n          tok_indx := tok_indx + 1;\n        when buf = '''' and json_strict = false then --number\n          tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n          indx := lexString(jsrc, tokens(tok_indx), indx, '''');\n          col_no := col_no + length(tokens(tok_indx).data) + 1; --hovsa her\n          tok_indx := tok_indx + 1;\n        when json_strict = false and REGEXP_LIKE(buf, '^[[:alpha:]]$', 'i') then\n          tokens(tok_indx) := mt('STRING', lin_no, col_no, null);\n          indx := lexName(jsrc, tokens(tok_indx), indx);\n          if(tokens(tok_indx).data_overflow is not null) then\n            col_no := col_no + dbms_lob.getlength(tokens(tok_indx).data_overflow) + 1;\n          else\n            col_no := col_no + length(tokens(tok_indx).data) + 1;\n          end if;\n          tok_indx := tok_indx + 1;\n        when json_strict = false and buf||next_char(indx+1, jsrc) = '/*' then --strip comments\n          declare\n            saveindx number := indx;\n            un_esc clob;\n          begin\n            indx := indx + 1;\n            loop\n              indx := indx + 1;\n              buf := next_char(indx, jsrc)||next_char(indx+1, jsrc);\n              exit when buf = '*/';\n              exit when buf is null;\n            end loop;\n\n            if(indx = saveindx+2) then\n              --enter unescaped mode\n              --dbms_output.put_line('Entering unescaped mode');\n              un_esc := empty_clob();\n              dbms_lob.createtemporary(un_esc, true);\n              indx := indx + 1;\n              loop\n                indx := indx + 1;\n                buf := next_char(indx, jsrc)||next_char(indx+1, jsrc)||next_char(indx+2, jsrc)||next_char(indx+3, jsrc);\n                exit when buf = '/**/';\n                if buf is null then\n                  s_error('Unexpected sequence /**/ to end unescaped data: '||buf, lin_no, col_no);\n                end if;\n                buf := next_char(indx, jsrc);\n                dbms_lob.writeappend(un_esc, length(buf), buf);\n              end loop;\n              tokens(tok_indx) := mt('ESTRING', lin_no, col_no, null);\n              tokens(tok_indx).data_overflow := un_esc;\n              col_no := col_no + dbms_lob.getlength(un_esc) + 1; --note: line count won't work properly\n              tok_indx := tok_indx + 1;\n              indx := indx + 2;\n            end if;\n\n            indx := indx + 1;\n          end;\n        when buf = ' ' then null; --space\n        else\n          s_error('Unexpected char: '||buf, lin_no, col_no);\n      end case;\n\n      indx := indx + 1;\n    end loop;\n\n    return tokens;\n  end lexer;\n\n  /* SCANNER END */\n\n  /* PARSER FUNCTIONS START*/\n  procedure p_error(text varchar2, tok rToken) as\n  begin\n    raise_application_error(-20101, 'JSON Parser exception @ line: '||tok.line||' column: '||tok.col||' - '||text);\n  end;\n\n  function parseObj(tokens lTokens, indx in out nocopy pls_integer) return json;\n\n  function parseArr(tokens lTokens, indx in out nocopy pls_integer) return json_list as\n    e_arr json_value_array := json_value_array();\n    ret_list json_list := json_list();\n    v_count number := 0;\n    tok rToken;\n  begin\n    --value, value, value ]\n    if(indx \u003e tokens.count) then p_error('more elements in array was excepted', tok); end if;\n    tok := tokens(indx);\n    while(tok.type_name != ']') loop\n      e_arr.extend;\n      v_count := v_count + 1;\n      case tok.type_name\n        when 'TRUE' then e_arr(v_count) := json_value(true);\n        when 'FALSE' then e_arr(v_count) := json_value(false);\n        when 'NULL' then e_arr(v_count) := json_value;\n        when 'STRING' then e_arr(v_count) := case when tok.data_overflow is not null then json_value(tok.data_overflow) else json_value(tok.data) end;\n        when 'ESTRING' then e_arr(v_count) := json_value(tok.data_overflow, false);\n        when 'NUMBER' then e_arr(v_count) := json_value(to_number(replace(tok.data, '.', decimalpoint)));\n        when '[' then\n          declare e_list json_list; begin\n            indx := indx + 1;\n            e_list := parseArr(tokens, indx);\n            e_arr(v_count) := e_list.to_json_value;\n          end;\n        when '{' then\n          indx := indx + 1;\n          e_arr(v_count) := parseObj(tokens, indx).to_json_value;\n        else\n          p_error('Expected a value', tok);\n      end case;\n      indx := indx + 1;\n      if(indx \u003e tokens.count) then p_error('] not found', tok); end if;\n      tok := tokens(indx);\n      if(tok.type_name = ',') then --advance\n        indx := indx + 1;\n        if(indx \u003e tokens.count) then p_error('more elements in array was excepted', tok); end if;\n        tok := tokens(indx);\n        if(tok.type_name = ']') then --premature exit\n          p_error('Premature exit in array', tok);\n        end if;\n      elsif(tok.type_name != ']') then --error\n        p_error('Expected , or ]', tok);\n      end if;\n\n    end loop;\n    ret_list.list_data := e_arr;\n    return ret_list;\n  end parseArr;\n\n  function parseMem(tokens lTokens, indx in out pls_integer, mem_name varchar2, mem_indx number) return json_value as\n    mem json_value;\n    tok rToken;\n  begin\n    tok := tokens(indx);\n    case tok.type_name\n      when 'TRUE' then mem := json_value(true);\n      when 'FALSE' then mem := json_value(false);\n      when 'NULL' then mem := json_value;\n      when 'STRING' then mem := case when tok.data_overflow is not null then json_value(tok.data_overflow) else json_value(tok.data) end;\n      when 'ESTRING' then mem := json_value(tok.data_overflow, false);\n      when 'NUMBER' then mem := json_value(to_number(replace(tok.data, '.', decimalpoint)));\n      when '[' then\n        declare\n          e_list json_list;\n        begin\n          indx := indx + 1;\n          e_list := parseArr(tokens, indx);\n          mem := e_list.to_json_value;\n        end;\n      when '{' then\n        indx := indx + 1;\n        mem := parseObj(tokens, indx).to_json_value;\n      else\n        p_error('Found '||tok.type_name, tok);\n    end case;\n    mem.mapname := mem_name;\n    mem.mapindx := mem_indx;\n\n    indx := indx + 1;\n    return mem;\n  end parseMem;\n\n  /*procedure test_duplicate_members(arr in json_member_array, mem_name in varchar2, wheretok rToken) as\n  begin\n    for i in 1 .. arr.count loop\n      if(arr(i).member_name = mem_name) then\n        p_error('Duplicate member name', wheretok);\n      end if;\n    end loop;\n  end test_duplicate_members;*/\n\n  function parseObj(tokens lTokens, indx in out nocopy pls_integer) return json as\n    type memmap is table of number index by varchar2(4000); -- i've read somewhere that this is not possible - but it is!\n    mymap memmap;\n    nullelemfound boolean := false;\n\n    obj json;\n    tok rToken;\n    mem_name varchar(4000);\n    arr json_value_array := json_value_array();\n  begin\n    --what to expect?\n    while(indx \u003c= tokens.count) loop\n      tok := tokens(indx);\n      --debug('E: '||tok.type_name);\n      case tok.type_name\n      when 'STRING' then\n        --member\n        mem_name := substr(tok.data, 1, 4000);\n        begin\n          if(mem_name is null) then\n            if(nullelemfound) then\n              p_error('Duplicate empty member: ', tok);\n            else\n              nullelemfound := true;\n            end if;\n          elsif(mymap(mem_name) is not null) then\n            p_error('Duplicate member name: '||mem_name, tok);\n          end if;\n        exception\n          when no_data_found then mymap(mem_name) := 1;\n        end;\n\n        indx := indx + 1;\n        if(indx \u003e tokens.count) then p_error('Unexpected end of input', tok); end if;\n        tok := tokens(indx);\n        indx := indx + 1;\n        if(indx \u003e tokens.count) then p_error('Unexpected end of input', tok); end if;\n        if(tok.type_name = ':') then\n          --parse\n          declare\n            jmb json_value;\n            x number;\n          begin\n            x := arr.count + 1;\n            jmb := parseMem(tokens, indx, mem_name, x);\n            arr.extend;\n            arr(x) := jmb;\n          end;\n        else\n          p_error('Expected '':''', tok);\n        end if;\n        --move indx forward if ',' is found\n        if(indx \u003e tokens.count) then p_error('Unexpected end of input', tok); end if;\n\n        tok := tokens(indx);\n        if(tok.type_name = ',') then\n          --debug('found ,');\n          indx := indx + 1;\n          tok := tokens(indx);\n          if(tok.type_name = '}') then --premature exit\n            p_error('Premature exit in json object', tok);\n          end if;\n        elsif(tok.type_name != '}') then\n           p_error('A comma seperator is probably missing', tok);\n        end if;\n      when '}' then\n        obj := json();\n        obj.json_data := arr;\n        return obj;\n      else\n        p_error('Expected string or }', tok);\n      end case;\n    end loop;\n\n    p_error('} not found', tokens(indx-1));\n\n    return obj;\n\n  end;\n\n  function parser(str varchar2) return json as\n    tokens lTokens;\n    obj json;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareVarchar2(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '{') then\n      indx := indx + 1;\n      obj := parseObj(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON Parser exception - no { start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('} should end the JSON object', tokens(indx));\n    end if;\n\n    return obj;\n  end parser;\n\n  function parse_list(str varchar2) return json_list as\n    tokens lTokens;\n    obj json_list;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareVarchar2(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '[') then\n      indx := indx + 1;\n      obj := parseArr(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON List Parser exception - no [ start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj;\n  end parse_list;\n\n  function parse_list(str clob) return json_list as\n    tokens lTokens;\n    obj json_list;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareClob(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '[') then\n      indx := indx + 1;\n      obj := parseArr(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON List Parser exception - no [ start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj;\n  end parse_list;\n\n  function parser(str clob) return json as\n    tokens lTokens;\n    obj json;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    --dbms_output.put_line('Using clob');\n    jsrc := prepareClob(str);\n    tokens := lexer(jsrc);\n    if(tokens(indx).type_name = '{') then\n      indx := indx + 1;\n      obj := parseObj(tokens, indx);\n    else\n      raise_application_error(-20101, 'JSON Parser exception - no { start found');\n    end if;\n    if(tokens.count != indx) then\n      p_error('} should end the JSON object', tokens(indx));\n    end if;\n\n    return obj;\n  end parser;\n\n  function parse_any(str varchar2) return json_value as\n    tokens lTokens;\n    obj json_list;\n    ret json_value;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    updateDecimalPoint();\n    jsrc := prepareVarchar2(str);\n    tokens := lexer(jsrc);\n    tokens(tokens.count+1).type_name := ']';\n    obj := parseArr(tokens, indx);\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj.head();\n  end parse_any;\n\n  function parse_any(str clob) return json_value as\n    tokens lTokens;\n    obj json_list;\n    indx pls_integer := 1;\n    jsrc json_src;\n  begin\n    jsrc := prepareClob(str);\n    tokens := lexer(jsrc);\n    tokens(tokens.count+1).type_name := ']';\n    obj := parseArr(tokens, indx);\n    if(tokens.count != indx) then\n      p_error('] should end the JSON List object', tokens(indx));\n    end if;\n\n    return obj.head();\n  end parse_any;\n\n  /* last entry is the one to keep */\n  procedure remove_duplicates(obj in out nocopy json) as\n    type memberlist is table of json_value index by varchar2(4000);\n    members memberlist;\n    nulljsonvalue json_value := null;\n    validated json := json();\n    indx varchar2(4000);\n  begin\n    for i in 1 .. obj.count loop\n      if(obj.get(i).mapname is null) then\n        nulljsonvalue := obj.get(i);\n      else\n        members(obj.get(i).mapname) := obj.get(i);\n      end if;\n    end loop;\n\n    validated.check_duplicate(false);\n    indx := members.first;\n    loop\n      exit when indx is null;\n      validated.put(indx, members(indx));\n      indx := members.next(indx);\n    end loop;\n    if(nulljsonvalue is not null) then\n      validated.put('', nulljsonvalue);\n    end if;\n\n    validated.check_for_duplicate := obj.check_for_duplicate;\n\n    obj := validated;\n  end;\n\n  function get_version return varchar2 as\n  begin\n    return 'PL/JSON v1.0.4';\n  end get_version;\n\nend json_parser;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_PARSER\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n  /* scanner tokens:\n    '{', '}', ',', ':', '[', ']', STRING, NUMBER, TRUE, FALSE, NULL\n  */\n  type rToken IS RECORD (\n    type_name VARCHAR2(7),\n    line PLS_INTEGER,\n    col PLS_INTEGER,\n    data VARCHAR2(32767),\n    data_overflow clob); -- max_string_size\n\n  type lTokens is table of rToken index by pls_integer;\n  type json_src is record (len number, offset number, src varchar2(32767), s_clob clob);\n\n  json_strict boolean not null := false;\n\n  function next_char(indx number, s in out nocopy json_src) return varchar2;\n  function next_char2(indx number, s in out nocopy json_src, amount number default 1) return varchar2;\n\n  function prepareClob(buf in clob) return json_parser.json_src;\n  function prepareVarchar2(buf in varchar2) return json_parser.json_src;\n  function lexer(jsrc in out nocopy json_src) return lTokens;\n  procedure print_token(t rToken);\n\n  function parser(str varchar2) return json;\n  function parse_list(str varchar2) return json_list;\n  function parse_any(str varchar2) return json_value;\n  function parser(str clob) return json;\n  function parse_list(str clob) return json_list;\n  function parse_any(str clob) return json_value;\n  procedure remove_duplicates(obj in out nocopy json);\n  function get_version return varchar2;\n\nend json_parser;"},{"Name":"JSON_EXT","ObjectID":308480,"Digest":"8558a4c4a8f66635fd2d9099cd8a0208b79abbddc15078b4cebc294c6994f0cc","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_EXT\" as\n  /*\n  Copyright (c) 2009 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n  function parsePath(json_path varchar2, base number default 1) return json_list;\n\n  --JSON Path getters\n  function get_json_value(obj json, v_path varchar2, base number default 1) return json_value;\n  function get_string(obj json, path varchar2,       base number default 1) return varchar2;\n  function get_number(obj json, path varchar2,       base number default 1) return number;\n  function get_json(obj json, path varchar2,         base number default 1) return json;\n  function get_json_list(obj json, path varchar2,    base number default 1) return json_list;\n  function get_bool(obj json, path varchar2,         base number default 1) return boolean;\n\n  --JSON Path putters\n  procedure put(obj in out nocopy json, path varchar2, elem varchar2,   base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem number,     base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json,       base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_list,  base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem boolean,    base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_value, base number default 1);\n\n  procedure remove(obj in out nocopy json, path varchar2, base number default 1);\n\n  --Pretty print with JSON Path - obsolete in 0.9.4 - obj.path(v_path).(to_char,print,htp)\n  function pp(obj json, v_path varchar2) return varchar2;\n  procedure pp(obj json, v_path varchar2); --using dbms_output.put_line\n  procedure pp_htp(obj json, v_path varchar2); --using htp.print\n\n  --extra function checks if number has no fraction\n  function is_integer(v json_value) return boolean;\n\n  format_string varchar2(30 char) := 'yyyy-mm-dd hh24:mi:ss';\n  --extension enables json to store dates without comprimising the implementation\n  function to_json_value(d date) return json_value;\n  --notice that a date type in json is also a varchar2\n  function is_date(v json_value) return boolean;\n  --convertion is needed to extract dates\n  --(json_ext.to_date will not work along with the normal to_date function - any fix will be appreciated)\n  function to_date2(v json_value) return date;\n  --JSON Path with date\n  function get_date(obj json, path varchar2, base number default 1) return date;\n  procedure put(obj in out nocopy json, path varchar2, elem date, base number default 1);\n\n  --experimental support of binary data with base64\n  function base64(binarydata blob) return json_list;\n  function base64(l json_list) return blob;\n\n  function encode(binarydata blob) return json_value;\n  function decode(v json_value) return blob;\n\nend json_ext;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_EXT\" as\n  scanner_exception exception;\n  pragma exception_init(scanner_exception, -20100);\n  parser_exception exception;\n  pragma exception_init(parser_exception, -20101);\n  jext_exception exception;\n  pragma exception_init(jext_exception, -20110);\n\n  --extra function checks if number has no fraction\n  function is_integer(v json_value) return boolean as\n    myint number(38); --the oracle way to specify an integer\n  begin\n    if(v.is_number) then\n      myint := v.get_number;\n      return (myint = v.get_number); --no rounding errors?\n    else\n      return false;\n    end if;\n  end;\n\n  --extension enables json to store dates without comprimising the implementation\n  function to_json_value(d date) return json_value as\n  begin\n    return json_value(to_char(d, format_string));\n  end;\n\n  --notice that a date type in json is also a varchar2\n  function is_date(v json_value) return boolean as\n    temp date;\n  begin\n    temp := json_ext.to_date2(v);\n    return true;\n  exception\n    when others then\n      return false;\n  end;\n\n  --convertion is needed to extract dates\n  function to_date2(v json_value) return date as\n  begin\n    if(v.is_string) then\n      return to_date(v.get_string, format_string);\n    else\n      raise_application_error(-20110, 'Anydata did not contain a date-value');\n    end if;\n  exception\n    when others then\n      raise_application_error(-20110, 'Anydata did not contain a date on the format: '||format_string);\n  end;\n\n  --Json Path parser\n  function parsePath(json_path varchar2, base number default 1) return json_list as\n    build_path varchar2(32767) := '[';\n    buf varchar2(4);\n    endstring varchar2(1);\n    indx number := 1;\n    ret json_list;\n\n    procedure next_char as\n    begin\n      if(indx \u003c= length(json_path)) then\n        buf := substr(json_path, indx, 1);\n        indx := indx + 1;\n      else\n        buf := null;\n      end if;\n    end;\n    --skip ws\n    procedure skipws as begin while(buf in (chr(9),chr(10),chr(13),' ')) loop next_char; end loop; end;\n\n  begin\n    next_char();\n    while(buf is not null) loop\n      if(buf = '.') then\n        next_char();\n        if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: . is not a valid json_path end'); end if;\n        if(not regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) then\n          raise_application_error(-20110, 'JSON Path parse error: alpha-numeric character or space expected at position '||indx);\n        end if;\n\n        if(build_path != '[') then build_path := build_path || ','; end if;\n        build_path := build_path || '\"';\n        while(regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) loop\n          build_path := build_path || buf;\n          next_char();\n        end loop;\n        build_path := build_path || '\"';\n      elsif(buf = '[') then\n        next_char();\n        skipws();\n        if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: [ is not a valid json_path end'); end if;\n        if(buf in ('1','2','3','4','5','6','7','8','9') or (buf = '0' and base = 0)) then\n          if(build_path != '[') then build_path := build_path || ','; end if;\n          while(buf in ('0','1','2','3','4','5','6','7','8','9')) loop\n            build_path := build_path || buf;\n            next_char();\n          end loop;\n        elsif (regexp_like(buf, '^(\\\"|\\'')', 'c')) then\n          endstring := buf;\n          if(build_path != '[') then build_path := build_path || ','; end if;\n          build_path := build_path || '\"';\n          next_char();\n          if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: premature json_path end'); end if;\n          while(buf != endstring) loop\n            build_path := build_path || buf;\n            next_char();\n            if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: premature json_path end'); end if;\n            if(buf = '\\') then\n              next_char();\n              build_path := build_path || '\\' || buf;\n              next_char();\n            end if;\n          end loop;\n          build_path := build_path || '\"';\n          next_char();\n        else\n          raise_application_error(-20110, 'JSON Path parse error: expected a string or an positive integer at '||indx);\n        end if;\n        skipws();\n        if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: premature json_path end'); end if;\n        if(buf != ']') then raise_application_error(-20110, 'JSON Path parse error: no array ending found. found: '|| buf); end if;\n        next_char();\n        skipws();\n      elsif(build_path = '[') then\n        if(not regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) then\n          raise_application_error(-20110, 'JSON Path parse error: alpha-numeric character or space expected at position '||indx);\n        end if;\n        build_path := build_path || '\"';\n        while(regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) loop\n          build_path := build_path || buf;\n          next_char();\n        end loop;\n        build_path := build_path || '\"';\n      else\n        raise_application_error(-20110, 'JSON Path parse error: expected . or [ found '|| buf || ' at position '|| indx);\n      end if;\n\n    end loop;\n\n    build_path := build_path || ']';\n    build_path := replace(replace(replace(replace(replace(build_path, chr(9), '\\t'), chr(10), '\\n'), chr(13), '\\f'), chr(8), '\\b'), chr(14), '\\r');\n\n    ret := json_list(build_path);\n    if(base != 1) then\n      --fix base 0 to base 1\n      declare\n        elem json_value;\n      begin\n        for i in 1 .. ret.count loop\n          elem := ret.get(i);\n          if(elem.is_number) then\n            ret.replace(i,elem.get_number()+1);\n          end if;\n        end loop;\n      end;\n    end if;\n\n    return ret;\n  end parsePath;\n\n  --JSON Path getters\n  function get_json_value(obj json, v_path varchar2, base number default 1) return json_value as\n    path json_list;\n    ret json_value;\n    o json; l json_list;\n  begin\n    path := parsePath(v_path, base);\n    ret := obj.to_json_value;\n    if(path.count = 0) then return ret; end if;\n\n    for i in 1 .. path.count loop\n      if(path.get(i).is_string()) then\n        --string fetch only on json\n        o := json(ret);\n        ret := o.get(path.get(i).get_string());\n      else\n        --number fetch on json and json_list\n        if(ret.is_array()) then\n          l := json_list(ret);\n          ret := l.get(path.get(i).get_number());\n        else\n          o := json(ret);\n          l := o.get_values();\n          ret := l.get(path.get(i).get_number());\n        end if;\n      end if;\n    end loop;\n\n    return ret;\n  exception\n    when scanner_exception then raise;\n    when parser_exception then raise;\n    when jext_exception then raise;\n    when others then return null;\n  end get_json_value;\n\n  --JSON Path getters\n  function get_string(obj json, path varchar2, base number default 1) return varchar2 as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_string) then\n      return null;\n    else\n      return temp.get_string;\n    end if;\n  end;\n\n  function get_number(obj json, path varchar2, base number default 1) return number as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_number) then\n      return null;\n    else\n      return temp.get_number;\n    end if;\n  end;\n\n  function get_json(obj json, path varchar2, base number default 1) return json as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_object) then\n      return null;\n    else\n      return json(temp);\n    end if;\n  end;\n\n  function get_json_list(obj json, path varchar2, base number default 1) return json_list as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_array) then\n      return null;\n    else\n      return json_list(temp);\n    end if;\n  end;\n\n  function get_bool(obj json, path varchar2, base number default 1) return boolean as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_bool) then\n      return null;\n    else\n      return temp.get_bool;\n    end if;\n  end;\n\n  function get_date(obj json, path varchar2, base number default 1) return date as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not is_date(temp)) then\n      return null;\n    else\n      return json_ext.to_date2(temp);\n    end if;\n  end;\n\n  /* JSON Path putter internal function */\n  procedure put_internal(obj in out nocopy json, v_path varchar2, elem json_value, base number) as\n    val json_value := elem;\n    path json_list;\n    backreference json_list := json_list();\n\n    keyval json_value; keynum number; keystring varchar2(4000);\n    temp json_value := obj.to_json_value;\n    obj_temp  json;\n    list_temp json_list;\n    inserter json_value;\n  begin\n    path := json_ext.parsePath(v_path, base);\n    if(path.count = 0) then raise_application_error(-20110, 'JSON_EXT put error: cannot put with empty string.'); end if;\n\n    --build backreference\n    for i in 1 .. path.count loop\n      --backreference.print(false);\n      keyval := path.get(i);\n      if (keyval.is_number()) then\n        --nummer index\n        keynum := keyval.get_number();\n        if((not temp.is_object()) and (not temp.is_array())) then\n          if(val is null) then return; end if;\n          backreference.remove_last;\n          temp := json_list().to_json_value();\n          backreference.append(temp);\n        end if;\n\n        if(temp.is_object()) then\n          obj_temp := json(temp);\n          if(obj_temp.count \u003c keynum) then\n            if(val is null) then return; end if;\n            raise_application_error(-20110, 'JSON_EXT put error: access object with to few members.');\n          end if;\n          temp := obj_temp.get(keynum);\n        else\n          list_temp := json_list(temp);\n          if(list_temp.count \u003c keynum) then\n            if(val is null) then return; end if;\n            --raise error or quit if val is null\n            for i in list_temp.count+1 .. keynum loop\n              list_temp.append(json_value.makenull);\n            end loop;\n            backreference.remove_last;\n            backreference.append(list_temp);\n          end if;\n\n          temp := list_temp.get(keynum);\n        end if;\n      else\n        --streng index\n        keystring := keyval.get_string();\n        if(not temp.is_object()) then\n          --backreference.print;\n          if(val is null) then return; end if;\n          backreference.remove_last;\n          temp := json().to_json_value();\n          backreference.append(temp);\n          --raise_application_error(-20110, 'JSON_ext put error: trying to access a non object with a string.');\n        end if;\n        obj_temp := json(temp);\n        temp := obj_temp.get(keystring);\n      end if;\n\n      if(temp is null) then\n        if(val is null) then return; end if;\n        --what to expect?\n        keyval := path.get(i+1);\n        if(keyval is not null and keyval.is_number()) then\n          temp := json_list().to_json_value;\n        else\n          temp := json().to_json_value;\n        end if;\n      end if;\n      backreference.append(temp);\n    end loop;\n\n  --  backreference.print(false);\n  --  path.print(false);\n\n    --use backreference and path together\n    inserter := val;\n    for i in reverse 1 .. backreference.count loop\n  --    inserter.print(false);\n      if( i = 1 ) then\n        keyval := path.get(1);\n        if(keyval.is_string()) then\n          keystring := keyval.get_string();\n        else\n          keynum := keyval.get_number();\n          declare\n            t1 json_value := obj.get(keynum);\n          begin\n            keystring := t1.mapname;\n          end;\n        end if;\n        if(inserter is null) then obj.remove(keystring); else obj.put(keystring, inserter); end if;\n      else\n        temp := backreference.get(i-1);\n        if(temp.is_object()) then\n          keyval := path.get(i);\n          obj_temp := json(temp);\n          if(keyval.is_string()) then\n            keystring := keyval.get_string();\n          else\n            keynum := keyval.get_number();\n            declare\n              t1 json_value := obj_temp.get(keynum);\n            begin\n              keystring := t1.mapname;\n            end;\n          end if;\n          if(inserter is null) then\n            obj_temp.remove(keystring);\n            if(obj_temp.count \u003e 0) then inserter := obj_temp.to_json_value; end if;\n          else\n            obj_temp.put(keystring, inserter);\n            inserter := obj_temp.to_json_value;\n          end if;\n        else\n          --array only number\n          keynum := path.get(i).get_number();\n          list_temp := json_list(temp);\n          list_temp.remove(keynum);\n          if(not inserter is null) then\n            list_temp.append(inserter, keynum);\n            inserter := list_temp.to_json_value;\n          else\n            if(list_temp.count \u003e 0) then inserter := list_temp.to_json_value; end if;\n          end if;\n        end if;\n      end if;\n\n    end loop;\n\n  end put_internal;\n\n  /* JSON Path putters */\n  procedure put(obj in out nocopy json, path varchar2, elem varchar2, base number default 1) as\n  begin\n    put_internal(obj, path, json_value(elem), base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem number, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, json_value(elem), base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem json, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, elem.to_json_value, base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem json_list, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, elem.to_json_value, base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem boolean, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, json_value(elem), base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem json_value, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, elem, base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem date, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, json_ext.to_json_value(elem), base);\n  end;\n\n  procedure remove(obj in out nocopy json, path varchar2, base number default 1) as\n  begin\n    json_ext.put_internal(obj,path,null,base);\n--    if(json_ext.get_json_value(obj,path) is not null) then\n--    end if;\n  end remove;\n\n    --Pretty print with JSON Path\n  function pp(obj json, v_path varchar2) return varchar2 as\n    json_part json_value;\n  begin\n    json_part := json_ext.get_json_value(obj, v_path);\n    if(json_part is null) then\n      return '';\n    else\n      return json_printer.pretty_print_any(json_part); --escapes a possible internal string\n    end if;\n  end pp;\n\n  procedure pp(obj json, v_path varchar2) as --using dbms_output.put_line\n  begin\n    dbms_output.put_line(pp(obj, v_path));\n  end pp;\n\n  -- spaces = false!\n  procedure pp_htp(obj json, v_path varchar2) as --using htp.print\n    json_part json_value;\n  begin\n    json_part := json_ext.get_json_value(obj, v_path);\n    if(json_part is null) then htp.print; else\n      htp.print(json_printer.pretty_print_any(json_part, false));\n    end if;\n  end pp_htp;\n\n  function base64(binarydata blob) return json_list as\n    obj json_list := json_list();\n    c clob := empty_clob();\n    benc blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n--    temp varchar2(32767);\n\n    FUNCTION encodeBlob2Base64(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 45;\n      vBlobEnc BLOB := empty_blob();\n      vBlobEncLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(45);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 encoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobEnc, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobEnc, utl_encode.base64_encode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobEncLen := dbms_lob.getlength(vBlobEnc);\n--      dbms_output.put_line('\u003cBlobEncLength\u003e' || vBlobEncLen);\n--      dbms_output.put_line('Finshed base64 encoding.');\n      RETURN vBlobEnc;\n    END encodeBlob2Base64;\n  begin\n    benc := encodeBlob2Base64(binarydata);\n    dbms_lob.createtemporary(c, TRUE);\n    v_amount := DBMS_LOB.GETLENGTH(benc);\n    DBMS_LOB.CONVERTTOCLOB(c, benc, v_amount, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n\n    v_amount := DBMS_LOB.GETLENGTH(c);\n    v_clob_offset := 1;\n    --dbms_output.put_line('V amount: '||v_amount);\n    while(v_clob_offset \u003c v_amount) loop\n      --dbms_output.put_line(v_offset);\n      --temp := ;\n      --dbms_output.put_line('size: '||length(temp));\n      obj.append(dbms_lob.SUBSTR(c, 4000,v_clob_offset));\n      v_clob_offset := v_clob_offset + 4000;\n    end loop;\n    dbms_lob.freetemporary(benc);\n    dbms_lob.freetemporary(c);\n  --dbms_output.put_line(obj.count);\n  --dbms_output.put_line(obj.get_last().to_char);\n    return obj;\n\n  end base64;\n\n\n  function base64(l json_list) return blob as\n    c clob := empty_clob();\n    b blob := empty_blob();\n    bret blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := 0; --DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n\n    FUNCTION decodeBase642Blob(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 256;--32;\n      vBlobDec BLOB := empty_blob();\n      vBlobDecLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(256);--32);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 decoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobDec, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobDec, utl_encode.base64_decode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobDecLen := dbms_lob.getlength(vBlobDec);\n--      dbms_output.put_line('\u003cBlobDecLength\u003e' || vBlobDecLen);\n--      dbms_output.put_line('Finshed base64 decoding.');\n      RETURN vBlobDec;\n    END decodeBase642Blob;\n  begin\n    dbms_lob.createtemporary(c, TRUE);\n    for i in 1 .. l.count loop\n      dbms_lob.append(c, l.get(i).get_string());\n    end loop;\n    v_amount := DBMS_LOB.GETLENGTH(c);\n--    dbms_output.put_line('L C'||v_amount);\n\n    dbms_lob.createtemporary(b, TRUE);\n    DBMS_LOB.CONVERTTOBLOB(b, c, dbms_lob.lobmaxsize, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n    dbms_lob.freetemporary(c);\n    v_amount := DBMS_LOB.GETLENGTH(b);\n--    dbms_output.put_line('L B'||v_amount);\n\n    bret := decodeBase642Blob(b);\n    dbms_lob.freetemporary(b);\n    return bret;\n\n  end base64;\n\n  function encode(binarydata blob) return json_value as\n    obj json_value;\n    c clob := empty_clob();\n    benc blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n--    temp varchar2(32767);\n\n    FUNCTION encodeBlob2Base64(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 45;\n      vBlobEnc BLOB := empty_blob();\n      vBlobEncLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(45);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 encoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobEnc, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobEnc, utl_encode.base64_encode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobEncLen := dbms_lob.getlength(vBlobEnc);\n--      dbms_output.put_line('\u003cBlobEncLength\u003e' || vBlobEncLen);\n--      dbms_output.put_line('Finshed base64 encoding.');\n      RETURN vBlobEnc;\n    END encodeBlob2Base64;\n  begin\n    benc := encodeBlob2Base64(binarydata);\n    dbms_lob.createtemporary(c, TRUE);\n    v_amount := DBMS_LOB.GETLENGTH(benc);\n    DBMS_LOB.CONVERTTOCLOB(c, benc, v_amount, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n\n    obj := json_value(c);\n\n    dbms_lob.freetemporary(benc);\n    dbms_lob.freetemporary(c);\n  --dbms_output.put_line(obj.count);\n  --dbms_output.put_line(obj.get_last().to_char);\n    return obj;\n\n  end encode;\n\n  function decode(v json_value) return blob as\n    c clob := empty_clob();\n    b blob := empty_blob();\n    bret blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := 0; --DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n\n    FUNCTION decodeBase642Blob(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 256;--32;\n      vBlobDec BLOB := empty_blob();\n      vBlobDecLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(256);--32);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 decoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobDec, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobDec, utl_encode.base64_decode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobDecLen := dbms_lob.getlength(vBlobDec);\n--      dbms_output.put_line('\u003cBlobDecLength\u003e' || vBlobDecLen);\n--      dbms_output.put_line('Finshed base64 decoding.');\n      RETURN vBlobDec;\n    END decodeBase642Blob;\n  begin\n    dbms_lob.createtemporary(c, TRUE);\n    v.get_string(c);\n    v_amount := DBMS_LOB.GETLENGTH(c);\n--    dbms_output.put_line('L C'||v_amount);\n\n    dbms_lob.createtemporary(b, TRUE);\n    DBMS_LOB.CONVERTTOBLOB(b, c, dbms_lob.lobmaxsize, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n    dbms_lob.freetemporary(c);\n    v_amount := DBMS_LOB.GETLENGTH(b);\n--    dbms_output.put_line('L B'||v_amount);\n\n    bret := decodeBase642Blob(b);\n    dbms_lob.freetemporary(b);\n    return bret;\n\n  end decode;\n\n\nend json_ext;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_EXT\" as\n  /*\n  Copyright (c) 2009 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n  function parsePath(json_path varchar2, base number default 1) return json_list;\n\n  --JSON Path getters\n  function get_json_value(obj json, v_path varchar2, base number default 1) return json_value;\n  function get_string(obj json, path varchar2,       base number default 1) return varchar2;\n  function get_number(obj json, path varchar2,       base number default 1) return number;\n  function get_json(obj json, path varchar2,         base number default 1) return json;\n  function get_json_list(obj json, path varchar2,    base number default 1) return json_list;\n  function get_bool(obj json, path varchar2,         base number default 1) return boolean;\n\n  --JSON Path putters\n  procedure put(obj in out nocopy json, path varchar2, elem varchar2,   base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem number,     base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json,       base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_list,  base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem boolean,    base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_value, base number default 1);\n\n  procedure remove(obj in out nocopy json, path varchar2, base number default 1);\n\n  --Pretty print with JSON Path - obsolete in 0.9.4 - obj.path(v_path).(to_char,print,htp)\n  function pp(obj json, v_path varchar2) return varchar2;\n  procedure pp(obj json, v_path varchar2); --using dbms_output.put_line\n  procedure pp_htp(obj json, v_path varchar2); --using htp.print\n\n  --extra function checks if number has no fraction\n  function is_integer(v json_value) return boolean;\n\n  format_string varchar2(30 char) := 'yyyy-mm-dd hh24:mi:ss';\n  --extension enables json to store dates without comprimising the implementation\n  function to_json_value(d date) return json_value;\n  --notice that a date type in json is also a varchar2\n  function is_date(v json_value) return boolean;\n  --convertion is needed to extract dates\n  --(json_ext.to_date will not work along with the normal to_date function - any fix will be appreciated)\n  function to_date2(v json_value) return date;\n  --JSON Path with date\n  function get_date(obj json, path varchar2, base number default 1) return date;\n  procedure put(obj in out nocopy json, path varchar2, elem date, base number default 1);\n\n  --experimental support of binary data with base64\n  function base64(binarydata blob) return json_list;\n  function base64(l json_list) return blob;\n\n  function encode(binarydata blob) return json_value;\n  function decode(v json_value) return blob;\n\nend json_ext;"},{"Name":"JSON_DYN","ObjectID":308487,"Digest":"6005110f124cdbf7ba1f43819d2117dbee19d6e07a1f3f68fd53a696cc529832","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_DYN\" authid current_user as\n /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  null_as_empty_string   boolean not null := true;  --varchar2\n  include_dates          boolean not null := true;  --date\n  include_clobs          boolean not null := true;\n  include_blobs          boolean not null := false;\n\n  /* list with objects */\n  function executeList(stmt varchar2, bindvar json default null, cur_num number default null) return json_list;\n\n  /* object with lists */\n  function executeObject(stmt varchar2, bindvar json default null, cur_num number default null) return json;\n\n\n  /* usage example:\n   * declare\n   *   res json_list;\n   * begin\n   *   res := json_dyn.executeList(\n   *            'select :bindme as one, :lala as two from dual where dummy in :arraybind',\n   *            json('{bindme:\"4\", lala:123, arraybind:[1,2,3,\"X\"]}')\n   *          );\n   *   res.print;\n   * end;\n   */\n\n/* --11g functions\n  function executeList(stmt in out sys_refcursor) return json_list;\n  function executeObject(stmt in out sys_refcursor) return json;\n*/\nend json_dyn;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_DYN\" as\n/*\n  -- 11gR2\n  function executeList(stmt in out sys_refcursor) return json_list as\n    l_cur number;\n  begin\n    l_cur := dbms_sql.to_cursor_number(stmt);\n    return json_dyn.executeList(null, null, l_cur);\n  end;\n\n  -- 11gR2\n  function executeObject(stmt in out sys_refcursor) return json as\n    l_cur number;\n  begin\n    l_cur := dbms_sql.to_cursor_number(stmt);\n    return json_dyn.executeObject(null, null, l_cur);\n  end;\n*/\n\n  procedure bind_json(l_cur number, bindvar json) as\n    keylist json_list := bindvar.get_keys();\n  begin\n    for i in 1 .. keylist.count loop\n      if(bindvar.get(i).get_type = 'number') then\n        dbms_sql.bind_variable(l_cur, ':'||keylist.get(i).get_string, bindvar.get(i).get_number);\n      elsif(bindvar.get(i).get_type = 'array') then\n        declare\n          v_bind dbms_sql.varchar2_table;\n          v_arr  json_list := json_list(bindvar.get(i));\n        begin\n          for j in 1 .. v_arr.count loop\n            v_bind(j) := v_arr.get(j).value_of;\n          end loop;\n          dbms_sql.bind_array(l_cur, ':'||keylist.get(i).get_string, v_bind);\n        end;\n      else\n        dbms_sql.bind_variable(l_cur, ':'||keylist.get(i).get_string, bindvar.get(i).value_of());\n      end if;\n    end loop;\n  end bind_json;\n\n  /* list with objects */\n  function executeList(stmt varchar2, bindvar json, cur_num number) return json_list as\n    l_cur number;\n    l_dtbl dbms_sql.desc_tab;\n    l_cnt number;\n    l_status number;\n    l_val varchar2(4000);\n    outer_list json_list := json_list();\n    inner_obj json;\n    conv number;\n    read_date date;\n    read_clob clob;\n    read_blob blob;\n    col_type number;\n  begin\n    if(cur_num is not null) then\n      l_cur := cur_num;\n    else\n      l_cur := dbms_sql.open_cursor;\n      dbms_sql.parse(l_cur, stmt, dbms_sql.native);\n      if(bindvar is not null) then bind_json(l_cur, bindvar); end if;\n    end if;\n    dbms_sql.describe_columns(l_cur, l_cnt, l_dtbl);\n    for i in 1..l_cnt loop\n      col_type := l_dtbl(i).col_type;\n      --dbms_output.put_line(col_type);\n      if(col_type = 12) then\n        dbms_sql.define_column(l_cur,i,read_date);\n      elsif(col_type = 112) then\n        dbms_sql.define_column(l_cur,i,read_clob);\n      elsif(col_type = 113) then\n        dbms_sql.define_column(l_cur,i,read_blob);\n      elsif(col_type in (1,2,96)) then\n        dbms_sql.define_column(l_cur,i,l_val,4000);\n      end if;\n    end loop;\n\n    if(cur_num is null) then l_status := dbms_sql.execute(l_cur); end if;\n\n    --loop through rows\n    while ( dbms_sql.fetch_rows(l_cur) \u003e 0 ) loop\n      inner_obj := json(); --init for each row\n      --loop through columns\n      for i in 1..l_cnt loop\n        case true\n        --handling string types\n        when l_dtbl(i).col_type in (1,96) then -- varchar2\n          dbms_sql.column_value(l_cur,i,l_val);\n          if(l_val is null) then\n            if(null_as_empty_string) then\n              inner_obj.put(l_dtbl(i).col_name, ''); --treatet as emptystring?\n            else\n              inner_obj.put(l_dtbl(i).col_name, json_value.makenull); --null\n            end if;\n          else\n            inner_obj.put(l_dtbl(i).col_name, json_value(l_val)); --null\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'varchar2' ||l_dtbl(i).col_type);\n        --handling number types\n        when l_dtbl(i).col_type = 2 then -- number\n          dbms_sql.column_value(l_cur,i,l_val);\n          conv := l_val;\n          inner_obj.put(l_dtbl(i).col_name, conv);\n          -- dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'number ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 12 then -- date\n          if(include_dates) then\n            dbms_sql.column_value(l_cur,i,read_date);\n            inner_obj.put(l_dtbl(i).col_name, json_ext.to_json_value(read_date));\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'date ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 112 then --clob\n          if(include_clobs) then\n            dbms_sql.column_value(l_cur,i,read_clob);\n            inner_obj.put(l_dtbl(i).col_name, json_value(read_clob));\n          end if;\n        when l_dtbl(i).col_type = 113 then --blob\n          if(include_blobs) then\n            dbms_sql.column_value(l_cur,i,read_blob);\n            if(dbms_lob.getlength(read_blob) \u003e 0) then\n              inner_obj.put(l_dtbl(i).col_name, json_ext.encode(read_blob));\n            else\n              inner_obj.put(l_dtbl(i).col_name, json_value.makenull);\n            end if;\n          end if;\n\n        else null; --discard other types\n        end case;\n      end loop;\n      outer_list.append(inner_obj.to_json_value);\n    end loop;\n    dbms_sql.close_cursor(l_cur);\n    return outer_list;\n  end executeList;\n\n  /* object with lists */\n  function executeObject(stmt varchar2, bindvar json, cur_num number) return json as\n    l_cur number;\n    l_dtbl dbms_sql.desc_tab;\n    l_cnt number;\n    l_status number;\n    l_val varchar2(4000);\n    inner_list_names json_list := json_list();\n    inner_list_data json_list := json_list();\n    data_list json_list;\n    outer_obj json := json();\n    conv number;\n    read_date date;\n    read_clob clob;\n    read_blob blob;\n    col_type number;\n  begin\n    if(cur_num is not null) then\n      l_cur := cur_num;\n    else\n      l_cur := dbms_sql.open_cursor;\n      dbms_sql.parse(l_cur, stmt, dbms_sql.native);\n      if(bindvar is not null) then bind_json(l_cur, bindvar); end if;\n    end if;\n    dbms_sql.describe_columns(l_cur, l_cnt, l_dtbl);\n    for i in 1..l_cnt loop\n      col_type := l_dtbl(i).col_type;\n      if(col_type = 12) then\n        dbms_sql.define_column(l_cur,i,read_date);\n      elsif(col_type = 112) then\n        dbms_sql.define_column(l_cur,i,read_clob);\n      elsif(col_type = 113) then\n        dbms_sql.define_column(l_cur,i,read_blob);\n      elsif(col_type in (1,2,96)) then\n        dbms_sql.define_column(l_cur,i,l_val,4000);\n      end if;\n    end loop;\n    if(cur_num is null) then l_status := dbms_sql.execute(l_cur); end if;\n\n    --build up name_list\n    for i in 1..l_cnt loop\n      case l_dtbl(i).col_type\n        when 1 then inner_list_names.append(l_dtbl(i).col_name);\n        when 96 then inner_list_names.append(l_dtbl(i).col_name);\n        when 2 then inner_list_names.append(l_dtbl(i).col_name);\n        when 12 then if(include_dates) then inner_list_names.append(l_dtbl(i).col_name); end if;\n        when 112 then if(include_clobs) then inner_list_names.append(l_dtbl(i).col_name); end if;\n        when 113 then if(include_blobs) then inner_list_names.append(l_dtbl(i).col_name); end if;\n        else null;\n      end case;\n    end loop;\n\n    --loop through rows\n    while ( dbms_sql.fetch_rows(l_cur) \u003e 0 ) loop\n      data_list := json_list();\n      --loop through columns\n      for i in 1..l_cnt loop\n        case true\n        --handling string types\n        when l_dtbl(i).col_type in (1,96) then -- varchar2\n          dbms_sql.column_value(l_cur,i,l_val);\n          if(l_val is null) then\n            if(null_as_empty_string) then\n              data_list.append(''); --treatet as emptystring?\n            else\n              data_list.append(json_value.makenull); --null\n            end if;\n          else\n            data_list.append(json_value(l_val)); --null\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'varchar2' ||l_dtbl(i).col_type);\n        --handling number types\n        when l_dtbl(i).col_type = 2 then -- number\n          dbms_sql.column_value(l_cur,i,l_val);\n          conv := l_val;\n          data_list.append(conv);\n          -- dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'number ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 12 then -- date\n          if(include_dates) then\n            dbms_sql.column_value(l_cur,i,read_date);\n            data_list.append(json_ext.to_json_value(read_date));\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'date ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 112 then --clob\n          if(include_clobs) then\n            dbms_sql.column_value(l_cur,i,read_clob);\n            data_list.append(json_value(read_clob));\n          end if;\n        when l_dtbl(i).col_type = 113 then --blob\n          if(include_blobs) then\n            dbms_sql.column_value(l_cur,i,read_blob);\n            if(dbms_lob.getlength(read_blob) \u003e 0) then\n              data_list.append(json_ext.encode(read_blob));\n            else\n              data_list.append(json_value.makenull);\n            end if;\n          end if;\n        else null; --discard other types\n        end case;\n      end loop;\n      inner_list_data.append(data_list);\n    end loop;\n\n    outer_obj.put('names', inner_list_names.to_json_value);\n    outer_obj.put('data', inner_list_data.to_json_value);\n    dbms_sql.close_cursor(l_cur);\n    return outer_obj;\n  end executeObject;\n\nend json_dyn;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_DYN\" authid current_user as\n /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  null_as_empty_string   boolean not null := true;  --varchar2\n  include_dates          boolean not null := true;  --date\n  include_clobs          boolean not null := true;\n  include_blobs          boolean not null := false;\n\n  /* list with objects */\n  function executeList(stmt varchar2, bindvar json default null, cur_num number default null) return json_list;\n\n  /* object with lists */\n  function executeObject(stmt varchar2, bindvar json default null, cur_num number default null) return json;\n\n\n  /* usage example:\n   * declare\n   *   res json_list;\n   * begin\n   *   res := json_dyn.executeList(\n   *            'select :bindme as one, :lala as two from dual where dummy in :arraybind',\n   *            json('{bindme:\"4\", lala:123, arraybind:[1,2,3,\"X\"]}')\n   *          );\n   *   res.print;\n   * end;\n   */\n\n/* --11g functions\n  function executeList(stmt in out sys_refcursor) return json_list;\n  function executeObject(stmt in out sys_refcursor) return json;\n*/\nend json_dyn;"},{"Name":"JSON_DYN","ObjectID":308486,"Digest":"6005110f124cdbf7ba1f43819d2117dbee19d6e07a1f3f68fd53a696cc529832","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_DYN\" authid current_user as\n /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  null_as_empty_string   boolean not null := true;  --varchar2\n  include_dates          boolean not null := true;  --date\n  include_clobs          boolean not null := true;\n  include_blobs          boolean not null := false;\n\n  /* list with objects */\n  function executeList(stmt varchar2, bindvar json default null, cur_num number default null) return json_list;\n\n  /* object with lists */\n  function executeObject(stmt varchar2, bindvar json default null, cur_num number default null) return json;\n\n\n  /* usage example:\n   * declare\n   *   res json_list;\n   * begin\n   *   res := json_dyn.executeList(\n   *            'select :bindme as one, :lala as two from dual where dummy in :arraybind',\n   *            json('{bindme:\"4\", lala:123, arraybind:[1,2,3,\"X\"]}')\n   *          );\n   *   res.print;\n   * end;\n   */\n\n/* --11g functions\n  function executeList(stmt in out sys_refcursor) return json_list;\n  function executeObject(stmt in out sys_refcursor) return json;\n*/\nend json_dyn;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_DYN\" as\n/*\n  -- 11gR2\n  function executeList(stmt in out sys_refcursor) return json_list as\n    l_cur number;\n  begin\n    l_cur := dbms_sql.to_cursor_number(stmt);\n    return json_dyn.executeList(null, null, l_cur);\n  end;\n\n  -- 11gR2\n  function executeObject(stmt in out sys_refcursor) return json as\n    l_cur number;\n  begin\n    l_cur := dbms_sql.to_cursor_number(stmt);\n    return json_dyn.executeObject(null, null, l_cur);\n  end;\n*/\n\n  procedure bind_json(l_cur number, bindvar json) as\n    keylist json_list := bindvar.get_keys();\n  begin\n    for i in 1 .. keylist.count loop\n      if(bindvar.get(i).get_type = 'number') then\n        dbms_sql.bind_variable(l_cur, ':'||keylist.get(i).get_string, bindvar.get(i).get_number);\n      elsif(bindvar.get(i).get_type = 'array') then\n        declare\n          v_bind dbms_sql.varchar2_table;\n          v_arr  json_list := json_list(bindvar.get(i));\n        begin\n          for j in 1 .. v_arr.count loop\n            v_bind(j) := v_arr.get(j).value_of;\n          end loop;\n          dbms_sql.bind_array(l_cur, ':'||keylist.get(i).get_string, v_bind);\n        end;\n      else\n        dbms_sql.bind_variable(l_cur, ':'||keylist.get(i).get_string, bindvar.get(i).value_of());\n      end if;\n    end loop;\n  end bind_json;\n\n  /* list with objects */\n  function executeList(stmt varchar2, bindvar json, cur_num number) return json_list as\n    l_cur number;\n    l_dtbl dbms_sql.desc_tab;\n    l_cnt number;\n    l_status number;\n    l_val varchar2(4000);\n    outer_list json_list := json_list();\n    inner_obj json;\n    conv number;\n    read_date date;\n    read_clob clob;\n    read_blob blob;\n    col_type number;\n  begin\n    if(cur_num is not null) then\n      l_cur := cur_num;\n    else\n      l_cur := dbms_sql.open_cursor;\n      dbms_sql.parse(l_cur, stmt, dbms_sql.native);\n      if(bindvar is not null) then bind_json(l_cur, bindvar); end if;\n    end if;\n    dbms_sql.describe_columns(l_cur, l_cnt, l_dtbl);\n    for i in 1..l_cnt loop\n      col_type := l_dtbl(i).col_type;\n      --dbms_output.put_line(col_type);\n      if(col_type = 12) then\n        dbms_sql.define_column(l_cur,i,read_date);\n      elsif(col_type = 112) then\n        dbms_sql.define_column(l_cur,i,read_clob);\n      elsif(col_type = 113) then\n        dbms_sql.define_column(l_cur,i,read_blob);\n      elsif(col_type in (1,2,96)) then\n        dbms_sql.define_column(l_cur,i,l_val,4000);\n      end if;\n    end loop;\n\n    if(cur_num is null) then l_status := dbms_sql.execute(l_cur); end if;\n\n    --loop through rows\n    while ( dbms_sql.fetch_rows(l_cur) \u003e 0 ) loop\n      inner_obj := json(); --init for each row\n      --loop through columns\n      for i in 1..l_cnt loop\n        case true\n        --handling string types\n        when l_dtbl(i).col_type in (1,96) then -- varchar2\n          dbms_sql.column_value(l_cur,i,l_val);\n          if(l_val is null) then\n            if(null_as_empty_string) then\n              inner_obj.put(l_dtbl(i).col_name, ''); --treatet as emptystring?\n            else\n              inner_obj.put(l_dtbl(i).col_name, json_value.makenull); --null\n            end if;\n          else\n            inner_obj.put(l_dtbl(i).col_name, json_value(l_val)); --null\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'varchar2' ||l_dtbl(i).col_type);\n        --handling number types\n        when l_dtbl(i).col_type = 2 then -- number\n          dbms_sql.column_value(l_cur,i,l_val);\n          conv := l_val;\n          inner_obj.put(l_dtbl(i).col_name, conv);\n          -- dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'number ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 12 then -- date\n          if(include_dates) then\n            dbms_sql.column_value(l_cur,i,read_date);\n            inner_obj.put(l_dtbl(i).col_name, json_ext.to_json_value(read_date));\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'date ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 112 then --clob\n          if(include_clobs) then\n            dbms_sql.column_value(l_cur,i,read_clob);\n            inner_obj.put(l_dtbl(i).col_name, json_value(read_clob));\n          end if;\n        when l_dtbl(i).col_type = 113 then --blob\n          if(include_blobs) then\n            dbms_sql.column_value(l_cur,i,read_blob);\n            if(dbms_lob.getlength(read_blob) \u003e 0) then\n              inner_obj.put(l_dtbl(i).col_name, json_ext.encode(read_blob));\n            else\n              inner_obj.put(l_dtbl(i).col_name, json_value.makenull);\n            end if;\n          end if;\n\n        else null; --discard other types\n        end case;\n      end loop;\n      outer_list.append(inner_obj.to_json_value);\n    end loop;\n    dbms_sql.close_cursor(l_cur);\n    return outer_list;\n  end executeList;\n\n  /* object with lists */\n  function executeObject(stmt varchar2, bindvar json, cur_num number) return json as\n    l_cur number;\n    l_dtbl dbms_sql.desc_tab;\n    l_cnt number;\n    l_status number;\n    l_val varchar2(4000);\n    inner_list_names json_list := json_list();\n    inner_list_data json_list := json_list();\n    data_list json_list;\n    outer_obj json := json();\n    conv number;\n    read_date date;\n    read_clob clob;\n    read_blob blob;\n    col_type number;\n  begin\n    if(cur_num is not null) then\n      l_cur := cur_num;\n    else\n      l_cur := dbms_sql.open_cursor;\n      dbms_sql.parse(l_cur, stmt, dbms_sql.native);\n      if(bindvar is not null) then bind_json(l_cur, bindvar); end if;\n    end if;\n    dbms_sql.describe_columns(l_cur, l_cnt, l_dtbl);\n    for i in 1..l_cnt loop\n      col_type := l_dtbl(i).col_type;\n      if(col_type = 12) then\n        dbms_sql.define_column(l_cur,i,read_date);\n      elsif(col_type = 112) then\n        dbms_sql.define_column(l_cur,i,read_clob);\n      elsif(col_type = 113) then\n        dbms_sql.define_column(l_cur,i,read_blob);\n      elsif(col_type in (1,2,96)) then\n        dbms_sql.define_column(l_cur,i,l_val,4000);\n      end if;\n    end loop;\n    if(cur_num is null) then l_status := dbms_sql.execute(l_cur); end if;\n\n    --build up name_list\n    for i in 1..l_cnt loop\n      case l_dtbl(i).col_type\n        when 1 then inner_list_names.append(l_dtbl(i).col_name);\n        when 96 then inner_list_names.append(l_dtbl(i).col_name);\n        when 2 then inner_list_names.append(l_dtbl(i).col_name);\n        when 12 then if(include_dates) then inner_list_names.append(l_dtbl(i).col_name); end if;\n        when 112 then if(include_clobs) then inner_list_names.append(l_dtbl(i).col_name); end if;\n        when 113 then if(include_blobs) then inner_list_names.append(l_dtbl(i).col_name); end if;\n        else null;\n      end case;\n    end loop;\n\n    --loop through rows\n    while ( dbms_sql.fetch_rows(l_cur) \u003e 0 ) loop\n      data_list := json_list();\n      --loop through columns\n      for i in 1..l_cnt loop\n        case true\n        --handling string types\n        when l_dtbl(i).col_type in (1,96) then -- varchar2\n          dbms_sql.column_value(l_cur,i,l_val);\n          if(l_val is null) then\n            if(null_as_empty_string) then\n              data_list.append(''); --treatet as emptystring?\n            else\n              data_list.append(json_value.makenull); --null\n            end if;\n          else\n            data_list.append(json_value(l_val)); --null\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'varchar2' ||l_dtbl(i).col_type);\n        --handling number types\n        when l_dtbl(i).col_type = 2 then -- number\n          dbms_sql.column_value(l_cur,i,l_val);\n          conv := l_val;\n          data_list.append(conv);\n          -- dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'number ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 12 then -- date\n          if(include_dates) then\n            dbms_sql.column_value(l_cur,i,read_date);\n            data_list.append(json_ext.to_json_value(read_date));\n          end if;\n          --dbms_output.put_line(l_dtbl(i).col_name||' --\u003e '||l_val||'date ' ||l_dtbl(i).col_type);\n        when l_dtbl(i).col_type = 112 then --clob\n          if(include_clobs) then\n            dbms_sql.column_value(l_cur,i,read_clob);\n            data_list.append(json_value(read_clob));\n          end if;\n        when l_dtbl(i).col_type = 113 then --blob\n          if(include_blobs) then\n            dbms_sql.column_value(l_cur,i,read_blob);\n            if(dbms_lob.getlength(read_blob) \u003e 0) then\n              data_list.append(json_ext.encode(read_blob));\n            else\n              data_list.append(json_value.makenull);\n            end if;\n          end if;\n        else null; --discard other types\n        end case;\n      end loop;\n      inner_list_data.append(data_list);\n    end loop;\n\n    outer_obj.put('names', inner_list_names.to_json_value);\n    outer_obj.put('data', inner_list_data.to_json_value);\n    dbms_sql.close_cursor(l_cur);\n    return outer_obj;\n  end executeObject;\n\nend json_dyn;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_DYN\" authid current_user as\n /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  null_as_empty_string   boolean not null := true;  --varchar2\n  include_dates          boolean not null := true;  --date\n  include_clobs          boolean not null := true;\n  include_blobs          boolean not null := false;\n\n  /* list with objects */\n  function executeList(stmt varchar2, bindvar json default null, cur_num number default null) return json_list;\n\n  /* object with lists */\n  function executeObject(stmt varchar2, bindvar json default null, cur_num number default null) return json;\n\n\n  /* usage example:\n   * declare\n   *   res json_list;\n   * begin\n   *   res := json_dyn.executeList(\n   *            'select :bindme as one, :lala as two from dual where dummy in :arraybind',\n   *            json('{bindme:\"4\", lala:123, arraybind:[1,2,3,\"X\"]}')\n   *          );\n   *   res.print;\n   * end;\n   */\n\n/* --11g functions\n  function executeList(stmt in out sys_refcursor) return json_list;\n  function executeObject(stmt in out sys_refcursor) return json;\n*/\nend json_dyn;"},{"Name":"JSON_AC","ObjectID":308485,"Digest":"f4c17ff8b0801cae2685c49882be5d9308afc269dc25d4051b6b5cbe99cc416f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_AC\" as\n  --json type methods\n\n  procedure object_remove(p_self in out nocopy json, pair_name varchar2);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_value, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value varchar2, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value number, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value boolean, position pls_integer default null);\n  procedure object_check_duplicate(p_self in out nocopy json, v_set boolean);\n  procedure object_remove_duplicates(p_self in out nocopy json);\n\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_list, position pls_integer default null);\n\n  function object_count(p_self in json) return number;\n  function object_get(p_self in json, pair_name varchar2) return json_value;\n  function object_get(p_self in json, position pls_integer) return json_value;\n  function object_index_of(p_self in json, pair_name varchar2) return number;\n  function object_exist(p_self in json, pair_name varchar2) return boolean;\n\n  function object_to_char(p_self in json, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure object_to_clob(p_self in json, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure object_print(p_self in json, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure object_htp(p_self in json, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function object_to_json_value(p_self in json) return json_value;\n  function object_path(p_self in json, json_path varchar2, base number default 1) return json_value;\n\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_value, base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem varchar2  , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem number    , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem boolean   , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_list , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json      , base number default 1);\n\n  procedure object_path_remove(p_self in out nocopy json, json_path varchar2, base number default 1);\n\n  function object_get_values(p_self in json) return json_list;\n  function object_get_keys(p_self in json) return json_list;\n\n  --json_list type methods\n  procedure array_append(p_self in out nocopy json_list, elem json_value, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem varchar2, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem number, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem boolean, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem json_list, position pls_integer default null);\n\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_value);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem varchar2);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem number);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem boolean);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_list);\n\n  function array_count(p_self in json_list) return number;\n  procedure array_remove(p_self in out nocopy json_list, position pls_integer);\n  procedure array_remove_first(p_self in out nocopy json_list);\n  procedure array_remove_last(p_self in out nocopy json_list);\n  function array_get(p_self in json_list, position pls_integer) return json_value;\n  function array_head(p_self in json_list) return json_value;\n  function array_last(p_self in json_list) return json_value;\n  function array_tail(p_self in json_list) return json_list;\n\n  function array_to_char(p_self in json_list, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure array_to_clob(p_self in json_list, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure array_print(p_self in json_list, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure array_htp(p_self in json_list, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function array_path(p_self in json_list, json_path varchar2, base number default 1) return json_value;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_value, base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem varchar2  , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem number    , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem boolean   , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_list , base number default 1);\n\n  procedure array_path_remove(p_self in out nocopy json_list, json_path varchar2, base number default 1);\n\n  function array_to_json_value(p_self in json_list) return json_value;\n\n  --json_value\n\n\n  function jv_get_type(p_self in json_value) return varchar2;\n  function jv_get_string(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n  procedure jv_get_string(p_self in json_value, buf in out nocopy clob);\n  function jv_get_number(p_self in json_value) return number;\n  function jv_get_bool(p_self in json_value) return boolean;\n  function jv_get_null(p_self in json_value) return varchar2;\n\n  function jv_is_object(p_self in json_value) return boolean;\n  function jv_is_array(p_self in json_value) return boolean;\n  function jv_is_string(p_self in json_value) return boolean;\n  function jv_is_number(p_self in json_value) return boolean;\n  function jv_is_bool(p_self in json_value) return boolean;\n  function jv_is_null(p_self in json_value) return boolean;\n\n  function jv_to_char(p_self in json_value, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure jv_to_clob(p_self in json_value, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure jv_print(p_self in json_value, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure jv_htp(p_self in json_value, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function jv_value_of(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n\n\nend json_ac;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_AC\" as\n  procedure object_remove(p_self in out nocopy json, pair_name varchar2) as\n  begin p_self.remove(pair_name); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_value, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value varchar2, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value number, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value boolean, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_check_duplicate(p_self in out nocopy json, v_set boolean) as\n  begin p_self.check_duplicate(v_set); end;\n  procedure object_remove_duplicates(p_self in out nocopy json) as\n  begin p_self.remove_duplicates; end;\n\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_list, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n\n  function object_count(p_self in json) return number as\n  begin return p_self.count; end;\n  function object_get(p_self in json, pair_name varchar2) return json_value as\n  begin return p_self.get(pair_name); end;\n  function object_get(p_self in json, position pls_integer) return json_value as\n  begin return p_self.get(position); end;\n  function object_index_of(p_self in json, pair_name varchar2) return number as\n  begin return p_self.index_of(pair_name); end;\n  function object_exist(p_self in json, pair_name varchar2) return boolean as\n  begin return p_self.exist(pair_name); end;\n\n  function object_to_char(p_self in json, spaces boolean default true, chars_per_line number default 0) return varchar2 as\n  begin return p_self.to_char(spaces, chars_per_line); end;\n  procedure object_to_clob(p_self in json, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true) as\n  begin p_self.to_clob(buf, spaces, chars_per_line, erase_clob); end;\n  procedure object_print(p_self in json, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null) as\n  begin p_self.print(spaces, chars_per_line, jsonp); end;\n  procedure object_htp(p_self in json, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null) as\n  begin p_self.htp(spaces, chars_per_line, jsonp); end;\n\n  function object_to_json_value(p_self in json) return json_value as\n  begin return p_self.to_json_value; end;\n  function object_path(p_self in json, json_path varchar2, base number default 1) return json_value as\n  begin return p_self.path(json_path, base); end;\n\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_value, base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem varchar2  , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem number    , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem boolean   , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_list , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json      , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n\n  procedure object_path_remove(p_self in out nocopy json, json_path varchar2, base number default 1) as\n  begin p_self.path_remove(json_path, base); end;\n\n  function object_get_values(p_self in json) return json_list as\n  begin return p_self.get_values; end;\n  function object_get_keys(p_self in json) return json_list as\n  begin return p_self.get_keys; end;\n\n  --json_list type\n  procedure array_append(p_self in out nocopy json_list, elem json_value, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem varchar2, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem number, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem boolean, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem json_list, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_value) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem varchar2) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem number) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem boolean) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_list) as\n  begin p_self.replace(position, elem); end;\n\n  function array_count(p_self in json_list) return number as\n  begin return p_self.count; end;\n  procedure array_remove(p_self in out nocopy json_list, position pls_integer) as\n  begin p_self.remove(position); end;\n  procedure array_remove_first(p_self in out nocopy json_list) as\n  begin p_self.remove_first; end;\n  procedure array_remove_last(p_self in out nocopy json_list) as\n  begin p_self.remove_last; end;\n  function array_get(p_self in json_list, position pls_integer) return json_value as\n  begin return p_self.get(position); end;\n  function array_head(p_self in json_list) return json_value as\n  begin return p_self.head; end;\n  function array_last(p_self in json_list) return json_value as\n  begin return p_self.last; end;\n  function array_tail(p_self in json_list) return json_list as\n  begin return p_self.tail; end;\n\n  function array_to_char(p_self in json_list, spaces boolean default true, chars_per_line number default 0) return varchar2 as\n  begin return p_self.to_char(spaces, chars_per_line); end;\n  procedure array_to_clob(p_self in json_list, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true) as\n  begin p_self.to_clob(buf, spaces, chars_per_line, erase_clob); end;\n  procedure array_print(p_self in json_list, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null) as\n  begin p_self.print(spaces, chars_per_line, jsonp); end;\n  procedure array_htp(p_self in json_list, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null) as\n  begin p_self.htp(spaces, chars_per_line, jsonp); end;\n\n  function array_path(p_self in json_list, json_path varchar2, base number default 1) return json_value as\n  begin return p_self.path(json_path, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_value, base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem varchar2  , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem number    , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem boolean   , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_list , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n\n  procedure array_path_remove(p_self in out nocopy json_list, json_path varchar2, base number default 1) as\n  begin p_self.path_remove(json_path, base); end;\n\n  function array_to_json_value(p_self in json_list) return json_value as\n  begin return p_self.to_json_value; end;\n\n  --json_value\n\n\n  function jv_get_type(p_self in json_value) return varchar2 as\n  begin return p_self.get_type; end;\n  function jv_get_string(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2 as\n  begin return p_self.get_string(max_byte_size, max_char_size); end;\n  procedure jv_get_string(p_self in json_value, buf in out nocopy clob) as\n  begin p_self.get_string(buf); end;\n  function jv_get_number(p_self in json_value) return number as\n  begin return p_self.get_number; end;\n  function jv_get_bool(p_self in json_value) return boolean as\n  begin return p_self.get_bool; end;\n  function jv_get_null(p_self in json_value) return varchar2 as\n  begin return p_self.get_null; end;\n\n  function jv_is_object(p_self in json_value) return boolean as\n  begin return p_self.is_object; end;\n  function jv_is_array(p_self in json_value) return boolean as\n  begin return p_self.is_array; end;\n  function jv_is_string(p_self in json_value) return boolean as\n  begin return p_self.is_string; end;\n  function jv_is_number(p_self in json_value) return boolean as\n  begin return p_self.is_number; end;\n  function jv_is_bool(p_self in json_value) return boolean as\n  begin return p_self.is_bool; end;\n  function jv_is_null(p_self in json_value) return boolean as\n  begin return p_self.is_null; end;\n\n  function jv_to_char(p_self in json_value, spaces boolean default true, chars_per_line number default 0) return varchar2 as\n  begin return p_self.to_char(spaces, chars_per_line); end;\n  procedure jv_to_clob(p_self in json_value, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true) as\n  begin p_self.to_clob(buf, spaces, chars_per_line, erase_clob); end;\n  procedure jv_print(p_self in json_value, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null) as\n  begin p_self.print(spaces, chars_per_line, jsonp); end;\n  procedure jv_htp(p_self in json_value, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null) as\n  begin p_self.htp(spaces, chars_per_line, jsonp); end;\n\n  function jv_value_of(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2 as\n  begin return p_self.value_of(max_byte_size, max_char_size); end;\n\nend json_ac;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_AC\" as\n  --json type methods\n\n  procedure object_remove(p_self in out nocopy json, pair_name varchar2);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_value, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value varchar2, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value number, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value boolean, position pls_integer default null);\n  procedure object_check_duplicate(p_self in out nocopy json, v_set boolean);\n  procedure object_remove_duplicates(p_self in out nocopy json);\n\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_list, position pls_integer default null);\n\n  function object_count(p_self in json) return number;\n  function object_get(p_self in json, pair_name varchar2) return json_value;\n  function object_get(p_self in json, position pls_integer) return json_value;\n  function object_index_of(p_self in json, pair_name varchar2) return number;\n  function object_exist(p_self in json, pair_name varchar2) return boolean;\n\n  function object_to_char(p_self in json, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure object_to_clob(p_self in json, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure object_print(p_self in json, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure object_htp(p_self in json, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function object_to_json_value(p_self in json) return json_value;\n  function object_path(p_self in json, json_path varchar2, base number default 1) return json_value;\n\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_value, base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem varchar2  , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem number    , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem boolean   , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_list , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json      , base number default 1);\n\n  procedure object_path_remove(p_self in out nocopy json, json_path varchar2, base number default 1);\n\n  function object_get_values(p_self in json) return json_list;\n  function object_get_keys(p_self in json) return json_list;\n\n  --json_list type methods\n  procedure array_append(p_self in out nocopy json_list, elem json_value, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem varchar2, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem number, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem boolean, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem json_list, position pls_integer default null);\n\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_value);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem varchar2);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem number);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem boolean);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_list);\n\n  function array_count(p_self in json_list) return number;\n  procedure array_remove(p_self in out nocopy json_list, position pls_integer);\n  procedure array_remove_first(p_self in out nocopy json_list);\n  procedure array_remove_last(p_self in out nocopy json_list);\n  function array_get(p_self in json_list, position pls_integer) return json_value;\n  function array_head(p_self in json_list) return json_value;\n  function array_last(p_self in json_list) return json_value;\n  function array_tail(p_self in json_list) return json_list;\n\n  function array_to_char(p_self in json_list, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure array_to_clob(p_self in json_list, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure array_print(p_self in json_list, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure array_htp(p_self in json_list, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function array_path(p_self in json_list, json_path varchar2, base number default 1) return json_value;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_value, base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem varchar2  , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem number    , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem boolean   , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_list , base number default 1);\n\n  procedure array_path_remove(p_self in out nocopy json_list, json_path varchar2, base number default 1);\n\n  function array_to_json_value(p_self in json_list) return json_value;\n\n  --json_value\n\n\n  function jv_get_type(p_self in json_value) return varchar2;\n  function jv_get_string(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n  procedure jv_get_string(p_self in json_value, buf in out nocopy clob);\n  function jv_get_number(p_self in json_value) return number;\n  function jv_get_bool(p_self in json_value) return boolean;\n  function jv_get_null(p_self in json_value) return varchar2;\n\n  function jv_is_object(p_self in json_value) return boolean;\n  function jv_is_array(p_self in json_value) return boolean;\n  function jv_is_string(p_self in json_value) return boolean;\n  function jv_is_number(p_self in json_value) return boolean;\n  function jv_is_bool(p_self in json_value) return boolean;\n  function jv_is_null(p_self in json_value) return boolean;\n\n  function jv_to_char(p_self in json_value, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure jv_to_clob(p_self in json_value, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure jv_print(p_self in json_value, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure jv_htp(p_self in json_value, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function jv_value_of(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n\n\nend json_ac;"},{"Name":"JSON_AC","ObjectID":308484,"Digest":"f4c17ff8b0801cae2685c49882be5d9308afc269dc25d4051b6b5cbe99cc416f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_AC\" as\n  --json type methods\n\n  procedure object_remove(p_self in out nocopy json, pair_name varchar2);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_value, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value varchar2, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value number, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value boolean, position pls_integer default null);\n  procedure object_check_duplicate(p_self in out nocopy json, v_set boolean);\n  procedure object_remove_duplicates(p_self in out nocopy json);\n\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_list, position pls_integer default null);\n\n  function object_count(p_self in json) return number;\n  function object_get(p_self in json, pair_name varchar2) return json_value;\n  function object_get(p_self in json, position pls_integer) return json_value;\n  function object_index_of(p_self in json, pair_name varchar2) return number;\n  function object_exist(p_self in json, pair_name varchar2) return boolean;\n\n  function object_to_char(p_self in json, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure object_to_clob(p_self in json, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure object_print(p_self in json, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure object_htp(p_self in json, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function object_to_json_value(p_self in json) return json_value;\n  function object_path(p_self in json, json_path varchar2, base number default 1) return json_value;\n\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_value, base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem varchar2  , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem number    , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem boolean   , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_list , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json      , base number default 1);\n\n  procedure object_path_remove(p_self in out nocopy json, json_path varchar2, base number default 1);\n\n  function object_get_values(p_self in json) return json_list;\n  function object_get_keys(p_self in json) return json_list;\n\n  --json_list type methods\n  procedure array_append(p_self in out nocopy json_list, elem json_value, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem varchar2, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem number, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem boolean, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem json_list, position pls_integer default null);\n\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_value);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem varchar2);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem number);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem boolean);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_list);\n\n  function array_count(p_self in json_list) return number;\n  procedure array_remove(p_self in out nocopy json_list, position pls_integer);\n  procedure array_remove_first(p_self in out nocopy json_list);\n  procedure array_remove_last(p_self in out nocopy json_list);\n  function array_get(p_self in json_list, position pls_integer) return json_value;\n  function array_head(p_self in json_list) return json_value;\n  function array_last(p_self in json_list) return json_value;\n  function array_tail(p_self in json_list) return json_list;\n\n  function array_to_char(p_self in json_list, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure array_to_clob(p_self in json_list, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure array_print(p_self in json_list, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure array_htp(p_self in json_list, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function array_path(p_self in json_list, json_path varchar2, base number default 1) return json_value;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_value, base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem varchar2  , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem number    , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem boolean   , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_list , base number default 1);\n\n  procedure array_path_remove(p_self in out nocopy json_list, json_path varchar2, base number default 1);\n\n  function array_to_json_value(p_self in json_list) return json_value;\n\n  --json_value\n\n\n  function jv_get_type(p_self in json_value) return varchar2;\n  function jv_get_string(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n  procedure jv_get_string(p_self in json_value, buf in out nocopy clob);\n  function jv_get_number(p_self in json_value) return number;\n  function jv_get_bool(p_self in json_value) return boolean;\n  function jv_get_null(p_self in json_value) return varchar2;\n\n  function jv_is_object(p_self in json_value) return boolean;\n  function jv_is_array(p_self in json_value) return boolean;\n  function jv_is_string(p_self in json_value) return boolean;\n  function jv_is_number(p_self in json_value) return boolean;\n  function jv_is_bool(p_self in json_value) return boolean;\n  function jv_is_null(p_self in json_value) return boolean;\n\n  function jv_to_char(p_self in json_value, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure jv_to_clob(p_self in json_value, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure jv_print(p_self in json_value, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure jv_htp(p_self in json_value, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function jv_value_of(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n\n\nend json_ac;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_AC\" as\n  procedure object_remove(p_self in out nocopy json, pair_name varchar2) as\n  begin p_self.remove(pair_name); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_value, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value varchar2, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value number, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value boolean, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_check_duplicate(p_self in out nocopy json, v_set boolean) as\n  begin p_self.check_duplicate(v_set); end;\n  procedure object_remove_duplicates(p_self in out nocopy json) as\n  begin p_self.remove_duplicates; end;\n\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_list, position pls_integer default null) as\n  begin p_self.put(pair_name, pair_value, position); end;\n\n  function object_count(p_self in json) return number as\n  begin return p_self.count; end;\n  function object_get(p_self in json, pair_name varchar2) return json_value as\n  begin return p_self.get(pair_name); end;\n  function object_get(p_self in json, position pls_integer) return json_value as\n  begin return p_self.get(position); end;\n  function object_index_of(p_self in json, pair_name varchar2) return number as\n  begin return p_self.index_of(pair_name); end;\n  function object_exist(p_self in json, pair_name varchar2) return boolean as\n  begin return p_self.exist(pair_name); end;\n\n  function object_to_char(p_self in json, spaces boolean default true, chars_per_line number default 0) return varchar2 as\n  begin return p_self.to_char(spaces, chars_per_line); end;\n  procedure object_to_clob(p_self in json, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true) as\n  begin p_self.to_clob(buf, spaces, chars_per_line, erase_clob); end;\n  procedure object_print(p_self in json, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null) as\n  begin p_self.print(spaces, chars_per_line, jsonp); end;\n  procedure object_htp(p_self in json, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null) as\n  begin p_self.htp(spaces, chars_per_line, jsonp); end;\n\n  function object_to_json_value(p_self in json) return json_value as\n  begin return p_self.to_json_value; end;\n  function object_path(p_self in json, json_path varchar2, base number default 1) return json_value as\n  begin return p_self.path(json_path, base); end;\n\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_value, base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem varchar2  , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem number    , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem boolean   , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_list , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json      , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n\n  procedure object_path_remove(p_self in out nocopy json, json_path varchar2, base number default 1) as\n  begin p_self.path_remove(json_path, base); end;\n\n  function object_get_values(p_self in json) return json_list as\n  begin return p_self.get_values; end;\n  function object_get_keys(p_self in json) return json_list as\n  begin return p_self.get_keys; end;\n\n  --json_list type\n  procedure array_append(p_self in out nocopy json_list, elem json_value, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem varchar2, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem number, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem boolean, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n  procedure array_append(p_self in out nocopy json_list, elem json_list, position pls_integer default null) as\n  begin p_self.append(elem, position); end;\n\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_value) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem varchar2) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem number) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem boolean) as\n  begin p_self.replace(position, elem); end;\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_list) as\n  begin p_self.replace(position, elem); end;\n\n  function array_count(p_self in json_list) return number as\n  begin return p_self.count; end;\n  procedure array_remove(p_self in out nocopy json_list, position pls_integer) as\n  begin p_self.remove(position); end;\n  procedure array_remove_first(p_self in out nocopy json_list) as\n  begin p_self.remove_first; end;\n  procedure array_remove_last(p_self in out nocopy json_list) as\n  begin p_self.remove_last; end;\n  function array_get(p_self in json_list, position pls_integer) return json_value as\n  begin return p_self.get(position); end;\n  function array_head(p_self in json_list) return json_value as\n  begin return p_self.head; end;\n  function array_last(p_self in json_list) return json_value as\n  begin return p_self.last; end;\n  function array_tail(p_self in json_list) return json_list as\n  begin return p_self.tail; end;\n\n  function array_to_char(p_self in json_list, spaces boolean default true, chars_per_line number default 0) return varchar2 as\n  begin return p_self.to_char(spaces, chars_per_line); end;\n  procedure array_to_clob(p_self in json_list, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true) as\n  begin p_self.to_clob(buf, spaces, chars_per_line, erase_clob); end;\n  procedure array_print(p_self in json_list, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null) as\n  begin p_self.print(spaces, chars_per_line, jsonp); end;\n  procedure array_htp(p_self in json_list, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null) as\n  begin p_self.htp(spaces, chars_per_line, jsonp); end;\n\n  function array_path(p_self in json_list, json_path varchar2, base number default 1) return json_value as\n  begin return p_self.path(json_path, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_value, base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem varchar2  , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem number    , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem boolean   , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_list , base number default 1) as\n  begin p_self.path_put(json_path, elem, base); end;\n\n  procedure array_path_remove(p_self in out nocopy json_list, json_path varchar2, base number default 1) as\n  begin p_self.path_remove(json_path, base); end;\n\n  function array_to_json_value(p_self in json_list) return json_value as\n  begin return p_self.to_json_value; end;\n\n  --json_value\n\n\n  function jv_get_type(p_self in json_value) return varchar2 as\n  begin return p_self.get_type; end;\n  function jv_get_string(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2 as\n  begin return p_self.get_string(max_byte_size, max_char_size); end;\n  procedure jv_get_string(p_self in json_value, buf in out nocopy clob) as\n  begin p_self.get_string(buf); end;\n  function jv_get_number(p_self in json_value) return number as\n  begin return p_self.get_number; end;\n  function jv_get_bool(p_self in json_value) return boolean as\n  begin return p_self.get_bool; end;\n  function jv_get_null(p_self in json_value) return varchar2 as\n  begin return p_self.get_null; end;\n\n  function jv_is_object(p_self in json_value) return boolean as\n  begin return p_self.is_object; end;\n  function jv_is_array(p_self in json_value) return boolean as\n  begin return p_self.is_array; end;\n  function jv_is_string(p_self in json_value) return boolean as\n  begin return p_self.is_string; end;\n  function jv_is_number(p_self in json_value) return boolean as\n  begin return p_self.is_number; end;\n  function jv_is_bool(p_self in json_value) return boolean as\n  begin return p_self.is_bool; end;\n  function jv_is_null(p_self in json_value) return boolean as\n  begin return p_self.is_null; end;\n\n  function jv_to_char(p_self in json_value, spaces boolean default true, chars_per_line number default 0) return varchar2 as\n  begin return p_self.to_char(spaces, chars_per_line); end;\n  procedure jv_to_clob(p_self in json_value, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true) as\n  begin p_self.to_clob(buf, spaces, chars_per_line, erase_clob); end;\n  procedure jv_print(p_self in json_value, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null) as\n  begin p_self.print(spaces, chars_per_line, jsonp); end;\n  procedure jv_htp(p_self in json_value, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null) as\n  begin p_self.htp(spaces, chars_per_line, jsonp); end;\n\n  function jv_value_of(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2 as\n  begin return p_self.value_of(max_byte_size, max_char_size); end;\n\nend json_ac;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_AC\" as\n  --json type methods\n\n  procedure object_remove(p_self in out nocopy json, pair_name varchar2);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_value, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value varchar2, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value number, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value boolean, position pls_integer default null);\n  procedure object_check_duplicate(p_self in out nocopy json, v_set boolean);\n  procedure object_remove_duplicates(p_self in out nocopy json);\n\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json, position pls_integer default null);\n  procedure object_put(p_self in out nocopy json, pair_name varchar2, pair_value json_list, position pls_integer default null);\n\n  function object_count(p_self in json) return number;\n  function object_get(p_self in json, pair_name varchar2) return json_value;\n  function object_get(p_self in json, position pls_integer) return json_value;\n  function object_index_of(p_self in json, pair_name varchar2) return number;\n  function object_exist(p_self in json, pair_name varchar2) return boolean;\n\n  function object_to_char(p_self in json, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure object_to_clob(p_self in json, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure object_print(p_self in json, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure object_htp(p_self in json, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function object_to_json_value(p_self in json) return json_value;\n  function object_path(p_self in json, json_path varchar2, base number default 1) return json_value;\n\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_value, base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem varchar2  , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem number    , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem boolean   , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json_list , base number default 1);\n  procedure object_path_put(p_self in out nocopy json, json_path varchar2, elem json      , base number default 1);\n\n  procedure object_path_remove(p_self in out nocopy json, json_path varchar2, base number default 1);\n\n  function object_get_values(p_self in json) return json_list;\n  function object_get_keys(p_self in json) return json_list;\n\n  --json_list type methods\n  procedure array_append(p_self in out nocopy json_list, elem json_value, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem varchar2, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem number, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem boolean, position pls_integer default null);\n  procedure array_append(p_self in out nocopy json_list, elem json_list, position pls_integer default null);\n\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_value);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem varchar2);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem number);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem boolean);\n  procedure array_replace(p_self in out nocopy json_list, position pls_integer, elem json_list);\n\n  function array_count(p_self in json_list) return number;\n  procedure array_remove(p_self in out nocopy json_list, position pls_integer);\n  procedure array_remove_first(p_self in out nocopy json_list);\n  procedure array_remove_last(p_self in out nocopy json_list);\n  function array_get(p_self in json_list, position pls_integer) return json_value;\n  function array_head(p_self in json_list) return json_value;\n  function array_last(p_self in json_list) return json_value;\n  function array_tail(p_self in json_list) return json_list;\n\n  function array_to_char(p_self in json_list, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure array_to_clob(p_self in json_list, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure array_print(p_self in json_list, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure array_htp(p_self in json_list, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function array_path(p_self in json_list, json_path varchar2, base number default 1) return json_value;\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_value, base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem varchar2  , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem number    , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem boolean   , base number default 1);\n  procedure array_path_put(p_self in out nocopy json_list, json_path varchar2, elem json_list , base number default 1);\n\n  procedure array_path_remove(p_self in out nocopy json_list, json_path varchar2, base number default 1);\n\n  function array_to_json_value(p_self in json_list) return json_value;\n\n  --json_value\n\n\n  function jv_get_type(p_self in json_value) return varchar2;\n  function jv_get_string(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n  procedure jv_get_string(p_self in json_value, buf in out nocopy clob);\n  function jv_get_number(p_self in json_value) return number;\n  function jv_get_bool(p_self in json_value) return boolean;\n  function jv_get_null(p_self in json_value) return varchar2;\n\n  function jv_is_object(p_self in json_value) return boolean;\n  function jv_is_array(p_self in json_value) return boolean;\n  function jv_is_string(p_self in json_value) return boolean;\n  function jv_is_number(p_self in json_value) return boolean;\n  function jv_is_bool(p_self in json_value) return boolean;\n  function jv_is_null(p_self in json_value) return boolean;\n\n  function jv_to_char(p_self in json_value, spaces boolean default true, chars_per_line number default 0) return varchar2;\n  procedure jv_to_clob(p_self in json_value, buf in out nocopy clob, spaces boolean default false, chars_per_line number default 0, erase_clob boolean default true);\n  procedure jv_print(p_self in json_value, spaces boolean default true, chars_per_line number default 8192, jsonp varchar2 default null);\n  procedure jv_htp(p_self in json_value, spaces boolean default false, chars_per_line number default 0, jsonp varchar2 default null);\n\n  function jv_value_of(p_self in json_value, max_byte_size number default null, max_char_size number default null) return varchar2;\n\n\nend json_ac;"},{"Name":"JSON_EXT","ObjectID":308481,"Digest":"8558a4c4a8f66635fd2d9099cd8a0208b79abbddc15078b4cebc294c6994f0cc","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_EXT\" as\n  /*\n  Copyright (c) 2009 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n  function parsePath(json_path varchar2, base number default 1) return json_list;\n\n  --JSON Path getters\n  function get_json_value(obj json, v_path varchar2, base number default 1) return json_value;\n  function get_string(obj json, path varchar2,       base number default 1) return varchar2;\n  function get_number(obj json, path varchar2,       base number default 1) return number;\n  function get_json(obj json, path varchar2,         base number default 1) return json;\n  function get_json_list(obj json, path varchar2,    base number default 1) return json_list;\n  function get_bool(obj json, path varchar2,         base number default 1) return boolean;\n\n  --JSON Path putters\n  procedure put(obj in out nocopy json, path varchar2, elem varchar2,   base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem number,     base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json,       base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_list,  base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem boolean,    base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_value, base number default 1);\n\n  procedure remove(obj in out nocopy json, path varchar2, base number default 1);\n\n  --Pretty print with JSON Path - obsolete in 0.9.4 - obj.path(v_path).(to_char,print,htp)\n  function pp(obj json, v_path varchar2) return varchar2;\n  procedure pp(obj json, v_path varchar2); --using dbms_output.put_line\n  procedure pp_htp(obj json, v_path varchar2); --using htp.print\n\n  --extra function checks if number has no fraction\n  function is_integer(v json_value) return boolean;\n\n  format_string varchar2(30 char) := 'yyyy-mm-dd hh24:mi:ss';\n  --extension enables json to store dates without comprimising the implementation\n  function to_json_value(d date) return json_value;\n  --notice that a date type in json is also a varchar2\n  function is_date(v json_value) return boolean;\n  --convertion is needed to extract dates\n  --(json_ext.to_date will not work along with the normal to_date function - any fix will be appreciated)\n  function to_date2(v json_value) return date;\n  --JSON Path with date\n  function get_date(obj json, path varchar2, base number default 1) return date;\n  procedure put(obj in out nocopy json, path varchar2, elem date, base number default 1);\n\n  --experimental support of binary data with base64\n  function base64(binarydata blob) return json_list;\n  function base64(l json_list) return blob;\n\n  function encode(binarydata blob) return json_value;\n  function decode(v json_value) return blob;\n\nend json_ext;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_EXT\" as\n  scanner_exception exception;\n  pragma exception_init(scanner_exception, -20100);\n  parser_exception exception;\n  pragma exception_init(parser_exception, -20101);\n  jext_exception exception;\n  pragma exception_init(jext_exception, -20110);\n\n  --extra function checks if number has no fraction\n  function is_integer(v json_value) return boolean as\n    myint number(38); --the oracle way to specify an integer\n  begin\n    if(v.is_number) then\n      myint := v.get_number;\n      return (myint = v.get_number); --no rounding errors?\n    else\n      return false;\n    end if;\n  end;\n\n  --extension enables json to store dates without comprimising the implementation\n  function to_json_value(d date) return json_value as\n  begin\n    return json_value(to_char(d, format_string));\n  end;\n\n  --notice that a date type in json is also a varchar2\n  function is_date(v json_value) return boolean as\n    temp date;\n  begin\n    temp := json_ext.to_date2(v);\n    return true;\n  exception\n    when others then\n      return false;\n  end;\n\n  --convertion is needed to extract dates\n  function to_date2(v json_value) return date as\n  begin\n    if(v.is_string) then\n      return to_date(v.get_string, format_string);\n    else\n      raise_application_error(-20110, 'Anydata did not contain a date-value');\n    end if;\n  exception\n    when others then\n      raise_application_error(-20110, 'Anydata did not contain a date on the format: '||format_string);\n  end;\n\n  --Json Path parser\n  function parsePath(json_path varchar2, base number default 1) return json_list as\n    build_path varchar2(32767) := '[';\n    buf varchar2(4);\n    endstring varchar2(1);\n    indx number := 1;\n    ret json_list;\n\n    procedure next_char as\n    begin\n      if(indx \u003c= length(json_path)) then\n        buf := substr(json_path, indx, 1);\n        indx := indx + 1;\n      else\n        buf := null;\n      end if;\n    end;\n    --skip ws\n    procedure skipws as begin while(buf in (chr(9),chr(10),chr(13),' ')) loop next_char; end loop; end;\n\n  begin\n    next_char();\n    while(buf is not null) loop\n      if(buf = '.') then\n        next_char();\n        if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: . is not a valid json_path end'); end if;\n        if(not regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) then\n          raise_application_error(-20110, 'JSON Path parse error: alpha-numeric character or space expected at position '||indx);\n        end if;\n\n        if(build_path != '[') then build_path := build_path || ','; end if;\n        build_path := build_path || '\"';\n        while(regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) loop\n          build_path := build_path || buf;\n          next_char();\n        end loop;\n        build_path := build_path || '\"';\n      elsif(buf = '[') then\n        next_char();\n        skipws();\n        if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: [ is not a valid json_path end'); end if;\n        if(buf in ('1','2','3','4','5','6','7','8','9') or (buf = '0' and base = 0)) then\n          if(build_path != '[') then build_path := build_path || ','; end if;\n          while(buf in ('0','1','2','3','4','5','6','7','8','9')) loop\n            build_path := build_path || buf;\n            next_char();\n          end loop;\n        elsif (regexp_like(buf, '^(\\\"|\\'')', 'c')) then\n          endstring := buf;\n          if(build_path != '[') then build_path := build_path || ','; end if;\n          build_path := build_path || '\"';\n          next_char();\n          if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: premature json_path end'); end if;\n          while(buf != endstring) loop\n            build_path := build_path || buf;\n            next_char();\n            if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: premature json_path end'); end if;\n            if(buf = '\\') then\n              next_char();\n              build_path := build_path || '\\' || buf;\n              next_char();\n            end if;\n          end loop;\n          build_path := build_path || '\"';\n          next_char();\n        else\n          raise_application_error(-20110, 'JSON Path parse error: expected a string or an positive integer at '||indx);\n        end if;\n        skipws();\n        if(buf is null) then raise_application_error(-20110, 'JSON Path parse error: premature json_path end'); end if;\n        if(buf != ']') then raise_application_error(-20110, 'JSON Path parse error: no array ending found. found: '|| buf); end if;\n        next_char();\n        skipws();\n      elsif(build_path = '[') then\n        if(not regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) then\n          raise_application_error(-20110, 'JSON Path parse error: alpha-numeric character or space expected at position '||indx);\n        end if;\n        build_path := build_path || '\"';\n        while(regexp_like(buf, '^[[:alnum:]\\_ ]+', 'c') ) loop\n          build_path := build_path || buf;\n          next_char();\n        end loop;\n        build_path := build_path || '\"';\n      else\n        raise_application_error(-20110, 'JSON Path parse error: expected . or [ found '|| buf || ' at position '|| indx);\n      end if;\n\n    end loop;\n\n    build_path := build_path || ']';\n    build_path := replace(replace(replace(replace(replace(build_path, chr(9), '\\t'), chr(10), '\\n'), chr(13), '\\f'), chr(8), '\\b'), chr(14), '\\r');\n\n    ret := json_list(build_path);\n    if(base != 1) then\n      --fix base 0 to base 1\n      declare\n        elem json_value;\n      begin\n        for i in 1 .. ret.count loop\n          elem := ret.get(i);\n          if(elem.is_number) then\n            ret.replace(i,elem.get_number()+1);\n          end if;\n        end loop;\n      end;\n    end if;\n\n    return ret;\n  end parsePath;\n\n  --JSON Path getters\n  function get_json_value(obj json, v_path varchar2, base number default 1) return json_value as\n    path json_list;\n    ret json_value;\n    o json; l json_list;\n  begin\n    path := parsePath(v_path, base);\n    ret := obj.to_json_value;\n    if(path.count = 0) then return ret; end if;\n\n    for i in 1 .. path.count loop\n      if(path.get(i).is_string()) then\n        --string fetch only on json\n        o := json(ret);\n        ret := o.get(path.get(i).get_string());\n      else\n        --number fetch on json and json_list\n        if(ret.is_array()) then\n          l := json_list(ret);\n          ret := l.get(path.get(i).get_number());\n        else\n          o := json(ret);\n          l := o.get_values();\n          ret := l.get(path.get(i).get_number());\n        end if;\n      end if;\n    end loop;\n\n    return ret;\n  exception\n    when scanner_exception then raise;\n    when parser_exception then raise;\n    when jext_exception then raise;\n    when others then return null;\n  end get_json_value;\n\n  --JSON Path getters\n  function get_string(obj json, path varchar2, base number default 1) return varchar2 as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_string) then\n      return null;\n    else\n      return temp.get_string;\n    end if;\n  end;\n\n  function get_number(obj json, path varchar2, base number default 1) return number as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_number) then\n      return null;\n    else\n      return temp.get_number;\n    end if;\n  end;\n\n  function get_json(obj json, path varchar2, base number default 1) return json as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_object) then\n      return null;\n    else\n      return json(temp);\n    end if;\n  end;\n\n  function get_json_list(obj json, path varchar2, base number default 1) return json_list as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_array) then\n      return null;\n    else\n      return json_list(temp);\n    end if;\n  end;\n\n  function get_bool(obj json, path varchar2, base number default 1) return boolean as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not temp.is_bool) then\n      return null;\n    else\n      return temp.get_bool;\n    end if;\n  end;\n\n  function get_date(obj json, path varchar2, base number default 1) return date as\n    temp json_value;\n  begin\n    temp := get_json_value(obj, path, base);\n    if(temp is null or not is_date(temp)) then\n      return null;\n    else\n      return json_ext.to_date2(temp);\n    end if;\n  end;\n\n  /* JSON Path putter internal function */\n  procedure put_internal(obj in out nocopy json, v_path varchar2, elem json_value, base number) as\n    val json_value := elem;\n    path json_list;\n    backreference json_list := json_list();\n\n    keyval json_value; keynum number; keystring varchar2(4000);\n    temp json_value := obj.to_json_value;\n    obj_temp  json;\n    list_temp json_list;\n    inserter json_value;\n  begin\n    path := json_ext.parsePath(v_path, base);\n    if(path.count = 0) then raise_application_error(-20110, 'JSON_EXT put error: cannot put with empty string.'); end if;\n\n    --build backreference\n    for i in 1 .. path.count loop\n      --backreference.print(false);\n      keyval := path.get(i);\n      if (keyval.is_number()) then\n        --nummer index\n        keynum := keyval.get_number();\n        if((not temp.is_object()) and (not temp.is_array())) then\n          if(val is null) then return; end if;\n          backreference.remove_last;\n          temp := json_list().to_json_value();\n          backreference.append(temp);\n        end if;\n\n        if(temp.is_object()) then\n          obj_temp := json(temp);\n          if(obj_temp.count \u003c keynum) then\n            if(val is null) then return; end if;\n            raise_application_error(-20110, 'JSON_EXT put error: access object with to few members.');\n          end if;\n          temp := obj_temp.get(keynum);\n        else\n          list_temp := json_list(temp);\n          if(list_temp.count \u003c keynum) then\n            if(val is null) then return; end if;\n            --raise error or quit if val is null\n            for i in list_temp.count+1 .. keynum loop\n              list_temp.append(json_value.makenull);\n            end loop;\n            backreference.remove_last;\n            backreference.append(list_temp);\n          end if;\n\n          temp := list_temp.get(keynum);\n        end if;\n      else\n        --streng index\n        keystring := keyval.get_string();\n        if(not temp.is_object()) then\n          --backreference.print;\n          if(val is null) then return; end if;\n          backreference.remove_last;\n          temp := json().to_json_value();\n          backreference.append(temp);\n          --raise_application_error(-20110, 'JSON_ext put error: trying to access a non object with a string.');\n        end if;\n        obj_temp := json(temp);\n        temp := obj_temp.get(keystring);\n      end if;\n\n      if(temp is null) then\n        if(val is null) then return; end if;\n        --what to expect?\n        keyval := path.get(i+1);\n        if(keyval is not null and keyval.is_number()) then\n          temp := json_list().to_json_value;\n        else\n          temp := json().to_json_value;\n        end if;\n      end if;\n      backreference.append(temp);\n    end loop;\n\n  --  backreference.print(false);\n  --  path.print(false);\n\n    --use backreference and path together\n    inserter := val;\n    for i in reverse 1 .. backreference.count loop\n  --    inserter.print(false);\n      if( i = 1 ) then\n        keyval := path.get(1);\n        if(keyval.is_string()) then\n          keystring := keyval.get_string();\n        else\n          keynum := keyval.get_number();\n          declare\n            t1 json_value := obj.get(keynum);\n          begin\n            keystring := t1.mapname;\n          end;\n        end if;\n        if(inserter is null) then obj.remove(keystring); else obj.put(keystring, inserter); end if;\n      else\n        temp := backreference.get(i-1);\n        if(temp.is_object()) then\n          keyval := path.get(i);\n          obj_temp := json(temp);\n          if(keyval.is_string()) then\n            keystring := keyval.get_string();\n          else\n            keynum := keyval.get_number();\n            declare\n              t1 json_value := obj_temp.get(keynum);\n            begin\n              keystring := t1.mapname;\n            end;\n          end if;\n          if(inserter is null) then\n            obj_temp.remove(keystring);\n            if(obj_temp.count \u003e 0) then inserter := obj_temp.to_json_value; end if;\n          else\n            obj_temp.put(keystring, inserter);\n            inserter := obj_temp.to_json_value;\n          end if;\n        else\n          --array only number\n          keynum := path.get(i).get_number();\n          list_temp := json_list(temp);\n          list_temp.remove(keynum);\n          if(not inserter is null) then\n            list_temp.append(inserter, keynum);\n            inserter := list_temp.to_json_value;\n          else\n            if(list_temp.count \u003e 0) then inserter := list_temp.to_json_value; end if;\n          end if;\n        end if;\n      end if;\n\n    end loop;\n\n  end put_internal;\n\n  /* JSON Path putters */\n  procedure put(obj in out nocopy json, path varchar2, elem varchar2, base number default 1) as\n  begin\n    put_internal(obj, path, json_value(elem), base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem number, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, json_value(elem), base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem json, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, elem.to_json_value, base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem json_list, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, elem.to_json_value, base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem boolean, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, json_value(elem), base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem json_value, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, elem, base);\n  end;\n\n  procedure put(obj in out nocopy json, path varchar2, elem date, base number default 1) as\n  begin\n    if(elem is null) then raise_application_error(-20110, 'Cannot put null-value'); end if;\n    put_internal(obj, path, json_ext.to_json_value(elem), base);\n  end;\n\n  procedure remove(obj in out nocopy json, path varchar2, base number default 1) as\n  begin\n    json_ext.put_internal(obj,path,null,base);\n--    if(json_ext.get_json_value(obj,path) is not null) then\n--    end if;\n  end remove;\n\n    --Pretty print with JSON Path\n  function pp(obj json, v_path varchar2) return varchar2 as\n    json_part json_value;\n  begin\n    json_part := json_ext.get_json_value(obj, v_path);\n    if(json_part is null) then\n      return '';\n    else\n      return json_printer.pretty_print_any(json_part); --escapes a possible internal string\n    end if;\n  end pp;\n\n  procedure pp(obj json, v_path varchar2) as --using dbms_output.put_line\n  begin\n    dbms_output.put_line(pp(obj, v_path));\n  end pp;\n\n  -- spaces = false!\n  procedure pp_htp(obj json, v_path varchar2) as --using htp.print\n    json_part json_value;\n  begin\n    json_part := json_ext.get_json_value(obj, v_path);\n    if(json_part is null) then htp.print; else\n      htp.print(json_printer.pretty_print_any(json_part, false));\n    end if;\n  end pp_htp;\n\n  function base64(binarydata blob) return json_list as\n    obj json_list := json_list();\n    c clob := empty_clob();\n    benc blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n--    temp varchar2(32767);\n\n    FUNCTION encodeBlob2Base64(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 45;\n      vBlobEnc BLOB := empty_blob();\n      vBlobEncLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(45);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 encoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobEnc, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobEnc, utl_encode.base64_encode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobEncLen := dbms_lob.getlength(vBlobEnc);\n--      dbms_output.put_line('\u003cBlobEncLength\u003e' || vBlobEncLen);\n--      dbms_output.put_line('Finshed base64 encoding.');\n      RETURN vBlobEnc;\n    END encodeBlob2Base64;\n  begin\n    benc := encodeBlob2Base64(binarydata);\n    dbms_lob.createtemporary(c, TRUE);\n    v_amount := DBMS_LOB.GETLENGTH(benc);\n    DBMS_LOB.CONVERTTOCLOB(c, benc, v_amount, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n\n    v_amount := DBMS_LOB.GETLENGTH(c);\n    v_clob_offset := 1;\n    --dbms_output.put_line('V amount: '||v_amount);\n    while(v_clob_offset \u003c v_amount) loop\n      --dbms_output.put_line(v_offset);\n      --temp := ;\n      --dbms_output.put_line('size: '||length(temp));\n      obj.append(dbms_lob.SUBSTR(c, 4000,v_clob_offset));\n      v_clob_offset := v_clob_offset + 4000;\n    end loop;\n    dbms_lob.freetemporary(benc);\n    dbms_lob.freetemporary(c);\n  --dbms_output.put_line(obj.count);\n  --dbms_output.put_line(obj.get_last().to_char);\n    return obj;\n\n  end base64;\n\n\n  function base64(l json_list) return blob as\n    c clob := empty_clob();\n    b blob := empty_blob();\n    bret blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := 0; --DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n\n    FUNCTION decodeBase642Blob(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 256;--32;\n      vBlobDec BLOB := empty_blob();\n      vBlobDecLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(256);--32);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 decoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobDec, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobDec, utl_encode.base64_decode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobDecLen := dbms_lob.getlength(vBlobDec);\n--      dbms_output.put_line('\u003cBlobDecLength\u003e' || vBlobDecLen);\n--      dbms_output.put_line('Finshed base64 decoding.');\n      RETURN vBlobDec;\n    END decodeBase642Blob;\n  begin\n    dbms_lob.createtemporary(c, TRUE);\n    for i in 1 .. l.count loop\n      dbms_lob.append(c, l.get(i).get_string());\n    end loop;\n    v_amount := DBMS_LOB.GETLENGTH(c);\n--    dbms_output.put_line('L C'||v_amount);\n\n    dbms_lob.createtemporary(b, TRUE);\n    DBMS_LOB.CONVERTTOBLOB(b, c, dbms_lob.lobmaxsize, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n    dbms_lob.freetemporary(c);\n    v_amount := DBMS_LOB.GETLENGTH(b);\n--    dbms_output.put_line('L B'||v_amount);\n\n    bret := decodeBase642Blob(b);\n    dbms_lob.freetemporary(b);\n    return bret;\n\n  end base64;\n\n  function encode(binarydata blob) return json_value as\n    obj json_value;\n    c clob := empty_clob();\n    benc blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n--    temp varchar2(32767);\n\n    FUNCTION encodeBlob2Base64(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 45;\n      vBlobEnc BLOB := empty_blob();\n      vBlobEncLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(45);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 encoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobEnc, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobEnc, utl_encode.base64_encode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobEncLen := dbms_lob.getlength(vBlobEnc);\n--      dbms_output.put_line('\u003cBlobEncLength\u003e' || vBlobEncLen);\n--      dbms_output.put_line('Finshed base64 encoding.');\n      RETURN vBlobEnc;\n    END encodeBlob2Base64;\n  begin\n    benc := encodeBlob2Base64(binarydata);\n    dbms_lob.createtemporary(c, TRUE);\n    v_amount := DBMS_LOB.GETLENGTH(benc);\n    DBMS_LOB.CONVERTTOCLOB(c, benc, v_amount, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n\n    obj := json_value(c);\n\n    dbms_lob.freetemporary(benc);\n    dbms_lob.freetemporary(c);\n  --dbms_output.put_line(obj.count);\n  --dbms_output.put_line(obj.get_last().to_char);\n    return obj;\n\n  end encode;\n\n  function decode(v json_value) return blob as\n    c clob := empty_clob();\n    b blob := empty_blob();\n    bret blob;\n\n    v_blob_offset NUMBER := 1;\n    v_clob_offset NUMBER := 1;\n    v_lang_context NUMBER := 0; --DBMS_LOB.DEFAULT_LANG_CTX;\n    v_warning NUMBER;\n    v_amount PLS_INTEGER;\n\n    FUNCTION decodeBase642Blob(pBlobIn IN BLOB) RETURN BLOB IS\n      vAmount NUMBER := 256;--32;\n      vBlobDec BLOB := empty_blob();\n      vBlobDecLen NUMBER := 0;\n      vBlobInLen NUMBER := 0;\n      vBuffer RAW(256);--32);\n      vOffset NUMBER := 1;\n    BEGIN\n--      dbms_output.put_line('Start base64 decoding.');\n      vBlobInLen := dbms_lob.getlength(pBlobIn);\n--      dbms_output.put_line('\u003cBlobInLength\u003e' || vBlobInLen);\n      dbms_lob.createtemporary(vBlobDec, TRUE);\n      LOOP\n        IF vOffset \u003e= vBlobInLen THEN\n          EXIT;\n        END IF;\n        dbms_lob.read(pBlobIn, vAmount, vOffset, vBuffer);\n        BEGIN\n          dbms_lob.append(vBlobDec, utl_encode.base64_decode(vBuffer));\n        EXCEPTION\n          WHEN OTHERS THEN\n          dbms_output.put_line('\u003cvAmount\u003e' || vAmount || '\u003cvOffset\u003e' || vOffset || '\u003cvBuffer\u003e' || vBuffer);\n          dbms_output.put_line('ERROR IN append: ' || SQLERRM);\n          RAISE;\n        END;\n        vOffset := vOffset + vAmount;\n      END LOOP;\n      vBlobDecLen := dbms_lob.getlength(vBlobDec);\n--      dbms_output.put_line('\u003cBlobDecLength\u003e' || vBlobDecLen);\n--      dbms_output.put_line('Finshed base64 decoding.');\n      RETURN vBlobDec;\n    END decodeBase642Blob;\n  begin\n    dbms_lob.createtemporary(c, TRUE);\n    v.get_string(c);\n    v_amount := DBMS_LOB.GETLENGTH(c);\n--    dbms_output.put_line('L C'||v_amount);\n\n    dbms_lob.createtemporary(b, TRUE);\n    DBMS_LOB.CONVERTTOBLOB(b, c, dbms_lob.lobmaxsize, v_clob_offset, v_blob_offset, 1, v_lang_context, v_warning);\n    dbms_lob.freetemporary(c);\n    v_amount := DBMS_LOB.GETLENGTH(b);\n--    dbms_output.put_line('L B'||v_amount);\n\n    bret := decodeBase642Blob(b);\n    dbms_lob.freetemporary(b);\n    return bret;\n\n  end decode;\n\n\nend json_ext;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_EXT\" as\n  /*\n  Copyright (c) 2009 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n  function parsePath(json_path varchar2, base number default 1) return json_list;\n\n  --JSON Path getters\n  function get_json_value(obj json, v_path varchar2, base number default 1) return json_value;\n  function get_string(obj json, path varchar2,       base number default 1) return varchar2;\n  function get_number(obj json, path varchar2,       base number default 1) return number;\n  function get_json(obj json, path varchar2,         base number default 1) return json;\n  function get_json_list(obj json, path varchar2,    base number default 1) return json_list;\n  function get_bool(obj json, path varchar2,         base number default 1) return boolean;\n\n  --JSON Path putters\n  procedure put(obj in out nocopy json, path varchar2, elem varchar2,   base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem number,     base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json,       base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_list,  base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem boolean,    base number default 1);\n  procedure put(obj in out nocopy json, path varchar2, elem json_value, base number default 1);\n\n  procedure remove(obj in out nocopy json, path varchar2, base number default 1);\n\n  --Pretty print with JSON Path - obsolete in 0.9.4 - obj.path(v_path).(to_char,print,htp)\n  function pp(obj json, v_path varchar2) return varchar2;\n  procedure pp(obj json, v_path varchar2); --using dbms_output.put_line\n  procedure pp_htp(obj json, v_path varchar2); --using htp.print\n\n  --extra function checks if number has no fraction\n  function is_integer(v json_value) return boolean;\n\n  format_string varchar2(30 char) := 'yyyy-mm-dd hh24:mi:ss';\n  --extension enables json to store dates without comprimising the implementation\n  function to_json_value(d date) return json_value;\n  --notice that a date type in json is also a varchar2\n  function is_date(v json_value) return boolean;\n  --convertion is needed to extract dates\n  --(json_ext.to_date will not work along with the normal to_date function - any fix will be appreciated)\n  function to_date2(v json_value) return date;\n  --JSON Path with date\n  function get_date(obj json, path varchar2, base number default 1) return date;\n  procedure put(obj in out nocopy json, path varchar2, elem date, base number default 1);\n\n  --experimental support of binary data with base64\n  function base64(binarydata blob) return json_list;\n  function base64(l json_list) return blob;\n\n  function encode(binarydata blob) return json_value;\n  function decode(v json_value) return blob;\n\nend json_ext;"},{"Name":"JSON_HELPER","ObjectID":308495,"Digest":"a56a130b99a811c5c74bae79505790dc4e798d424d09a060dd654231bffdff8d","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_HELPER\" as\n  /* Example:\n  set serveroutput on;\n  declare\n    v_a json;\n    v_b json;\n  begin\n    v_a := json('{a:1, b:{a:null}, e:false}');\n    v_b := json('{c:3, e:{}, b:{b:2}}');\n    json_helper.merge(v_a, v_b).print(false);\n  end;\n  --\n  {\"a\":1,\"b\":{\"a\":null,\"b\":2},\"e\":{},\"c\":3}\n  */\n  -- Recursive merge\n  -- Courtesy of Matt Nolan - edited by Jonas Krogsb?ll\n  function merge( p_a_json json, p_b_json json) return json;\n\n  -- Join two lists\n  -- json_helper.join(json_list('[1,2,3]'),json_list('[4,5,6]')) -\u003e [1,2,3,4,5,6]\n  function join( p_a_list json_list, p_b_list json_list) return json_list;\n\n  -- keep only specific keys in json object\n  -- json_helper.keep(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"a\":1,\"f\":6,\"c\":3}\n  function keep( p_json json, p_keys json_list) return json;\n\n  -- remove specific keys in json object\n  -- json_helper.remove(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"b\":2,\"d\":4,\"e\":5}\n  function remove( p_json json, p_keys json_list) return json;\n\n  --equals\n  function equals(p_v1 json_value, p_v2 json_value, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json_list, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 number) return boolean;\n  function equals(p_v1 json_value, p_v2 varchar2) return boolean;\n  function equals(p_v1 json_value, p_v2 boolean) return boolean;\n  function equals(p_v1 json_value, p_v2 clob) return boolean;\n  function equals(p_v1 json, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_list, p_v2 json_list, exact boolean default true) return boolean;\n\n  --contains json, json_value\n  --contains json_list, json_value\n  function contains(p_v1 json, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 clob, exact boolean default false) return boolean;\n\n  function contains(p_v1 json_list, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 clob, exact boolean default false) return boolean;\n\nend json_helper;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_HELPER\" as\n\n  --recursive merge\n  function merge( p_a_json json, p_b_json json) return json as\n    l_json    JSON;\n    l_jv      json_value;\n    l_indx    number;\n    l_recursive json_value;\n  begin\n    --\n    -- Initialize our return object\n    --\n    l_json := p_a_json;\n\n    -- loop through p_b_json\n    l_indx := p_b_json.json_data.first;\n    loop\n      exit when l_indx is null;\n      l_jv   := p_b_json.json_data(l_indx);\n      if(l_jv.is_object) then\n        --recursive\n        l_recursive := l_json.get(l_jv.mapname);\n        if(l_recursive is not null and l_recursive.is_object) then\n          l_json.put(l_jv.mapname, merge(json(l_recursive), json(l_jv)));\n        else\n          l_json.put(l_jv.mapname, l_jv);\n        end if;\n      else\n        l_json.put(l_jv.mapname, l_jv);\n      end if;\n\n      --increment\n      l_indx := p_b_json.json_data.next(l_indx);\n    end loop;\n\n    return l_json;\n\n  end merge;\n\n  -- join two lists\n  function join( p_a_list json_list, p_b_list json_list) return json_list as\n    l_json_list json_list := p_a_list;\n  begin\n    for indx in 1 .. p_b_list.count loop\n      l_json_list.append(p_b_list.get(indx));\n    end loop;\n\n    return l_json_list;\n\n  end join;\n\n  -- keep keys.\n  function keep( p_json json, p_keys json_list) return json as\n    l_json json := json();\n    mapname varchar2(4000);\n  begin\n    for i in 1 .. p_keys.count loop\n      mapname := p_keys.get(i).get_string;\n      if(p_json.exist(mapname)) then\n        l_json.put(mapname, p_json.get(mapname));\n      end if;\n    end loop;\n\n    return l_json;\n  end keep;\n\n  -- drop keys.\n  function remove( p_json json, p_keys json_list) return json as\n    l_json json := p_json;\n  begin\n    for i in 1 .. p_keys.count loop\n      l_json.remove(p_keys.get(i).get_string);\n    end loop;\n\n    return l_json;\n  end remove;\n\n  --equals functions\n\n  function equals(p_v1 json_value, p_v2 number) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_number) then\n      return false;\n    end if;\n\n    return p_v2 = p_v1.get_number;\n  end;\n\n  function equals(p_v1 json_value, p_v2 boolean) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_bool) then\n      return false;\n    end if;\n\n    return p_v2 = p_v1.get_bool;\n  end;\n\n  function equals(p_v1 json_value, p_v2 varchar2) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_string) then\n      return false;\n    end if;\n\n    return p_v2 = p_v1.get_string;\n  end;\n\n  function equals(p_v1 json_value, p_v2 clob) return boolean as\n    my_clob clob;\n    res boolean;\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_string) then\n      return false;\n    end if;\n\n    my_clob := empty_clob();\n    dbms_lob.createtemporary(my_clob, true);\n    p_v1.get_string(my_clob);\n\n    res := dbms_lob.compare(p_v2, my_clob) = 0;\n    dbms_lob.freetemporary(my_clob);\n  end;\n\n  function equals(p_v1 json_value, p_v2 json_value, exact boolean) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(p_v2.is_number) then return equals(p_v1, p_v2.get_number); end if;\n    if(p_v2.is_bool) then return equals(p_v1, p_v2.get_bool); end if;\n    if(p_v2.is_object) then return equals(p_v1, json(p_v2), exact); end if;\n    if(p_v2.is_array) then return equals(p_v1, json_list(p_v2), exact); end if;\n    if(p_v2.is_string) then\n      if(p_v2.extended_str is null) then\n        return equals(p_v1, p_v2.get_string);\n      else\n        declare\n          my_clob clob; res boolean;\n        begin\n          my_clob := empty_clob();\n          dbms_lob.createtemporary(my_clob, true);\n          p_v2.get_string(my_clob);\n          res := equals(p_v1, my_clob);\n          dbms_lob.freetemporary(my_clob);\n          return res;\n        end;\n      end if;\n    end if;\n\n    return false; --should never happen\n  end;\n\n  function equals(p_v1 json_value, p_v2 json_list, exact boolean) return boolean as\n    cmp json_list;\n    res boolean := true;\n  begin\n--  p_v1.print(false);\n--  p_v2.print(false);\n--  dbms_output.put_line('labc1'||case when exact then 'X' else 'U' end);\n\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_array) then\n      return false;\n    end if;\n\n--  dbms_output.put_line('labc2'||case when exact then 'X' else 'U' end);\n\n    cmp := json_list(p_v1);\n    if(cmp.count != p_v2.count and exact) then return false; end if;\n\n--  dbms_output.put_line('labc3'||case when exact then 'X' else 'U' end);\n\n    if(exact) then\n      for i in 1 .. cmp.count loop\n        res := equals(cmp.get(i), p_v2.get(i), exact);\n        if(not res) then return res; end if;\n      end loop;\n    else\n--  dbms_output.put_line('labc4'||case when exact then 'X' else 'U' end);\n      if(p_v2.count \u003e cmp.count) then return false; end if;\n--  dbms_output.put_line('labc5'||case when exact then 'X' else 'U' end);\n\n      --match sublist here!\n      for x in 0 .. (cmp.count-p_v2.count) loop\n--  dbms_output.put_line('labc7'||x);\n\n        for i in 1 .. p_v2.count loop\n          res := equals(cmp.get(x+i), p_v2.get(i), exact);\n          if(not res) then\n            goto next_index;\n          end if;\n        end loop;\n        return true;\n\n        \u003c\u003cnext_index\u003e\u003e\n        null;\n      end loop;\n\n--  dbms_output.put_line('labc7'||case when exact then 'X' else 'U' end);\n\n    return false; --no match\n\n    end if;\n\n    return res;\n  end;\n\n  function equals(p_v1 json_value, p_v2 json, exact boolean) return boolean as\n    cmp json;\n    res boolean := true;\n  begin\n--  p_v1.print(false);\n--  p_v2.print(false);\n--  dbms_output.put_line('abc1');\n\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_object) then\n      return false;\n    end if;\n\n    cmp := json(p_v1);\n\n--  dbms_output.put_line('abc2');\n\n    if(cmp.count != p_v2.count and exact) then return false; end if;\n\n--  dbms_output.put_line('abc3');\n    declare\n      k1 json_list := p_v2.get_keys;\n      key_index number;\n    begin\n      for i in 1 .. k1.count loop\n        key_index := cmp.index_of(k1.get(i).get_string);\n        if(key_index = -1) then return false; end if;\n        if(exact) then\n          if(not equals(p_v2.get(i), cmp.get(key_index),true)) then return false; end if;\n        else\n          --non exact\n          declare\n            v1 json_value := cmp.get(key_index);\n            v2 json_value := p_v2.get(i);\n          begin\n--  dbms_output.put_line('abc3 1/2');\n--            v1.print(false);\n--            v2.print(false);\n\n            if(v1.is_object and v2.is_object) then\n              if(not equals(v1, v2, false)) then return false; end if;\n            elsif(v1.is_array and v2.is_array) then\n              if(not equals(v1, v2, false)) then return false; end if;\n            else\n              if(not equals(v1, v2, true)) then return false; end if;\n            end if;\n          end;\n\n        end if;\n      end loop;\n    end;\n\n--  dbms_output.put_line('abc4');\n\n    return true;\n  end;\n\n  function equals(p_v1 json, p_v2 json, exact boolean) return boolean as\n  begin\n    return equals(p_v1.to_json_value, p_v2, exact);\n  end;\n\n  function equals(p_v1 json_list, p_v2 json_list, exact boolean) return boolean as\n  begin\n    return equals(p_v1.to_json_value, p_v2, exact);\n  end;\n\n  --contain\n  function contains(p_v1 json, p_v2 json_value, exact boolean) return boolean as\n    v_values json_list;\n  begin\n    if(equals(p_v1.to_json_value, p_v2, exact)) then return true; end if;\n\n    v_values := p_v1.get_values;\n\n    for i in 1 .. v_values.count loop\n      declare\n        v_val json_value := v_values.get(i);\n      begin\n        if(v_val.is_object) then\n          if(contains(json(v_val),p_v2,exact)) then return true; end if;\n        end if;\n        if(v_val.is_array) then\n          if(contains(json_list(v_val),p_v2, exact)) then return true; end if;\n        end if;\n\n        if(equals(v_val, p_v2, exact)) then return true; end if;\n      end;\n\n    end loop;\n\n    return false;\n  end;\n\n  function contains(p_v1 json_list, p_v2 json_value, exact boolean) return boolean as\n  begin\n    if(equals(p_v1.to_json_value, p_v2, exact)) then return true; end if;\n\n    for i in 1 .. p_v1.count loop\n      declare\n        v_val json_value := p_v1.get(i);\n      begin\n        if(v_val.is_object) then\n          if(contains(json(v_val),p_v2, exact)) then return true; end if;\n        end if;\n        if(v_val.is_array) then\n          if(contains(json_list(v_val),p_v2, exact)) then return true; end if;\n        end if;\n\n        if(equals(v_val, p_v2, exact)) then return true; end if;\n      end;\n\n    end loop;\n\n    return false;\n  end;\n\n  function contains(p_v1 json, p_v2 json, exact boolean ) return boolean as\n  begin return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json, p_v2 json_list, exact boolean ) return boolean as\n  begin return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json, p_v2 number, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json, p_v2 varchar2, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json, p_v2 boolean, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json, p_v2 clob, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n\n  function contains(p_v1 json_list, p_v2 json, exact boolean ) return boolean as begin\n  return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json_list, p_v2 json_list, exact boolean ) return boolean as begin\n  return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json_list, p_v2 number, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json_list, p_v2 varchar2, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json_list, p_v2 boolean, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json_list, p_v2 clob, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n\n\nend json_helper;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_HELPER\" as\n  /* Example:\n  set serveroutput on;\n  declare\n    v_a json;\n    v_b json;\n  begin\n    v_a := json('{a:1, b:{a:null}, e:false}');\n    v_b := json('{c:3, e:{}, b:{b:2}}');\n    json_helper.merge(v_a, v_b).print(false);\n  end;\n  --\n  {\"a\":1,\"b\":{\"a\":null,\"b\":2},\"e\":{},\"c\":3}\n  */\n  -- Recursive merge\n  -- Courtesy of Matt Nolan - edited by Jonas Krogsb?ll\n  function merge( p_a_json json, p_b_json json) return json;\n\n  -- Join two lists\n  -- json_helper.join(json_list('[1,2,3]'),json_list('[4,5,6]')) -\u003e [1,2,3,4,5,6]\n  function join( p_a_list json_list, p_b_list json_list) return json_list;\n\n  -- keep only specific keys in json object\n  -- json_helper.keep(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"a\":1,\"f\":6,\"c\":3}\n  function keep( p_json json, p_keys json_list) return json;\n\n  -- remove specific keys in json object\n  -- json_helper.remove(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"b\":2,\"d\":4,\"e\":5}\n  function remove( p_json json, p_keys json_list) return json;\n\n  --equals\n  function equals(p_v1 json_value, p_v2 json_value, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json_list, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 number) return boolean;\n  function equals(p_v1 json_value, p_v2 varchar2) return boolean;\n  function equals(p_v1 json_value, p_v2 boolean) return boolean;\n  function equals(p_v1 json_value, p_v2 clob) return boolean;\n  function equals(p_v1 json, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_list, p_v2 json_list, exact boolean default true) return boolean;\n\n  --contains json, json_value\n  --contains json_list, json_value\n  function contains(p_v1 json, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 clob, exact boolean default false) return boolean;\n\n  function contains(p_v1 json_list, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 clob, exact boolean default false) return boolean;\n\nend json_helper;"},{"Name":"JSON_ML","ObjectID":308488,"Digest":"fda901dfd5c9a8287497e60f29d1dc0622e8ce8c372ddf997caf2b14e2a756ed","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_ML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n\n  jsonml_stylesheet xmltype := null;\n\n  function xml2json(xml in xmltype) return json_list;\n  function xmlstr2json(xmlstr in varchar2) return json_list;\n\nend json_ml;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_ML\" as\n  function get_jsonml_stylesheet return xmltype;\n\n  function xml2json(xml in xmltype) return json_list as\n    l_json        xmltype;\n    l_returnvalue clob;\n  begin\n    l_json := xml.transform (get_jsonml_stylesheet);\n    l_returnvalue := l_json.getclobval();\n    l_returnvalue := dbms_xmlgen.convert (l_returnvalue, dbms_xmlgen.entity_decode);\n    --dbms_output.put_line(l_returnvalue);\n    return json_list(l_returnvalue);\n  end xml2json;\n\n  function xmlstr2json(xmlstr in varchar2) return json_list as\n  begin\n    return xml2json(xmltype(xmlstr));\n  end xmlstr2json;\n\n  function get_jsonml_stylesheet return xmltype as\n  begin\n    if(jsonml_stylesheet is null) then\n    jsonml_stylesheet := xmltype('\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!--\n\t\tJsonML.xslt\n\n\t\tCreated: 2006-11-15-0551\n\t\tModified: 2009-02-14-0927\n\n\t\tReleased under an open-source license:\n\t\thttp://jsonml.org/License.htm\n\n\t\tThis transformation converts any XML document into JsonML.\n\t\tIt omits processing-instructions and comment-nodes.\n\n\t\tTo enable comment-nodes to be emitted as JavaScript comments,\n\t\tuncomment the Comment() template.\n--\u003e\n\u003cxsl:stylesheet version=\"1.0\"\n\t\t\t\txmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\u003e\n\n\t\u003cxsl:output method=\"text\"\n\t\t\t\tmedia-type=\"application/json\"\n\t\t\t\tencoding=\"UTF-8\"\n\t\t\t\tindent=\"no\"\n\t\t\t\tomit-xml-declaration=\"yes\" /\u003e\n\n\t\u003c!-- constants --\u003e\n\t\u003cxsl:variable name=\"XHTML\"\n\t\t\t\t  select=\"''http://www.w3.org/1999/xhtml''\" /\u003e\n\n\t\u003cxsl:variable name=\"START_ELEM\"\n\t\t\t\t  select=\"''[''\" /\u003e\n\n\t\u003cxsl:variable name=\"END_ELEM\"\n\t\t\t\t  select=\"'']''\" /\u003e\n\n\t\u003cxsl:variable name=\"VALUE_DELIM\"\n\t\t\t\t  select=\"'',''\" /\u003e\n\n\t\u003cxsl:variable name=\"START_ATTRIB\"\n\t\t\t\t  select=\"''{''\" /\u003e\n\n\t\u003cxsl:variable name=\"END_ATTRIB\"\n\t\t\t\t  select=\"''}''\" /\u003e\n\n\t\u003cxsl:variable name=\"NAME_DELIM\"\n\t\t\t\t  select=\"'':''\" /\u003e\n\n\t\u003cxsl:variable name=\"STRING_DELIM\"\n\t\t\t\t  select=\"''\u0026#x22;''\" /\u003e\n\n\t\u003cxsl:variable name=\"START_COMMENT\"\n\t\t\t\t  select=\"''/*''\" /\u003e\n\n\t\u003cxsl:variable name=\"END_COMMENT\"\n\t\t\t\t  select=\"''*/''\" /\u003e\n\n\t\u003c!-- root-node --\u003e\n\t\u003cxsl:template match=\"/\"\u003e\n\t\t\u003cxsl:apply-templates select=\"*\" /\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- comments --\u003e\n\t\u003cxsl:template match=\"comment()\"\u003e\n\t\u003c!-- uncomment to support JSON comments --\u003e\n\t\u003c!--\n\t\t\u003cxsl:value-of select=\"$START_COMMENT\" /\u003e\n\n\t\t\u003cxsl:value-of select=\".\"\n\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\n\t\t\u003cxsl:value-of select=\"$END_COMMENT\" /\u003e\n\t--\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- elements --\u003e\n\t\u003cxsl:template match=\"*\"\u003e\n\t\t\u003cxsl:value-of select=\"$START_ELEM\" /\u003e\n\n\t\t\u003c!-- tag-name string --\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\t\t\u003cxsl:choose\u003e\n\t\t\t\u003cxsl:when test=\"namespace-uri()=$XHTML\"\u003e\n\t\t\t\t\u003cxsl:value-of select=\"local-name()\" /\u003e\n\t\t\t\u003c/xsl:when\u003e\n\t\t\t\u003cxsl:otherwise\u003e\n\t\t\t\t\u003cxsl:value-of select=\"name()\" /\u003e\n\t\t\t\u003c/xsl:otherwise\u003e\n\t\t\u003c/xsl:choose\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\n\t\t\u003c!-- attribute object --\u003e\n\t\t\u003cxsl:if test=\"count(@*)\u003e0\"\u003e\n\t\t\t\u003cxsl:value-of select=\"$VALUE_DELIM\" /\u003e\n\t\t\t\u003cxsl:value-of select=\"$START_ATTRIB\" /\u003e\n\t\t\t\u003cxsl:for-each select=\"@*\"\u003e\n\t\t\t\t\u003cxsl:if test=\"position()\u003e1\"\u003e\n\t\t\t\t\t\u003cxsl:value-of select=\"$VALUE_DELIM\" /\u003e\n\t\t\t\t\u003c/xsl:if\u003e\n\t\t\t\t\u003cxsl:apply-templates select=\".\" /\u003e\n\t\t\t\u003c/xsl:for-each\u003e\n\t\t\t\u003cxsl:value-of select=\"$END_ATTRIB\" /\u003e\n\t\t\u003c/xsl:if\u003e\n\n\t\t\u003c!-- child elements and text-nodes --\u003e\n\t\t\u003cxsl:for-each select=\"*|text()\"\u003e\n\t\t\t\u003cxsl:value-of select=\"$VALUE_DELIM\" /\u003e\n\t\t\t\u003cxsl:apply-templates select=\".\" /\u003e\n\t\t\u003c/xsl:for-each\u003e\n\n\t\t\u003cxsl:value-of select=\"$END_ELEM\" /\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- text-nodes --\u003e\n\t\u003cxsl:template match=\"text()\"\u003e\n\t\t\u003cxsl:call-template name=\"escape-string\"\u003e\n\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\tselect=\".\" /\u003e\n\t\t\u003c/xsl:call-template\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- attributes --\u003e\n\t\u003cxsl:template match=\"@*\"\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\t\t\u003cxsl:choose\u003e\n\t\t\t\u003cxsl:when test=\"namespace-uri()=$XHTML\"\u003e\n\t\t\t\t\u003cxsl:value-of select=\"local-name()\" /\u003e\n\t\t\t\u003c/xsl:when\u003e\n\t\t\t\u003cxsl:otherwise\u003e\n\t\t\t\t\u003cxsl:value-of select=\"name()\" /\u003e\n\t\t\t\u003c/xsl:otherwise\u003e\n\t\t\u003c/xsl:choose\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\n\t\t\u003cxsl:value-of select=\"$NAME_DELIM\" /\u003e\n\n\t\t\u003cxsl:call-template name=\"escape-string\"\u003e\n\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\tselect=\".\" /\u003e\n\t\t\u003c/xsl:call-template\u003e\n\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- escape-string: quotes and escapes --\u003e\n\t\u003cxsl:template name=\"escape-string\"\u003e\n\t\t\u003cxsl:param name=\"value\" /\u003e\n\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\n\t\t\u003cxsl:if test=\"string-length($value)\u003e0\"\u003e\n\t\t\t\u003cxsl:variable name=\"escaped-whacks\"\u003e\n\t\t\t\t\u003c!-- escape backslashes --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$value\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\\\''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003cxsl:variable name=\"escaped-LF\"\u003e\n\t\t\t\t\u003c!-- escape line feeds --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$escaped-whacks\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\u0026#x0A;''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\n''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003cxsl:variable name=\"escaped-CR\"\u003e\n\t\t\t\t\u003c!-- escape carriage returns --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$escaped-LF\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\u0026#x0D;''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\r''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003cxsl:variable name=\"escaped-tabs\"\u003e\n\t\t\t\t\u003c!-- escape tabs --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$escaped-CR\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\u0026#x09;''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\t''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003c!-- escape quotes --\u003e\n\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\tselect=\"$escaped-tabs\" /\u003e\n\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\tselect=\"''\u0026quot;''\" /\u003e\n\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\tselect=\"''\\\u0026quot;''\" /\u003e\n\t\t\t\u003c/xsl:call-template\u003e\n\t\t\u003c/xsl:if\u003e\n\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- string-replace: replaces occurances of one string with another --\u003e\n\t\u003cxsl:template name=\"string-replace\"\u003e\n\t\t\u003cxsl:param name=\"value\" /\u003e\n\t\t\u003cxsl:param name=\"find\" /\u003e\n\t\t\u003cxsl:param name=\"replace\" /\u003e\n\n\t\t\u003cxsl:choose\u003e\n\t\t\t\u003cxsl:when test=\"contains($value,$find)\"\u003e\n\t\t\t\t\u003c!-- replace and call recursively on next --\u003e\n\t\t\t\t\u003cxsl:value-of select=\"substring-before($value,$find)\"\n\t\t\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\t\t\t\t\u003cxsl:value-of select=\"$replace\"\n\t\t\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"substring-after($value,$find)\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"$find\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"$replace\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:when\u003e\n\t\t\t\u003cxsl:otherwise\u003e\n\t\t\t\t\u003c!-- no replacement necessary --\u003e\n\t\t\t\t\u003cxsl:value-of select=\"$value\"\n\t\t\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\t\t\t\u003c/xsl:otherwise\u003e\n\t\t\u003c/xsl:choose\u003e\n\t\u003c/xsl:template\u003e\n\n\u003c/xsl:stylesheet\u003e');\n    end if;\n    return jsonml_stylesheet;\n  end get_jsonml_stylesheet;\n\nend json_ml;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_ML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n\n  jsonml_stylesheet xmltype := null;\n\n  function xml2json(xml in xmltype) return json_list;\n  function xmlstr2json(xmlstr in varchar2) return json_list;\n\nend json_ml;"},{"Name":"JSON_ML","ObjectID":308489,"Digest":"fda901dfd5c9a8287497e60f29d1dc0622e8ce8c372ddf997caf2b14e2a756ed","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_ML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n\n  jsonml_stylesheet xmltype := null;\n\n  function xml2json(xml in xmltype) return json_list;\n  function xmlstr2json(xmlstr in varchar2) return json_list;\n\nend json_ml;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_ML\" as\n  function get_jsonml_stylesheet return xmltype;\n\n  function xml2json(xml in xmltype) return json_list as\n    l_json        xmltype;\n    l_returnvalue clob;\n  begin\n    l_json := xml.transform (get_jsonml_stylesheet);\n    l_returnvalue := l_json.getclobval();\n    l_returnvalue := dbms_xmlgen.convert (l_returnvalue, dbms_xmlgen.entity_decode);\n    --dbms_output.put_line(l_returnvalue);\n    return json_list(l_returnvalue);\n  end xml2json;\n\n  function xmlstr2json(xmlstr in varchar2) return json_list as\n  begin\n    return xml2json(xmltype(xmlstr));\n  end xmlstr2json;\n\n  function get_jsonml_stylesheet return xmltype as\n  begin\n    if(jsonml_stylesheet is null) then\n    jsonml_stylesheet := xmltype('\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!--\n\t\tJsonML.xslt\n\n\t\tCreated: 2006-11-15-0551\n\t\tModified: 2009-02-14-0927\n\n\t\tReleased under an open-source license:\n\t\thttp://jsonml.org/License.htm\n\n\t\tThis transformation converts any XML document into JsonML.\n\t\tIt omits processing-instructions and comment-nodes.\n\n\t\tTo enable comment-nodes to be emitted as JavaScript comments,\n\t\tuncomment the Comment() template.\n--\u003e\n\u003cxsl:stylesheet version=\"1.0\"\n\t\t\t\txmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\u003e\n\n\t\u003cxsl:output method=\"text\"\n\t\t\t\tmedia-type=\"application/json\"\n\t\t\t\tencoding=\"UTF-8\"\n\t\t\t\tindent=\"no\"\n\t\t\t\tomit-xml-declaration=\"yes\" /\u003e\n\n\t\u003c!-- constants --\u003e\n\t\u003cxsl:variable name=\"XHTML\"\n\t\t\t\t  select=\"''http://www.w3.org/1999/xhtml''\" /\u003e\n\n\t\u003cxsl:variable name=\"START_ELEM\"\n\t\t\t\t  select=\"''[''\" /\u003e\n\n\t\u003cxsl:variable name=\"END_ELEM\"\n\t\t\t\t  select=\"'']''\" /\u003e\n\n\t\u003cxsl:variable name=\"VALUE_DELIM\"\n\t\t\t\t  select=\"'',''\" /\u003e\n\n\t\u003cxsl:variable name=\"START_ATTRIB\"\n\t\t\t\t  select=\"''{''\" /\u003e\n\n\t\u003cxsl:variable name=\"END_ATTRIB\"\n\t\t\t\t  select=\"''}''\" /\u003e\n\n\t\u003cxsl:variable name=\"NAME_DELIM\"\n\t\t\t\t  select=\"'':''\" /\u003e\n\n\t\u003cxsl:variable name=\"STRING_DELIM\"\n\t\t\t\t  select=\"''\u0026#x22;''\" /\u003e\n\n\t\u003cxsl:variable name=\"START_COMMENT\"\n\t\t\t\t  select=\"''/*''\" /\u003e\n\n\t\u003cxsl:variable name=\"END_COMMENT\"\n\t\t\t\t  select=\"''*/''\" /\u003e\n\n\t\u003c!-- root-node --\u003e\n\t\u003cxsl:template match=\"/\"\u003e\n\t\t\u003cxsl:apply-templates select=\"*\" /\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- comments --\u003e\n\t\u003cxsl:template match=\"comment()\"\u003e\n\t\u003c!-- uncomment to support JSON comments --\u003e\n\t\u003c!--\n\t\t\u003cxsl:value-of select=\"$START_COMMENT\" /\u003e\n\n\t\t\u003cxsl:value-of select=\".\"\n\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\n\t\t\u003cxsl:value-of select=\"$END_COMMENT\" /\u003e\n\t--\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- elements --\u003e\n\t\u003cxsl:template match=\"*\"\u003e\n\t\t\u003cxsl:value-of select=\"$START_ELEM\" /\u003e\n\n\t\t\u003c!-- tag-name string --\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\t\t\u003cxsl:choose\u003e\n\t\t\t\u003cxsl:when test=\"namespace-uri()=$XHTML\"\u003e\n\t\t\t\t\u003cxsl:value-of select=\"local-name()\" /\u003e\n\t\t\t\u003c/xsl:when\u003e\n\t\t\t\u003cxsl:otherwise\u003e\n\t\t\t\t\u003cxsl:value-of select=\"name()\" /\u003e\n\t\t\t\u003c/xsl:otherwise\u003e\n\t\t\u003c/xsl:choose\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\n\t\t\u003c!-- attribute object --\u003e\n\t\t\u003cxsl:if test=\"count(@*)\u003e0\"\u003e\n\t\t\t\u003cxsl:value-of select=\"$VALUE_DELIM\" /\u003e\n\t\t\t\u003cxsl:value-of select=\"$START_ATTRIB\" /\u003e\n\t\t\t\u003cxsl:for-each select=\"@*\"\u003e\n\t\t\t\t\u003cxsl:if test=\"position()\u003e1\"\u003e\n\t\t\t\t\t\u003cxsl:value-of select=\"$VALUE_DELIM\" /\u003e\n\t\t\t\t\u003c/xsl:if\u003e\n\t\t\t\t\u003cxsl:apply-templates select=\".\" /\u003e\n\t\t\t\u003c/xsl:for-each\u003e\n\t\t\t\u003cxsl:value-of select=\"$END_ATTRIB\" /\u003e\n\t\t\u003c/xsl:if\u003e\n\n\t\t\u003c!-- child elements and text-nodes --\u003e\n\t\t\u003cxsl:for-each select=\"*|text()\"\u003e\n\t\t\t\u003cxsl:value-of select=\"$VALUE_DELIM\" /\u003e\n\t\t\t\u003cxsl:apply-templates select=\".\" /\u003e\n\t\t\u003c/xsl:for-each\u003e\n\n\t\t\u003cxsl:value-of select=\"$END_ELEM\" /\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- text-nodes --\u003e\n\t\u003cxsl:template match=\"text()\"\u003e\n\t\t\u003cxsl:call-template name=\"escape-string\"\u003e\n\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\tselect=\".\" /\u003e\n\t\t\u003c/xsl:call-template\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- attributes --\u003e\n\t\u003cxsl:template match=\"@*\"\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\t\t\u003cxsl:choose\u003e\n\t\t\t\u003cxsl:when test=\"namespace-uri()=$XHTML\"\u003e\n\t\t\t\t\u003cxsl:value-of select=\"local-name()\" /\u003e\n\t\t\t\u003c/xsl:when\u003e\n\t\t\t\u003cxsl:otherwise\u003e\n\t\t\t\t\u003cxsl:value-of select=\"name()\" /\u003e\n\t\t\t\u003c/xsl:otherwise\u003e\n\t\t\u003c/xsl:choose\u003e\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\n\t\t\u003cxsl:value-of select=\"$NAME_DELIM\" /\u003e\n\n\t\t\u003cxsl:call-template name=\"escape-string\"\u003e\n\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\tselect=\".\" /\u003e\n\t\t\u003c/xsl:call-template\u003e\n\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- escape-string: quotes and escapes --\u003e\n\t\u003cxsl:template name=\"escape-string\"\u003e\n\t\t\u003cxsl:param name=\"value\" /\u003e\n\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\n\t\t\u003cxsl:if test=\"string-length($value)\u003e0\"\u003e\n\t\t\t\u003cxsl:variable name=\"escaped-whacks\"\u003e\n\t\t\t\t\u003c!-- escape backslashes --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$value\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\\\''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003cxsl:variable name=\"escaped-LF\"\u003e\n\t\t\t\t\u003c!-- escape line feeds --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$escaped-whacks\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\u0026#x0A;''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\n''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003cxsl:variable name=\"escaped-CR\"\u003e\n\t\t\t\t\u003c!-- escape carriage returns --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$escaped-LF\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\u0026#x0D;''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\r''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003cxsl:variable name=\"escaped-tabs\"\u003e\n\t\t\t\t\u003c!-- escape tabs --\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"$escaped-CR\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"''\u0026#x09;''\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"''\\t''\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:variable\u003e\n\n\t\t\t\u003c!-- escape quotes --\u003e\n\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\tselect=\"$escaped-tabs\" /\u003e\n\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\tselect=\"''\u0026quot;''\" /\u003e\n\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\tselect=\"''\\\u0026quot;''\" /\u003e\n\t\t\t\u003c/xsl:call-template\u003e\n\t\t\u003c/xsl:if\u003e\n\n\t\t\u003cxsl:value-of select=\"$STRING_DELIM\" /\u003e\n\t\u003c/xsl:template\u003e\n\n\t\u003c!-- string-replace: replaces occurances of one string with another --\u003e\n\t\u003cxsl:template name=\"string-replace\"\u003e\n\t\t\u003cxsl:param name=\"value\" /\u003e\n\t\t\u003cxsl:param name=\"find\" /\u003e\n\t\t\u003cxsl:param name=\"replace\" /\u003e\n\n\t\t\u003cxsl:choose\u003e\n\t\t\t\u003cxsl:when test=\"contains($value,$find)\"\u003e\n\t\t\t\t\u003c!-- replace and call recursively on next --\u003e\n\t\t\t\t\u003cxsl:value-of select=\"substring-before($value,$find)\"\n\t\t\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\t\t\t\t\u003cxsl:value-of select=\"$replace\"\n\t\t\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\t\t\t\t\u003cxsl:call-template name=\"string-replace\"\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"value\"\n\t\t\t\t\t\t\t\t\tselect=\"substring-after($value,$find)\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"find\"\n\t\t\t\t\t\t\t\t\tselect=\"$find\" /\u003e\n\t\t\t\t\t\u003cxsl:with-param name=\"replace\"\n\t\t\t\t\t\t\t\t\tselect=\"$replace\" /\u003e\n\t\t\t\t\u003c/xsl:call-template\u003e\n\t\t\t\u003c/xsl:when\u003e\n\t\t\t\u003cxsl:otherwise\u003e\n\t\t\t\t\u003c!-- no replacement necessary --\u003e\n\t\t\t\t\u003cxsl:value-of select=\"$value\"\n\t\t\t\t\t\t\t  disable-output-escaping=\"yes\" /\u003e\n\t\t\t\u003c/xsl:otherwise\u003e\n\t\t\u003c/xsl:choose\u003e\n\t\u003c/xsl:template\u003e\n\n\u003c/xsl:stylesheet\u003e');\n    end if;\n    return jsonml_stylesheet;\n  end get_jsonml_stylesheet;\n\nend json_ml;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_ML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /* This package contains extra methods to lookup types and\n     an easy way of adding date values in json - without changing the structure */\n\n  jsonml_stylesheet xmltype := null;\n\n  function xml2json(xml in xmltype) return json_list;\n  function xmlstr2json(xmlstr in varchar2) return json_list;\n\nend json_ml;"},{"Name":"JSON_XML","ObjectID":308490,"Digest":"7c43194de631fe464b0d6a0a9c580b1cdc4fa597dcdcf5f53244962f5cc22a8f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_XML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /*\n  declare\n    obj json := json('{a:1,b:[2,3,4],c:true}');\n    x xmltype;\n  begin\n    obj.print;\n    x := json_xml.json_to_xml(obj);\n    dbms_output.put_line(x.getclobval());\n  end;\n  */\n\n  function json_to_xml(obj json, tagname varchar2 default 'root') return xmltype;\n\nend json_xml;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_XML\" as\n\n  function escapeStr(str varchar2) return varchar2 as\n    buf varchar2(32767) := '';\n    ch varchar2(4);\n  begin\n    for i in 1 .. length(str) loop\n      ch := substr(str, i, 1);\n      case ch\n      when '\u0026' then buf := buf || '\u0026amp;';\n      when '\u003c' then buf := buf || '\u0026lt;';\n      when '\u003e' then buf := buf || '\u0026gt;';\n      when '\"' then buf := buf || '\u0026quot;';\n      else buf := buf || ch;\n      end case;\n    end loop;\n    return buf;\n  end escapeStr;\n\n/* Clob methods from printer */\n  procedure add_to_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2, str varchar2) as\n  begin\n    if(length(str) \u003e 32767 - length(buf_str)) then\n      dbms_lob.append(buf_lob, buf_str);\n      buf_str := str;\n    else\n      buf_str := buf_str || str;\n    end if;\n  end add_to_clob;\n\n  procedure flush_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2) as\n  begin\n    dbms_lob.append(buf_lob, buf_str);\n  end flush_clob;\n\n  procedure toString(obj json_value, tagname in varchar2, xmlstr in out nocopy clob, xmlbuf in out nocopy varchar2) as\n    v_obj json;\n    v_list json_list;\n\n    v_keys json_list;\n    v_value json_value;\n    key_str varchar2(4000);\n  begin\n    if (obj.is_object()) then\n      add_to_clob(xmlstr, xmlbuf, '\u003c' || tagname || '\u003e');\n      v_obj := json(obj);\n\n      v_keys := v_obj.get_keys();\n      for i in 1 .. v_keys.count loop\n        v_value := v_obj.get(i);\n        key_str := v_keys.get(i).str;\n\n        if(key_str = 'content') then\n          if(v_value.is_array()) then\n            declare\n              v_l json_list := json_list(v_value);\n            begin\n              for j in 1 .. v_l.count loop\n                if(j \u003e 1) then add_to_clob(xmlstr, xmlbuf, chr(13)||chr(10)); end if;\n                add_to_clob(xmlstr, xmlbuf, escapeStr(v_l.get(j).to_char()));\n              end loop;\n            end;\n          else\n            add_to_clob(xmlstr, xmlbuf, escapeStr(v_value.to_char()));\n          end if;\n        elsif(v_value.is_array()) then\n          declare\n            v_l json_list := json_list(v_value);\n          begin\n            for j in 1 .. v_l.count loop\n              v_value := v_l.get(j);\n              if(v_value.is_array()) then\n                add_to_clob(xmlstr, xmlbuf, '\u003c' || key_str || '\u003e');\n                add_to_clob(xmlstr, xmlbuf, escapeStr(v_value.to_char()));\n                add_to_clob(xmlstr, xmlbuf, '\u003c/' || key_str || '\u003e');\n              else\n                toString(v_value, key_str, xmlstr, xmlbuf);\n              end if;\n            end loop;\n          end;\n        elsif(v_value.is_null() or (v_value.is_string and v_value.get_string = '')) then\n          add_to_clob(xmlstr, xmlbuf, '\u003c' || key_str || '/\u003e');\n        else\n          toString(v_value, key_str, xmlstr, xmlbuf);\n        end if;\n      end loop;\n\n      add_to_clob(xmlstr, xmlbuf, '\u003c/' || tagname || '\u003e');\n    elsif (obj.is_array()) then\n      v_list := json_list(obj);\n      for i in 1 .. v_list.count loop\n        v_value := v_list.get(i);\n        toString(v_value, nvl(tagname, 'array'), xmlstr, xmlbuf);\n      end loop;\n    else\n      add_to_clob(xmlstr, xmlbuf, '\u003c' || tagname || '\u003e'||escapeStr(obj.to_char())||'\u003c/' || tagname || '\u003e');\n    end if;\n  end toString;\n\n  function json_to_xml(obj json, tagname varchar2 default 'root') return xmltype as\n    xmlstr clob := empty_clob();\n    xmlbuf varchar2(32767) := '';\n    returnValue xmltype;\n  begin\n    dbms_lob.createtemporary(xmlstr, true);\n\n    toString(obj.to_json_value(), tagname, xmlstr, xmlbuf);\n\n    flush_clob(xmlstr, xmlbuf);\n    returnValue := xmltype('\u003c?xml version=\"1.0\"?\u003e'||xmlstr);\n    dbms_lob.freetemporary(xmlstr);\n    return returnValue;\n  end;\n\nend json_xml;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_XML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /*\n  declare\n    obj json := json('{a:1,b:[2,3,4],c:true}');\n    x xmltype;\n  begin\n    obj.print;\n    x := json_xml.json_to_xml(obj);\n    dbms_output.put_line(x.getclobval());\n  end;\n  */\n\n  function json_to_xml(obj json, tagname varchar2 default 'root') return xmltype;\n\nend json_xml;"},{"Name":"JSON_XML","ObjectID":308491,"Digest":"7c43194de631fe464b0d6a0a9c580b1cdc4fa597dcdcf5f53244962f5cc22a8f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_XML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /*\n  declare\n    obj json := json('{a:1,b:[2,3,4],c:true}');\n    x xmltype;\n  begin\n    obj.print;\n    x := json_xml.json_to_xml(obj);\n    dbms_output.put_line(x.getclobval());\n  end;\n  */\n\n  function json_to_xml(obj json, tagname varchar2 default 'root') return xmltype;\n\nend json_xml;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_XML\" as\n\n  function escapeStr(str varchar2) return varchar2 as\n    buf varchar2(32767) := '';\n    ch varchar2(4);\n  begin\n    for i in 1 .. length(str) loop\n      ch := substr(str, i, 1);\n      case ch\n      when '\u0026' then buf := buf || '\u0026amp;';\n      when '\u003c' then buf := buf || '\u0026lt;';\n      when '\u003e' then buf := buf || '\u0026gt;';\n      when '\"' then buf := buf || '\u0026quot;';\n      else buf := buf || ch;\n      end case;\n    end loop;\n    return buf;\n  end escapeStr;\n\n/* Clob methods from printer */\n  procedure add_to_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2, str varchar2) as\n  begin\n    if(length(str) \u003e 32767 - length(buf_str)) then\n      dbms_lob.append(buf_lob, buf_str);\n      buf_str := str;\n    else\n      buf_str := buf_str || str;\n    end if;\n  end add_to_clob;\n\n  procedure flush_clob(buf_lob in out nocopy clob, buf_str in out nocopy varchar2) as\n  begin\n    dbms_lob.append(buf_lob, buf_str);\n  end flush_clob;\n\n  procedure toString(obj json_value, tagname in varchar2, xmlstr in out nocopy clob, xmlbuf in out nocopy varchar2) as\n    v_obj json;\n    v_list json_list;\n\n    v_keys json_list;\n    v_value json_value;\n    key_str varchar2(4000);\n  begin\n    if (obj.is_object()) then\n      add_to_clob(xmlstr, xmlbuf, '\u003c' || tagname || '\u003e');\n      v_obj := json(obj);\n\n      v_keys := v_obj.get_keys();\n      for i in 1 .. v_keys.count loop\n        v_value := v_obj.get(i);\n        key_str := v_keys.get(i).str;\n\n        if(key_str = 'content') then\n          if(v_value.is_array()) then\n            declare\n              v_l json_list := json_list(v_value);\n            begin\n              for j in 1 .. v_l.count loop\n                if(j \u003e 1) then add_to_clob(xmlstr, xmlbuf, chr(13)||chr(10)); end if;\n                add_to_clob(xmlstr, xmlbuf, escapeStr(v_l.get(j).to_char()));\n              end loop;\n            end;\n          else\n            add_to_clob(xmlstr, xmlbuf, escapeStr(v_value.to_char()));\n          end if;\n        elsif(v_value.is_array()) then\n          declare\n            v_l json_list := json_list(v_value);\n          begin\n            for j in 1 .. v_l.count loop\n              v_value := v_l.get(j);\n              if(v_value.is_array()) then\n                add_to_clob(xmlstr, xmlbuf, '\u003c' || key_str || '\u003e');\n                add_to_clob(xmlstr, xmlbuf, escapeStr(v_value.to_char()));\n                add_to_clob(xmlstr, xmlbuf, '\u003c/' || key_str || '\u003e');\n              else\n                toString(v_value, key_str, xmlstr, xmlbuf);\n              end if;\n            end loop;\n          end;\n        elsif(v_value.is_null() or (v_value.is_string and v_value.get_string = '')) then\n          add_to_clob(xmlstr, xmlbuf, '\u003c' || key_str || '/\u003e');\n        else\n          toString(v_value, key_str, xmlstr, xmlbuf);\n        end if;\n      end loop;\n\n      add_to_clob(xmlstr, xmlbuf, '\u003c/' || tagname || '\u003e');\n    elsif (obj.is_array()) then\n      v_list := json_list(obj);\n      for i in 1 .. v_list.count loop\n        v_value := v_list.get(i);\n        toString(v_value, nvl(tagname, 'array'), xmlstr, xmlbuf);\n      end loop;\n    else\n      add_to_clob(xmlstr, xmlbuf, '\u003c' || tagname || '\u003e'||escapeStr(obj.to_char())||'\u003c/' || tagname || '\u003e');\n    end if;\n  end toString;\n\n  function json_to_xml(obj json, tagname varchar2 default 'root') return xmltype as\n    xmlstr clob := empty_clob();\n    xmlbuf varchar2(32767) := '';\n    returnValue xmltype;\n  begin\n    dbms_lob.createtemporary(xmlstr, true);\n\n    toString(obj.to_json_value(), tagname, xmlstr, xmlbuf);\n\n    flush_clob(xmlstr, xmlbuf);\n    returnValue := xmltype('\u003c?xml version=\"1.0\"?\u003e'||xmlstr);\n    dbms_lob.freetemporary(xmlstr);\n    return returnValue;\n  end;\n\nend json_xml;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_XML\" as\n  /*\n  Copyright (c) 2010 Jonas Krogsboell\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n  */\n\n  /*\n  declare\n    obj json := json('{a:1,b:[2,3,4],c:true}');\n    x xmltype;\n  begin\n    obj.print;\n    x := json_xml.json_to_xml(obj);\n    dbms_output.put_line(x.getclobval());\n  end;\n  */\n\n  function json_to_xml(obj json, tagname varchar2 default 'root') return xmltype;\n\nend json_xml;"},{"Name":"JSON_UTIL_PKG","ObjectID":308492,"Digest":"51d262ccc2e921d09e31547d55bb4ff209fc09a413e5d3ffe0e7b9e10ec63c01","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_UTIL_PKG\" authid current_user as\n\n  /*\n\n  Purpose:    JSON utilities for PL/SQL\n  see http://ora-00001.blogspot.com/\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  JKR     01.05.2010  Edited to fit in PL/JSON\n  JKR     19.01.2011  Newest stylesheet + bugfix handling\n\n  */\n\n  -- generate JSON from REF Cursor\n  function ref_cursor_to_json (p_ref_cursor in sys_refcursor,\n                               p_max_rows in number := null,\n                               p_skip_rows in number := null) return json_list;\n\n  -- generate JSON from SQL statement\n  function sql_to_json (p_sql in varchar2,\n                        p_max_rows in number := null,\n                        p_skip_rows in number := null) return json_list;\n\n\nend json_util_pkg;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_UTIL_PKG\" \nas\n  scanner_exception exception;\n  pragma exception_init(scanner_exception, -20100);\n  parser_exception exception;\n  pragma exception_init(parser_exception, -20101);\n\n  /*\n\n  Purpose:    JSON utilities for PL/SQL\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n\n  */\n\n\n  g_json_null_object             constant varchar2(20) := '{ }';\n\n\nfunction get_xml_to_json_stylesheet return varchar2\nas\nbegin\n\n  /*\n\n  Purpose:    return XSLT stylesheet for XML to JSON transformation\n\n  Remarks:    see http://code.google.com/p/xml2json-xslt/\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  MBR     30.01.2010  Added fix for nulls\n\n  */\n\n\n  return q'^\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cxsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\u003e\n\u003c!--\n  Copyright (c) 2006,2008 Doeke Zanstra\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without modification,\n  are permitted provided that the following conditions are met:\n\n  Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer. Redistributions in binary\n  form must reproduce the above copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other materials provided with\n  the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n  THE POSSIBILITY OF SUCH DAMAGE.\n--\u003e\n\n  \u003cxsl:output indent=\"no\" omit-xml-declaration=\"yes\" method=\"text\" encoding=\"UTF-8\" media-type=\"text/x-json\"/\u003e\n        \u003cxsl:strip-space elements=\"*\"/\u003e\n  \u003c!--contant--\u003e\n  \u003cxsl:variable name=\"d\"\u003e0123456789\u003c/xsl:variable\u003e\n\n  \u003c!-- ignore document text --\u003e\n  \u003cxsl:template match=\"text()[preceding-sibling::node() or following-sibling::node()]\"/\u003e\n\n  \u003c!-- string --\u003e\n  \u003cxsl:template match=\"text()\"\u003e\n    \u003cxsl:call-template name=\"escape-string\"\u003e\n      \u003cxsl:with-param name=\"s\" select=\".\"/\u003e\n    \u003c/xsl:call-template\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Main template for escaping strings; used by above template and for object-properties\n       Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string --\u003e\n  \u003cxsl:template name=\"escape-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:text\u003e\"\u003c/xsl:text\u003e\n    \u003cxsl:call-template name=\"escape-bs-string\"\u003e\n      \u003cxsl:with-param name=\"s\" select=\"$s\"/\u003e\n    \u003c/xsl:call-template\u003e\n    \u003cxsl:text\u003e\"\u003c/xsl:text\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Escape the backslash (\\) before everything else. --\u003e\n  \u003cxsl:template name=\"escape-bs-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:choose\u003e\n      \u003cxsl:when test=\"contains($s,'\\')\"\u003e\n        \u003cxsl:call-template name=\"escape-quot-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\\'),'\\\\')\"/\u003e\n        \u003c/xsl:call-template\u003e\n        \u003cxsl:call-template name=\"escape-bs-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"substring-after($s,'\\')\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:call-template name=\"escape-quot-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"$s\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Escape the double quote (\"). --\u003e\n  \u003cxsl:template name=\"escape-quot-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:choose\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026quot;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026quot;'),'\\\u0026quot;')\"/\u003e\n        \u003c/xsl:call-template\u003e\n        \u003cxsl:call-template name=\"escape-quot-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"substring-after($s,'\u0026quot;')\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"$s\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash\n       or double quote here, because they don't replace characters (\u0026#x0; becomes \\t), but they prefix\n       characters (\\ becomes \\\\). Besides, backslash should be seperate anyway, because it should be\n       processed first. This function can't do that. --\u003e\n  \u003cxsl:template name=\"encode-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:choose\u003e\n      \u003c!-- tab --\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026#x9;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026#x9;'),'\\t',substring-after($s,'\u0026#x9;'))\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003c!-- line feed --\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026#xA;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026#xA;'),'\\n',substring-after($s,'\u0026#xA;'))\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003c!-- carriage return --\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026#xD;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026#xD;'),'\\r',substring-after($s,'\u0026#xD;'))\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\u003cxsl:value-of select=\"$s\"/\u003e\u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- number (no support for javascript mantissa) --\u003e\n  \u003cxsl:template match=\"text()[not(string(number())='NaN' or\n                      (starts-with(.,'0' ) and . != '0' and\nnot(starts-with(.,'0.' ))) or\n                      (starts-with(.,'-0' ) and . != '-0' and\nnot(starts-with(.,'-0.' )))\n                      )]\"\u003e\n    \u003cxsl:value-of select=\".\"/\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- boolean, case-insensitive --\u003e\n  \u003cxsl:template match=\"text()[translate(.,'TRUE','true')='true']\"\u003etrue\u003c/xsl:template\u003e\n  \u003cxsl:template match=\"text()[translate(.,'FALSE','false')='false']\"\u003efalse\u003c/xsl:template\u003e\n\n  \u003c!-- object --\u003e\n  \u003cxsl:template match=\"*\" name=\"base\"\u003e\n    \u003cxsl:if test=\"not(preceding-sibling::*)\"\u003e{\u003c/xsl:if\u003e\n    \u003cxsl:call-template name=\"escape-string\"\u003e\n      \u003cxsl:with-param name=\"s\" select=\"name()\"/\u003e\n    \u003c/xsl:call-template\u003e\n    \u003cxsl:text\u003e:\u003c/xsl:text\u003e\n    \u003c!-- check type of node --\u003e\n    \u003cxsl:choose\u003e\n      \u003c!-- null nodes --\u003e\n      \u003cxsl:when test=\"count(child::node())=0\"\u003enull\u003c/xsl:when\u003e\n      \u003c!-- other nodes --\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:apply-templates select=\"child::node()\"/\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n    \u003c!-- end of type check --\u003e\n    \u003cxsl:if test=\"following-sibling::*\"\u003e,\u003c/xsl:if\u003e\n    \u003cxsl:if test=\"not(following-sibling::*)\"\u003e}\u003c/xsl:if\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- array --\u003e\n  \u003cxsl:template match=\"*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)\u0026gt;1]\"\u003e\n    \u003cxsl:if test=\"not(preceding-sibling::*)\"\u003e[\u003c/xsl:if\u003e\n    \u003cxsl:choose\u003e\n      \u003cxsl:when test=\"not(child::node())\"\u003e\n        \u003cxsl:text\u003enull\u003c/xsl:text\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:apply-templates select=\"child::node()\"/\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n    \u003cxsl:if test=\"following-sibling::*\"\u003e,\u003c/xsl:if\u003e\n    \u003cxsl:if test=\"not(following-sibling::*)\"\u003e]\u003c/xsl:if\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- convert root element to an anonymous container --\u003e\n  \u003cxsl:template match=\"/\"\u003e\n    \u003cxsl:apply-templates select=\"node()\"/\u003e\n  \u003c/xsl:template\u003e\n\n\u003c/xsl:stylesheet\u003e^';\n\nend get_xml_to_json_stylesheet;\n\n\nfunction ref_cursor_to_json (p_ref_cursor in sys_refcursor,\n                             p_max_rows in number := null,\n                             p_skip_rows in number := null) return json_list\nas\n  l_ctx         dbms_xmlgen.ctxhandle;\n  l_num_rows    pls_integer;\n  l_xml         xmltype;\n  l_json        xmltype;\n  l_returnvalue clob;\nbegin\n\n  /*\n\n  Purpose:    generate JSON from REF Cursor\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  JKR     01.05.2010  Edited to fit in PL/JSON\n\n  */\n\n  l_ctx := dbms_xmlgen.newcontext (p_ref_cursor);\n\n  dbms_xmlgen.setnullhandling (l_ctx, dbms_xmlgen.empty_tag);\n\n  -- for pagination\n\n  if p_max_rows is not null then\n    dbms_xmlgen.setmaxrows (l_ctx, p_max_rows);\n  end if;\n\n  if p_skip_rows is not null then\n    dbms_xmlgen.setskiprows (l_ctx, p_skip_rows);\n  end if;\n\n  -- get the XML content\n  l_xml := dbms_xmlgen.getxmltype (l_ctx, dbms_xmlgen.none);\n\n  l_num_rows := dbms_xmlgen.getnumrowsprocessed (l_ctx);\n\n  dbms_xmlgen.closecontext (l_ctx);\n\n  close p_ref_cursor;\n\n  if l_num_rows \u003e 0 then\n    -- perform the XSL transformation\n    l_json := l_xml.transform (xmltype(get_xml_to_json_stylesheet));\n    l_returnvalue := l_json.getclobval();\n  else\n    l_returnvalue := g_json_null_object;\n  end if;\n\n  l_returnvalue := dbms_xmlgen.convert (l_returnvalue, dbms_xmlgen.entity_decode);\n\n  if(l_num_rows = 0) then\n    return json_list();\n  else\n    if(l_num_rows = 1) then\n      declare ret json_list := json_list();\n      begin\n        ret.append(\n          json(\n            json(l_returnvalue).get('ROWSET')\n          ).get('ROW')\n        );\n        return ret;\n      end;\n    else\n      return json_list(json(l_returnvalue).get('ROWSET'));\n    end if;\n  end if;\n\nexception\n  when scanner_exception then\n    dbms_output.put('Scanner problem with the following input: ');\n    dbms_output.put_line(l_returnvalue);\n    raise;\n  when parser_exception then\n    dbms_output.put('Parser problem with the following input: ');\n    dbms_output.put_line(l_returnvalue);\n    raise;\n  when others then raise;\nend ref_cursor_to_json;\n\nfunction sql_to_json (p_sql in varchar2,\n                      p_max_rows in number := null,\n                      p_skip_rows in number := null) return json_list\nas\n  v_cur sys_refcursor;\nbegin\n  open v_cur for p_sql;\n  return ref_cursor_to_json(v_cur, p_max_rows, p_skip_rows);\n\nend sql_to_json;\n\n\nend json_util_pkg;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_UTIL_PKG\" authid current_user as\n\n  /*\n\n  Purpose:    JSON utilities for PL/SQL\n  see http://ora-00001.blogspot.com/\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  JKR     01.05.2010  Edited to fit in PL/JSON\n  JKR     19.01.2011  Newest stylesheet + bugfix handling\n\n  */\n\n  -- generate JSON from REF Cursor\n  function ref_cursor_to_json (p_ref_cursor in sys_refcursor,\n                               p_max_rows in number := null,\n                               p_skip_rows in number := null) return json_list;\n\n  -- generate JSON from SQL statement\n  function sql_to_json (p_sql in varchar2,\n                        p_max_rows in number := null,\n                        p_skip_rows in number := null) return json_list;\n\n\nend json_util_pkg;"},{"Name":"JSON_UTIL_PKG","ObjectID":308493,"Digest":"51d262ccc2e921d09e31547d55bb4ff209fc09a413e5d3ffe0e7b9e10ec63c01","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_UTIL_PKG\" authid current_user as\n\n  /*\n\n  Purpose:    JSON utilities for PL/SQL\n  see http://ora-00001.blogspot.com/\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  JKR     01.05.2010  Edited to fit in PL/JSON\n  JKR     19.01.2011  Newest stylesheet + bugfix handling\n\n  */\n\n  -- generate JSON from REF Cursor\n  function ref_cursor_to_json (p_ref_cursor in sys_refcursor,\n                               p_max_rows in number := null,\n                               p_skip_rows in number := null) return json_list;\n\n  -- generate JSON from SQL statement\n  function sql_to_json (p_sql in varchar2,\n                        p_max_rows in number := null,\n                        p_skip_rows in number := null) return json_list;\n\n\nend json_util_pkg;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_UTIL_PKG\" \nas\n  scanner_exception exception;\n  pragma exception_init(scanner_exception, -20100);\n  parser_exception exception;\n  pragma exception_init(parser_exception, -20101);\n\n  /*\n\n  Purpose:    JSON utilities for PL/SQL\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n\n  */\n\n\n  g_json_null_object             constant varchar2(20) := '{ }';\n\n\nfunction get_xml_to_json_stylesheet return varchar2\nas\nbegin\n\n  /*\n\n  Purpose:    return XSLT stylesheet for XML to JSON transformation\n\n  Remarks:    see http://code.google.com/p/xml2json-xslt/\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  MBR     30.01.2010  Added fix for nulls\n\n  */\n\n\n  return q'^\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cxsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\u003e\n\u003c!--\n  Copyright (c) 2006,2008 Doeke Zanstra\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without modification,\n  are permitted provided that the following conditions are met:\n\n  Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer. Redistributions in binary\n  form must reproduce the above copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other materials provided with\n  the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n  THE POSSIBILITY OF SUCH DAMAGE.\n--\u003e\n\n  \u003cxsl:output indent=\"no\" omit-xml-declaration=\"yes\" method=\"text\" encoding=\"UTF-8\" media-type=\"text/x-json\"/\u003e\n        \u003cxsl:strip-space elements=\"*\"/\u003e\n  \u003c!--contant--\u003e\n  \u003cxsl:variable name=\"d\"\u003e0123456789\u003c/xsl:variable\u003e\n\n  \u003c!-- ignore document text --\u003e\n  \u003cxsl:template match=\"text()[preceding-sibling::node() or following-sibling::node()]\"/\u003e\n\n  \u003c!-- string --\u003e\n  \u003cxsl:template match=\"text()\"\u003e\n    \u003cxsl:call-template name=\"escape-string\"\u003e\n      \u003cxsl:with-param name=\"s\" select=\".\"/\u003e\n    \u003c/xsl:call-template\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Main template for escaping strings; used by above template and for object-properties\n       Responsibilities: placed quotes around string, and chain up to next filter, escape-bs-string --\u003e\n  \u003cxsl:template name=\"escape-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:text\u003e\"\u003c/xsl:text\u003e\n    \u003cxsl:call-template name=\"escape-bs-string\"\u003e\n      \u003cxsl:with-param name=\"s\" select=\"$s\"/\u003e\n    \u003c/xsl:call-template\u003e\n    \u003cxsl:text\u003e\"\u003c/xsl:text\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Escape the backslash (\\) before everything else. --\u003e\n  \u003cxsl:template name=\"escape-bs-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:choose\u003e\n      \u003cxsl:when test=\"contains($s,'\\')\"\u003e\n        \u003cxsl:call-template name=\"escape-quot-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\\'),'\\\\')\"/\u003e\n        \u003c/xsl:call-template\u003e\n        \u003cxsl:call-template name=\"escape-bs-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"substring-after($s,'\\')\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:call-template name=\"escape-quot-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"$s\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Escape the double quote (\"). --\u003e\n  \u003cxsl:template name=\"escape-quot-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:choose\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026quot;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026quot;'),'\\\u0026quot;')\"/\u003e\n        \u003c/xsl:call-template\u003e\n        \u003cxsl:call-template name=\"escape-quot-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"substring-after($s,'\u0026quot;')\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"$s\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- Replace tab, line feed and/or carriage return by its matching escape code. Can't escape backslash\n       or double quote here, because they don't replace characters (\u0026#x0; becomes \\t), but they prefix\n       characters (\\ becomes \\\\). Besides, backslash should be seperate anyway, because it should be\n       processed first. This function can't do that. --\u003e\n  \u003cxsl:template name=\"encode-string\"\u003e\n    \u003cxsl:param name=\"s\"/\u003e\n    \u003cxsl:choose\u003e\n      \u003c!-- tab --\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026#x9;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026#x9;'),'\\t',substring-after($s,'\u0026#x9;'))\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003c!-- line feed --\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026#xA;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026#xA;'),'\\n',substring-after($s,'\u0026#xA;'))\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003c!-- carriage return --\u003e\n      \u003cxsl:when test=\"contains($s,'\u0026#xD;')\"\u003e\n        \u003cxsl:call-template name=\"encode-string\"\u003e\n          \u003cxsl:with-param name=\"s\" select=\"concat(substring-before($s,'\u0026#xD;'),'\\r',substring-after($s,'\u0026#xD;'))\"/\u003e\n        \u003c/xsl:call-template\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\u003cxsl:value-of select=\"$s\"/\u003e\u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- number (no support for javascript mantissa) --\u003e\n  \u003cxsl:template match=\"text()[not(string(number())='NaN' or\n                      (starts-with(.,'0' ) and . != '0' and\nnot(starts-with(.,'0.' ))) or\n                      (starts-with(.,'-0' ) and . != '-0' and\nnot(starts-with(.,'-0.' )))\n                      )]\"\u003e\n    \u003cxsl:value-of select=\".\"/\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- boolean, case-insensitive --\u003e\n  \u003cxsl:template match=\"text()[translate(.,'TRUE','true')='true']\"\u003etrue\u003c/xsl:template\u003e\n  \u003cxsl:template match=\"text()[translate(.,'FALSE','false')='false']\"\u003efalse\u003c/xsl:template\u003e\n\n  \u003c!-- object --\u003e\n  \u003cxsl:template match=\"*\" name=\"base\"\u003e\n    \u003cxsl:if test=\"not(preceding-sibling::*)\"\u003e{\u003c/xsl:if\u003e\n    \u003cxsl:call-template name=\"escape-string\"\u003e\n      \u003cxsl:with-param name=\"s\" select=\"name()\"/\u003e\n    \u003c/xsl:call-template\u003e\n    \u003cxsl:text\u003e:\u003c/xsl:text\u003e\n    \u003c!-- check type of node --\u003e\n    \u003cxsl:choose\u003e\n      \u003c!-- null nodes --\u003e\n      \u003cxsl:when test=\"count(child::node())=0\"\u003enull\u003c/xsl:when\u003e\n      \u003c!-- other nodes --\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:apply-templates select=\"child::node()\"/\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n    \u003c!-- end of type check --\u003e\n    \u003cxsl:if test=\"following-sibling::*\"\u003e,\u003c/xsl:if\u003e\n    \u003cxsl:if test=\"not(following-sibling::*)\"\u003e}\u003c/xsl:if\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- array --\u003e\n  \u003cxsl:template match=\"*[count(../*[name(../*)=name(.)])=count(../*) and count(../*)\u0026gt;1]\"\u003e\n    \u003cxsl:if test=\"not(preceding-sibling::*)\"\u003e[\u003c/xsl:if\u003e\n    \u003cxsl:choose\u003e\n      \u003cxsl:when test=\"not(child::node())\"\u003e\n        \u003cxsl:text\u003enull\u003c/xsl:text\u003e\n      \u003c/xsl:when\u003e\n      \u003cxsl:otherwise\u003e\n        \u003cxsl:apply-templates select=\"child::node()\"/\u003e\n      \u003c/xsl:otherwise\u003e\n    \u003c/xsl:choose\u003e\n    \u003cxsl:if test=\"following-sibling::*\"\u003e,\u003c/xsl:if\u003e\n    \u003cxsl:if test=\"not(following-sibling::*)\"\u003e]\u003c/xsl:if\u003e\n  \u003c/xsl:template\u003e\n\n  \u003c!-- convert root element to an anonymous container --\u003e\n  \u003cxsl:template match=\"/\"\u003e\n    \u003cxsl:apply-templates select=\"node()\"/\u003e\n  \u003c/xsl:template\u003e\n\n\u003c/xsl:stylesheet\u003e^';\n\nend get_xml_to_json_stylesheet;\n\n\nfunction ref_cursor_to_json (p_ref_cursor in sys_refcursor,\n                             p_max_rows in number := null,\n                             p_skip_rows in number := null) return json_list\nas\n  l_ctx         dbms_xmlgen.ctxhandle;\n  l_num_rows    pls_integer;\n  l_xml         xmltype;\n  l_json        xmltype;\n  l_returnvalue clob;\nbegin\n\n  /*\n\n  Purpose:    generate JSON from REF Cursor\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  JKR     01.05.2010  Edited to fit in PL/JSON\n\n  */\n\n  l_ctx := dbms_xmlgen.newcontext (p_ref_cursor);\n\n  dbms_xmlgen.setnullhandling (l_ctx, dbms_xmlgen.empty_tag);\n\n  -- for pagination\n\n  if p_max_rows is not null then\n    dbms_xmlgen.setmaxrows (l_ctx, p_max_rows);\n  end if;\n\n  if p_skip_rows is not null then\n    dbms_xmlgen.setskiprows (l_ctx, p_skip_rows);\n  end if;\n\n  -- get the XML content\n  l_xml := dbms_xmlgen.getxmltype (l_ctx, dbms_xmlgen.none);\n\n  l_num_rows := dbms_xmlgen.getnumrowsprocessed (l_ctx);\n\n  dbms_xmlgen.closecontext (l_ctx);\n\n  close p_ref_cursor;\n\n  if l_num_rows \u003e 0 then\n    -- perform the XSL transformation\n    l_json := l_xml.transform (xmltype(get_xml_to_json_stylesheet));\n    l_returnvalue := l_json.getclobval();\n  else\n    l_returnvalue := g_json_null_object;\n  end if;\n\n  l_returnvalue := dbms_xmlgen.convert (l_returnvalue, dbms_xmlgen.entity_decode);\n\n  if(l_num_rows = 0) then\n    return json_list();\n  else\n    if(l_num_rows = 1) then\n      declare ret json_list := json_list();\n      begin\n        ret.append(\n          json(\n            json(l_returnvalue).get('ROWSET')\n          ).get('ROW')\n        );\n        return ret;\n      end;\n    else\n      return json_list(json(l_returnvalue).get('ROWSET'));\n    end if;\n  end if;\n\nexception\n  when scanner_exception then\n    dbms_output.put('Scanner problem with the following input: ');\n    dbms_output.put_line(l_returnvalue);\n    raise;\n  when parser_exception then\n    dbms_output.put('Parser problem with the following input: ');\n    dbms_output.put_line(l_returnvalue);\n    raise;\n  when others then raise;\nend ref_cursor_to_json;\n\nfunction sql_to_json (p_sql in varchar2,\n                      p_max_rows in number := null,\n                      p_skip_rows in number := null) return json_list\nas\n  v_cur sys_refcursor;\nbegin\n  open v_cur for p_sql;\n  return ref_cursor_to_json(v_cur, p_max_rows, p_skip_rows);\n\nend sql_to_json;\n\n\nend json_util_pkg;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_UTIL_PKG\" authid current_user as\n\n  /*\n\n  Purpose:    JSON utilities for PL/SQL\n  see http://ora-00001.blogspot.com/\n\n  Remarks:\n\n  Who     Date        Description\n  ------  ----------  -------------------------------------\n  MBR     30.01.2010  Created\n  JKR     01.05.2010  Edited to fit in PL/JSON\n  JKR     19.01.2011  Newest stylesheet + bugfix handling\n\n  */\n\n  -- generate JSON from REF Cursor\n  function ref_cursor_to_json (p_ref_cursor in sys_refcursor,\n                               p_max_rows in number := null,\n                               p_skip_rows in number := null) return json_list;\n\n  -- generate JSON from SQL statement\n  function sql_to_json (p_sql in varchar2,\n                        p_max_rows in number := null,\n                        p_skip_rows in number := null) return json_list;\n\n\nend json_util_pkg;"},{"Name":"JSON_HELPER","ObjectID":308494,"Digest":"a56a130b99a811c5c74bae79505790dc4e798d424d09a060dd654231bffdff8d","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_HELPER\" as\n  /* Example:\n  set serveroutput on;\n  declare\n    v_a json;\n    v_b json;\n  begin\n    v_a := json('{a:1, b:{a:null}, e:false}');\n    v_b := json('{c:3, e:{}, b:{b:2}}');\n    json_helper.merge(v_a, v_b).print(false);\n  end;\n  --\n  {\"a\":1,\"b\":{\"a\":null,\"b\":2},\"e\":{},\"c\":3}\n  */\n  -- Recursive merge\n  -- Courtesy of Matt Nolan - edited by Jonas Krogsb?ll\n  function merge( p_a_json json, p_b_json json) return json;\n\n  -- Join two lists\n  -- json_helper.join(json_list('[1,2,3]'),json_list('[4,5,6]')) -\u003e [1,2,3,4,5,6]\n  function join( p_a_list json_list, p_b_list json_list) return json_list;\n\n  -- keep only specific keys in json object\n  -- json_helper.keep(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"a\":1,\"f\":6,\"c\":3}\n  function keep( p_json json, p_keys json_list) return json;\n\n  -- remove specific keys in json object\n  -- json_helper.remove(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"b\":2,\"d\":4,\"e\":5}\n  function remove( p_json json, p_keys json_list) return json;\n\n  --equals\n  function equals(p_v1 json_value, p_v2 json_value, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json_list, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 number) return boolean;\n  function equals(p_v1 json_value, p_v2 varchar2) return boolean;\n  function equals(p_v1 json_value, p_v2 boolean) return boolean;\n  function equals(p_v1 json_value, p_v2 clob) return boolean;\n  function equals(p_v1 json, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_list, p_v2 json_list, exact boolean default true) return boolean;\n\n  --contains json, json_value\n  --contains json_list, json_value\n  function contains(p_v1 json, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 clob, exact boolean default false) return boolean;\n\n  function contains(p_v1 json_list, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 clob, exact boolean default false) return boolean;\n\nend json_helper;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"JSON_HELPER\" as\n\n  --recursive merge\n  function merge( p_a_json json, p_b_json json) return json as\n    l_json    JSON;\n    l_jv      json_value;\n    l_indx    number;\n    l_recursive json_value;\n  begin\n    --\n    -- Initialize our return object\n    --\n    l_json := p_a_json;\n\n    -- loop through p_b_json\n    l_indx := p_b_json.json_data.first;\n    loop\n      exit when l_indx is null;\n      l_jv   := p_b_json.json_data(l_indx);\n      if(l_jv.is_object) then\n        --recursive\n        l_recursive := l_json.get(l_jv.mapname);\n        if(l_recursive is not null and l_recursive.is_object) then\n          l_json.put(l_jv.mapname, merge(json(l_recursive), json(l_jv)));\n        else\n          l_json.put(l_jv.mapname, l_jv);\n        end if;\n      else\n        l_json.put(l_jv.mapname, l_jv);\n      end if;\n\n      --increment\n      l_indx := p_b_json.json_data.next(l_indx);\n    end loop;\n\n    return l_json;\n\n  end merge;\n\n  -- join two lists\n  function join( p_a_list json_list, p_b_list json_list) return json_list as\n    l_json_list json_list := p_a_list;\n  begin\n    for indx in 1 .. p_b_list.count loop\n      l_json_list.append(p_b_list.get(indx));\n    end loop;\n\n    return l_json_list;\n\n  end join;\n\n  -- keep keys.\n  function keep( p_json json, p_keys json_list) return json as\n    l_json json := json();\n    mapname varchar2(4000);\n  begin\n    for i in 1 .. p_keys.count loop\n      mapname := p_keys.get(i).get_string;\n      if(p_json.exist(mapname)) then\n        l_json.put(mapname, p_json.get(mapname));\n      end if;\n    end loop;\n\n    return l_json;\n  end keep;\n\n  -- drop keys.\n  function remove( p_json json, p_keys json_list) return json as\n    l_json json := p_json;\n  begin\n    for i in 1 .. p_keys.count loop\n      l_json.remove(p_keys.get(i).get_string);\n    end loop;\n\n    return l_json;\n  end remove;\n\n  --equals functions\n\n  function equals(p_v1 json_value, p_v2 number) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_number) then\n      return false;\n    end if;\n\n    return p_v2 = p_v1.get_number;\n  end;\n\n  function equals(p_v1 json_value, p_v2 boolean) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_bool) then\n      return false;\n    end if;\n\n    return p_v2 = p_v1.get_bool;\n  end;\n\n  function equals(p_v1 json_value, p_v2 varchar2) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_string) then\n      return false;\n    end if;\n\n    return p_v2 = p_v1.get_string;\n  end;\n\n  function equals(p_v1 json_value, p_v2 clob) return boolean as\n    my_clob clob;\n    res boolean;\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_string) then\n      return false;\n    end if;\n\n    my_clob := empty_clob();\n    dbms_lob.createtemporary(my_clob, true);\n    p_v1.get_string(my_clob);\n\n    res := dbms_lob.compare(p_v2, my_clob) = 0;\n    dbms_lob.freetemporary(my_clob);\n  end;\n\n  function equals(p_v1 json_value, p_v2 json_value, exact boolean) return boolean as\n  begin\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(p_v2.is_number) then return equals(p_v1, p_v2.get_number); end if;\n    if(p_v2.is_bool) then return equals(p_v1, p_v2.get_bool); end if;\n    if(p_v2.is_object) then return equals(p_v1, json(p_v2), exact); end if;\n    if(p_v2.is_array) then return equals(p_v1, json_list(p_v2), exact); end if;\n    if(p_v2.is_string) then\n      if(p_v2.extended_str is null) then\n        return equals(p_v1, p_v2.get_string);\n      else\n        declare\n          my_clob clob; res boolean;\n        begin\n          my_clob := empty_clob();\n          dbms_lob.createtemporary(my_clob, true);\n          p_v2.get_string(my_clob);\n          res := equals(p_v1, my_clob);\n          dbms_lob.freetemporary(my_clob);\n          return res;\n        end;\n      end if;\n    end if;\n\n    return false; --should never happen\n  end;\n\n  function equals(p_v1 json_value, p_v2 json_list, exact boolean) return boolean as\n    cmp json_list;\n    res boolean := true;\n  begin\n--  p_v1.print(false);\n--  p_v2.print(false);\n--  dbms_output.put_line('labc1'||case when exact then 'X' else 'U' end);\n\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_array) then\n      return false;\n    end if;\n\n--  dbms_output.put_line('labc2'||case when exact then 'X' else 'U' end);\n\n    cmp := json_list(p_v1);\n    if(cmp.count != p_v2.count and exact) then return false; end if;\n\n--  dbms_output.put_line('labc3'||case when exact then 'X' else 'U' end);\n\n    if(exact) then\n      for i in 1 .. cmp.count loop\n        res := equals(cmp.get(i), p_v2.get(i), exact);\n        if(not res) then return res; end if;\n      end loop;\n    else\n--  dbms_output.put_line('labc4'||case when exact then 'X' else 'U' end);\n      if(p_v2.count \u003e cmp.count) then return false; end if;\n--  dbms_output.put_line('labc5'||case when exact then 'X' else 'U' end);\n\n      --match sublist here!\n      for x in 0 .. (cmp.count-p_v2.count) loop\n--  dbms_output.put_line('labc7'||x);\n\n        for i in 1 .. p_v2.count loop\n          res := equals(cmp.get(x+i), p_v2.get(i), exact);\n          if(not res) then\n            goto next_index;\n          end if;\n        end loop;\n        return true;\n\n        \u003c\u003cnext_index\u003e\u003e\n        null;\n      end loop;\n\n--  dbms_output.put_line('labc7'||case when exact then 'X' else 'U' end);\n\n    return false; --no match\n\n    end if;\n\n    return res;\n  end;\n\n  function equals(p_v1 json_value, p_v2 json, exact boolean) return boolean as\n    cmp json;\n    res boolean := true;\n  begin\n--  p_v1.print(false);\n--  p_v2.print(false);\n--  dbms_output.put_line('abc1');\n\n    if(p_v2 is null) then\n      return p_v1.is_null;\n    end if;\n\n    if(not p_v1.is_object) then\n      return false;\n    end if;\n\n    cmp := json(p_v1);\n\n--  dbms_output.put_line('abc2');\n\n    if(cmp.count != p_v2.count and exact) then return false; end if;\n\n--  dbms_output.put_line('abc3');\n    declare\n      k1 json_list := p_v2.get_keys;\n      key_index number;\n    begin\n      for i in 1 .. k1.count loop\n        key_index := cmp.index_of(k1.get(i).get_string);\n        if(key_index = -1) then return false; end if;\n        if(exact) then\n          if(not equals(p_v2.get(i), cmp.get(key_index),true)) then return false; end if;\n        else\n          --non exact\n          declare\n            v1 json_value := cmp.get(key_index);\n            v2 json_value := p_v2.get(i);\n          begin\n--  dbms_output.put_line('abc3 1/2');\n--            v1.print(false);\n--            v2.print(false);\n\n            if(v1.is_object and v2.is_object) then\n              if(not equals(v1, v2, false)) then return false; end if;\n            elsif(v1.is_array and v2.is_array) then\n              if(not equals(v1, v2, false)) then return false; end if;\n            else\n              if(not equals(v1, v2, true)) then return false; end if;\n            end if;\n          end;\n\n        end if;\n      end loop;\n    end;\n\n--  dbms_output.put_line('abc4');\n\n    return true;\n  end;\n\n  function equals(p_v1 json, p_v2 json, exact boolean) return boolean as\n  begin\n    return equals(p_v1.to_json_value, p_v2, exact);\n  end;\n\n  function equals(p_v1 json_list, p_v2 json_list, exact boolean) return boolean as\n  begin\n    return equals(p_v1.to_json_value, p_v2, exact);\n  end;\n\n  --contain\n  function contains(p_v1 json, p_v2 json_value, exact boolean) return boolean as\n    v_values json_list;\n  begin\n    if(equals(p_v1.to_json_value, p_v2, exact)) then return true; end if;\n\n    v_values := p_v1.get_values;\n\n    for i in 1 .. v_values.count loop\n      declare\n        v_val json_value := v_values.get(i);\n      begin\n        if(v_val.is_object) then\n          if(contains(json(v_val),p_v2,exact)) then return true; end if;\n        end if;\n        if(v_val.is_array) then\n          if(contains(json_list(v_val),p_v2, exact)) then return true; end if;\n        end if;\n\n        if(equals(v_val, p_v2, exact)) then return true; end if;\n      end;\n\n    end loop;\n\n    return false;\n  end;\n\n  function contains(p_v1 json_list, p_v2 json_value, exact boolean) return boolean as\n  begin\n    if(equals(p_v1.to_json_value, p_v2, exact)) then return true; end if;\n\n    for i in 1 .. p_v1.count loop\n      declare\n        v_val json_value := p_v1.get(i);\n      begin\n        if(v_val.is_object) then\n          if(contains(json(v_val),p_v2, exact)) then return true; end if;\n        end if;\n        if(v_val.is_array) then\n          if(contains(json_list(v_val),p_v2, exact)) then return true; end if;\n        end if;\n\n        if(equals(v_val, p_v2, exact)) then return true; end if;\n      end;\n\n    end loop;\n\n    return false;\n  end;\n\n  function contains(p_v1 json, p_v2 json, exact boolean ) return boolean as\n  begin return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json, p_v2 json_list, exact boolean ) return boolean as\n  begin return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json, p_v2 number, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json, p_v2 varchar2, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json, p_v2 boolean, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json, p_v2 clob, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n\n  function contains(p_v1 json_list, p_v2 json, exact boolean ) return boolean as begin\n  return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json_list, p_v2 json_list, exact boolean ) return boolean as begin\n  return contains(p_v1, p_v2.to_json_value,exact); end;\n  function contains(p_v1 json_list, p_v2 number, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json_list, p_v2 varchar2, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json_list, p_v2 boolean, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n  function contains(p_v1 json_list, p_v2 clob, exact boolean ) return boolean as begin\n  return contains(p_v1, json_value(p_v2),exact); end;\n\n\nend json_helper;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"JSON_HELPER\" as\n  /* Example:\n  set serveroutput on;\n  declare\n    v_a json;\n    v_b json;\n  begin\n    v_a := json('{a:1, b:{a:null}, e:false}');\n    v_b := json('{c:3, e:{}, b:{b:2}}');\n    json_helper.merge(v_a, v_b).print(false);\n  end;\n  --\n  {\"a\":1,\"b\":{\"a\":null,\"b\":2},\"e\":{},\"c\":3}\n  */\n  -- Recursive merge\n  -- Courtesy of Matt Nolan - edited by Jonas Krogsb?ll\n  function merge( p_a_json json, p_b_json json) return json;\n\n  -- Join two lists\n  -- json_helper.join(json_list('[1,2,3]'),json_list('[4,5,6]')) -\u003e [1,2,3,4,5,6]\n  function join( p_a_list json_list, p_b_list json_list) return json_list;\n\n  -- keep only specific keys in json object\n  -- json_helper.keep(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"a\":1,\"f\":6,\"c\":3}\n  function keep( p_json json, p_keys json_list) return json;\n\n  -- remove specific keys in json object\n  -- json_helper.remove(json('{a:1,b:2,c:3,d:4,e:5,f:6}'),json_list('[\"a\",\"f\",\"c\"]')) -\u003e {\"b\":2,\"d\":4,\"e\":5}\n  function remove( p_json json, p_keys json_list) return json;\n\n  --equals\n  function equals(p_v1 json_value, p_v2 json_value, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 json_list, exact boolean default true) return boolean;\n  function equals(p_v1 json_value, p_v2 number) return boolean;\n  function equals(p_v1 json_value, p_v2 varchar2) return boolean;\n  function equals(p_v1 json_value, p_v2 boolean) return boolean;\n  function equals(p_v1 json_value, p_v2 clob) return boolean;\n  function equals(p_v1 json, p_v2 json, exact boolean default true) return boolean;\n  function equals(p_v1 json_list, p_v2 json_list, exact boolean default true) return boolean;\n\n  --contains json, json_value\n  --contains json_list, json_value\n  function contains(p_v1 json, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json, p_v2 clob, exact boolean default false) return boolean;\n\n  function contains(p_v1 json_list, p_v2 json_value, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 json_list, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 number, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 varchar2, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 boolean, exact boolean default false) return boolean;\n  function contains(p_v1 json_list, p_v2 clob, exact boolean default false) return boolean;\n\nend json_helper;"},{"Name":"PKG_CUSTOMER_CONC","ObjectID":311385,"Digest":"21964814e603c70853f2ff92c7187579b999d11f04ceff3588d0267dee050f9f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*-----------تمرکز مشتري*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cus_conc_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_REPORT_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_final_result (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req              IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_customer_conc_final_result (\n inpar_date                 IN varchar2,\n inpar_type in varchar2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_get_available_date RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_CUSTOMER_CONC;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CUSTOMER_CONC\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*-----------تمرکز مشتري*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n PROCEDURE PRC_cus_conc_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n ) \n as\n begin\n \n     DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n     OUTPAR:= INPAR_ID;\n    COMMIT;\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_REPORT_value\n   \n   as\n   begin\n   EXECUTE IMMEDIATE 'truncate table TBL_CUSTOMER_CONS_VALUE ';\n\nINSERT  /*+ append  PARALLEL(auto)   */\nINTO TBL_CUSTOMER_CONS_VALUE\n  (\n    REF_CUSTOMER,\n    RATE,\n    BALANCE,\n    TYPE\n  )\n  \n  select /*+  PARALLEL(auto)   */ REF_CUSTOMER,rate,sum(balance),case when ref_deposit_type = 1000123 then 2 \nwhen ref_deposit_type = 1000124 then 4 else   MODALITY_TYPE end modality from AKIN.TBL_DEPOSIT \ngroup by REF_CUSTOMER,rate,case when ref_deposit_type = 1000123 then 2 \nwhen ref_deposit_type = 1000124 then 4 else   MODALITY_TYPE end;\ncommit;\n   end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n\n   PROCEDURE PRC_customer_conc_final_result (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req                 IN VARCHAR2\n  \n )\n as\n\n begin\n \nPRC_customer_conc_REPORT_value;\n\nINSERT\n  /*+parallel(auto)*/\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    CATEGORY,\n    BALANCE,\n    BALANCE_TAJAMOE,\n    SHARE_OF_TOTAL_BAL,\n    SHARE_OF_TOTAL_BAL_TAJAMOE,\n    CUSTOMER_COUNT,\n    CUSTOMER_COUNT_TAJAMOE,\n    SHARE_OF_TOTAL_CUS,\n    SHARE_OF_TOTAL_CUS_TAJAMOE\n    ,eff_date\n    ,TYPE\n  )\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  1 AS radif ,\n   SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE\n  ,trunc(sysdate)\n  ,1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  2,\n   SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  3,\n   SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  4,\n   SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  5,\n   SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  6,\n   SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  7,\n   SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)           AS balance,\n  SUM( balance ) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)         /SUM(balance)*100 AS sahm_az_kol,\n  SUM( balance)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)           AS tedad_moshtari,\n  COUNT(balance) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)          /COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  COUNT(balance)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1;\n\ncommit;\n\nINSERT\n  /*+parallel(auto)*/\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    CATEGORY,\n    BALANCE,\n    BALANCE_TAJAMOE,\n    SHARE_OF_TOTAL_BAL,\n    SHARE_OF_TOTAL_BAL_TAJAMOE,\n    CUSTOMER_COUNT,\n    CUSTOMER_COUNT_TAJAMOE,\n    SHARE_OF_TOTAL_CUS,\n    SHARE_OF_TOTAL_CUS_TAJAMOE\n    ,eff_date\n    ,TYPE\n  )\n  SELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  1 AS radif ,\n   SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE\n  ,trunc(sysdate)\n  ,3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  2,\n   SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  3,\n   SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  4,\n   SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  5,\n   SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  6,\n   SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  7,\n   SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)           AS balance,\n  SUM( balance ) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)         /SUM(balance)*100 AS sahm_az_kol,\n  SUM( balance)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)           AS tedad_moshtari,\n  COUNT(balance) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)          /COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  COUNT(balance)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3;\ncommit;\n\n\n\nINSERT\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    BALANCE,\n    REGION_NAME,\n    CUSTOMER_COUNT,\n    TYPE,\n    EFF_DATE\n    \n  )\n \nselect /*+  PARALLEL(30) */ 10,11, sum(balance) as mablagh ,max(REGION_NAME) as name , count(1) as tedad,4,trunc(sysdate)  from AKIN.TBL_DEPOSIT where REF_DEPOSIT_TYPE in (1000124) group by REGION_ID;\ncommit;\n\n\n\nINSERT\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    BALANCE,\n    REGION_NAME,\n    CUSTOMER_COUNT,\n    TYPE,\n    EFF_DATE\n    \n  )\n \nselect /*+  PARALLEL(30) */ 10,11, sum(balance) as mablagh ,max(REGION_NAME) as name , count(1) as tedad,2,trunc(sysdate)  from AKIN.TBL_DEPOSIT where REF_DEPOSIT_TYPE in (1000123) group by REGION_ID;\ncommit;\n\n\n\n\n\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION fnc_customer_conc_final_result (\ninpar_date                 IN varchar2,\n inpar_type in varchar2\n  \n )RETURN VARCHAR2\n as\n begin\n \n \n if(inpar_type in (1,3))\n then\n return 'SELECT \n  CATEGORY as \"category\",\n  \n  \n  case when CATEGORY = 1 then ''0-1'' when CATEGORY = 2 then ''1-5''\n  \n  when CATEGORY = 3 then ''5-10''\n  when CATEGORY = 4 then ''10-50''\n  when CATEGORY = 5 then ''50-100''\n  when CATEGORY = 6 then ''100-500''\n  when CATEGORY = 7 then ''بيشتر از 500''\n  \n  end as \"name\",\n  \n    BALANCE as \"balance\",\n  round(SHARE_OF_TOTAL_BAL,5) as \"shareOfTotalBalance\",\n  CUSTOMER_COUNT as \"customerCount\",\n   round(SHARE_OF_TOTAL_CUS,5) as \"shareOfTotalCustomer\",\n  \n    BALANCE_tajamoe as \"balanceTajamoe\",\n  round(SHARE_OF_TOTAL_BAL_tajamoe,5) as \"shareOfTotalBalanceTajamoe\",\n  CUSTOMER_COUNT_tajamoe as \"customerCountTajamoe\",\n  round(SHARE_OF_TOTAL_CUS_tajamoe,5) as \"shareOfTotalCustomerTajamoe\"\n\nFROM TBL_CUSTOMER_CONC_FINAL_RESULT \nwhere eff_date = to_date(''' ||\n INPAR_DATE ||\n ''',''yyyy-mm-dd'')\n and \n type = '||inpar_type||'';\n \n \n else\n \n return 'SELECT\n\n  BALANCE as \"balance\",\n  CUSTOMER_COUNT as \"customerCount\",\n  \n\n  REGION_NAME as \"regionName\"\nFROM TBL_CUSTOMER_CONC_FINAL_RESULT \nwhere eff_date = to_date(''' ||\n INPAR_DATE ||\n ''',''yyyy-mm-dd'')\n and \n type = '||inpar_type||'';\n \n \n \n end if;\n \n \n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_get_available_date RETURN VARCHAR2\n    as\n    begin\n    \n    return 'select   WMSYS.Wm_Concat(to_char(  eff_date,''yyyy-mm-dd'' , ''nls_calendar= persian'')) as \"date\" from ( select distinct eff_date from TBL_CUSTOMER_CONC_FINAL_RESULT)';\n    \n    \n    end;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CUSTOMER_CONC;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*-----------تمرکز مشتري*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cus_conc_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_REPORT_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_final_result (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req              IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_customer_conc_final_result (\n inpar_date                 IN varchar2,\n inpar_type in varchar2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_get_available_date RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_CUSTOMER_CONC;"},{"Name":"PKG_CUSTOMER_CONC","ObjectID":311386,"Digest":"21964814e603c70853f2ff92c7187579b999d11f04ceff3588d0267dee050f9f","SQLCode":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*-----------تمرکز مشتري*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cus_conc_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_REPORT_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_final_result (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req              IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_customer_conc_final_result (\n inpar_date                 IN varchar2,\n inpar_type in varchar2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_get_available_date RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_CUSTOMER_CONC;\nCREATE OR REPLACE PACKAGE BODY \"PRAGG\".\"PKG_CUSTOMER_CONC\" AS\n/*---------------------------------------------------------------------------------------------*/\n/*-----------تمرکز مشتري*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n \n PROCEDURE PRC_cus_conc_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n ) \n as\n begin\n \n     DELETE FROM TBL_REPORT WHERE ID   = INPAR_ID;\n     OUTPAR:= INPAR_ID;\n    COMMIT;\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_REPORT_value\n   \n   as\n   begin\n   EXECUTE IMMEDIATE 'truncate table TBL_CUSTOMER_CONS_VALUE ';\n\nINSERT  /*+ append  PARALLEL(auto)   */\nINTO TBL_CUSTOMER_CONS_VALUE\n  (\n    REF_CUSTOMER,\n    RATE,\n    BALANCE,\n    TYPE\n  )\n  \n  select /*+  PARALLEL(auto)   */ REF_CUSTOMER,rate,sum(balance),case when ref_deposit_type = 1000123 then 2 \nwhen ref_deposit_type = 1000124 then 4 else   MODALITY_TYPE end modality from AKIN.TBL_DEPOSIT \ngroup by REF_CUSTOMER,rate,case when ref_deposit_type = 1000123 then 2 \nwhen ref_deposit_type = 1000124 then 4 else   MODALITY_TYPE end;\ncommit;\n   end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n\n\n   PROCEDURE PRC_customer_conc_final_result (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req                 IN VARCHAR2\n  \n )\n as\n\n begin\n \nPRC_customer_conc_REPORT_value;\n\nINSERT\n  /*+parallel(auto)*/\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    CATEGORY,\n    BALANCE,\n    BALANCE_TAJAMOE,\n    SHARE_OF_TOTAL_BAL,\n    SHARE_OF_TOTAL_BAL_TAJAMOE,\n    CUSTOMER_COUNT,\n    CUSTOMER_COUNT_TAJAMOE,\n    SHARE_OF_TOTAL_CUS,\n    SHARE_OF_TOTAL_CUS_TAJAMOE\n    ,eff_date\n    ,TYPE\n  )\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  1 AS radif ,\n   SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE\n  ,trunc(sysdate)\n  ,1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  2,\n   SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  3,\n   SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  4,\n   SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  5,\n   SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  6,\n   SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  7,\n   SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)           AS balance,\n  SUM( balance ) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)         /SUM(balance)*100 AS sahm_az_kol,\n  SUM( balance)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)           AS tedad_moshtari,\n  COUNT(balance) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)          /COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  COUNT(balance)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),1\nFROM TBL_CUSTOMER_CONS_VALUE where type = 1;\n\ncommit;\n\nINSERT\n  /*+parallel(auto)*/\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    CATEGORY,\n    BALANCE,\n    BALANCE_TAJAMOE,\n    SHARE_OF_TOTAL_BAL,\n    SHARE_OF_TOTAL_BAL_TAJAMOE,\n    CUSTOMER_COUNT,\n    CUSTOMER_COUNT_TAJAMOE,\n    SHARE_OF_TOTAL_CUS,\n    SHARE_OF_TOTAL_CUS_TAJAMOE\n    ,eff_date\n    ,TYPE\n  )\n  SELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  1 AS radif ,\n   SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 1000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE\n  ,trunc(sysdate)\n  ,3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  2,\n   SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 1000000000\n    AND balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 5000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  3,\n   SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 5000000000\n    AND balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 10000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  4,\n   SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 10000000000\n    AND balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 50000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  5,\n   SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 50000000000\n    AND balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 100000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  6,\n   SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN balance\n    ELSE 0\n  END)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e 100000000000\n    AND balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  SUM(\n  CASE\n    WHEN balance \u003c= 500000000000\n    THEN 1\n    ELSE 0\n  END)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3\nUNION\nSELECT\n  /*+parallel(auto)*/\n     10,\n    11,\n  7,\n   SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)           AS balance,\n  SUM( balance ) AS balance_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN balance\n    ELSE 0\n  END)         /SUM(balance)*100 AS sahm_az_kol,\n  SUM( balance)/SUM(balance)*100 AS sahm_az_kol_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)           AS tedad_moshtari,\n  COUNT(balance) AS tedad_moshtari_tajamoE,\n  SUM(\n  CASE\n    WHEN balance \u003e= 500000000000\n    THEN 1\n    ELSE 0\n  END)          /COUNT(1) * 100 AS sahm_az_kol_moshtarian,\n  COUNT(balance)/COUNT(1) * 100 AS sahm_az_kol_moshtarian_tajamoE ,trunc(sysdate),3\nFROM TBL_CUSTOMER_CONS_VALUE where type = 3;\ncommit;\n\n\n\nINSERT\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    BALANCE,\n    REGION_NAME,\n    CUSTOMER_COUNT,\n    TYPE,\n    EFF_DATE\n    \n  )\n \nselect /*+  PARALLEL(30) */ 10,11, sum(balance) as mablagh ,max(REGION_NAME) as name , count(1) as tedad,4,trunc(sysdate)  from AKIN.TBL_DEPOSIT where REF_DEPOSIT_TYPE in (1000124) group by REGION_ID;\ncommit;\n\n\n\nINSERT\nINTO TBL_CUSTOMER_CONC_FINAL_RESULT\n  (\n    REF_REPORT,\n    REF_REPREQ,\n    BALANCE,\n    REGION_NAME,\n    CUSTOMER_COUNT,\n    TYPE,\n    EFF_DATE\n    \n  )\n \nselect /*+  PARALLEL(30) */ 10,11, sum(balance) as mablagh ,max(REGION_NAME) as name , count(1) as tedad,2,trunc(sysdate)  from AKIN.TBL_DEPOSIT where REF_DEPOSIT_TYPE in (1000123) group by REGION_ID;\ncommit;\n\n\n\n\n\n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   FUNCTION fnc_customer_conc_final_result (\ninpar_date                 IN varchar2,\n inpar_type in varchar2\n  \n )RETURN VARCHAR2\n as\n begin\n \n \n if(inpar_type in (1,3))\n then\n return 'SELECT \n  CATEGORY as \"category\",\n  \n  \n  case when CATEGORY = 1 then ''0-1'' when CATEGORY = 2 then ''1-5''\n  \n  when CATEGORY = 3 then ''5-10''\n  when CATEGORY = 4 then ''10-50''\n  when CATEGORY = 5 then ''50-100''\n  when CATEGORY = 6 then ''100-500''\n  when CATEGORY = 7 then ''بيشتر از 500''\n  \n  end as \"name\",\n  \n    BALANCE as \"balance\",\n  round(SHARE_OF_TOTAL_BAL,5) as \"shareOfTotalBalance\",\n  CUSTOMER_COUNT as \"customerCount\",\n   round(SHARE_OF_TOTAL_CUS,5) as \"shareOfTotalCustomer\",\n  \n    BALANCE_tajamoe as \"balanceTajamoe\",\n  round(SHARE_OF_TOTAL_BAL_tajamoe,5) as \"shareOfTotalBalanceTajamoe\",\n  CUSTOMER_COUNT_tajamoe as \"customerCountTajamoe\",\n  round(SHARE_OF_TOTAL_CUS_tajamoe,5) as \"shareOfTotalCustomerTajamoe\"\n\nFROM TBL_CUSTOMER_CONC_FINAL_RESULT \nwhere eff_date = to_date(''' ||\n INPAR_DATE ||\n ''',''yyyy-mm-dd'')\n and \n type = '||inpar_type||'';\n \n \n else\n \n return 'SELECT\n\n  BALANCE as \"balance\",\n  CUSTOMER_COUNT as \"customerCount\",\n  \n\n  REGION_NAME as \"regionName\"\nFROM TBL_CUSTOMER_CONC_FINAL_RESULT \nwhere eff_date = to_date(''' ||\n INPAR_DATE ||\n ''',''yyyy-mm-dd'')\n and \n type = '||inpar_type||'';\n \n \n \n end if;\n \n \n end;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_get_available_date RETURN VARCHAR2\n    as\n    begin\n    \n    return 'select   WMSYS.Wm_Concat(to_char(  eff_date,''yyyy-mm-dd'' , ''nls_calendar= persian'')) as \"date\" from ( select distinct eff_date from TBL_CUSTOMER_CONC_FINAL_RESULT)';\n    \n    \n    end;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\nEND PKG_CUSTOMER_CONC;","Specification":"\n  CREATE OR REPLACE PACKAGE \"PRAGG\".\"PKG_CUSTOMER_CONC\" AS \n/*---------------------------------------------------------------------------------------------*/\n/*-----------تمرکز مشتري*/\n/*---------------------------------------------------------------------------------------------*/\n  /*\n  Package Programmers Name:  morteza.sahi \u0026 Navid.Sedigh\n  Editor Name: \n  Release Date/Time:\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: \n  */\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n PROCEDURE PRC_cus_conc_DELETE_REPORT (\n  INPAR_ID   IN VARCHAR2\n ,OUTPAR     OUT VARCHAR2\n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_REPORT_value;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n   PROCEDURE PRC_customer_conc_final_result (\n  INPAR_report              IN VARCHAR2\n ,INPAR_rep_req              IN VARCHAR2\n  \n );\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n    FUNCTION fnc_customer_conc_final_result (\n inpar_date                 IN varchar2,\n inpar_type in varchar2\n  \n )RETURN VARCHAR2;\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\n\n    FUNCTION fnc_get_available_date RETURN VARCHAR2;\n\n/*---------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------*/\nEND PKG_CUSTOMER_CONC;"}],"Functions":[{"Name":"FNC_PROFILE_CREATE_QUERY","ObjectID":270378,"Digest":"7833bd119250f4ed07294009b414f6c1c86ce22d503ba38a388d246a7693eaff","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PROFILE_CREATE_QUERY\" (\n        INPAR_ID IN NUMBER ,\n        inpar_type in number) -- if =1 paging else = 0\n --RETURN VARCHAR2\n RETURN clob\n  --return varchar2\nAS\niidd number;\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name: \n  Release Date/Time:1396/02/18-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: Query saz baraE profile ha . \n  */\n--------------------------------------------------------------------------------\npragma autonomous_transaction;\n\n  v_name_input_tbl VARCHAR2(32001);\n  --where_condition  VARCHAR2(32001);\n  where_condition  clob;\n  v_count number;\n  \n  --var varchar2(32000);\n  var clob;\nBEGIN\n\nselect  max(id) into iidd\n\nFROM TBL_PROFILE\nwhere h_id = inpar_id\ngroup by name ;\n\n -- EXECUTE IMMEDIATE 'delete from tbl_profile_detail where condition is NULL';\n --commit;\n  \n  SELECT type INTO v_name_input_tbl FROM tbl_profile WHERE id=iidd;\n  select count(*) into v_count from tbl_profile_detail where ref_profile=iidd;\n\n-- if(v_count=1) then\n--    SELECT SUBSTR(REPLACE(wm_concat(SRC_COLUMN\n--    || REPLACE(CONDITION,'#',' or '\n--    ||SRC_COLUMN\n--    ||' ')\n--    ||''),',',' '),0,LENGTH(REPLACE(wm_concat(SRC_COLUMN\n--    || REPLACE(CONDITION,'#',' and '\n--    ||SRC_COLUMN\n--    ||' ')\n--    ||' and'),',',' ')))\n--  INTO where_condition\n--  FROM tbl_profile_detail\n--  WHERE ref_profile = INPAR_ID;\n--  \n--  else\n--   SELECT SUBSTR(REPLACE(wm_concat(SRC_COLUMN\n--    || REPLACE(CONDITION,'#',' or '\n--    ||SRC_COLUMN\n--    ||' ')\n--    ||') and ('),',',' '),0,LENGTH(REPLACE(wm_concat(SRC_COLUMN\n--    || REPLACE(CONDITION,'#',' or '\n--    ||SRC_COLUMN\n--    ||' ')\n--    ||') and ('),',',' '))-5)\n--  INTO where_condition\n--  FROM tbl_profile_detail\n--  WHERE ref_profile = INPAR_ID;\n--  \n--  where_condition:='('||where_condition;\n--  \n--    end if;\n\n\n--SELECT LISTAGG('('||SRC_COLUMN||REPLACE(CONDITION,'#',' or '|| SRC_COLUMN), ') and ') WITHIN GROUP (ORDER BY id desc) \"where_condition\" into  where_condition\n--FROM tbl_profile_detail\n--WHERE ref_profile = iidd;\n\n    --================================== XML kardan khorojoo query zamani ke query kheili toolani bashad.\n    SELECT rtrim(xmlagg(XMLELEMENT(e,'('\n    ||SRC_COLUMN\n    ||REPLACE(CONDITION,'#',' or '\n    || SRC_COLUMN), ') and ').EXTRACT('//text()')\n    ).GetClobVal(),',') \"where_condition\" into  where_condition\n    FROM tbl_profile_detail\n    WHERE ref_profile = iidd;\n      \n      \n    select substr(where_condition,0,LENGTH(where_condition)-6) into where_condition from dual;\n    --=================================\n      \n    --===========================\n    select REPLACE(where_condition, '\u0026gt;', '\u003e') into where_condition from dual;\n    select REPLACE(where_condition, '\u0026apos;', '''') into where_condition from dual;\n    select REPLACE(where_condition, '\u0026lt;', '\u003c') into where_condition from dual;\n    --============================\n      \n      where_condition:=where_condition||')';\n\n\n\n\n\n\n\n\nif(inpar_type=1) then\n   \n    select REPLACE(where_condition,'''', '''''') into where_condition from dual;\n    --select REPLACE(where_condition, ''',''', ''''',''''') into where_condition from dual;\n    --select REPLACE(where_condition, 'yyyy/mm/dd''', 'yyyy/mm/dd''''') into where_condition from dual;\nend if;\n\n\n--------------------------------------------------------------------------------  \n--  if (v_name_input_tbl='TBL_DEPOSIT' or v_name_input_tbl='TBL_LOAN') then\n--  \n--  var:=' select * from AKIN.'||v_name_input_tbl||' where '||where_condition||';';\n--  \n--  else\n--    var:='select * from '||v_name_input_tbl||' where '||where_condition||';';\n--\n--  end if;--  if (v_name_input_tbl='TBL_DEPOSIT' or v_name_input_tbl='TBL_LOAN') then\n--------------------------------------------------------------------------------\n\n  if(v_name_input_tbl='TBL_DEPOSIT') then\n    if(inpar_type!=1) then\n       if(v_count!=0) then\n      \n     \n            var:='select \n            tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",TO_CHAR(tbl_profile.create_date,''yyyy/mm/dd'') as \"createDate\",\n            DEP_ID as \"depositId\",\n            dep.REF_DEPOSIT_TYPE as \"depositTypeId\",\n            typee.name as \"name\",\n            REF_BRANCH as \"branchId\",\n            REF_CUSTOMER as \"customerId\",\n            TO_CHAR(DUE_DATE,''yyyy/mm/dd'',''nls_calendar= persian'')  as \"dueDate\",\n            BALANCE as \"mande\",\n            TO_CHAR(OPENING_DATE,''yyyy/mm/dd'',''nls_calendar= persian'') as \"openingDate\",\n            RATE as \"rate\",\n            MODALITY_TYPE as \"tafkikSeporde\",\n            REF_DEPOSIT_ACCOUNTING as \"hesabdariSepordeId\",\n            REF_CURRENCY as \"currencyId\",\n            dep.region_id as \"regionId\",\n            dep.region_name as \"regionName\",\n             sum (BALANCE) over () as \"sum\"\n            from akin.TBL_DEPOSIT dep,tbl_profile , TBL_DEPOSIT_TYPE typee where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd||' and typee.REF_DEPOSIT_TYPE=dep.REF_DEPOSIT_TYPE';\n            \n        else\n            var:='select \n            tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",TO_CHAR(tbl_profile.create_date,''yyyy/mm/dd'') as \"createDate\",\n            DEP_ID as \"depositId\",\n            dep.REF_DEPOSIT_TYPE as \"depositTypeId\",\n            typee.name as \"name\",\n            REF_BRANCH as \"branchId\",\n            REF_CUSTOMER as \"customerId\",\n            TO_CHAR(DUE_DATE,''yyyy/mm/dd'',''nls_calendar= persian'')  as \"dueDate\",\n            BALANCE as \"mande\",\n            TO_CHAR(OPENING_DATE,''yyyy/mm/dd'',''nls_calendar= persian'') as \"openingDate\",\n            RATE as \"rate\",\n            MODALITY_TYPE as \"tafkikSeporde\",\n            REF_DEPOSIT_ACCOUNTING as \"hesabdariSepordeId\",\n            REF_CURRENCY as \"currencyId\",\n            dep.region_id as \"regionId\",\n            dep.region_name as \"regionName\",\n             sum (BALANCE) over () as \"sum\"\n            from akin.TBL_DEPOSIT dep, TBL_DEPOSIT_TYPE typee ,tbl_profile where tbl_profile.id = '||iidd||' and  typee.REF_DEPOSIT_TYPE=dep.REF_DEPOSIT_TYPE';\n            --where_condition := NULL;\n      end if;\n    else\n    if(v_count!=0) then\n      \n     \n            var:='select \n            tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",TO_CHAR(tbl_profile.create_date,''''yyyy/mm/dd'''') as \"createDate\",\n            DEP_ID as \"depositId\",\n            dep.REF_DEPOSIT_TYPE as \"depositTypeId\",\n            typee.name as \"name\",\n            REF_BRANCH as \"branchId\",\n            REF_CUSTOMER as \"customerId\",\n            TO_CHAR(DUE_DATE,''''yyyy/mm/dd'''',''''nls_calendar= persian'''')  as \"dueDate\",\n            BALANCE as \"mande\",\n            TO_CHAR(OPENING_DATE,''''yyyy/mm/dd'''',''''nls_calendar= persian'''') as \"openingDate\",\n            RATE as \"rate\",\n            MODALITY_TYPE as \"tafkikSeporde\",\n            REF_DEPOSIT_ACCOUNTING as \"hesabdariSepordeId\",\n            REF_CURRENCY as \"currencyId\",\n            dep.region_id as \"regionId\",\n            dep.region_name as \"regionName\",\n             sum (BALANCE) over () as \"sum\"\n           from akin.TBL_DEPOSIT dep,tbl_profile , TBL_DEPOSIT_TYPE typee where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd||' and typee.REF_DEPOSIT_TYPE=dep.REF_DEPOSIT_TYPE';\n            \n        else\n            var:='select \n            tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",TO_CHAR(tbl_profile.create_date,''''yyyy/mm/dd'''') as \"createDate\",\n            DEP_ID as \"depositId\",\n            dep.REF_DEPOSIT_TYPE as \"depositTypeId\",\n            typee.name as \"name\",\n            REF_BRANCH as \"branchId\",\n            REF_CUSTOMER as \"customerId\",\n            TO_CHAR(DUE_DATE,''''yyyy/mm/dd'''',''''nls_calendar= persian'''')  as \"dueDate\",\n            BALANCE as \"mande\",\n            TO_CHAR(OPENING_DATE,''''yyyy/mm/dd'''',''''nls_calendar= persian'''') as \"openingDate\",\n            RATE as \"rate\",\n            MODALITY_TYPE as \"tafkikSeporde\",\n            REF_DEPOSIT_ACCOUNTING as \"hesabdariSepordeId\",\n            REF_CURRENCY as \"currencyId\",\n            dep.region_id as \"regionId\",\n            dep.region_name as \"regionName\",\n             sum (BALANCE) over () as \"sum\"\n            from akin.TBL_DEPOSIT dep, TBL_DEPOSIT_TYPE typee ,tbl_profile where tbl_profile.id = '||iidd||' and  typee.REF_DEPOSIT_TYPE=dep.REF_DEPOSIT_TYPE';\n            --where_condition := NULL;\n        \n      end if;\n      end if;\n\n--------------------------------------------------------------------------------\n\nelsif (v_name_input_tbl='TBL_LOAN') then\n if(inpar_type!=1) then\n      if(v_count!=0) then\n      \n          var:='select \n          tbl_profile.name as \"profileName\", tbl_profile.des as \"profielDes\",TO_CHAR(tbl_profile.create_date,''yyyy/mm/dd'') as \"createDate\",\n          LON_ID as \"loanId\",\n         \n          lo.REF_LOAN_TYPE as \"loanTypeId\",\n          typee.name as \"name\",\n          REF_BRANCH as \"branchId\",\n          REF_CUSTOMER as \"customerId\",\n          REF_CURRENCY as \"currencyId\",\n          TO_CHAR(OPENING_DATE,''yyyy/mm/dd'',''nls_calendar= persian'') as \"openingDate\",\n          APPROVED_AMOUNT as \"mablaghMosavab\",\n          current_amount as \"mandeJari\",\n          overdue_amount as \"mandeSarresidGozashte\",\n          deferred_amount as \"mandeMoavagh\",\n          doubtful_amount as \"mandeMashkokVosol\",\n          REF_LOAN_ACCOUNTING as \"hesabdariTashilatId\",\n          rate as \"rate\",\n           lo.region_id as \"regionId\",\n           lo.region_name as \"regionName\",\n            TO_CHAR(lo.last_payment,''yyyy/mm/dd'',''nls_calendar= persian'') as \"akharinGhest\",\n             sum (current_amount) over () as \"sum\"\n          from akin.TBL_LOAN lo,TBL_LOAN_TYpe typee,tbl_profile where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd||' and typee.ref_loan_type =lo.REF_loan_TYPE';\n      else\n          var:='select \n          tbl_profile.name as \"profileName\", tbl_profile.des as \"profielDes\",TO_CHAR(tbl_profile.create_date,''yyyy/mm/dd'') as \"createDate\",\n          LON_ID as \"loanId\",\n         \n          lo.REF_LOAN_TYPE as \"loanTypeId\",\n          typee.name as \"name\",\n          REF_BRANCH as \"branchId\",\n          REF_CUSTOMER as \"customerId\",\n          REF_CURRENCY as \"currencyId\",\n          TO_CHAR(OPENING_DATE,''yyyy/mm/dd'',''nls_calendar= persian'') as \"openingDate\",\n          APPROVED_AMOUNT as \"mablaghMosavab\",\n          current_amount as \"mandeJari\",\n          overdue_amount as \"mandeSarresidGozashte\",\n          deferred_amount as \"mandeMoavagh\",\n          doubtful_amount as \"mandeMashkokVosol\",\n          REF_LOAN_ACCOUNTING as \"hesabdariTashilatId\",\n          RATE as \"rate\",\n            lo.region_id as \"regionId\",\n            lo.region_name as \"regionName\",\n            TO_CHAR(lo.last_payment,''yyyy/mm/dd'',''nls_calendar= persian'') as \"akharinGhest\",\n            sum (current_amount) over () as \"sum\"\n          from akin.TBL_LOAN lo,tbl_loan_type typee,tbl_profile where  tbl_profile.id = '||iidd||' and typee.ref_loan_type =lo.REF_loan_TYPE' ;\n          --where_condition := NULL;\n      end if;\n      else\n    if(v_count!=0) then\n      \n          var:='select \n          tbl_profile.name as \"profileName\", tbl_profile.des as \"profielDes\",TO_CHAR(tbl_profile.create_date,''''yyyy/mm/dd'''') as \"createDate\",\n          LON_ID as \"loanId\",\n         \n          lo.REF_LOAN_TYPE as \"loanTypeId\",\n          typee.name as \"name\",\n          REF_BRANCH as \"branchId\",\n          REF_CUSTOMER as \"customerId\",\n          REF_CURRENCY as \"currencyId\",\n          TO_CHAR(OPENING_DATE,''''yyyy/mm/dd'''',''''nls_calendar= persian'''') as \"openingDate\",\n          APPROVED_AMOUNT as \"mablaghMosavab\",\n          current_amount as \"mandeJari\",\n          overdue_amount as \"mandeSarresidGozashte\",\n          deferred_amount as \"mandeMoavagh\",\n          doubtful_amount as \"mandeMashkokVosol\",\n          REF_LOAN_ACCOUNTING as \"hesabdariTashilatId\",\n          rate as \"rate\",\n          lo.region_id as \"regionId\",\n            lo.region_name as \"regionName\",\n           TO_CHAR(lo.last_payment,''''yyyy/mm/dd'''',''''nls_calendar= persian'''') as \"akharinGhest\",\n           sum (current_amount) over () as \"sum\"\n          from akin.TBL_LOAN lo,TBL_LOAN_TYpe typee,tbl_profile where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd||' and typee.ref_loan_type =lo.REF_loan_TYPE';\n      else\n          var:='select \n          tbl_profile.name as \"profileName\", tbl_profile.des as \"profielDes\",TO_CHAR(tbl_profile.create_date,''''yyyy/mm/dd'''') as \"createDate\",\n          LON_ID as \"loanId\",\n          \n          lo.REF_LOAN_TYPE as \"loanTypeId\",\n          typee.name as \"name\",\n          REF_BRANCH as \"branchId\",\n          REF_CUSTOMER as \"customerId\",\n          REF_CURRENCY as \"currencyId\",\n          TO_CHAR(OPENING_DATE,''''yyyy/mm/dd'''',''''nls_calendar= persian'''') as \"openingDate\",\n          APPROVED_AMOUNT as \"mablaghMosavab\",\n          current_amount as \"mandeJari\",\n          overdue_amount as \"mandeSarresidGozashte\",\n          deferred_amount as \"mandeMoavagh\",\n          doubtful_amount as \"mandeMashkokVosol\",\n          REF_LOAN_ACCOUNTING as \"hesabdariTashilatId\",\n          RATE as \"rate\",\n            lo.region_id as \"regionId\",\n           lo.region_name as \"regionName\",\n           TO_CHAR(lo.last_payment,''''yyyy/mm/dd'''',''''nls_calendar= persian'''') as \"akharinGhest\",\n           sum (current_amount) over () as \"sum\"\n          from akin.TBL_LOAN lo,tbl_loan_type typee,tbl_profile where  tbl_profile.id = '||iidd||' and typee.ref_loan_type =lo.REF_loan_TYPE' ;\n          --where_condition := NULL;\n          end if;\n          end if;\n--------------------------------------------------------------------------------\nelsif (v_name_input_tbl='TBL_BRANCH') then\n    if(v_count!=0) then\n    select REPLACE(where_condition, 'and', 'or') into where_condition from dual;\n          var:='select \n          tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",tbl_profile.create_date as \"createDate\",\n          BRN_ID as \"branchID\",\n          br.NAME as \"branchName\",\n          REF_CTY_ID as \"cityId\",\n          CITY_NAME as \"cityName\",\n          REF_STA_ID as \"stateId\",\n          STA_NAME as \"stateName\"\n          from TBL_BRANCH br,tbl_profile where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd;\n    else\n        --var:='select \n        --tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",tbl_profile.create_date as \"createDate\",\n        --BRN_ID as \"branchId\",\n        --br.NAME as \"branchName\",\n        --REF_CTY_ID as \"cityId\",\n        --CITY_NAME as \"cityName\",\n        --REF_STA_ID as \"stateId\",\n        --STA_NAME as \"stateName\"\n        --from TBL_BRANCH br,tbl_profile where tbl_profile.id = '||INPAR_ID; \n        where_condition := NULL;\nend if;\n--------------------------------------------------------------------------------\nelsif (v_name_input_tbl='TBL_CITY') then\nif(v_count!=0) then\n\nvar:='select\ntbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",tbl_profile.create_date as \"createDate\",\nCTY_ID as \"cityId\",\nCTY_NAME as \"cityName\",\ncty.DES as \"cityDes\",\nREF_STA_ID as \"stateId\"\nfrom TBL_CITY cty,tbl_profile where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd;\nelse\n--var:='select\n--tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",tbl_profile.create_date as \"createDate\",\n--CTY_ID as \"cityId\",\n--CTY_NAME as \"cityName\",\n--cty.DES as \"cityDes\",\n--REF_STA_ID as \"stateId\"\n--from TBL_CITY cty,tbl_profile where tbl_profile.id = '||INPAR_ID; \nwhere_condition := NULL;\nend if;\n--------------------------------------------------------------------------------\nelsif (v_name_input_tbl='TBL_CURRENCY') then\nif(v_count!=0) then\n\nvar:='select\ntbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",tbl_profile.create_date as \"createDate\",\nCUR_ID as \"id\",\nCUR_NAME as \"curName\",\nSWIFT_CODE as \"swiftCode\",\ncur.DES as \"curDes\"\nfrom TBL_CURRENCY cur,tbl_profile where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd;\nelse\n--var:='select\n--tbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",tbl_profile.create_date as \"createDate\",\n--CUR_ID as \"id\",\n--CUR_NAME as \"curName\",\n--SWIFT_CODE as \"swiftCode\",\n--cur.DES as \"curDes\"\n--from TBL_CURRENCY cur,tbl_profile where tbl_profile.id = '||INPAR_ID;\nwhere_condition := NULL;\nend if;\n--------------------------------------------------------------------------------\nelsif (v_name_input_tbl='TBL_CUSTOMER') then\nif(v_count!=0) then\n\nvar:='select\ntbl_profile.name as \"profileName\", tbl_profile.des as \"profileDes\",tbl_profile.create_date as \"createDate\",\nTBL_CUSTOMER.CUS_ID as \"id\",\nTBL_CUSTOMER.NAME as \"customerName\",\nTBL_CUSTOMER.FAMILY as \"customerFamily\",\nTBL_CUSTOMER.NAT_REG_CODE as \"meliCode\",\nTBL_CUSTOMER.ADDRESS as \"address\",\nTBL_CUSTOMER.BIRTHDATE as \"birthdate\",\nTBL_CUSTOMER.GENDER as \"gender\",\nTBL_CUSTOMER.TYPE as \"customerType\",\nTBL_CUSTOMER.BRANCH_ID as \"branchId\"\nfrom TBL_CUSTOMER,tbl_profile where '||'('||where_condition ||')'||'and tbl_profile.id = '||iidd;\nelse\n--var:='select\n--\"profileName\",\"des\",\"createDate\",\n--CUS_ID as \"id\",\n-- \"customerName\",\n--FAMILY as \"customerFamily\",\n--NAT_REG_CODE as \"meliCode\",\n--ADDRESS as \"address\",\n--BIRTHDATE as \"birthdate\",\n--GENDER as \"gender\",\n--BRANCH_ID as \"branchId\" from(\n--\n--select\n--tbl_profile.name as \"profileName\", tbl_profile.des as \"des\" ,tbl_profile.create_date as \"createDate\",\n--CUS_ID  ,\n--cus.NAME as \"customerName\",\n--FAMILY,\n--NAT_REG_CODE ,\n--ADDRESS ,\n--BIRTHDATE ,\n--GENDER as ,\n--BRANCH_ID \n--from TBL_CUSTOMER cus,tbl_profile where tbl_profile.id = '||INPAR_ID||'\n-- ORDER BY (cus.CUS_ID) desc\n-- )\n--WHERE ROWNUM \u003c= 50';\nwhere_condition := NULL;\nend if;\n--------------------------------------------------------------------------------\nend if;\nif(where_condition is null) then\n  RETURN 'select * from dual where 1\u003e2';\n  else \n  \n  --var:=to_char(var);\n  return var;\n  end if;\n\n  \nEND FNC_PROFILE_CREATE_QUERY;"},{"Name":"FNC_PRIVATE_CREATE_QUERY","ObjectID":270505,"Digest":"867b260167b8df1794c5fcea485b4c08bc3e4fa442fed03f9778eae09c6b58f7","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PRIVATE_CREATE_QUERY\" (\n    INPAR_TYPE IN varchar2,\n    INPAR_ID IN NUMBER)\n    RETURN clob\nAS\n    iidd number;\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name: \n  Release Date/Time:1396/02/21-15:00\n  Edit Name: 1395/05/27-18:00\n  Version: 1.1\n  Category:2\n  Description: function Query saz baraE report ha.\n  */\n--------------------------------------------------------------------------------\n  v_name_input_tbl VARCHAR2(4000);\n  where_condition  clob;\n  v_count number;\n  var clob;\n  BEGIN\n  \n\n  \n  if(upper(INPAR_TYPE)is not null and inpar_id is not null) then\n  SELECT type INTO v_name_input_tbl FROM pragg.tbl_profile WHERE id=inpar_id;\n  select count(*) into v_count from pragg.tbl_profile_detail where ref_profile=inpar_id;\n--------------------------------------------------------------------------------\n  \n  \n--  SELECT LISTAGG('('||SRC_COLUMN||REPLACE(CONDITION,'#',' or '|| SRC_COLUMN), ') and ') WITHIN GROUP (ORDER BY id desc) \"where_condition\" into  where_condition\n--  FROM tbl_profile_detail\n--    WHERE ref_profile = inpar_id;\n\n\n--================================== shakhte where baraE query ba tavajoh be jadvale tbl_profile_detail dar ghalebe XML\nSELECT rtrim(xmlagg(XMLELEMENT(e,'('\n  ||SRC_COLUMN\n  ||REPLACE(CONDITION,'#',' or '\n  || SRC_COLUMN), ') and ').EXTRACT('//text()')\n                     ).GetClobVal(),',') \"where_condition\" into  where_condition\n  FROM pragg.tbl_profile_detail\nWHERE ref_profile = inpar_id;\n\n\nselect substr(where_condition,0,LENGTH(where_condition)-6) into where_condition from dual;\n--=================================\n\n    --=========================== eslahe khoroji XML\n     select REPLACE(where_condition, '\u0026gt;', '\u003e') into where_condition from dual;\n    select REPLACE(where_condition, '\u0026apos;', '''') into where_condition from dual;\n    select REPLACE(where_condition, '\u0026lt;', '\u003c') into where_condition from dual;\n    --============================\n\n  \n  where_condition:=where_condition||')';\n--------------------------------------------------------------------------------  \n  \n  if(v_name_input_tbl='TBL_DEPOSIT') then\n    if(v_count!=0) then\n    var:='select /*+  PARALLEL(auto)   */\n    DEP_ID as \"depositId\"\n    from akin.TBL_DEPOSIT dep,pragg.tbl_profile where '||'('||where_condition ||')'||'and pragg.tbl_profile.id = '||inpar_id;\n    else\n    var:='select /*+  PARALLEL(auto)   */\n    DEP_ID as \"depositId\"\n    from akin.TBL_DEPOSIT,pragg.tbl_profile where pragg.tbl_profile.id = '||inpar_id;\n  end if;\n--------------------------------------------------------------------------------\n  elsif (v_name_input_tbl='TBL_LOAN') then\n    if(v_count!=0) then\n    \n    var:='select /*+  PARALLEL(auto)   */\n    LON_ID as \"loanId\" \n    from akin.TBL_LOAN lo ,pragg.tbl_profile where '||'('||where_condition ||')'||'and pragg.tbl_profile.id = '||inpar_id;\n    else\n    var:='select /*+  PARALLEL(auto)   */\n    LON_ID as \"loanId\"\n    from akin.TBL_LOAN,pragg.tbl_profile where  pragg.tbl_profile.id = '||inpar_id;\n  end if;\n--------------------------------------------------------------------------------\n  elsif (v_name_input_tbl='TBL_BRANCH' ) then\n    if(v_count!=0) then\n    select REPLACE(where_condition, 'and', 'or') into where_condition from dual;\n    var:='select /*+  PARALLEL(auto)   */\n    BRN_ID as \"branchId\"\n    from pragg.TBL_BRANCH br,pragg.tbl_profile where '||'('||where_condition ||')'||'and pragg.tbl_profile.id = '||inpar_id;\n    else\n    var:='select /*+  PARALLEL(auto)   */\n    BRN_ID as \"branchId\"\n    from pragg.TBL_BRANCH br,pragg.tbl_profile where pragg.tbl_profile.id = '||inpar_id; \n  end if;\n--------------------------------------------------------------------------------\n  elsif (v_name_input_tbl='TBL_CITY') then\n    if(v_count!=0) then\n    var:='select /*+  PARALLEL(auto)   */\n    CTY_ID as \"cityId\"\n    from pragg.TBL_CITY cty,pragg.tbl_profile where '||'('||where_condition ||')'||'and pragg.tbl_profile.id = '||inpar_id;\n    else\n    var:='select /*+  PARALLEL(auto)   */\n    CTY_ID as \"cityId\",\n    from pragg.TBL_CITY cty,pragg.tbl_profile where pragg.tbl_profile.id = '||inpar_id; \n  end if;\n--------------------------------------------------------------------------------\n  elsif (v_name_input_tbl='TBL_CURRENCY') then\n    if(v_count!=0) then\n    var:='select /*+  PARALLEL(auto)   */\n    CUR_ID as \"currencyID\"\n    from pragg.TBL_CURRENCY cur,pragg.tbl_profile where '||'('||where_condition ||')'||'and pragg.tbl_profile.id = '||inpar_id;\n    else\n    var:='select /*+  PARALLEL(auto)   */\n    CUR_ID as \"currencyId\"\n    from pragg.TBL_CURRENCY cur,pragg.tbl_profile where pragg.tbl_profile.id = '||inpar_id;\n  end if;\n--------------------------------------------------------------------------------\n  elsif (v_name_input_tbl='TBL_CUSTOMER') then\n    if(v_count!=0) then\n    var:='select /*+  PARALLEL(auto)   */\n    CUS_ID as \"customerId\"\n    from pragg.TBL_CUSTOMER,pragg.tbl_profile where '||'('||where_condition ||')'||'and pragg.tbl_profile.id = '||inpar_id; \n    else\n    var:='select /*+  PARALLEL(auto)   */\n    CUS_ID as \"customerId\"\n    from pragg.TBL_CUSTOMER,pragg.tbl_profile where pragg.tbl_profile.id = '||inpar_id; \n  end if;\n--------------------------------------------------------------------------------\n  end if;\n--------------------------------------------------------------------------------\n  else\n  \n  if(upper(inpar_type) = 'TBL_LOAN') then\n    var:='select /*+  PARALLEL(auto)   */\n    LON_ID as \"loanId\"\n    from akin.TBL_LOAN';\n    \n  end if;\n  \n  if(upper(inpar_type) = 'TBL_DEPOSIT') then\n    var:='select /*+  PARALLEL(auto)   */\n    DEP_ID as \"depositId\"\n    from akin.TBL_DEPOSIT';\n  \n  end if;\n  \n  if(upper(inpar_type) = 'TBL_BRANCH') then\n    var:='select /*+  PARALLEL(auto)   */\n    BRN_ID as \"branchId\"\n    from pragg.TBL_BRANCH';\n  \n  end if;\n  \n  if(upper(inpar_type) = 'TBL_CITY') then\n    var:='select /*+  PARALLEL(auto)   */\n    CTY_ID as \"cityId\",\n    from pragg.TBL_CITY';\n  \n  end if;\n  \n  if(upper(inpar_type) = 'TBL_CURRENCY') then\n    var:='select /*+  PARALLEL(auto)   */\n   4 as \"currencyId\"\n    from pragg.TBL_CURRENCY';\n  \n  end if;\n  \n  if(upper(inpar_type) = 'TBL_CUSTOMER') then\n    var:='select /*+  PARALLEL(auto)   */\n    CUS_ID as \"customerId\"\n    from pragg.TBL_CUSTOMER';\n  \n  end if;\n  end if;\nRETURN var;\n  \n--------------------------------------------------------------------------------\nEND FNC_PRIVATE_CREATE_QUERY;"},{"Name":"FNC_GET_PROFILE","ObjectID":271920,"Digest":"2248d97f06cbfeceed20900c045f92289f82f51295bdeaf39cbfbcf54d029830","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_PROFILE\" (\n    INPAR_TYPE IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\npragma autonomous_transaction;\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh \u0026 Morteza.Sahhi\n  Editor Name:\n  Release Date/Time:1396/03/10-15:00\n  Edit Name:\n  Version: 1\n  Category:\n  Description:  in function koliE profile ha ra bar asase noE profile ha barmigardanad.\n  */\n--------------------------------------------------------------------------------  \nBEGIN\nprc_is_empty();\n\nif(upper(INPAR_TYPE)='TARIKH') then\nreturn 'SELECT \n  ID as \"profileId\",\n  NAME as \"name\",\n  TYPE as \"type\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"user\",\n  DES as \"des\",\n  UPDATE_DATE as \"updateDate\",\n  REF_USER_UPDATE as \"userUpdate\",\n  H_ID as \"id\",\n  IS_EMPTY as \"is_empty\",\n  report_cnt as \"reportCount\",\n  PERIOD_DURATION as \"PeriodDuration\"\nFROM TBL_TIMING_PROFILE \nwhere TYPE =2 and  status=1\nand id in  (select distinct first_value(ID)over ( partition BY H_ID order by id DESC )FROM TBL_TIMING_PROFILE)\norder by id desc';\n\nelse if(upper(INPAR_TYPE)='BAZEH') then\nreturn 'SELECT \n  ID as \"profileId\",\n  NAME as \"name\",\n  TYPE as \"type\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"user\",\n  DES as \"des\",\n  UPDATE_DATE as \"updateDate\",\n  REF_USER_UPDATE as \"userUpdate\",\n  H_ID as \"id\",\n  IS_EMPTY as \"is_empty\",\n  report_cnt as \"reportCount\",\n  PERIOD_DURATION as \"PeriodDuration\"\nFROM TBL_TIMING_PROFILE \nwhere TYPE =1 and  status=1\nand id in  (select distinct first_value(ID)over ( partition BY H_ID order by id DESC )FROM TBL_TIMING_PROFILE) order by id desc';\n\nelse if(upper(INPAR_TYPE) in ('TBL_LEDGER', 'CUR_SENS','NIIM','NPL','CAR','COM')) then\n\n\n\nreturn 'SELECT \n  ID as \"profileId\",\n  NAME as \"name\",\n  TYPE as \"type\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"user\",\n  DES as \"des\",\n  H_ID as \"id\",\n  IS_EMPTY as \"is_empty\",\n  report_cnt as \"reportCount\"\nFROM TBL_LEDGER_PROFILE \nwhere  status=1 and upper(TYPE) =upper('''||INPAR_TYPE||''')\nand id in  (select distinct first_value(ID)over ( partition BY H_ID order by id DESC )FROM TBL_LEDGER_PROFILE) order by id desc';\n\n\nelse if(upper(inpar_type)='ALL') then\nreturn 'SELECT \n  ID as \"profileId\",\n  NAME as \"name\",\n  TYPE as \"type\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"user\",\n  DES as \"des\",\n  H_ID as \"id\",\n  IS_EMPTY as \"is_empty\",\n  report_cnt as \"reportCount\"\nFROM TBL_LEDGER_PROFILE \nwhere  status=1 \nand id in  (select distinct first_value(ID)over ( partition BY H_ID order by id DESC )FROM TBL_LEDGER_PROFILE) order by id desc';\n\nelse\n  RETURN '\nSELECT \n  ID as \"profileId\",\n  NAME as \"name\",\n  TYPE as \"type\",\n  CREATE_DATE as \"createDate\",\n  REF_USER as \"user\",\n  DES as \"des\",\n  UPDATE_DATE as \"updateDate\",\n  REF_USER_UPDATE as \"userUpdate\",\n  H_ID as \"id\",\n  IS_EMPTY as \"is_empty\",\n  item_cnt as \"itemCount\",\n  report_cnt as \"reportCount\"\nFROM TBL_PROFILE \nwhere   status=1 AND upper(TYPE) =upper('''||INPAR_TYPE||''')\nand id in  (select distinct first_value(ID)over ( partition BY H_ID order by id DESC )FROM TBL_PROFILE)\n       order by id desc ' ;\nend if;\nend if;\nend if;\nend if;\n\nEND FNC_GET_PROFILE;"},{"Name":"FNC_GET_QUERY_RESULT","ObjectID":271998,"Digest":"2672c37a50782c7a47ad98ade75dd8045a0734ccab17549ab6a935e648fea83d","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_QUERY_RESULT\" (\n    inpar_type IN VARCHAR2 ,\n    inpar_noe IN VARCHAR2) -- if inpar_noe=1 then date , if 2 then rate, if 3 then name \u0026 code tashilat\n  RETURN VARCHAR2\nAS\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name:\n  Release Date/Time:1396/03/16-15:00\n  Edit Name:\n  Version: 1\n  Category:\n  Description: in Function baraE bargardandane Item haE profile ha mibashad.ke \n               vorodi inpar_type, noE profile ra moshakhas mikonad. dar profile\n               haE seporde va tashilat be dalile inke az 3 ghesmate(mablagh-tarikh\n               / nerkh arz / noE) tashkil shode ast in func yek vorodi inpar_no\n               ham migirad baraE moshkhas shodan yeki az in 3 ghesmate seporde ya\n               tashilat.\n  */\n--------------------------------------------------------------------------------  \nBEGIN\n  IF (upper(inpar_type)='TBL_CURRENCY') THEN\n      RETURN 'SELECT CUR_ID as \"id\", CUR_NAME as \"curName\", SWIFT_CODE as \"swiftCode\", DES as \"des\" FROM TBL_CURRENCY ';\n  ELSE\n    IF(upper(inpar_type)='TBL_BRANCH' and upper(inpar_noe)='BRANCH') THEN\n      RETURN 'SELECT p.STA_NAME \"provinceName\",                                            \n              c.CTY_NAME \"cityName\",                                            \n              p.STA_ID \"provinceId\",                                            \n              c.CTY_ID \"cityId\",                                            \n              s.NAME \"label\",                                            \n              s.BRN_ID \"id\",\n              ''brn_id'' \"type\"\n              FROM TBL_BRANCH s                                          \n              LEFT OUTER JOIN TBL_CITY c                                          \n              ON s.REF_CTY_ID = c.cty_id                                          \n              LEFT OUTER JOIN TBL_STATE p                                          \n              ON p.STA_ID = c.REF_STA_ID';\n  Else\n    IF(upper(inpar_type)='TBL_BRANCH' and upper(inpar_noe)='CITY')then\n    return '   SELECT distinct(bts.cty_id) \"id\", bts.cty_name \"label\", bto.sta_id \"provinceId\", ''ref_cty_id'' \"type\"\n          FROM TBL_CITY bts, TBL_STATE bto,TBL_BRANCH bts1 \n          WHERE bts.ref_sta_id = bto.sta_id and bts1.ref_cty_id = bts.cty_id ORDER BY \"label\"';\n  Else\n    IF(upper(inpar_type)='TBL_BRANCH' and upper(inpar_noe)='STATE') then\n    return ' SELECT distinct(bto.sta_id) \"id\", bto.sta_name \"label\",''ref_sta_id'' \"type\"\n               FROM TBL_CITY bts, TBL_STATE bto, TBL_BRANCH bts1 \n              where  bts.ref_sta_id = bto.sta_id and bts1.ref_cty_id = bts.cty_id ORDER BY \"label\"';\n  Else  \n    IF(upper(inpar_type)='TBL_LOAN' AND  upper(inpar_noe)='DATE') then             \n      RETURN 'SELECT LON_ID as \"loanId\",\n              REF_LOAN_TYPE as \"loanType\",\n              OPENING_DATE as \"openDate\",\n              APPROVED_AMOUNT as \"mablaghMosavab\",\n              CURRENT_AMOUNT as \"mandeJari\",\n              OVERDUE_AMOUNT as \"mandeSarresidGozashte\",\n              DEFERRED_AMOUNT as \"mandeMoavagh\",\n              DOUBTFUL_AMOUNT as \"mandeMashkookolVosool\",\n              last_payment as \"akharinGhest\"\n              FROM AKIN.TBL_LOAN' ;           \n  ELSE\n    IF (upper(inpar_type)='TBL_LOAN' AND  upper(inpar_noe)='RATE') THEN\n      RETURN 'SELECT ref_rate as \"id\", RATE as \"name\", TYPE as \"type\" FROM TBL_RATE where TYPE = ''TBL_LOAN''';\n  ELSE\n    IF(upper(inpar_type)='TBL_LOAN' AND upper(inpar_noe)='CODE') THEN\n      RETURN 'SELECT ID as \"code\", NAME as \"name\", lo.REF_LOAN_TYPE as \"id\" FROM TBL_LOAN_TYPE lo' ;\n  Else\n    IF (upper(inpar_type)='TBL_DEPOSIT' AND  upper(inpar_noe)='DATE') then\n      RETURN 'SELECT \n              DEP_ID as \"depId\",\n              REF_DEPOSIT_TYPE as \"depType\",\n              BALANCE as \"mande\",\n              OPENING_DATE as \"openDate\",\n              DUE_DATE as \"endDate\"\n              FROM AKIN.TBL_DEPOSIT' ;\n  ELSE\n    IF (upper(inpar_type)='TBL_DEPOSIT' AND  upper(inpar_noe)='RATE') THEN\n      RETURN 'SELECT ref_rate as \"id\", RATE as \"name\", TYPE as \"type\" FROM TBL_RATE where TYPE = ''TBL_DEPOSIT''';\n  ELSE\n    IF(upper(inpar_type)='TBL_DEPOSIT' AND  upper(inpar_noe)='CODE') THEN\n      RETURN 'SELECT ID as \"code\", NAME as \"name\", dep.REF_DEPOSIT_TYPE as \"id\" FROM TBL_DEPOSIT_TYPE dep' ;\n  Else\n    IF(upper(inpar_type)='TBL_DEPOSIT' AND  upper(inpar_noe)='REGION') THEN\n      RETURN 'SELECT distinct region_id as \"id\", region_NAME as \"name\"  FROM akin.TBL_DEPOSIT where region_id is not null' ;\n  Else\n    IF(upper(inpar_type)='TBL_CUSTOMER') THEN\n      RETURN 'SELECT CUS_ID as \"customerId\",\n              NAME as \"customerName\",\n              FAMILY as \"customerFamily\",\n              NAT_REG_CODE as \"meliCode\",\n              ADDRESS as \"address\",\n              BIRTHDATE as \"birthdate\",\n              GENDER as \"gender\",\n              BRANCH_ID as \"branchId\"\n              FROM TBL_CUSTOMER';\n  Else\n    IF(upper(inpar_type)='TIMING' AND  upper(inpar_noe)='TARIKH') THEN\n    return    'SELECT det.ID as \"id\",\n              det.REF_TIMING_PROFILE as \"timing_profile_id\",\n              det.PERIOD_NAME as \"name\",\n              det.PERIOD_START as \"startDate\",\n              det.PERIOD_END as \"endDate\",\n              det.PERIOD_COLOR as \"color\"\n              FROM TBL_TIMING_PROFILE_DETAIL det\n               order by det.id';\n  Else\n    IF (upper(inpar_type)='TIMING' AND  upper(inpar_noe)='BAZEH') THEN\n    return 'SELECT det.ID as \"id\",\n            det.PERIOD_NAME as \"name\",\n            det.REF_TIMING_PROFILE as \"timing_profile_id\",\n            det.PERIOD_DATE as \"periodDate\",\n            det.PERIOD_COLOR as \"color\"\n            FROM TBL_TIMING_PROFILE_DETAIL det\n            order by det.id';\n    \n    END IF;\n    END IF;\n    END IF;\n    END IF;\n    END IF;\n    END IF;\n    END IF;\n    END IF;\n    END IF;\n    END IF;\n    End if;\n    END IF;\n    END IF;\n  END IF;\nEND fnc_get_query_result;"},{"Name":"FNC_PROFILE_WHERE_CONDITION","ObjectID":272127,"Digest":"a55f1b18b6c34b1e2deaef88fb88e5e59933b26b26c13918a44d4641bd248816","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PROFILE_WHERE_CONDITION\" (\n    INPAR_ID IN NUMBER)\n  RETURN VARCHAR2\nAS\n  v_name_input_tbl VARCHAR2(4000);\n  where_condition  clob;\n  v_count number;\n  iidd number;\n  outpar_id number;\n  var clob;\nBEGIN\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  Sobhan.Sadeghzade \n  Editor Name: \n  Release Date/Time:1396/03/21-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:\n  az in fnc baraye sakhte ghesmate  \"where\" queri saz  estefade mishavad\n  */\n--------------------------------------------------------------------------------\nSELECT MAX(id)\nINTO iidd\nFROM TBL_PROFILE\nWHERE h_id = inpar_id\nGROUP BY name ; \n\n  SELECT type INTO v_name_input_tbl FROM tbl_profile WHERE id=iidd;\nSELECT COUNT(*) INTO v_count FROM tbl_profile_detail WHERE ref_profile=iidd; \n  \n IF(v_count=1) THEN\n  SELECT SRC_COLUMN\n    ||' '\n    || CONDITION\n  INTO where_condition\n  FROM tbl_profile_detail\n  WHERE ref_profile = iidd;\n  \n  else\n\nSELECT LISTAGG(SRC_COLUMN\n  ||CONDITION, '; ') WITHIN GROUP (\nORDER BY id DESC) \"where_condition\"\nINTO where_condition\nFROM tbl_profile_detail\nWHERE ref_profile = iidd;\n  \n    end if;\n    \n-- select max(id) into outpar_id FROM tbl_profile_detail\n--WHERE ref_profile = iidd;   \n\n  RETURN  where_condition;\nEND FNC_PROFILE_WHERE_CONDITION;"},{"Name":"FNC_TOP_CUSTOMER","ObjectID":272158,"Digest":"6ce9d0c57d4859d0956aefacddf8fe8ee81405239609db5f391c6252330a5247","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_TOP_CUSTOMER\" (\n    inpar_number IN NUMBER )\n  RETURN VARCHAR2\nAS\n  --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name:\n  Release Date/Time:1396/03/21-15:00\n  Edit Name:\n  Version: 1\n  Category:2\n  Description: dar profile moshtari, be tedade addade entekhabi tavasote karbar\n               moshtariyani ke bishtarin mande seporde ra darand bar migardanad.\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n  RETURN 'SELECT  NAME as \"customerName\", FAMILY as \"customerFamily\",CUS_ID as \"id\",BALANCE  as \"amount\"  \n          FROM(  \n            SELECT /*+ parallel(auto) */ NAME , FAMILY , CUS_ID ,sum(lo.BALANCE)  as BALANCE \n          FROM  \n          TBL_CUSTOMER cus,AKIN.TBL_DEPOSIT lo  \n          where lo.REF_CUSTOMER = cus.cus_id  \n          group by CUS_ID,FAMILY,NAME\n          ORDER BY sum(lo.BALANCE) desc    \n          )    \n          WHERE ROWNUM \u003c='||inpar_number||' ORDER BY  \"amount\" desc';\nEND fnc_top_customer;"},{"Name":"FNC_CUSTOMER_SEARCHING_ENG","ObjectID":272252,"Digest":"6ea3d81b944dd6cdd19371bae59472f8782c3adb9082974ac9bffc0daa54231f","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_CUSTOMER_SEARCHING_ENG\" \n(\n  IN_NAME IN VARCHAR2 \n, IN_FAMILY IN VARCHAR2 \n, IN_NAT_REG_CODE IN VARCHAR2 \n,in_type in varchar2\n,in_gender in varchar2\n,in_tel in varchar2\n,in_mobile in varchar2\n,in_postal_code in varchar2\n,in_father_name in varchar2\n,in_birth_place in varchar2\n,in_grade in varchar2\n, INPAR_LOAN IN NUMBER \n, INPAR_BRANCH IN NUMBER \n, INPAR_DEPOSIT IN NUMBER \n\n)\nRETURN clob\nAS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  Sobhan.Sadeghzade \n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:\n   az in function baraye sakhte queriye select , baraye filter kardane moshtari ha bar asase shart haye entekhab shode tavassote karbar, estefade mishavad\n  */\n--------------------------------------------------------------------------------\npragma autonomous_transaction;\n\n\nv_queri clob;\nv_queri_temp clob;\nv_where1 clob;\nv_where2 clob;\nv_where clob;\nv_tables clob;\nv_columns clob;\nv_result clob;\nv_count1 number;\nv_count2 number;\n\nBEGIN\n\n------------------------------------------------------------------\nEXECUTE IMMEDIATE ' truncate table TBL_CUSTOMER_SEARCH_ITEM';\ncommit;\n\n--3 satre avvad baraye filter kardan bar asase name,family va code melli  mibashad\n--3 satre dovvom baraye filter kardan barr asase profile haye entekhab shode mibashasd\n--har yek az 3 profile ba bayad ba jadvake CUSToMER join zade shavand. sotune condition jadval  TBL_CUSTOMER_SEARCH_ITEM be hamin manzur mibashad\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (1,'NAME',IN_NAME,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (2,'family',IN_FAMILY,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (3,'NAT_REG_CODE',IN_NAT_REG_CODE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (4,'P_LOAN',INPAR_LOAN,'l.\"customerId\"=c.CUS_ID');\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (5,'P_BRANCH',INPAR_BRANCH,'b.\"branchID\"=c.BRANCH_ID');\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (6,'P_DEPOSIT',INPAR_DEPOSIT,'d.\"customerId\"=c.CUS_ID');\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (7,'TYPE',IN_TYPE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (8,'GENDER',IN_GENDER,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (9,'TEL',IN_TEL,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (10,'MOBILE',IN_MOBILE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (11,'POSTAL_CODE',IN_POSTAL_CODE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (12,'FATHER_NAME',IN_FATHER_NAME,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (13,'BIRTH_PLACE',IN_BIRTH_PLACE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (14,'GRADE',IN_GRADE,null);\ncommit;\n--------------------------------------------------------------------------------------------------------------\n\n--dar for zir agar meghdar 'value=null' bashad be maniye in mibashad ke dar filter(search) estefade nashode ast.\n--meghdar value haman shomare profile entekhab shode mibashad \n\nfor i in (select * from TBL_CUSTOMER_SEARCH_ITEM where id in (4,5,6) and value is not null)\nloop\n  v_queri_temp:=FNC_PROFILE_CREATE_QUERY(i.value,0);\n \n    if(v_queri_temp='select * from dual where 1\u003e2') then\n  v_queri:=null;\n  update TBL_CUSTOMER_SEARCH_ITEM set EXIST_PROFILE_DETAIL=0 where VALUE=i.VALUE;\n  end if;\n  commit; \n \n \n  if(v_queri_temp is null) then\n \n  if(i.column_type='P_LOAN')then\n  v_queri:='('||v_queri_temp||') l ,';\n  elsif(i.column_type='P_BRANCH')then\n  v_queri:='('||v_queri_temp||') b ,';\n  elsif(i.column_type='P_DEPOSIT')then\n  v_queri:='('||v_queri_temp||') d ,';\n  end if;--if(i.column_type='P_LOAN')then\n \n   elsif(v_queri_temp is not null  and v_queri_temp!='select * from dual where 1\u003e2') then --if(v_queri_temp is null) then\n  if(i.column_type='P_LOAN')then\n  v_queri:=v_queri||'('||v_queri_temp||') l ,';\n  elsif(i.column_type='P_BRANCH')then\n  v_queri:=v_queri||'('||v_queri_temp||') b ,';\n  elsif(i.column_type='P_DEPOSIT')then\n  v_queri:=v_queri||'('||v_queri_temp||') d ,';\n  end if; --if(i.column_type='P_LOAN')then\n \n  end if;\nend loop;\n\n------------------------------------------------ \nselect count (*) into v_count1 from TBL_CUSTOMER_SEARCH_ITEM where id in (1,2,3,7,8,9,10,11,12,13,14) and value is not null;  \nselect count (*) into v_count2 from TBL_CUSTOMER_SEARCH_ITEM where id in (4,5,6) and value is not null;  \n\nif(v_count1!=0 and v_count2=0) then  --name,family,code\nSELECT LISTAGG('c.'||column_type||' like '||''''||'%'||value||'%'||'''',' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where1\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (1,2,3,7,8,9,10,11,12,13,14) and value is not null;\nv_where:=v_where1;\n\nelsif(v_count1=0 and v_count2!=0 and v_queri is not null) then --profil ha \nSELECT LISTAGG(condition, ' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where2\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (4,5,6) and value is not null and  EXIST_PROFILE_DETAIL!=0;\nv_where:=v_where2;\n\n\nelsif(v_count1!=0 and v_count2!=0) then   \n\nSELECT LISTAGG('c.'||column_type||' like '||''''||'%'||value||'%'||'''',' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where1\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (1,2,3,7,8,9,10,11,12,13,14) and value is not null;\nSELECT LISTAGG(condition, ' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where2\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (4,5,6) and value is not null and  EXIST_PROFILE_DETAIL!=0;\n\nv_where:=v_where1||' and '||v_where2;\n\nend if;\n\n----------------------------------------------------------------------\nif (v_queri is not null) then \nv_result:='select c.name as \"customerName\",c.family as \"customerFamily\",c.CUS_ID as \"id\",c.type as \"type\",c.gender as \"GENDER\"\n,c.tel as \"tel\", c.mobile as \"mobile\",c.postal_code as \"postal_code\", c.father_name as \"father_name\",c.birth_place as \"birth_place\",c.grade as \"mizane_tashilat\" from '||v_queri||'tbl_customer c where '||v_where;\nelsif( (v_queri is null or v_queri='(select * from dual where 1\u003e2) l ,' ) and v_where is null) then\nv_result:='select c.name as \"customerName\",c.family as \"customerFamily\",c.CUS_ID as \"id\",c.type as \"type\",c.gender as \"GENDER\",c.tel as \"tel\", c.mobile as \"mobile\",c.postal_code as \"postal_code\", c.father_name as \"father_name\",c.birth_place as \"birth_place\",c.grade as \"mizane_tashilat\"  from tbl_customer c ';\nelse\nv_result:='select c.name as \"customerName\",c.family as \"customerFamily\",c.CUS_ID as \"id\",c.type as \"type\",c.gender as \"GENDER\",c.tel as \"tel\", c.mobile as \"mobile\",c.postal_code as \"postal_code\", c.father_name as \"father_name\",c.birth_place as \"birth_place\",c.grade as \"mizane_tashilat\"  from tbl_customer c where '||v_where;\nend if;\n\nreturn v_result;\n  \n  \nEND FNC_CUSTOMER_SEARCHING_ENG;"},{"Name":"FNC_GET_TIMING_PROFILE","ObjectID":272336,"Digest":"7a1df84a8ad41b8a3c663dd3a93a70941c88f8358ec74861dfc0f21ee730b031","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_TIMING_PROFILE\" (\n    INPAR_TYPE IN number -- 2 tarikh dar , 1 bazehi\n    )\n  RETURN VARCHAR2\nAS\npragma autonomous_transaction;\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name:\n  Release Date/Time:1396/03/23-15:00\n  Edit Name:\n  Version: 1\n  Category:\n  Description:\n  */\n--------------------------------------------------------------------------------  \nBEGIN\nprc_is_empty();\n  RETURN 'SELECT ID as \"id\",\n          NAME as \"name\",\n          CREATE_DATE as \"createDate\",\n          REF_USER as \"user\",\n          DES as \"des\",\n          UPDATE_DATE as \"updateDate\",\n          REF_USER_UPDATE as \"userUpdate\",\n          PERIOD_DURATION as \"PeriodDuration\"\n          FROM TBL_TIMING_PROFILE\n          where type ='''||INPAR_TYPE||'''';\nEND FNC_GET_TIMING_PROFILE;"},{"Name":"FNC_TIMING_PROFILE_RESULT","ObjectID":272337,"Digest":"fb3c998e41c78d587585e70062b5707ad9a7124aa5f4b3d542a0ba69759162bc","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_TIMING_PROFILE_RESULT\" \n(\n  inpar_type in varchar2,\n  inpar_id in varchar2 \n) return varchar2 as \npragma autonomous_transaction;\niidd number;\nbegin\n\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name:\n  Release Date/Time:1396/04/8-15:00\n  Edit Name:\n  Version: 1\n  Category:\n  Description: In fumction 2 voroodi inpar_type va inpar_id migirad. agar inpar_\n               type = \"tarikh\" bashad profile tarikh va agar inpar_type =\"bazeh\"\n               bashad profile zamani bazeEi ast.va ba vared kardne ID profile ma_\n               rboote, moshkhasat va be ebarati detail on profile namayesh dade\n               mishavad.\n  */\n--------------------------------------------------------------------------------  \nprc_is_empty();\nselect  max(id) into iidd\n\nFROM TBL_TIMING_PROFILE\nwhere h_id = inpar_id\ngroup by name ;\n\nif(upper(inpar_type)='TARIKH') then\n return 'SELECT det.ID as \"id\",\n              h_id  as \"timing_profile_id\",\n              det.PERIOD_NAME as \"name\",\n              to_char(det.PERIOD_START,''YYYY-MM-DD'') as \"startDate\",\n              to_char(det.PERIOD_END,''YYYY-MM-DD'') as \"endDate\",\n              det.PERIOD_COLOR as \"color\"\n              FROM TBL_TIMING_PROFILE_DETAIL det, TBL_TIMING_PROFILE po \n              where det.REF_TIMING_PROFILE = po.ID and po.TYPE=2 and  det.ref_timing_profile = '||iidd||' and PERIOD_STATUS = 1  order by det.id';\n              \nelse\n\nif(upper(inpar_type)='BAZEH') then\nreturn' SELECT det.ID as \"id\",\n            det.PERIOD_NAME as \"name\",\n            h_id  as \"timing_profile_id\",\n            det.PERIOD_DATE as \"periodDate\",\n            det.PERIOD_COLOR as \"color\"\n            FROM TBL_TIMING_PROFILE_DETAIL det, TBL_TIMING_PROFILE po \n            where det.REF_TIMING_PROFILE = po.ID and po.TYPE=1 and  det.ref_timing_profile = '||iidd||' and PERIOD_STATUS = 1 order by det.id';\nend if;\nend if;\n \nend fnc_timing_profile_result;"},{"Name":"FNC_PAGING_QUERY","ObjectID":272496,"Digest":"1d7f12afefad52fc789fa924ab824a25b42d8dce6a415ae7c6d4303a76c972ef","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PAGING_QUERY\" \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid Sedigh\n  Release Date/Time:1396/04/1\n  Version: 1.0\n  Category:2\n  Description: YEK QUERY V PAGE-SIZE V PAGE-NUMBER MIGIRE VA DADEHASHO PAS MIDE\n  */\n--------------------------------------------------------------------------------  \n(\n  INPAR_PAGE_SIZE IN NUMBER \n, INPAR_PAGE_NUMBER IN NUMBER \n, INPAR_QUERY IN varchar2\n) RETURN clob AS \n  LOC_QUERY clob; \n  total_number number:=FNC_PAGE_NUMBER(INPAR_PAGE_SIZE,INPAR_QUERY) ;\n  LOC_LOW NUMBER := (INPAR_PAGE_NUMBER-1)*INPAR_PAGE_SIZE+1; \n  LOC_UP NUMBER := INPAR_PAGE_NUMBER*INPAR_PAGE_SIZE; \nBEGIN\n\n  if (LOC_UP\u003etotal_number) then \n  LOC_UP:=total_number;\n  end if;\n\n   -- select FNC_PROFILE_CREATE_QUERY(inpar_id,0) into var from dual;\n\n\n  LOC_QUERY := 'SELECT * FROM (\n                              SELECT ROWNUM \"رديف\", t.*\n                              FROM (' || INPAR_QUERY ||')T)\n                              WHERE  \"رديف\" BETWEEN ' || LOC_LOW || ' AND ' ||LOC_UP;\n RETURN LOC_QUERY;\nEND FNC_PAGING_QUERY;"},{"Name":"FNC_CUSTOMER_PAGING","ObjectID":272727,"Digest":"a27404e32dd223f86eb1633cfeef5fcd1fe2a1311a24e34c0bf4603f10dc76f5","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_CUSTOMER_PAGING\" \n(\n  IN_NAME IN VARCHAR2 \n, IN_FAMILY IN VARCHAR2 \n, IN_NAT_REG_CODE IN VARCHAR2 \n,in_type in varchar2\n,in_gender in varchar2\n,in_tel in varchar2\n,in_mobile in varchar2\n,in_postal_code in varchar2\n,in_father_name in varchar2\n,in_birth_place in varchar2\n,in_grade in varchar2\n, INPAR_LOAN IN NUMBER \n, INPAR_BRANCH IN NUMBER \n, INPAR_DEPOSIT IN NUMBER \n)\nRETURN CLOB\nAS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  Sobhan.Sadeghzade \n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: az in function baraye sakhte queriye select , baraye filter kardane moshtari ha bar asase shart haye entekhab shode tavassote karbar, estefade mishavad\n  */\n--------------------------------------------------------------------------------\npragma autonomous_transaction;\n\nv_queri clob;\nv_queri_temp clob;\nv_where1 clob;\nv_where2 clob;\nv_where clob;\nv_tables varchar2(32000);\nv_columns varchar2(32000);\nv_result clob;\nv_count1 number;\nv_count2 number;\nBEGIN\n\n-------------------------------------------------------------------------------------\n--\n\nEXECUTE IMMEDIATE ' truncate table TBL_CUSTOMER_SEARCH_ITEM';\n\n\n--shart haye ke karbar entekhab mikonad dar in jadval insert mishavad\n--agar har yek az profile haye loan ya branch ya deposit entekhab shavand ,sotune value meghdar migirad .\ncommit;\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (1,'NAME',IN_NAME,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (2,'family',IN_FAMILY,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (3,'NAT_REG_CODE',IN_NAT_REG_CODE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (4,'P_LOAN',INPAR_LOAN,'l.\"customerId\"=c.CUS_ID');\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (5,'P_BRANCH',INPAR_BRANCH,'b.\"branchID\"=c.BRANCH_ID');\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (6,'P_DEPOSIT',INPAR_DEPOSIT,'d.\"customerId\"=c.CUS_ID');\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (7,'TYPE',IN_TYPE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (8,'GENDER',IN_GENDER,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (9,'TEL',IN_TEL,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (10,'MOBILE',IN_MOBILE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (11,'POSTAL_CODE',IN_POSTAL_CODE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (12,'FATHER_NAME',IN_FATHER_NAME,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (13,'BIRTH_PLACE',IN_BIRTH_PLACE,null);\ninsert into  TBL_CUSTOMER_SEARCH_ITEM (ID,COLUMN_TYPE,VALUE,CONDITION) values (14,'GRADE',IN_GRADE,null);\ncommit;\n---------------------------------------------------------------------------------------\n\nfor i in (select * from TBL_CUSTOMER_SEARCH_ITEM where id in (4,5,6) and value is not null)\nloop\n  v_queri_temp:=FNC_PROFILE_CREATE_QUERY(i.value,1);\n  \n  \n  if(v_queri_temp='select * from dual where 1\u003e2') then \n  v_queri:=null;\n  update TBL_CUSTOMER_SEARCH_ITEM set EXIST_PROFILE_DETAIL=0 where VALUE=i.VALUE;\n  end if;\n  commit;\n--\n   \n  if(v_queri_temp is null  ) then\n \n  if(i.column_type='P_LOAN')then\n  v_queri:='('||v_queri_temp||') l ,';\n  elsif(i.column_type='P_BRANCH')then\n  v_queri:='('||v_queri_temp||') b ,';\n  elsif(i.column_type='P_DEPOSIT')then\n  v_queri:='('||v_queri_temp||') d ,';\n  end if;--if(i.column_type='P_LOAN')then\n \n  elsif(v_queri_temp is not null  and v_queri_temp!='select * from dual where 1\u003e2') then --if(v_queri_temp is null) then\n  if(i.column_type='P_LOAN')then\n  v_queri:=v_queri||'('||v_queri_temp||') l ,';\n  elsif(i.column_type='P_BRANCH')then\n  v_queri:=v_queri||'('||v_queri_temp||') b ,';\n  elsif(i.column_type='P_DEPOSIT')then\n  v_queri:=v_queri||'('||v_queri_temp||') d ,';\n  end if; --if(i.column_type='P_LOAN')then\n \n  end if;\nend loop;\n\n-----------------------------------------------------------------------------------------------\nselect count (*) into v_count1 from TBL_CUSTOMER_SEARCH_ITEM where id in (1,2,3,7,8,9,10,11,12,13,14) and value is not null;  \nselect count (*) into v_count2 from TBL_CUSTOMER_SEARCH_ITEM where id in (4,5,6) and value is not null;  \n------------------- where\nif(v_count1!=0 and v_count2=0 or v_queri is null) then  --name,family,code\nSELECT LISTAGG('c.'||column_type||' like '||''''||''''||'%'||value||'%'||''''||'''',' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where1\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (1,2,3,7,8,9,10,11,12,13,14) and value is not null ;\nv_where:=v_where1;\n\nelsif(v_count1=0 and v_count2!=0 and v_queri is not null) then --profil ha\nSELECT LISTAGG(condition, ' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where2\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (4,5,6) and value is not null and  EXIST_PROFILE_DETAIL!=0;\nv_where:=v_where2;\n\nelsif(v_count1!=0 and v_count2!=0) then   \nSELECT LISTAGG('c.'||column_type||' like '||''''||''''||'%'||value||'%'||''''||'''',' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where1\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (1,2,3,9,10,11,12,13,14) and value is not null;\nSELECT LISTAGG(condition, ' and ') WITHIN GROUP (ORDER BY id ) \"where_condition\" into v_where2\nFROM TBL_CUSTOMER_SEARCH_ITEM where  id in (4,5,6) and value is not null and  EXIST_PROFILE_DETAIL!=0;\nv_where:=v_where1||' and '||v_where2;\n\nend if;\n\n---------------------------------------------------------------------------\n\nif (v_queri is not null) then \nv_result:='select c.name as \"customerName\",c.family as \"customerFamily\",c.CUS_ID as \"id\",c.type as \"type\",c.gender as \"GENDER\",c.tel as \"tel\", c.mobile as \"mobile\",c.postal_code as \"postal_code\", c.father_name as \"father_name\",c.birth_place as \"birth_place\",c.grade as \"mizane_tashilat\" from '||v_queri||'tbl_customer c where '||v_where;\n\nelsif( (v_queri is null or v_queri='(select * from dual where 1\u003e2) l ,' ) and v_where is null) then\nv_result:='select c.name as \"customerName\",c.family as \"customerFamily\",c.CUS_ID as \"id\",c.type as \"type\",c.gender as \"GENDER\",c.tel as \"tel\", c.mobile as \"mobile\",c.postal_code as \"postal_code\", c.father_name as \"father_name\",c.birth_place as \"birth_place\",c.grade as \"mizane_tashilat\"  from tbl_customer c ';\nelse\nv_result:='select c.name as \"customerName\",c.family as \"customerFamily\",c.CUS_ID as \"id\",c.type as \"type\",c.gender as \"GENDER\",c.tel as \"tel\", c.mobile as \"mobile\",c.postal_code as \"postal_code\", c.father_name as \"father_name\",c.birth_place as \"birth_place\",c.grade as \"mizane_tashilat\"  from tbl_customer c where '||v_where;\nend if;\n\nselect REPLACE(v_result, 'to_date(''', 'to_date(''') into v_result from dual;\nselect REPLACE(v_result, 'YYYY-MM-DD''', 'YYYY-MM-DD''') into v_result from dual;\n\nreturn v_result;\n  \nEND FNC_CUSTOMER_PAGING;"},{"Name":"FNC_LEDGER_ITEM","ObjectID":273588,"Digest":"a250d070d824b0c498a1158c23a46b616dbd4e4a93070b16ad7e1d2b2415fa72","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_LEDGER_ITEM\" ( INPAR_ID IN NUMBER ) RETURN VARCHAR2 AS\n IIDD   NUMBER;\n/*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Navid.Seddigh\n  Editor Name:\n  Release Date/Time:1396/04/11-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: bargardandane dadehaE daftare kol bar asase id daftar kol entekhabi.\n               \n  */\n  /*------------------------------------------------------------------------------*/\nBEGIN\n SELECT\n  MAX(ID)\n INTO\n  IIDD\n FROM TBL_LEDGER_PROFILE\n WHERE H_ID   = INPAR_ID\n GROUP BY\n  NAME;\n\n RETURN '\nSELECT distinct(td.CODE) as \"id\",\n(select distinct(max(depth)) from TBL_LEDGER_PROFILE_DETAIL)  as \"maxlev\" ,\n  td.NAME as \"text\",\n  td.PARENT_CODE as \"parent\",\n  td.DEPTH as \"level\" ,\n  tlp.ref_user \"user\"\nFROM (\nselect * from  TBL_LEDGER_PROFILE_DETAIL where REF_LEDGER_PROFILE = '\n|| IIDD || ' )  td , tbl_ledger_profile tlp\nwhere td.REF_LEDGER_PROFILE='\n|| IIDD || ' and tlp.id = td.REF_LEDGER_PROFILE\n--connect by prior CODE=PARENT_CODE\norder by depth\n ';\n \n \n \n \n \n  \nEND FNC_LEDGER_ITEM;"},{"Name":"FNC_REPORT_LIST","ObjectID":274240,"Digest":"6d9c501cc8e6d5aed66e9ed1e6b85635c33d6545a630de4c1bb310403f04d057","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_REPORT_LIST\" \n(\n  inpar_category IN VARCHAR2 ,\n  inpar_TYPE IN VARCHAR2 \n  \n) RETURN VARCHAR2 AS \noutpar_var varchar2(4000);\n  /*\n  Programmer Name: sobhan sadeghzadeh\n  Editor Name:\n  Release Date/Time:1396/04/27\n  Edit Name:\n  Version: 1\n  Category:\n  Description:\n  queri select baraye namayesh report ha bar asase \"category\" va \"type\"\n  */\nBEGIN\n  \n  \n  outpar_var:='select id as \"id\",name as \"name\",des as \"des\" from tbl_report where category='||''''||inpar_category||''''||' and  type='||''''||inpar_TYPE||'''';\n  \n  return outpar_var;\n  \nEND FNC_REPORT_LIST;"},{"Name":"FNC_NOTIFICATION","ObjectID":274311,"Digest":"b82ed768f6cbae145285218531a2c58b27e716ef2fbe7884a69c5dfbcd838e19","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_NOTIFICATION\" \n(\n  INPAR_OPT_TYPE IN VARCHAR2\n, INPAR_ID IN NUMBER  DEFAULT NULL\n, INPAR_TYPE IN VARCHAR2  DEFAULT NULL\n, INPAR_TITLE IN VARCHAR2 DEFAULT NULL\n, INPAR_STATUS IN VARCHAR2 DEFAULT NULL\n, INPAR_USER_ID IN NUMBER DEFAULT NULL\n, INPAR_DESCRIPTION IN VARCHAR2 DEFAULT NULL\n) RETURN NUMBER AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:\n  */\n  --------------------------------------------------------------------------------\npragma autonomous_transaction;\nVar_STATUS VARCHAR2(20);\nBEGIN\n\n\nIF INPAR_OPT_TYPE = 'insert' THEN \n  --=======INSERT================\nINSERT\nINTO TBL_NOTIFICATIONS\n  (\n   \n    TITLE,\n    TYPE,\n    REF_USER,\n    START_TIME,\n    STATUS,\n    DESCRIPTION\n  )\n  VALUES\n  (\n   \n    INPAR_TITLE,\n    INPAR_TYPE,\n    INPAR_USER_ID,\n    sysdate,\n    'progress',\n    INPAR_DESCRIPTION\n  );\n  \n END IF; \n \nIF INPAR_OPT_TYPE = 'upadate' THEN \n  --=======UPDATE================\n   UPDATE TBL_NOTIFICATIONS\n   SET STATUS           =INPAR_STATUS , END_TIME = sysdate\n   WHERE ID        = INPAR_ID\n   ;\n END IF; \n  return 1;\nIF INPAR_OPT_TYPE = 'delete' THEN\n  --=======DELETE================  \n  DELETE\n  FROM TBL_NOTIFICATIONS\n  WHERE ID        = INPAR_ID;\nEND IF;\nreturn 1;\nIF INPAR_OPT_TYPE = 'check' THEN\n  --=======CHECK STATUS================  \n  SELECT \n  STATUS\n  into Var_STATUS\n  FROM TBL_NOTIFICATIONS\n  \n  where ID = INPAR_ID;\n  return Var_STATUS ;\nEND IF;\n  \n  \nEND FNC_NOTIFICATION;"},{"Name":"FNC_GET_REPORT_PROFILE","ObjectID":274448,"Digest":"3069f2da68d41b469b5c95ff278cfe5f5ec25b57d8b8b9da403071a98a2fc7d1","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_REPORT_PROFILE\" \n(\n  INPAR_ID IN NUMBER \n\n) RETURN VARCHAR2 AS \n\n INPAR_OUT varchar2(4000);\n v_max_id number;\n   /*\n  Programmer Name: sobhan sadeghzadeh\n  Editor Name:\n  Release Date/Time:1396/04/31\n  Edit Name:\n  Version: 1\n  Category:\n  Description:\n  queri select  baraye namayesh akharin vaziat report bar asase h_id\n  */\n  \nBEGIN\n  \nselect max(id) into v_max_id from tbl_report where h_id= INPAR_ID; \n\n  \nINPAR_OUT:='select \nID                  as \"id\",\nNAME                as \"name\",\nDES                 as \"description\",\nCREATE_DATE         as \"createDate\",\nREF_USER            as \"user\",\nSTATUS              as \"status\",\nREF_LEDGER_PROFIEL  as \"ledgerProfileId\",\nREF_TIMING_PROFILE  as \"dateProfileId\",\nTIMING_PROFILE_TYPE as \"dateType\",\nREF_DEP_PROFILE     as \"depositProfileId\",\nREF_LON_PROFILE     as \"loanProfileId\",\nREF_BRN_PROFILE     as \"branchProfileId\",\nREF_CUS_PROFILE     as \"customerProfileId\",\nREF_CUR_PROFILE     as \"currencyProfileId\",\nVERSION             as \"version\",\nTYPE                as \"type\",\nCATEGORY            as \"category\" ,\nbazeh as \"isConflict\"\nfrom tbl_report where id='||v_max_id;\n\nreturn INPAR_OUT;\n  \nEND FNC_GET_REPORT_PROFILE;"},{"Name":"FNC_GET_REPORT_LIST","ObjectID":274471,"Digest":"714f30315deecfc95fd0e2832ed445077587ab2b5cdf5cf4a661dab9deb0ad7a","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_REPORT_LIST\" \n(\n  inpar_category IN VARCHAR2 ,\n  inpar_TYPE IN VARCHAR2 \n  \n) RETURN VARCHAR2 AS \noutpar_var varchar2(4000);\n  /*\n  Programmer Name: sobhan sadeghzadeh\n  Editor Name:\n  Release Date/Time:1396/04/27\n  Edit Name:\n  Version: 1\n  Category:\n  Description:\n  namayesh akharin vaziat har report e fa'al bar asase \"category\" va \"type\" \n  */\nBEGIN\n  \n  if(upper(inpar_category)  in ('COM','COM2','IDPS','CAR','LCR','NPL','NSFR','SENSIVITY','NIIM','IDPS','LEDGER-SENS','SENSITIVE','COMSTAT','CRINDEX','SHOCK','DURATION2','SENSANALYSIS'))\n  then\n  outpar_var:='select id as \"id\",name as \"name\",des as \"des\", ref_user as \"createdBy\",create_date as \"created\" from tbl_report where STATUS=1 and upper(category)='||''''||upper(inpar_category)||''''||' and  upper(type)='||''''||upper(inpar_TYPE)||''''||' order by id'; \n  else\n  outpar_var:='select max(h_id) as \"id\",name as \"name\",max(des) as \"des\", max(ref_user) as \"createdBy\",max(create_date) as \"created\" from tbl_report where STATUS=1 and upper(category)='||''''||upper(inpar_category)||''''||' and  upper(type)='||''''||upper(inpar_TYPE)||''''||' group by name';\n  end if;\n  \n  return outpar_var;\n  \nEND FNC_GET_REPORT_LIST ;"},{"Name":"FNC_GET_QUERY_REPORT","ObjectID":274547,"Digest":"fbfd68c25758681e413391c43c2f69c9d360b88c2703da3645376c03733b0d28","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_QUERY_REPORT\" ( INPAR_REF_REPREQ IN VARCHAR2) RETURN VARCHAR2 AS \n   /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name:  morteza.sahi \n  Editor Name: \n  Release Date/Time:1396/05/18-11:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: query derakht daftarkol nahaee ba maghadir ra barmigardanad\n  */\n/*------------------------------------------------------------------------------*/\n\n OUTPAR_REF_REPREQ   VARCHAR2(2000);\n VAR_REF_REPORT_ID   NUMBER;\n VAR_TIMING          VARCHAR2(1000);\n VAR_TIMING1         VARCHAR2(1000);\n VAR_CUR_TYPE        VARCHAR2(100);\n var_ledger_profile number;\n var_create_date varchar2(200);\n \nBEGIN\n SYS.DBMS_OUTPUT.ENABLE(3000000);\n /****** peyda kardane gozaresh entekhab shode ******/\n SELECT\n  REF_REPORT_ID\n INTO\n  VAR_REF_REPORT_ID\n FROM TBL_REPREQ\n WHERE ID = INPAR_REF_REPREQ;\n select ref_ledger_profile into var_ledger_profile from TBL_REPREQ where ID   = INPAR_REF_REPREQ;\n  /****** peyda kardane tarikh ijad ******/\n select to_char(REQ_DATE,'yyyy-mm-dd','nls_calendar=persian')  into var_create_date from TBL_REPREQ where id= INPAR_REF_REPREQ;\n \n\n /****** peyda kardane profile zamani entekhab shode baraye select nahaee ******/\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    ID ||\n    ' AS \"x' ||\n    REPLACE(ID,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  VAR_TIMING\n FROM TBL_REPPER\n WHERE REF_REPORT_ID           = VAR_REF_REPORT_ID\n  AND\n   TBL_REPPER.REF_REQ_ID   = INPAR_REF_REPREQ;\n /****** peyda kardane esme profile zamani entekhab shode baraye select nahaee ******/\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    '  \"x' ||\n    REPLACE(ID,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  VAR_TIMING1\n FROM TBL_REPPER\n WHERE REF_REPORT_ID           = VAR_REF_REPORT_ID\n  AND\n   TBL_REPPER.REF_REQ_ID   = INPAR_REF_REPREQ;\n /****** ijad kardane select nahaee az TBL_REPVAL ******/\n SELECT\n  '\nselect \"id\",\"parent\",\"text\", \"mande\",\"other\",' ||\n  VAR_TIMING1 ||\n  ',\"level\" , '''||var_create_date ||''' \"createDate\" ,c.type \"type\"  from(\nSELECT \n * FROM\n(\nSELECT *\nFROM   (SELECT \n  tr.REF_REPPER_ID,\n  tr.LEDGER_CODE as \"id\",\n   tr.name as \"text\",\n  tr.VALUE,\n  tr.PARENT_CODE as \"parent\",\n  tr.depth as \"level\"\n FROM  (select  REF_REPPER_ID,LEDGER_CODE,name,PARENT_CODE,depth,VALUE,mande from TBL_REPVAL where  REF_REPREQ_ID ='||INPAR_REF_REPREQ||' )tr)\nPIVOT  (sum(nvl(VALUE,0))  FOR (REF_REPPER_ID) IN (' ||\n  VAR_TIMING ||\n  ' ,0 AS \"mande\" \n  ,-1 AS \"other\"))\nORDER BY \"id\"\n)a)b left join (\n\n\nselect LEDGER_CODE,''nrs'' as type from pragg.TBL_LEDGER  \nCONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\nstart WITH PARENT_CODE in( \n\nSELECT  LEDGER_CODE  FROM pragg.TBL_LEDGER_type   where TYPE = ''nrs'' \n)\nunion\nselect LEDGER_CODE,''rsl''  from pragg.TBL_LEDGER   \nCONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\nstart WITH PARENT_CODE in( \n\nSELECT  LEDGER_CODE  FROM pragg.TBL_LEDGER_type  where TYPE = ''rsl'' \n)\nunion\nselect LEDGER_CODE,''rsa''  from pragg.TBL_LEDGER   \nCONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\nstart WITH PARENT_CODE in( \n\nSELECT  LEDGER_CODE  FROM pragg.TBL_LEDGER_type  where TYPE = ''rsa'' \n)\nunion\nselect tl.LEDGER_CODE,tlt.type  from pragg.TBL_LEDGER tl ,pragg.TBL_LEDGER_TYPE tlt\nwhere \ntlt.LEDGER_CODE = tl.LEDGER_CODE\n\n\n) c\non c.LEDGER_CODE = b.\"id\" \nORDER BY \"id\"'\n INTO\n  OUTPAR_REF_REPREQ\n FROM DUAL;\n\n RETURN OUTPAR_REF_REPREQ;\nEND FNC_GET_QUERY_REPORT;"},{"Name":"FNC_GET_DETAIL_TIMING","ObjectID":274548,"Digest":"7884b0923a5fdae8f8fd2bc9654857f7815ca3f3dbac6d26bccfd69097c67c85","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_DETAIL_TIMING\" \n(\n  inpar_ref_repreq IN VARCHAR2 \n) RETURN VARCHAR2 AS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  morteza.sahi \n  Editor Name: \n  Release Date/Time:1396/05/22-13:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:bar asas gozaresh entekhab shode etelaate profile zamani ke entekhab karde ra bar migardanad\n  */\n--------------------------------------------------------------------------------\nvar_REF_REPORT_ID number;\nBEGIN\nselect REF_REPORT_ID into var_REF_REPORT_ID from  TBL_REPREQ where id = inpar_ref_repreq;\n\n\n  RETURN 'select ID \"value\",PERIOD_NAME \"header\",PERIOD_COLOR \"color\" from tbl_repper where REF_REPORT_ID ='||var_REF_REPORT_ID||' and REF_REQ_ID = '||inpar_ref_repreq||'';\nEND FNC_GET_DETAIL_TIMING;"},{"Name":"GET_QUERY_GAP","ObjectID":274678,"Digest":"16283dca74549fade07e47610c4a825a3d582d8a4f2e107720f2865519ba2c6d","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"GET_QUERY_GAP\" ( INPAR_REF_REQ_ID IN NUMBER ) RETURN VARCHAR2 AS \n/*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name:  morteza.sahi \n  Editor Name: \n  Release Date/Time:1396/05/18-16:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: query shekaf ra bar migardanad\n  */\n/*------------------------------------------------------------------------------*/\n\n VAR_REF_REPORT_ID        NUMBER;\n VAR_REF_LEDGER_PROFILE   NUMBER;\n VAR_TIMING               VARCHAR2(1000);\n VAR_TIMING1              VARCHAR2(1000);\n VAR_HID_LEDGER_PROFILE   NUMBER;\nBEGIN\n SYS.DBMS_OUTPUT.ENABLE(3000000);\n  /****** peyda kardane gozaresh entekhab shode ******/\n SELECT\n  REF_REPORT_ID\n INTO\n  VAR_REF_REPORT_ID\n FROM TBL_REPREQ\n WHERE ID   = INPAR_REF_REQ_ID;\n /****** peyda kardane profile daftarkol ******/\n\n SELECT\n  REF_LEDGER_PROFILE\n INTO\n  VAR_REF_LEDGER_PROFILE\n FROM TBL_REPORT_PROFILE\n WHERE REF_REPORT   = VAR_REF_REPORT_ID;\n /****** peyda kardane id asli profile daftarkol entekhab shode ******/\n\n SELECT\n  H_ID\n INTO\n  VAR_HID_LEDGER_PROFILE\n FROM TBL_LEDGER_PROFILE\n WHERE ID   = VAR_REF_LEDGER_PROFILE;\n  /****** peyda kardane gozaresh entekhab shode ******/\n\n SELECT\n  REF_REPORT_ID\n INTO\n  VAR_REF_REPORT_ID\n FROM TBL_REPREQ\n WHERE ID   = INPAR_REF_REQ_ID;\n /****** peyda kardane profile zamani entekhab shode baraye select nahaee ******/\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    ID ||\n    ' AS \"x' ||\n    REPLACE(ID,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  VAR_TIMING\n FROM TBL_REPPER\n WHERE REF_REPORT_ID           = VAR_REF_REPORT_ID\n  AND\n   TBL_REPPER.REF_REQ_ID   = INPAR_REF_REQ_ID;\n /****** peyda kardane esme profile zamani entekhab shode baraye select nahaee ******/\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    '  \"x' ||\n    REPLACE(ID,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  VAR_TIMING1\n FROM TBL_REPPER\n WHERE REF_REPORT_ID           = VAR_REF_REPORT_ID\n  AND\n   TBL_REPPER.REF_REQ_ID   = INPAR_REF_REQ_ID;\n /****** ijad kardane select nahaee az TBL_REPVAL ******/\n\n RETURN '\nselect  ' ||\n VAR_TIMING1 ||\n ' from\n(\nselect  REF_REPPER_ID,sum(value) as VALUE from tbl_repval where PARENT_CODE = ' ||\n VAR_HID_LEDGER_PROFILE ||\n ' and ref_repreq_id =' ||\n INPAR_REF_REQ_ID ||\n ' \ngroup by REF_REPPER_ID  )\nPIVOT  (max(nvl(VALUE,0))  FOR (REF_REPPER_ID) IN (' ||\n VAR_TIMING ||\n '))';\n\n\nEND GET_QUERY_GAP;"},{"Name":"FNC_GET_REPORT_ARCHIVE","ObjectID":275271,"Digest":"e7cb449f4d5ac68b1f38f725048e09f750cd6fa7cdf8b4e38ca1560669c8ca27","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_REPORT_ARCHIVE\" RETURN VARCHAR2 AS \nBEGIN\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:\n  */\n  --------------------------------------------------------------------------------\nreturn \n'SELECT\n REQ.ID AS \"id\"\n ,REP.NAME AS \"name\"\n ,REF_USER_ID AS \"user\"\n ,REQ.TYPE AS \"type\"\n ,REQ.CATEGORY AS \"cat\"\n ,TO_CHAR(REQ.REQ_DATE,''yyyy/MM/dd'') AS \"requestDate\"\n ,TO_CHAR(REQ.DATA_DATE,''yyyy/MM/dd'') AS \"dataDate\"\n ,TO_CHAR(REQ.READY_DATE,''yyyy/MM/dd'') AS \"readyDate\"\n ,REQ.STATUS AS \"status\"\n ,REP.H_ID AS \"profileId\"\n ,REP.ID AS \"repId\"\nFROM pragg.TBL_REPREQ REQ\n JOIN pragg.TBL_REPORT REP ON REQ.REF_REPORT_ID   = REP.ID \norder by  \"id\" desc';\n\nEND FNC_GET_REPORT_ARCHIVE;"},{"Name":"FNC_CURRENCT_RATE","ObjectID":275342,"Digest":"7d1cadde0ee7dce2d049637f53b7c2dd3b520d01f6603cc202bbd7dea5cf2649","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_CURRENCT_RATE\" (\n    INPAR_CUR_ID IN NUMBER )\n  RETURN NUMBER\nAS\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  Rasool.Jahani \n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:bargardandan nerkh barabari arz ha.\n  */\n--------------------------------------------------------------------------------\n  var_rate NUMBER;--test diff\nBEGIN\nif(INPAR_CUR_ID = 4) then RETURN 1;\nelse\n  FOR i IN\n  (SELECT CHANGE_RATE ,\n    DEST_CUR_ID ,\n    REL_DATE ,\n    SRC_CUR_ID\n  FROM TBL_CURRENCY_REL\n  WHERE REL_DATE \u003e sysdate -30\n  AND SRC_CUR_ID = INPAR_CUR_ID\n  and DEST_CUR_ID = 4\n  ORDER BY REL_DATE DESC\n  )\n  LOOP\n    IF (i.CHANGE_RATE IS NOT NULL) THEN\n      var_rate        := i.CHANGE_RATE;\n      RETURN var_rate;\n    ELSE\n      RETURN 0;\n    END IF;\n  END LOOP;\n  end if;\nRETURN 0;\nEND FNC_CURRENCT_RATE;"},{"Name":"FNC_GET_LEDGER_REPORT","ObjectID":276020,"Digest":"1c3645768f62ad4c21256b0aed24a7184a6b6d8025a8081a0987998d6e9ef78d","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_LEDGER_REPORT\" (\n INPAR_DATE       IN VARCHAR2\n ,INPAR_CURRENCY   IN VARCHAR2\n) RETURN VARCHAR2 AS\n VAR_DATE   VARCHAR2(200);\nBEGIN /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:\n  */\n  /*------------------------------------------------------------------------------*/\n IF\n  ( ( TRUNC(TO_DATE(INPAR_DATE,'yyyy-mm-dd') ) ) = ( TRUNC(SYSDATE) ) )\n THEN\n  SELECT /*+   PARALLEL(auto) */\n   MAX(TO_CHAR(EFF_DATE,'yyyy-mm-dd') )\n  INTO\n   VAR_DATE\n  FROM TBL_LEDGER_ARCHIVE;\n\n ELSE\n  VAR_DATE   := INPAR_DATE;\n END IF;\n\n IF\n  ( INPAR_CURRENCY = '*' )\n THEN\n  RETURN 'SELECT  /*+   PARALLEL(auto) */   LEDGER_CODE \"id\",\n  max(NAME) \"text\",\n  max(DEPTH) \"level\",\n  max(PARENT_CODE) \"parent\",\n  sum(BALANCE) \"x0\",\n  ''' ||\n  VAR_DATE ||\n  '''  \"date\"\n  FROM TBL_LEDGER_ARCHIVE \nwhere  trunc(eff_date) = to_date(''' ||\n  VAR_DATE ||\n  ''',''yyyy-mm-dd'')\ngroup by ledger_code\norder by ledger_code\n ';\n ELSE\n  RETURN 'SELECT  /*+   PARALLEL(auto) */   LEDGER_CODE \"id\",\n  max(NAME) \"text\",\n  max(DEPTH) \"level\",\n  max(PARENT_CODE) \"parent\",\n  sum(BALANCE) \"x0\",\n  ''' ||\n  VAR_DATE ||\n  '''  \"date\"\n  FROM TBL_LEDGER_ARCHIVE \n  where ref_cur_id in (' ||\n  INPAR_CURRENCY ||\n  ') \nand trunc(eff_date) = to_date(''' ||\n  VAR_DATE ||\n  ''',''yyyy-mm-dd'')\ngroup by ledger_code\norder by ledger_code\n';\n END IF;\n\nEND FNC_GET_LEDGER_REPORT;"},{"Name":"FNC_GET_DASHBOARD_DAILY_REPORT","ObjectID":276049,"Digest":"6a6fea4fa80c7f81f3c170c9756f70ddba02a02f981be197e760ba46fa465b6b","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_DASHBOARD_DAILY_REPORT\" \n  RETURN VARCHAR2\nAS\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  morteza.sahi\n  Editor Name: \n  Release Date/Time:1396/05/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: query gozareshe rozane dashboard az jadvale TBL_DASHBOARD_DAILY_REPORT\n  */\n--------------------------------------------------------------------------------\n\nBEGIN\nreturn'\n  SELECT TO_CHAR (DUE_DATE, ''yyyy/mm/dd'', ''nls_calendar=persian'') AS \"date\",\n    IN_FLOW                                                       AS \"input\",\n    OUT_FLOW                                                      AS \"output\",\n    GAP                                                           AS \"gap\"\n  FROM TBL_DASHBOARD_DAILY_REPORT\n where DUE_DATE \u003e sysdate\n  ORDER BY DUE_DATE';\nEND FNC_GET_DASHBOARD_DAILY_REPORT;"},{"Name":"FNC_GET_DASHBOARD_LEDGER_PIE","ObjectID":276067,"Digest":"06146dae61a2550247852e49d4e76c2bd4f961bc9beca39ea7092ae4d8133cfd","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_DASHBOARD_LEDGER_PIE\" RETURN VARCHAR2 PARALLEL_ENABLE AS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:   morteza.sahi\n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: query az TBL_LEDGER_ARCHIVE bareye arzhaye riali va fagat sath yeke derakht (gozaresh mande daftar kol dashboard)\n  */\n--------------------------------------------------------------------------------\nBEGIN\n  RETURN 'SELECT /*+   PARALLEL(auto) */  rownum AS \"id\",\n  LEDGER_CODE   as \"nodeId\",\n  NAME  AS \"name\",\n  BALANCE AS \"y\"\nFROM TBL_LEDGER_ARCHIVE\nWHERE eff_date =\n  (select to_date(max(substr(partition_name,2)),''j'') from user_TAB_PARTITIONS where table_name = ''TBL_LEDGER_ARCHIVE''\n  )\nAND depth      = 1\nAND ref_cur_id = 4\nand LEDGER_CODE  not in (9,0)\norder by LEDGER_CODE\n';\nEND FNC_GET_DASHBOARD_LEDGER_PIE;"},{"Name":"FNC_GET_LEDGER_DEPTH","ObjectID":276087,"Digest":"8f5412909f38dbd204c9a481b3706d0e3fb79d553b290242a2abc61334245d6a","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_LEDGER_DEPTH\" \n(\n  INPAR_REPORT_ID IN NUMBER \n)RETURN NUMBER AS \nVAR_REPREQ_ID NUMBER;\nVAR_MAXDEPTH NUMBER;\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n   SELECT ID Into VAR_REPREQ_ID FROM TBL_REPREQ where Ref_Report_Id = Inpar_Report_Id ;\n   \n   SELECT distinct MAX(DEPTH)INTO VAR_MAXDEPTH FROM TBL_REPVAL where Id = Var_Repreq_Id ;\n  RETURN VAR_MAXDEPTH;\nEND FNC_GET_LEDGER_DEPTH;"},{"Name":"FNC_REPORT_SETTING","ObjectID":276097,"Digest":"bfbea3b1afbfdda9b854004623f740c9a7154456d533e9038c3cf51974c7df81","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_REPORT_SETTING\" (\nINPAR_REP_ID IN NUMBER\n,  INPAR_SHOW_SAYER IN VARCHAR2 \n, INPAR_SHOW_MANDE IN VARCHAR2 \n, INPAR_LEVELS IN VARCHAR2\n\n) RETURN VARCHAR2 AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:\n  */\n  --------------------------------------------------------------------------------\npragma autonomous_transaction;\nvar_rep_Id number;\nBEGIN\n\nselect count(*) into var_rep_id from Tbl_Report_Setting where Rep_Id = inpar_rep_id;\n\nif (Var_Rep_Id != 0) then\n\nUPDATE TBL_REPORT_SETTING\nSET Show_Sayer=Inpar_Show_Sayer,Show_Mande=Inpar_Show_Mande , Levels = Inpar_Levels where Rep_Id = Inpar_Rep_Id;\nCommit;\n      RETURN 1;\n\n  else\n  INSERT\nINTO TBL_REPORT_SETTING\n  (\n   \n    SHOW_SAYER,\n    SHOW_MANDE,\n    LEVELS,\n    REP_ID\n  )\n  VALUES\n  (\n    INPAR_SHOW_SAYER,\n    INPAR_SHOW_MANDE,\n    INPAR_LEVELS,\n    INPAR_REP_ID\n  );\n  commit;\n    RETURN 1;\n  end if;\nEND FNC_REPORT_SETTING;"},{"Name":"FNC_DASHBOARD_PROFILE","ObjectID":276114,"Digest":"14bb54a6a93381eb3b352bd8fcbeece94c679dbe9239cadc352f60c1b60a6136","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_DASHBOARD_PROFILE\" return varchar2 as \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  navid\n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:\n  */\n--------------------------------------------------------------------------------\nbegin\n  return 'SELECT REF_LEDGER_PROFILE as \"ledgerProfileId\",\n  REF_TIMING_PROFILE as \"timingProfileId\",\n  ID as \"id\",\n  TYPEE as \"type\"\nFROM TBL_DASHBOARD_PROFILE';\nend fnc_dashboard_profile;"},{"Name":"FNC_GET_REPORT_SETTING","ObjectID":276117,"Digest":"7fa1379dcf5e5f4d89200f040cd43592c6b5783aa6aa72a6e0bbb08759676adf","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_REPORT_SETTING\" (\nINPAR_REP_ID IN NUMBER\n\n) RETURN VARCHAR2 AS \n\nBEGIN\n\nreturn 'SELECT SHOW_SAYER as \"sayer\", SHOW_MANDE as \"mande\", LEVELS as \"levels\" , rep_id as \"id\" FROM TBL_REPORT_SETTING where  REP_ID  = '||INPAR_REP_ID ;\nEND FNC_GET_REPORT_SETTING;"},{"Name":"FNC_DASHBOURD_STATE","ObjectID":276123,"Digest":"ee27a6e63fc0d0b968a5f0c289b86265ebd2e54032c767b189ff7a031cc07b48","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_DASHBOURD_STATE\" \nRETURN VARCHAR2 AS \n /*\n  Programmer Name: sobhan sadeghzadeh\n  Editor Name:\n  Release Date/Time:1396/05/17\n  Edit Name:\n  Version: 1\n  Category:\n  Description:\n  mande daftar kol be tafkik ostan\n  */\n\nBEGIN\n  RETURN 'select STATE_ID as \"hc-key\",NODE_ID  as \"nodeId\",BALANCE as \"value\" from TBL_DASHBOaRD_STATE order by \"hc-key\",\"nodeId\"';\nEND FNC_DASHBOURD_STATE;"},{"Name":"FNC_GET_DATE_ARCHIVE","ObjectID":276192,"Digest":"ac960b6780be31cdfe4b6647c94242bd3922a99b71761495cbab6f85081bf621","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_DATE_ARCHIVE\" RETURN VARCHAR2 AS \n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:bargardandan tarikhhay arshiv dade.\n  */\n  --------------------------------------------------------------------------------\nBEGIN\n \n \n \n return 'select ''1398/03/10'' as \"date\" from dual';\n \n--  RETURN 'SELECT WMSYS.Wm_Concat(to_char(REAL_TIME,''yyyy/mm/dd'',''nls_calendar=persian'')) as \n--FROM ARCHIVE_RAW_BANK_DATA.TBL_ARCHIVE_DATES@pragg_to_archive \n--where EXISTENT = 1';\nEND FNC_GET_DATE_ARCHIVE;"},{"Name":"FNC_GET_ARCH_AVA_DATES","ObjectID":276357,"Digest":"c94de7da9014570769639d6ffda8165ce02c0f0cc3ff4484a57a1a67be0601a7","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_ARCH_AVA_DATES\" RETURN VARCHAR2 AS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  Rasool.Jahani\n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:Bargardandan tarikh hay mojod baray arshiv\n  */\n--------------------------------------------------------------------------------\nBEGIN\n  RETURN 'SELECT 1 as \"id\" , WMSYS.Wm_Concat(to_char(ARCHIVE_DATE,''yyyy-mm-dd'',''nls_calendar=persian'')) as \"date\"\nFROM ARCHIVE_RAW_BANK_DATA.TBL_ARCHIVE_DATES@pragg_to_archive \nwhere EXISTENT = 1';\nEND FNC_GET_ARCH_AVA_DATES;"},{"Name":"FNC_GET_ARCH_REQ_DATES","ObjectID":276363,"Digest":"05250141ed12f0b001e988ac1876cf62ba9822a773426c22fb65caf09ac7e02b","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_ARCH_REQ_DATES\" RETURN VARCHAR2 AS \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  Rasool.Jahani \n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:Bargardandan tarikhhayi ke tavasot karbar baray \n              arshiv sabt shode ast.\n  */\n--------------------------------------------------------------------------------\nBEGIN\n  RETURN 'SELECT 2 as \"id\" , WMSYS.Wm_Concat(to_char(ARCHIVE_DATE,''yyyy-mm-dd'',''nls_calendar=persian'')) as \"date\"\nFROM ARCHIVE_RAW_BANK_DATA.TBL_ARCHIVE_DATES@pragg_to_archive \n';\nEND FNC_GET_ARCH_REQ_DATES;"},{"Name":"FNC_GET_QUERY_DASHBOARD_GAP","ObjectID":276390,"Digest":"929228a0f0c321d0f077ec9e9d769749095870c16f93633c17027eeb0ee407a5","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_QUERY_DASHBOARD_GAP\" RETURN VARCHAR2\n AS \n/*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name:  morteza.sahi \n  Editor Name: \n  Release Date/Time:1396/05/18-10:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:gozareshe shekaf riali ke dar inja be ezaye profile zamani va daftar koli ke entekhab shode \n  vorodi va khorogi  hara mohasebe va be samt js ferestade mishavad a dar anja az han kam mishavand\n  */\n/*------------------------------------------------------------------------------*/\nBEGIN\n RETURN 'SELECT PERIODID AS \"PeriodId\",\n  VALUE_IN      AS \"value\",\n  NAME          AS \"name\",\n  ''1''           AS \"type\"\nFROM TBL_DASHBOARD_GAP_RIALI\nUNION\nSELECT PERIODID AS \"PeriodId\",\n abs( VALUE_OUT)     AS \"value\",\n  NAME          AS \"name\",\n  ''2''           AS \"type\"\nFROM TBL_DASHBOARD_GAP_RIALI  '\n;\nEND FNC_GET_QUERY_DASHBOARD_GAP;"},{"Name":"FNC_GET_DASHBOARD_GAP_STATE","ObjectID":276441,"Digest":"8cae5e56ddeca371ad83735b838ca61d15e073db7fc842f20ab2d92d3860f1a4","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_DASHBOARD_GAP_STATE\" RETURN VARCHAR2\n AS \n/*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name:  morteza.sahi\n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: query gozareshe shekaf ostani az TBL_DASHBOARD_GAP_STATE\n  */\n/*------------------------------------------------------------------------------*/\nBEGIN\n  /****** be dalil darkhast bachehaye js (javid)  maghadir baraye har ostan ba code sabete oon ostan dade shode\n  ke bareye in kar  majbor shodim az jadval TBL_DASHBOARD_GAP_STATE be sorat PIVOT select begirim  ******/\n RETURN 'select \"name\" ,\"periodId\",\"type\",sysdate \"date\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\" from (\nSELECT *\nFROM\n  (SELECT STATE_CODE,\n    abs(VALUE_OUT) as VALUE_OUT,\n    PERIOD_NAME as \"name\",\n    PERIOD_ID as \"periodId\",\n    2 as \"type\"\n  FROM TBL_DASHBOARD_GAP_STATE\n  WHERE VALUE_in                        IS NULL\n  ) PIVOT ( MAX(VALUE_OUT) FOR STATE_CODE IN ( 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31) )\n  )\nunion\nselect \"name\" ,\"periodId\",\"type\",sysdate \"date\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\" from (\nSELECT *\nFROM\n  (SELECT STATE_CODE,\n    abs(VALUE_in) as VALUE_in,\n    PERIOD_NAME as \"name\",\n    PERIOD_ID as \"periodId\",\n    1 as \"type\"\n  FROM TBL_DASHBOARD_GAP_STATE\n  WHERE VALUE_out                        IS NULL\n  ) PIVOT ( MAX(VALUE_in) FOR STATE_CODE IN ( 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31) )\n  )  order by \"name\" desc\n'\n;\nEND FNC_GET_DASHBOARD_GAP_STATE;"},{"Name":"FNC_GET_USERS","ObjectID":276462,"Digest":"9cb9799524800395f0155c20662627f4985bef8218d9f34affc457ea19539bd4","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_USERS\" RETURN VARCHAR2 AS \nBEGIN\n--------------------------------------------------------------------------------\n  /*\n  Programmer Name:  \n  Editor Name: \n  Release Date/Time:1396/03/22-15:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description:\n  */\n--------------------------------------------------------------------------------\n  return 'select ID as \"id\", NAME as \"name\",USERNAME as \"username\", EMAIL \"email\" from tbl_users where DELETE_DATE is null';\n\n  \nEND FNC_GET_USERS;"},{"Name":"FNC_GET_LEDGER_AVA_DATES","ObjectID":276655,"Digest":"3c941fc4af1234bb8c5edc61258edebe3c8eadc2a6bebcab7f00d93b103256a5","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_LEDGER_AVA_DATES\" \nRETURN varchar2 AS\n --------------------------------------------------------------------------------\n  /*\n  Programmer Name: Rasool.Jahani\n  Editor Name:\n  Release Date/Time:1396/05/21-10:00\n  Edit Name:\n  Version: 1\n  Description:\n  */\n  --------------------------------------------------------------------------------\n--BEGIN\n--  RETURN 'SELECT  /*+   PARALLEL(auto) */ 1 as \"id\" , WMSYS.Wm_Concat(to_char(EFF_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\n--FROM (select distinct EFF_DATE from  TBL_LEDGER_ARCHIVE)';\n--END FNC_GET_LEDGER_AVA_DATES;\n\n\nBEGIN\n  RETURN '\n SELECT  /*+   PARALLEL(auto) */ 1 as \"id\" , WMSYS.Wm_Concat(to_char(EFF_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\nFROM ( select to_date(SUBSTR(PARTITION_NAME,2),''j'') as eff_date from ALL_TAB_PARTITIONS where  table_name= ''TBL_LEDGER_ARCHIVE'')';\nEND FNC_GET_LEDGER_AVA_DATES;"},{"Name":"FNC_PAGE_NUMBER","ObjectID":272497,"Digest":"2f5b3864f455f0b4a1d7fe64fbf7438f89fd39034f52db74933209768cb373c2","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PAGE_NUMBER\" \n--------------------------------------------------------------------------------\n    /*\n  Programmer Name: Navid Sedigh\n  Release Date/Time:1396/04/1\n  Version: 1.0\n  Category:2\n  Description: YEK QUERY V PAGE-SIZE V PAGE-NUMBER MIGIRE VA DADEHASHO PAS MIDE\n  */\n--------------------------------------------------------------------------------  \n(\n  INAPR_PAGE_SIZE IN NUMBER ,\n INPAR_QUERY IN VARCHAR2 \n) RETURN varchar2 AS \n LOC_QUERY VARCHAR2(4000);\n LOC_CNT varchar2(4000);\nBEGIN\n -- LOC_QUERY :='SELECT FLOOR((COUNT(*)/'|| INAPR_PAGE_SIZE ||')+1)  FROM ('||INPAR_QUERY||')';\n  LOC_QUERY :='select count(*) from('||INPAR_QUERY||')';\n  EXECUTE IMMEDIATE LOC_QUERY INTO LOC_CNT;\n  RETURN LOC_CNT;\nEND FNC_PAGE_NUMBER;"},{"Name":"FNC_PAGE_NUMBER2","ObjectID":277236,"Digest":"8c742c4aaf29edbf9d19ee95b07a71d3b391d137c72baef7dab02638203e7541","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PAGE_NUMBER2\" \n--------------------------------------------------------------------------------\n    /*\n  Programmer Name: Navid Sedigh\n  Release Date/Time:1396/04/1\n  Version: 1.0\n  Category:2\n  Description: YEK ID PROFILE V PAGE-SIZE V PAGE-NUMBER MIGIRE VA DADEHASHO PAS MIDE\n  */\n--------------------------------------------------------------------------------  \n(\n  INAPR_PAGE_SIZE IN NUMBER ,\n inpar_id IN number \n \n) RETURN number AS \n\n\n LOC_QUERY clob;\n LOC_CNT number;\n var clob;\n \nBEGIN\n\n  -- var:=to_char(var);\n    \n    select FNC_PROFILE_CREATE_QUERY(inpar_id,0) into var from dual;\n    \n\n -- LOC_QUERY :='SELECT FLOOR((COUNT(*)/'|| INAPR_PAGE_SIZE ||')+1)  FROM ('||INPAR_QUERY||')';\n  LOC_QUERY :='select count(*) from('||var||')';\n  EXECUTE IMMEDIATE LOC_QUERY INTO LOC_CNT;\n  RETURN LOC_CNT;\nEND FNC_PAGE_NUMBER2;"},{"Name":"FNC_PAGING_QUERY2","ObjectID":277237,"Digest":"ce19e0bfe2521bfbc31fc2c40ae7557fd581726756b35e16078f2b02a82af4b8","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PAGING_QUERY2\" \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid Sedigh\n  Release Date/Time:1396/04/1\n  Version: 1.0\n  Category:2\n  Description: YEK QUERY V PAGE-SIZE V PAGE-NUMBER MIGIRE VA DADEHASHO PAS MIDE\n  */\n--------------------------------------------------------------------------------  \n(\n  INPAR_PAGE_SIZE IN NUMBER \n, INPAR_PAGE_NUMBER IN NUMBER \n, INPAR_QUERY IN number\n) RETURN clob AS \nvar clob;\n  LOC_QUERY clob; \n  total_number number:=FNC_PAGE_NUMBER2(INPAR_PAGE_SIZE,INPAR_QUERY) ;\n  LOC_LOW NUMBER := (INPAR_PAGE_NUMBER-1)*INPAR_PAGE_SIZE+1; \n  LOC_UP NUMBER := INPAR_PAGE_NUMBER*INPAR_PAGE_SIZE; \nBEGIN\n\n  if (LOC_UP\u003etotal_number) then \n  LOC_UP:=total_number;\n  end if;\n\n   select FNC_PROFILE_CREATE_QUERY(INPAR_QUERY,0) into var from dual;\n\n\n  LOC_QUERY := 'SELECT * FROM (\n                              SELECT ROWNUM \"رديف\", t.*\n                              FROM (' || var ||')T)\n                              WHERE  \"رديف\" BETWEEN ' || LOC_LOW || ' AND ' ||LOC_UP;\n RETURN LOC_QUERY;\nEND FNC_PAGING_QUERY2;"},{"Name":"FNC_PAGE_NUMBER_CUSTOMER","ObjectID":277280,"Digest":"57f819248599a19fd0b23a1ec0ca8d4d9e49329d72f4d6a364484523285dde81","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PAGE_NUMBER_CUSTOMER\" \n--------------------------------------------------------------------------------\n    /*\n  Programmer Name: Navid Sedigh\n  Release Date/Time:1396/06/1 : 10:00\n  Version: 1.0\n  Category:2\n  Description: YEK QUERY V PAGE-SIZE V PAGE-NUMBER MIGIRE VA DADEHASHO PAS MIDE\n  */\n--------------------------------------------------------------------------------  \n(\n  INAPR_PAGE_SIZE IN NUMBER ,\n \nIN_NAME IN VARCHAR2 \n, IN_FAMILY IN VARCHAR2 \n, IN_NAT_REG_CODE IN VARCHAR2 \n,in_type in varchar2\n,in_gender in varchar2\n,in_tel in varchar2\n,in_mobile in varchar2\n,in_postal_code in varchar2\n,in_father_name in varchar2\n,in_birth_place in varchar2\n,in_grade in varchar2\n, INPAR_LOAN IN NUMBER \n, INPAR_BRANCH IN NUMBER \n, INPAR_DEPOSIT IN NUMBER \n) RETURN number AS \n\n\n LOC_QUERY clob;\n LOC_CNT number;\n var clob;\n \nBEGIN\n\n  -- var:=to_char(var);\n    \n    select FNC_CUSTOMER_SEARCHING_ENG(IN_NAME ,IN_FAMILY , IN_NAT_REG_CODE ,in_type,in_gender,in_tel,in_mobile,in_postal_code ,in_father_name,in_birth_place,in_grade,INPAR_LOAN,INPAR_BRANCH,INPAR_DEPOSIT) into var from dual ;\n    \n\n -- LOC_QUERY :='SELECT FLOOR((COUNT(*)/'|| INAPR_PAGE_SIZE ||')+1)  FROM ('||INPAR_QUERY||')';\n  LOC_QUERY :='select count(*) from('||var||')';\n  EXECUTE IMMEDIATE LOC_QUERY INTO LOC_CNT;\n  RETURN LOC_CNT;\nEND FNC_PAGE_NUMBER_customer;"},{"Name":"FNC_PAGING_QUERY_CUSTOMER","ObjectID":277281,"Digest":"6cb3348a31432af5d4030a2394962187a46f4bab10834d8a713e8876a2b6caf7","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_PAGING_QUERY_CUSTOMER\" \n--------------------------------------------------------------------------------\n  /*\n  Programmer Name: Navid Sedigh\n  Release Date/Time:1396/06/1 : 16:00\n  Version: 1.0\n  Category:2\n  Description: TAMAME ETELAATI KE BARAE FILTER MOSHTARI LAZEM DARAD\n               RA MIGIRAD V YEK QUERY SELECT TAVASOTE FUNCTION ZIR\n               MISAZAD:\n               FNC_PAGE_NUMBER_customer(INPAR_PAGE_SIZE,IN_NAME,IN_FAMILY,IN_NAT_REG_CODE,INPAR_LOAN,INPAR_BRANCH,INPAR_DEPOSIT)\n               VA DADEHASHO KE NATIJE EJRAE SELECT FOGH AST RA PAS MIDE.\n  */\n--------------------------------------------------------------------------------  \n(\n  INPAR_PAGE_SIZE IN NUMBER \n, INPAR_PAGE_NUMBER IN NUMBER \n,IN_NAME IN VARCHAR2 \n, IN_FAMILY IN VARCHAR2 \n, IN_NAT_REG_CODE IN VARCHAR2 \n,in_type in varchar2\n,in_gender in varchar2\n,in_tel in varchar2\n,in_mobile in varchar2\n,in_postal_code in varchar2\n,in_father_name in varchar2\n,in_birth_place in varchar2\n,in_grade in varchar2\n, INPAR_LOAN IN NUMBER \n, INPAR_BRANCH IN NUMBER \n, INPAR_DEPOSIT IN NUMBER \n) RETURN clob AS \nvar clob;\n  LOC_QUERY clob; \n  total_number number:=FNC_PAGE_NUMBER_customer(INPAR_PAGE_SIZE,IN_NAME ,IN_FAMILY , IN_NAT_REG_CODE ,in_type,in_gender,in_tel,in_mobile,in_postal_code ,in_father_name,in_birth_place,in_grade,INPAR_LOAN,INPAR_BRANCH,INPAR_DEPOSIT) ;\n  LOC_LOW NUMBER := (INPAR_PAGE_NUMBER-1)*INPAR_PAGE_SIZE+1; \n  LOC_UP NUMBER := INPAR_PAGE_NUMBER*INPAR_PAGE_SIZE; \nBEGIN\n\n  if (LOC_UP\u003etotal_number) then \n  LOC_UP:=total_number;\n  end if;\n\n  select FNC_CUSTOMER_SEARCHING_ENG (IN_NAME ,IN_FAMILY , IN_NAT_REG_CODE ,in_type,in_gender,in_tel,in_mobile,in_postal_code ,in_father_name,in_birth_place,in_grade,INPAR_LOAN,INPAR_BRANCH,INPAR_DEPOSIT) into var from dual ;\n\n\n  LOC_QUERY := 'SELECT * FROM (\n                              SELECT ROWNUM \"رديف\", t.*\n                              FROM (' || var ||')T)\n                              WHERE  \"رديف\" BETWEEN ' || LOC_LOW || ' AND ' ||LOC_UP;\n RETURN LOC_QUERY;\nEND FNC_PAGING_QUERY_customer;"},{"Name":"FNC_GET_QUERY_FORMULA_PROFILE","ObjectID":280225,"Digest":"005c0f382edef301b5998d9cef1a14f230fe5692f0b3d46bd151c476ba4798a3","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_QUERY_FORMULA_PROFILE\" \n(\n  inpar_type in varchar2 \n) return varchar2 as \nbegin\n  return 'SELECT ID as \"id\",\n \n  NAME as \"name\",\n  description as \"des\"\nFROM TBL_LEDGER_report_map\nwhere   upper(standard_type) =upper('''||INPAR_TYPE||''')';\nend fnc_get_query_formula_profile;"},{"Name":"FNC_FARSIVALIDATE","ObjectID":281134,"Digest":"125f91921d0a149d8a00cdb29df8d879893c23691c7b009dd2964545e02823fe","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_FARSIVALIDATE\" (str nvarchar2)\n  RETURN nvarchar2\nis\n  tempStr nvarchar2(1000);\nbegin\n\n     tempStr := str;\n\n     -- Ya Validation: \"\\064a\" , \"\\06cc\"\n   tempStr := replace(tempStr, UNISTR('\\064a'), UNISTR('\\06cc'));\n    -- tempStr := UNISTR(replace(asciistr(tempStr), '\\064A', '\\06CC'));\n\n     -- Kaf Validation: \"\\06a9\" , \"\\0643\"\n     tempStr := replace(tempStr, UNISTR('\\0643'), UNISTR('\\06a9'));\n\n     return tempStr;\n\nend fnc_FarsiValidate;"},{"Name":"FNC_GET_LEDGER_SENS_REPORT","ObjectID":281957,"Digest":"a5f64364c435d2619c84d216f20f9271c53203b22eee351d2feac8c2d6a595d3","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_LEDGER_SENS_REPORT\" (\n  inpar_ledger_profile in varchar2\n  , inpar_date in varchar2\n  , INPAR_CURRENCY in varchar2\n) return varchar2 as\nbegin\n  \nreturn 'select  det.CODE as \"code\" ,max(det.REF_LEDGER_PROFILE) as \"ledgerProfile\",max(det.NAME) as \"name\",max(le.eff_date) as \"date\",\nmax(det.PARENT_CODE) as \"parentCode\", max(det.DEPTH) as \"depth\",sum(le.BALANCE) as \"balance\"\nfrom TBL_LEDGER_PROFILE_DETAIL det left JOIN TBL_LEDGER_ARCHIVE le\non det.code = le.LEDGER_CODE\nwhere det.REF_LEDGER_PROFILE = '||inpar_ledger_profile||' and trunc(le.eff_date) = to_date('''||INPAR_DATE||''') and le.ref_cur_id in ('||INPAR_CURRENCY||')\ngroup by det.code\norder by det.code';\n\n\n\nend fnc_get_ledger_sens_report;"},{"Name":"FNC_LEDGER_SENS_GET_QUERY_DATE","ObjectID":281960,"Digest":"9447a3f5a29508b1a1e7aa23ea902ec106c894c3cb5b34d1c83bbb63fa0dbfdf","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_LEDGER_SENS_GET_QUERY_DATE\" (VAR VARCHAR2 )\n  RETURN VARCHAR2\nAS\n  VAR_QUERY VARCHAR2(3000);\nBEGIN\n--  VAR_QUERY := VAR;\n--  VAR_QUERY := 'SELECT  WMSYS.Wm_Concat(to_char( \"date\",''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\n--FROM  (SELECT distinct \n--EFF_DATE \"date\"\n--FROM TBL_LEDGER_ARCHIVE)';\n--  RETURN VAR_QUERY;\n  \n  \n  VAR_QUERY := VAR;\n    VAR_QUERY :=\n 'SELECT  /*+   PARALLEL(auto) */ 1 as \"id\" , WMSYS.Wm_Concat(to_char(EFF_DATE,''yyyy/mm/dd'',''nls_calendar=persian'')) as \"date\"\nFROM ( select to_date(SUBSTR(PARTITION_NAME,2),''j'') as eff_date from ALL_TAB_PARTITIONS where  table_name= ''TBL_LEDGER_ARCHIVE'')';\n  \n    RETURN VAR_QUERY;\n  \nEND fnc_ledger_sens_get_query_date;"},{"Name":"FNC_LEDGER_SENS_GET_REPORT","ObjectID":281965,"Digest":"af5ac0796797d3890d35797ea5c8bc08a0e804f2b769137900d0d02c3ec1f25a","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_LEDGER_SENS_GET_REPORT\" (\n    inpar_ledger_profile IN VARCHAR2 ,\n    inpar_date           IN VARCHAR2 ,\n    INPAR_CURRENCY       IN VARCHAR2 )\n  RETURN VARCHAR2\nAS\n VAR_PARTITION VARCHAR2(200) := 'P'||TO_CHAR(INPAR_DATE,'J');\nBEGIN\n  RETURN 'select  det.CODE as \"code\" ,max(det.REF_LEDGER_PROFILE) as \"ledgerProfile\",max(det.NAME) as \"name\",max(le.eff_date) as \"date\",\nmax(det.PARENT_CODE) as \"parentCode\", max(det.DEPTH) as \"depth\",sum(le.BALANCE) as \"balance\"\nfrom TBL_LEDGER_PROFILE_DETAIL det left JOIN TBL_LEDGER_ARCHIVE PARTITION ('||VAR_PARTITION||') le\non det.code = le.LEDGER_CODE\nwhere det.REF_LEDGER_PROFILE = '||inpar_ledger_profile||' and trunc(le.eff_date) = to_date('''||INPAR_DATE||''') and le.ref_cur_id in ('||INPAR_CURRENCY||')\ngroup by det.code\norder by det.code';\nEND fnc_ledger_sens_get_report;"},{"Name":"TEST_HOSSEIN","ObjectID":287803,"Digest":"889dab389a147fa3db3687b5990c31f1eb123bcf69af00ce5804977646f3567d","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"TEST_HOSSEIN\" \n  RETURN VARCHAR2\nAS\n\nBEGIN\n              \n              \n              \n              return 'asdasdas';\n\nEND test_hossein;"},{"Name":"TEST_HOSSEIN2","ObjectID":287804,"Digest":"2eddb4d6e37e393b97dea8d9d4cdceb9a85152d2047e03f3bbe65e322d315dbc","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"TEST_HOSSEIN2\" \n  RETURN VARCHAR2\nAS\n\nBEGIN\n  return 'asdasdas';\n\nEND test_hossein2;"},{"Name":"FNC_GET_REPORT_LEDGER_BRANCH","ObjectID":289197,"Digest":"4a9efef223aba1805c821436af521719a1ccc829d1d3461365bf9d443f3fa4b8","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_REPORT_LEDGER_BRANCH\" (\n INPAR_BRANCH   IN VARCHAR2\n ,INPAR_DATE     IN VARCHAR\n) RETURN VARCHAR2\n AS\n VAR_PARTITION1 VARCHAR2(200) := 'P'||TO_CHAR(to_date(INPAR_DATE,'yyyy-mm-dd'),'J');\n\nBEGIN\n RETURN '\nselect /*+   PARALLEL(auto) */ LEDGER_CODE \"id\",NAME \"text\",DEPTH \"level\",PARENT_CODE \"parent\",sum(BALANCE) \"x0\" from TBL_LEDGER_BRANCH PARTITION ('||VAR_PARTITION1||')\nwhere trunc(EFF_DATE)= to_date(''' ||\n INPAR_DATE ||\n ''',''yyyy-mm-dd'')  and REF_BRANCH in(' ||\n INPAR_BRANCH ||\n ')\ngroup by LEDGER_CODE,NAME,DEPTH,PARENT_CODE order by LEDGER_CODE\n';\nEND FNC_GET_REPORT_LEDGER_BRANCH;"},{"Name":"FNC_TEST_DELAY","ObjectID":294442,"Digest":"4fca907269caf1926cdc222b7646f68f5c6ae917fe0988a2d030375d11ea7641","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_TEST_DELAY\" return number AS \nBEGIN\n\n  dbms_lock.sleep(60);\n  return 0;\n  \nEND fnc_TEST_DELAY;"},{"Name":"SQUIRREL_GET_ERROR_OFFSET","ObjectID":296069,"Digest":"f1172f9dafff5366870f081e44b45beca7b63ac408dc5c01ebefdb6f148dae81","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"SQUIRREL_GET_ERROR_OFFSET\" (\n    query IN VARCHAR2)\n  RETURN NUMBER authid current_user\nIS\n  l_theCursor INTEGER DEFAULT dbms_sql.open_cursor;\n  l_status    INTEGER;\nBEGIN\n  BEGIN\n    dbms_sql.parse( l_theCursor, query, dbms_sql.native );\n  EXCEPTION\n  WHEN OTHERS THEN\n    l_status := dbms_sql.last_error_position;\n  END;\ndbms_sql.close_cursor( l_theCursor );\nRETURN l_status;\nEND;"},{"Name":"FNC_CLEAN_CALL","ObjectID":304051,"Digest":"d61196cb2c1cb2dee81bd9090f859336263f2514fbb7dad0d82155ad6969c124","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_CLEAN_CALL\" \n(\n  I_DIRTY IN VARCHAR2 \n) RETURN VARCHAR2 AS \n  v_prc_name varchar2(100);\n  v_params varchar2(4000);\n  r_clean varchar2(4000);\nBEGIN\n  r_clean := regexp_replace(i_dirty, '\\s' ,' ');\n  v_prc_name := regexp_substr(r_clean, 'PRC_.* \\(');\n  v_prc_name := trim(substr(v_prc_name, 1, length(v_prc_name)-1));\n  v_params := regexp_substr(r_clean, '{.*{');\n  v_params := trim(substr(v_params, 2, length(v_params)-2));\n  v_params := regexp_replace(v_params, 'p(\\d*):', '');\n  v_params := regexp_replace(v_params, '\\s*', '');\n  v_params := '(' || replace(v_params, ',ret:', ',X') || ')';\n  r_clean := v_prc_name || v_params;\n  \n  RETURN r_clean;\n  \nEND fnc_CLEAN_CALL;"},{"Name":"FNC_REPORT_SHOW","ObjectID":304733,"Digest":"8c5ecf210c95f51fee7983d39bc0c36b5de9b6a927750bee21783aed06f2deda","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_REPORT_SHOW\" \n(\n  I_REPREQ IN NUMBER,\n  I_PARAM IN CLOB -- often is null but for special reports gets corespond values\n) RETURN VARCHAR2 AS \n  r_query varchar2(4000);\n  v_category varchar2(200);\n  v_type varchar2(200);\n  v_report varchar2(200);\nBEGIN\n  -- GET REPORT ID OF THIS REPORT REQUEST\n  SELECT REF_REPORT_ID INTO V_REPORT\n  FROM TBL_REPREQ\n  WHERE ID = I_REPREQ;\n  -- GET TYPE \u0026 CAT OF THIS REPORT\n  SELECT CATEGORY, TYPE\n  INTO V_CATEGORY, V_TYPE\n  FROM TBL_REPORT\n  WHERE ID = V_REPORT;\n    \n  \n  -- RETURN CORESPONDING QUERY FOR SHOWING REPORT RESULT\n  R_QUERY := CASE\n              WHEN V_TYPE = '107' THEN DYNAMIC_LQ.FNC_GET_QUERY_REPORT(I_REPREQ) \n              WHEN V_CATEGORY = 'WES' AND V_TYPE = 'deposit' THEN DYNAMIC_LQ.PKG_WES.FNC_GET_DEP_VALUE(I_REPREQ)\n              WHEN V_CATEGORY = 'WES' AND V_TYPE = 'loan'    THEN DYNAMIC_LQ.PKG_WES.FNC_GET_LON_VALUE(I_REPREQ)\n              WHEN V_CATEGORY = 'AES'  THEN DYNAMIC_LQ.PKG_AES.FNC_GET_ALL_STREAMS(I_REPREQ)\n              ELSE 'NO MATCH'\n             END;\n  \n  RETURN R_QUERY;\n  \nEND FNC_REPORT_SHOW;"},{"Name":"FNC_GET_USER","ObjectID":305134,"Digest":"ebe21c2d58e1c55ac048dab553a41d220bb0c24168eae320b0cc096302d844dc","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_USER\" (\n    inpar_profile   IN VARCHAR2,-- PROFILE YA REPORT \n    inpar_type      IN VARCHAR2, -- profileType or reportType\n      inpar_id        IN VARCHAR2-- profileId or reportId\n) RETURN VARCHAR2 AS\n    ussename   VARCHAR2(200);\n    --------------------------------------------------------------------------------\n  /*\n  Programmer Name:   mohammad.javid.ahmadi\n  Editor Name: \n  Release Date/Time:1397/10/09-14:30\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: ba asase voroodi haye balal ref_user profile ya report darkhasti ra be karbar barmigardanim.\n  */\n--------------------------------------------------------------------------------\nBEGIN\n    IF\n        ( upper(inpar_profile) = 'PROFILES' )\n    THEN\n        IF\n            (\n                upper(inpar_type) IN (\n                    'TARIKH','BAZEH'\n                )\n            )\n        THEN\n            SELECT\n                ref_user\n            INTO\n                ussename\n            FROM\n                tbl_timing_profile\n            WHERE\n                id = inpar_id;\n\n        ELSIF (\n            upper(inpar_type) IN (\n                'TBL_LEDGER'\n            )\n        ) THEN\n            SELECT\n                ref_user\n            INTO\n                ussename\n            FROM\n                tbl_ledger_profile\n            WHERE\n                id = inpar_id;\n\n        ELSE\n            SELECT\n                ref_user\n            INTO\n                ussename\n            FROM\n                tbl_profile\n            WHERE\n                id = inpar_id;\n\n        END IF;\n\n        RETURN ussename;\n    ELSE\n        SELECT\n            ref_user\n        INTO\n            ussename\n        FROM\n            tbl_report\n        WHERE\n            id = inpar_id;\n\n        RETURN ussename;\n    END IF;\nEND fnc_get_user;"},{"Name":"FNC_REPORT_INFO","ObjectID":305341,"Digest":"429913c748e6a79c175d932a47a8d8239d58e18213d6a60680d905414a81ae67","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_REPORT_INFO\" (\n    I_REPORT IN NUMBER)\n  RETURN VARCHAR2\nAS\n  R_QUERY VARCHAR2(32000);\n  VAR    VARCHAR2(32000);\nBEGIN\n  R_QUERY := 'SELECT   \n              ID as \"id\",  \n              NAME as \"name\",  \n              TYPE as \"type\", \n              CATEGORY as \"category\",\n              DES as \"description\",\n              REF_DEP_PROFILE as \"depositProfileId\",  \n              REF_LON_PROFILE as \"loanProfileId\",\n              REF_BRN_PROFILE AS \"branchProfileId\",\n              REF_CUS_PROFILE AS \"customerProfileId\",\n              REF_LEDGER_PROFIEL AS \"ledgerProfileId\",\n              REF_TIMING_PROFILE AS \"timingProfileId\",\n              REF_CUR_PROFILE AS \"currencyProfileId\"\n              FROM PRAGG.TBL_REPORT where ID = ' || I_REPORT;\n  RETURN R_QUERY;\n  \nEND FNC_REPORT_INFO;"},{"Name":"TEST_ASHGHAL","ObjectID":308497,"Digest":"9a8eb4f3d160a0d2f0f62d6e9ceae8f959c23ac1d432fd1174d2336274b53079","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"TEST_ASHGHAL\" \n(\n\n nparam in number \n) return varchar2 as \nfirst date;\nvar_fist_bazeh DATE;\nvar_last_bazeh date;\nx number;\ny date;\nregdate date;\n\nbegin\nselect min(due_date) into  first from tbl_value;\nselect due_date into regdate from tbl_value where ref_id = 400024509257 and REF_MODALITY_TYPE = 2;\n\nselect ceil((regdate - first)/nparam) into x from dual;\ny := x*nparam + first;\n\nvar_fist_bazeh:= y-nparam;\nvar_last_bazeh := y;\n\n  return var_fist_bazeh ||'+'|| var_last_bazeh ||'+'|| x ;\nend test_ashghal;"},{"Name":"TEST_WRAP","ObjectID":309174,"Digest":"5aef0a4b14b338795b850e792ae9ef206f4c69b272ed26c074549e52b5c83d84","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"TEST_WRAP\" wrapped \na000000\n1\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\n8\n42 79\nLs0LPo+e6UUIO12Rv86zmuc7m/swg8eZgcfLCNL+XhahYtH0lpbyVmnnwLK9spte58d0wDO4\ndGUJuHSLwMAy/tKGrPI2gDmYV0BTo8e+kr5Ux3+mpm5105E=\n\n"},{"Name":"Q","ObjectID":310632,"Digest":"8f5635b2623be148f5f979b7879d9f84ce90674900d59643695e830256f68d72","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"Q\" (inpar_formula in number) return clob is \nstr clob;\n  begin\n  \n  \nSELECT rtrim(xmlagg(XMLELEMENT(e,REPLACE(formula,',','')).EXTRACT('//text()')\n    ).GetClobVal(),',') into STR\n    FROM TBL_LEDGER_REPORT_MAP\n    WHERE REPORT_MAP_ID = inpar_formula;\n\n  \n  \n  \n    return str;\n  \n  \n  end;"},{"Name":"FNC_AGG_FORMULA_FOR_REPORT_MAP","ObjectID":310634,"Digest":"6c81f775567c64ffbc8c511ca39fe48e61cdc72cff456623f4c4ca2c5f2ec952","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_AGG_FORMULA_FOR_REPORT_MAP\" (inpar_formula in number) return clob is \nstr clob;\n  begin\n  \n  \nSELECT rtrim(xmlagg(XMLELEMENT(e,REPLACE(formula,',','')).EXTRACT('//text()')\n    ).GetClobVal(),',')||'+' into STR \n    FROM (select formula from TBL_LEDGER_REPORT_MAP\n    WHERE REPORT_MAP_ID = inpar_formula\n    order by PRIORITY);\n\n  \n  \n  \n    return str;\n  \n  \n  end;"},{"Name":"FNC_GET_QUERY_REPORT_II","ObjectID":315037,"Digest":"af21f3ec323d8e4f21f3dbd498d5352ac21b08201ec98db09a470739f7d3d12c","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_GET_QUERY_REPORT_II\" ( INPAR_REF_REPREQ IN VARCHAR2 , INPAR_CUR_TYPE IN VARCHAR2) RETURN VARCHAR2 AS \n   /*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name:  morteza.sahi \n  Editor Name: \n  Release Date/Time:1396/05/18-11:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: query derakht daftarkol nahaee ba maghadir ra barmigardanad\n  */\n/*------------------------------------------------------------------------------*/\n\n OUTPAR_REF_REPREQ   VARCHAR2(2000);\n VAR_REF_REPORT_ID   NUMBER;\n VAR_TIMING          VARCHAR2(1000);\n VAR_TIMING1         VARCHAR2(1000);\n VAR_CUR_TYPE        VARCHAR2(100);\n var_ledger_profile number;\n var_create_date varchar2(200);\n \nBEGIN\n SYS.DBMS_OUTPUT.ENABLE(3000000);\n /****** peyda kardane gozaresh entekhab shode ******/\n SELECT\n  REF_REPORT_ID\n INTO\n  VAR_REF_REPORT_ID\n FROM TBL_REPREQ\n WHERE ID = INPAR_REF_REPREQ;\n select ref_ledger_profile into var_ledger_profile from TBL_REPREQ where ID   = INPAR_REF_REPREQ;\n  /****** peyda kardane tarikh ijad ******/\n select to_char(REQ_DATE,'yyyy-mm-dd','nls_calendar=persian')  into var_create_date from TBL_REPREQ where id= INPAR_REF_REPREQ;\n \n\n /****** peyda kardane profile zamani entekhab shode baraye select nahaee ******/\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    ID ||\n    ' AS \"x' ||\n    REPLACE(ID,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  VAR_TIMING\n FROM TBL_REPPER\n WHERE REF_REPORT_ID           = VAR_REF_REPORT_ID\n  AND\n   TBL_REPPER.REF_REQ_ID   = INPAR_REF_REPREQ;\n /****** peyda kardane esme profile zamani entekhab shode baraye select nahaee ******/\n\n SELECT\n  WMSYS.WM_CONCAT( (\n   SELECT\n    '  \"x' ||\n    REPLACE(ID,' ','_') ||\n    '\"'\n   FROM DUAL\n  ) )\n INTO\n  VAR_TIMING1\n FROM TBL_REPPER\n WHERE REF_REPORT_ID           = VAR_REF_REPORT_ID\n  AND\n   TBL_REPPER.REF_REQ_ID   = INPAR_REF_REPREQ;\n /****** ijad kardane select nahaee az TBL_REPVAL ******/\nVAR_CUR_TYPE := INPAR_CUR_TYPE;\n IF (INPAR_CUR_TYPE = '2')  THEN VAR_CUR_TYPE := '0,1'; END IF;\n SELECT\n  '\nselect \"id\",\"parent\",\"text\", \"mande\",\"other\",' ||\n  VAR_TIMING1 ||\n  ',\"level\" , '''||var_create_date ||''' \"createDate\" ,c.type \"type\"  from(\nSELECT \n * FROM\n(\nSELECT *\nFROM   (SELECT \n  tr.REF_REPPER_ID,\n  tr.LEDGER_CODE as \"id\",\n   tr.name as \"text\",\n  tr.VALUE,\n  tr.PARENT_CODE as \"parent\",\n  tr.depth as \"level\"\n FROM  (select  REF_REPPER_ID,LEDGER_CODE,name,PARENT_CODE,depth,VALUE,mande from TBL_REPVAL where  REF_REPREQ_ID ='||INPAR_REF_REPREQ||' AND CUR_TYPE IN ( '||VAR_CUR_TYPE||') )tr)\nPIVOT  (sum(nvl(VALUE,0))  FOR (REF_REPPER_ID) IN (' ||\n  VAR_TIMING ||\n  ' ,0 AS \"mande\" \n  ,-1 AS \"other\"))\nORDER BY \"id\"\n)a)b left join (\n\n\nselect LEDGER_CODE,''nrs'' as type from pragg.TBL_LEDGER  \nCONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\nstart WITH PARENT_CODE in( \n\nSELECT  LEDGER_CODE  FROM pragg.TBL_LEDGER_type   where TYPE = ''nrs'' \n)\nunion\nselect LEDGER_CODE,''rsl''  from pragg.TBL_LEDGER   \nCONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\nstart WITH PARENT_CODE in( \n\nSELECT  LEDGER_CODE  FROM pragg.TBL_LEDGER_type  where TYPE = ''rsl'' \n)\nunion\nselect LEDGER_CODE,''rsa''  from pragg.TBL_LEDGER   \nCONNECT BY PRIOR LEDGER_CODE = PARENT_CODE\nstart WITH PARENT_CODE in( \n\nSELECT  LEDGER_CODE  FROM pragg.TBL_LEDGER_type  where TYPE = ''rsa'' \n)\nunion\nselect tl.LEDGER_CODE,tlt.type  from pragg.TBL_LEDGER tl ,pragg.TBL_LEDGER_TYPE tlt\nwhere \ntlt.LEDGER_CODE = tl.LEDGER_CODE\n\n\n) c\non c.LEDGER_CODE = b.\"id\" \nORDER BY \"id\"'\n INTO\n  OUTPAR_REF_REPREQ\n FROM DUAL;\n\n RETURN OUTPAR_REF_REPREQ;\nEND FNC_GET_QUERY_REPORT_II;"},{"Name":"FNC_CHECK_PERSIAN_LAST_MOTNTH","ObjectID":315402,"Digest":"7cf4fb7d9f0ed86ef109f8571a6a17a61442960ea3626afbb6107b4d58843b68","SQLCode":"\n  CREATE OR REPLACE FUNCTION \"PRAGG\".\"FNC_CHECK_PERSIAN_LAST_MOTNTH\" \n (INPAR_CURRENT_DATE IN VARCHAR2 \n )\nRETURN VARCHAR2 AS \n/*------------------------------------------------------------------------------*/\n  /*\n  Programmer Name: M.Javid.Ahmadi\n  Editor Name: \n  Release Date/Time:1398/04/17-11:00\n  Edit Name: \n  Version: 1\n  Category:2\n  Description: تابع بررسي آخرين روز ماه شمسي\n  */\n/*------------------------------------------------------------------------------*/\nVAR_DAY VARCHAR2(200);\nVAR_NEXT_DAY VARCHAR2(2000);\nVAR_PERSIAN_LAST_OF_MONTH VARCHAR(2000);\n\nBEGIN\nFOR I IN 1..30 \nLOOP\n  select REGEXP_SUBSTR((select to_char(TO_DATE(INPAR_CURRENT_DATE) +I,'yyyy/mm/dd','nls_calendar=persian') from dual),'[^/]+',1, LEVEL) AS \"day\" INTO VAR_NEXT_DAY\n     FROM DUAL WHERE LEVEL = 3\n  CONNECT BY REGEXP_SUBSTR((select to_char(TO_DATE(INPAR_CURRENT_DATE) +I,'yyyy/mm/dd','nls_calendar=persian') from dual), '[^/]+', 1, LEVEL) IS NOT NULL;\n  IF VAR_NEXT_DAY = 1 THEN\n    VAR_PERSIAN_LAST_OF_MONTH := TO_CHAR((TO_DATE(INPAR_CURRENT_DATE) +I )-1);\n    EXIT;\n  END IF;\nEND LOOP;\nIF VAR_PERSIAN_LAST_OF_MONTH = INPAR_CURRENT_DATE THEN \n RETURN 1;\n ELSE\n  RETURN 0;\nEND IF;\nEND FNC_CHECK_PERSIAN_LAST_MOTNTH;"}],"Views":[{"Name":"NVW_LEDGER","ObjectID":273504,"Digest":"852621ce96e1a302f618d12141f5b977c6b26d684155d508dae405967357abdf","SQLCode":"SELECT DISTINCT\n  ( LEDGER_CODE ) AS \"id\"\n ,(\n   SELECT DISTINCT\n    ( MAX(DEPTH) )\n   FROM TBL_LEDGER\n  ) AS \"maxlev\"\n ,NAME ||' '||  LEDGER_CODE AS \"text\"\n ,PARENT_CODE AS \"parent\"\n ,DEPTH AS \"level\",\n to_char( nvl(case when length(LEDGER_CODE ) \u003c 10 then substr(LEDGER_CODE,2) else\nsubstr(LEDGER_CODE, 2,7)||'-'||substr(LEDGER_CODE, 10)\nend,0) ) AS \"id2\"\n FROM TBL_LEDGER\n START WITH\n  PARENT_CODE IS NULL\n CONNECT BY\n  PRIOR LEDGER_CODE = PARENT_CODE\n ORDER BY LEDGER_CODE"},{"Name":"NVW_LEDGER_TREE","ObjectID":280064,"Digest":"3c26ff78d7e6cd57aff87a091ee789987799ddb8c37576afa3ae0f763f69bea9","SQLCode":"SELECT\n  PARENT_CODE \"parent\"\n ,NAME \"text\"\n ,DEPTH \"level\"\n ,LEDGER_CODE \"id\"\n ,BALANCE \"value\"\n FROM TBL_LEDGER_ARCHIVE"},{"Name":"NVW_LOG_BRIEF","ObjectID":295514,"Digest":"2caf196532f9a189067b7c8a372043f25c6db365359ed51141d57b46e1dd5b15","SQLCode":"WITH TMP AS (\nSELECT REF_LOG, \nSUM(CASE  WHEN NAM LIKE '%TIME%'  THEN ROUND(TO_NUMBER(MEGHDAR)/1000,1)  ELSE 0  END) ZAMAN_KOL,\nSUM(CASE   WHEN NAM LIKE '%NEGASHT%'  THEN ROUND(TO_NUMBER(MEGHDAR)/1000,1)  ELSE 0 END) ZAMAN_NEGASHT,\nMAX(CASE WHEN NAM LIKE 'TOTAL_CNT' THEN MEGHDAR ELSE NULL END) TEDAD_KOL\nFROM TBL_LOG_DETAIL\nGROUP BY REF_LOG\nORDER BY REF_LOG)\nSELECT   T.REF_LOG,\n               L.TARIKH_EJRA,\n               L.NAM_BANK,\n               TO_CHAR( T.TEDAD_KOL, '999,999,999,999') TEDAD_KOL,\n               TO_CHAR(to_date(ROUND(T.ZAMAN_KOL,0),'SSSSS'),'HH24:MI:SS') ZAMAN_KOL, \n               TO_CHAR(to_date(ROUND(T.ZAMAN_NEGASHT,0),'SSSSS'),'HH24:MI:SS') ZAMAN_NEGHASHT,\n               TO_CHAR(to_date(ROUND(T.ZAMAN_KOL - T.ZAMAN_NEGASHT,0),'SSSSS'),'HH24:MI:SS') ZAMAN_DIGAR \nFROM TMP T JOIN  TBL_LOG L ON T.REF_LOG = L.ID"},{"Name":"NVW_com_excess_reserve","ObjectID":298753,"Digest":"f0fce351076fe9b86a31a272da0d3c1862c922230100330c39b547650a287613","SQLCode":"SELECT DISTINCT ref_branch,excess_reserve,eff_date from tbl_com_excess_reserve"},{"Name":"NVW_COM_EX_RES_PREDICTION","ObjectID":298755,"Digest":"5d01c6fcd56310675ff734621150498237a265cf06a9cd557a51485baeb94d5d","SQLCode":"SELECT REF_BRANCH,EXCESS_RESERVE,DU_PRIORITY,DURATION_TYPE,REF_DEPOSIT_TYPE\n    FROM TBL_COM_EX_RES_PREDICTION , TBL_DEPOSIT_TYPE"},{"Name":"NVW_COM_TRANS_TOTAL_DAILY","ObjectID":298782,"Digest":"3b27ae49eadd43549780574dfca00dcbaddf52ee0dff9ca8d79abe9c7bfcf94f","SQLCode":"select sum(trans_num),eff_date from tbl_com_transaction group by eff_date"},{"Name":"NVW_COM_preprediction","ObjectID":299173,"Digest":"7fc6d3928f70c1c3c713f1ce79465c42f0a4678ad03ccb904f01b1effdde606a","SQLCode":"SELECT 2 AS \"type_id\",\n    eff_date,\n    amount\n  FROM tbl_com_ledger_type_main\n  WHERE type = 2\n  \n  UNION ALL\n  \n  SELECT 1 AS \"type_id\",\n    eff_date,\n    amount\n  FROM tbl_com_ledger_type_main\n  WHERE type = 1\n  \n  UNION ALL\n  \n  SELECT 5 AS \"type_id\",\n    eff_date ,\n    SUM(trans_num) AS \"amount\"\n  FROM tbl_com_transaction\n  GROUP BY eff_date\n  \nUNION ALL\n\nselect 3 as \"type_id\",\nsysdate,\nsum(balance) as \"amount\"\nfrom akin.tbl_deposit\n\n\nunion all\n\nselect deposit_type as \"type_id\",--4\neff_date,\nsum(excess_reserve) as \"amount\"\nfrom tbl_com_excess_reserve\ngroup by eff_date, DEPOSIT_TYPE"},{"Name":"NVW_COM_ONLINE_preprediction","ObjectID":299503,"Digest":"12007a82bf52e7dbfda507966f064947d801e89f0b8c78928ccc1e785c89657a","SQLCode":"SELECT 6 AS \"type_id\",\n  \n    effdate,\n    trans_num AS \"amount\"\n  FROM tbl_com_trans_preprediction\n  \n  union all\n            -- hajme type i\n  select 7 as \"type_id\",\n  effdate,\n  balance as \"amount\"\n  from TBL_COM_DEPOSIT_PREPREDICTION"},{"Name":"EMP_PUBLIC_DATA","ObjectID":300806,"Digest":"ecdd756df8b19fb5cd49f4cd912de99f8c0a38531295fd691e57b5ab096d2450","SQLCode":"SELECT e.emp_id,\n               e.emp_name,\n               d.dept_name\n        FROM employee e,\n            department d"},{"Name":"NVW_CURRENT_SQL","ObjectID":301512,"Digest":"dbea216a115ac4523311d6c1879cd06c6483899be11cf784548a6ae16ce31bde","SQLCode":"SELECT\n--    x.sid,\n--    x.serial#,\n    x.username,\n    x.sql_id,\n--    x.sql_child_number,\n    optimizer_mode,\n--    hash_value,\n--    address,\n    sql_text\nFROM\n    v$sqlarea sqlarea,\n    v$session x\nWHERE\n    x.sql_hash_value = sqlarea.hash_value\n    AND x.sql_address = sqlarea.address\n    AND x.username IS NOT NULL"}],"Description":""}